Ê¡
uD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Common\c_FByteConverter.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
static 
class 
FByteConverter (
{ 
public"" 
static"" 
byte"" 
["" 
]"" 
getBytes"" %
(""% &
UInt16## 
value## 
,## 
bool$$ 
	isReverse$$ 
)%% 
{&& 	
byte'' 
['' 
]'' 
buf'' 
='' 
null'' 
;'' 
try)) 
{** 
buf++ 
=++ 
BitConverter++ "
.++" #
GetBytes++# +
(+++ ,
value++, 1
)++1 2
;++2 3
if,, 
(,, 
	isReverse,, 
),, 
{-- 
Array.. 
... 
Reverse.. !
(..! "
buf.." %
)..% &
;..& '
}// 
return00 
buf00 
;00 
}11 
catch22 
(22 
	Exception22 
ex22 
)22  
{33 
FDebug44 
.44 
throwException44 %
(44% &
ex44& (
)44( )
;44) *
}55 
finally66 
{77 
buf88 
=88 
null88 
;88 
}99 
return:: 
null:: 
;:: 
};; 	
public?? 
static?? 
byte?? 
[?? 
]?? 
getBytes?? %
(??% &
UInt32@@ 
value@@ 
,@@ 
boolAA 
	isReverseAA 
)BB 
{CC 	
byteDD 
[DD 
]DD 
bufDD 
=DD 
nullDD 
;DD 
tryFF 
{GG 
bufHH 
=HH 
BitConverterHH "
.HH" #
GetBytesHH# +
(HH+ ,
valueHH, 1
)HH1 2
;HH2 3
ifII 
(II 
	isReverseII 
)II 
{JJ 
ArrayKK 
.KK 
ReverseKK !
(KK! "
bufKK" %
)KK% &
;KK& '
}LL 
returnMM 
bufMM 
;MM 
}NN 
catchOO 
(OO 
	ExceptionOO 
exOO 
)OO  
{PP 
FDebugQQ 
.QQ 
throwExceptionQQ %
(QQ% &
exQQ& (
)QQ( )
;QQ) *
}RR 
finallySS 
{TT 
bufUU 
=UU 
nullUU 
;UU 
}VV 
returnWW 
nullWW 
;WW 
}XX 	
public\\ 
static\\ 
byte\\ 
[\\ 
]\\ 
getBytes\\ %
(\\% &
UInt64]] 
value]] 
,]] 
bool^^ 
	isReverse^^ 
)__ 
{`` 	
byteaa 
[aa 
]aa 
bufaa 
=aa 
nullaa 
;aa 
trycc 
{dd 
bufee 
=ee 
BitConverteree "
.ee" #
GetBytesee# +
(ee+ ,
valueee, 1
)ee1 2
;ee2 3
ifff 
(ff 
	isReverseff 
)ff 
{gg 
Arrayhh 
.hh 
Reversehh !
(hh! "
bufhh" %
)hh% &
;hh& '
}ii 
returnjj 
bufjj 
;jj 
}kk 
catchll 
(ll 
	Exceptionll 
exll 
)ll  
{mm 
FDebugnn 
.nn 
throwExceptionnn %
(nn% &
exnn& (
)nn( )
;nn) *
}oo 
finallypp 
{qq 
bufrr 
=rr 
nullrr 
;rr 
}ss 
returntt 
nulltt 
;tt 
}uu 	
publicyy 
staticyy 
byteyy 
[yy 
]yy 
getBytesyy %
(yy% &
charzz 
valuezz 
,zz 
bool{{ 
	isReverse{{ 
)|| 
{}} 	
byte~~ 
[~~ 
]~~ 
buf~~ 
=~~ 
null~~ 
;~~ 
try
ÄÄ 
{
ÅÅ 
buf
ÇÇ 
=
ÇÇ 
BitConverter
ÇÇ "
.
ÇÇ" #
GetBytes
ÇÇ# +
(
ÇÇ+ ,
value
ÇÇ, 1
)
ÇÇ1 2
;
ÇÇ2 3
if
ÉÉ 
(
ÉÉ 
	isReverse
ÉÉ 
)
ÉÉ 
{
ÑÑ 
Array
ÖÖ 
.
ÖÖ 
Reverse
ÖÖ !
(
ÖÖ! "
buf
ÖÖ" %
)
ÖÖ% &
;
ÖÖ& '
}
ÜÜ 
return
áá 
buf
áá 
;
áá 
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ 
ex
ââ 
)
ââ  
{
ää 
FDebug
ãã 
.
ãã 
throwException
ãã %
(
ãã% &
ex
ãã& (
)
ãã( )
;
ãã) *
}
åå 
finally
çç 
{
éé 
buf
èè 
=
èè 
null
èè 
;
èè 
}
êê 
return
ëë 
null
ëë 
;
ëë 
}
íí 	
public
ññ 
static
ññ 
byte
ññ 
[
ññ 
]
ññ 
getBytes
ññ %
(
ññ% &
bool
óó 
value
óó 
,
óó 
bool
òò 
	isReverse
òò 
)
ôô 
{
öö 	
byte
õõ 
[
õõ 
]
õõ 
buf
õõ 
=
õõ 
null
õõ 
;
õõ 
try
ùù 
{
ûû 
buf
üü 
=
üü 
new
üü 
byte
üü 
[
üü 
$num
üü  
]
üü  !
;
üü! "
if
†† 
(
†† 
!
†† 
value
†† 
)
†† 
{
°° 
buf
¢¢ 
[
¢¢ 
$num
¢¢ 
]
¢¢ 
=
¢¢ 
$num
¢¢ !
;
¢¢! "
}
££ 
else
§§ 
{
•• 
buf
¶¶ 
[
¶¶ 
$num
¶¶ 
]
¶¶ 
=
¶¶ 
$num
¶¶ !
;
¶¶! "
}
ßß 
if
©© 
(
©© 
	isReverse
©© 
)
©© 
{
™™ 
Array
´´ 
.
´´ 
Reverse
´´ !
(
´´! "
buf
´´" %
)
´´% &
;
´´& '
}
¨¨ 
return
≠≠ 
buf
≠≠ 
;
≠≠ 
}
ÆÆ 
catch
ØØ 
(
ØØ 
	Exception
ØØ 
ex
ØØ 
)
ØØ  
{
∞∞ 
FDebug
±± 
.
±± 
throwException
±± %
(
±±% &
ex
±±& (
)
±±( )
;
±±) *
}
≤≤ 
finally
≥≥ 
{
¥¥ 
buf
µµ 
=
µµ 
null
µµ 
;
µµ 
}
∂∂ 
return
∑∑ 
null
∑∑ 
;
∑∑ 
}
∏∏ 	
public
ºº 
static
ºº 
byte
ºº 
[
ºº 
]
ºº 
getBytes
ºº %
(
ºº% &
Int64
ΩΩ 
value
ΩΩ 
,
ΩΩ 
bool
ææ 
	isReverse
ææ 
)
øø 
{
¿¿ 	
byte
¡¡ 
[
¡¡ 
]
¡¡ 
buf
¡¡ 
=
¡¡ 
null
¡¡ 
;
¡¡ 
try
√√ 
{
ƒƒ 
buf
≈≈ 
=
≈≈ 
BitConverter
≈≈ "
.
≈≈" #
GetBytes
≈≈# +
(
≈≈+ ,
value
≈≈, 1
)
≈≈1 2
;
≈≈2 3
if
∆∆ 
(
∆∆ 
	isReverse
∆∆ 
)
∆∆ 
{
«« 
Array
»» 
.
»» 
Reverse
»» !
(
»»! "
buf
»»" %
)
»»% &
;
»»& '
}
…… 
return
   
buf
   
;
   
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ 
ex
ÃÃ 
)
ÃÃ  
{
ÕÕ 
FDebug
ŒŒ 
.
ŒŒ 
throwException
ŒŒ %
(
ŒŒ% &
ex
ŒŒ& (
)
ŒŒ( )
;
ŒŒ) *
}
œœ 
finally
–– 
{
—— 
buf
““ 
=
““ 
null
““ 
;
““ 
}
”” 
return
‘‘ 
null
‘‘ 
;
‘‘ 
}
’’ 	
public
ŸŸ 
static
ŸŸ 
byte
ŸŸ 
[
ŸŸ 
]
ŸŸ 
getBytes
ŸŸ %
(
ŸŸ% &
Int32
⁄⁄ 
value
⁄⁄ 
,
⁄⁄ 
bool
€€ 
	isReverse
€€ 
)
‹‹ 
{
›› 	
byte
ﬁﬁ 
[
ﬁﬁ 
]
ﬁﬁ 
buf
ﬁﬁ 
=
ﬁﬁ 
null
ﬁﬁ 
;
ﬁﬁ 
try
‡‡ 
{
·· 
buf
‚‚ 
=
‚‚ 
BitConverter
‚‚ "
.
‚‚" #
GetBytes
‚‚# +
(
‚‚+ ,
value
‚‚, 1
)
‚‚1 2
;
‚‚2 3
if
„„ 
(
„„ 
	isReverse
„„ 
)
„„ 
{
‰‰ 
Array
ÂÂ 
.
ÂÂ 
Reverse
ÂÂ !
(
ÂÂ! "
buf
ÂÂ" %
)
ÂÂ% &
;
ÂÂ& '
}
ÊÊ 
return
ÁÁ 
buf
ÁÁ 
;
ÁÁ 
}
ËË 
catch
ÈÈ 
(
ÈÈ 
	Exception
ÈÈ 
ex
ÈÈ 
)
ÈÈ  
{
ÍÍ 
FDebug
ÎÎ 
.
ÎÎ 
throwException
ÎÎ %
(
ÎÎ% &
ex
ÎÎ& (
)
ÎÎ( )
;
ÎÎ) *
}
ÏÏ 
finally
ÌÌ 
{
ÓÓ 
buf
ÔÔ 
=
ÔÔ 
null
ÔÔ 
;
ÔÔ 
}
 
return
ÒÒ 
null
ÒÒ 
;
ÒÒ 
}
ÚÚ 	
public
ˆˆ 
static
ˆˆ 
byte
ˆˆ 
[
ˆˆ 
]
ˆˆ 
getBytes
ˆˆ %
(
ˆˆ% &
Int16
˜˜ 
value
˜˜ 
,
˜˜ 
bool
¯¯ 
	isReverse
¯¯ 
)
˘˘ 
{
˙˙ 	
byte
˚˚ 
[
˚˚ 
]
˚˚ 
buf
˚˚ 
=
˚˚ 
null
˚˚ 
;
˚˚ 
try
˝˝ 
{
˛˛ 
buf
ˇˇ 
=
ˇˇ 
BitConverter
ˇˇ "
.
ˇˇ" #
GetBytes
ˇˇ# +
(
ˇˇ+ ,
value
ˇˇ, 1
)
ˇˇ1 2
;
ˇˇ2 3
if
ÄÄ 
(
ÄÄ 
	isReverse
ÄÄ 
)
ÄÄ 
{
ÅÅ 
Array
ÇÇ 
.
ÇÇ 
Reverse
ÇÇ !
(
ÇÇ! "
buf
ÇÇ" %
)
ÇÇ% &
;
ÇÇ& '
}
ÉÉ 
return
ÑÑ 
buf
ÑÑ 
;
ÑÑ 
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
ex
ÜÜ 
)
ÜÜ  
{
áá 
FDebug
àà 
.
àà 
throwException
àà %
(
àà% &
ex
àà& (
)
àà( )
;
àà) *
}
ââ 
finally
ää 
{
ãã 
buf
åå 
=
åå 
null
åå 
;
åå 
}
çç 
return
éé 
null
éé 
;
éé 
}
èè 	
public
ìì 
static
ìì 
byte
ìì 
[
ìì 
]
ìì 
getBytes
ìì %
(
ìì% &
double
îî 
value
îî 
,
îî 
bool
ïï 
	isReverse
ïï 
)
ññ 
{
óó 	
byte
òò 
[
òò 
]
òò 
buf
òò 
=
òò 
null
òò 
;
òò 
try
öö 
{
õõ 
buf
úú 
=
úú 
BitConverter
úú "
.
úú" #
GetBytes
úú# +
(
úú+ ,
value
úú, 1
)
úú1 2
;
úú2 3
if
ùù 
(
ùù 
	isReverse
ùù 
)
ùù 
{
ûû 
Array
üü 
.
üü 
Reverse
üü !
(
üü! "
buf
üü" %
)
üü% &
;
üü& '
}
†† 
return
°° 
buf
°° 
;
°° 
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
ex
££ 
)
££  
{
§§ 
FDebug
•• 
.
•• 
throwException
•• %
(
••% &
ex
••& (
)
••( )
;
••) *
}
¶¶ 
finally
ßß 
{
®® 
buf
©© 
=
©© 
null
©© 
;
©© 
}
™™ 
return
´´ 
null
´´ 
;
´´ 
}
¨¨ 	
public
∞∞ 
static
∞∞ 
byte
∞∞ 
[
∞∞ 
]
∞∞ 
getBytes
∞∞ %
(
∞∞% &
Single
±± 
value
±± 
,
±± 
bool
≤≤ 
	isReverse
≤≤ 
)
≥≥ 
{
¥¥ 	
byte
µµ 
[
µµ 
]
µµ 
buf
µµ 
=
µµ 
null
µµ 
;
µµ 
try
∑∑ 
{
∏∏ 
buf
ππ 
=
ππ 
BitConverter
ππ "
.
ππ" #
GetBytes
ππ# +
(
ππ+ ,
value
ππ, 1
)
ππ1 2
;
ππ2 3
if
∫∫ 
(
∫∫ 
	isReverse
∫∫ 
)
∫∫ 
{
ªª 
Array
ºº 
.
ºº 
Reverse
ºº !
(
ºº! "
buf
ºº" %
)
ºº% &
;
ºº& '
}
ΩΩ 
return
ææ 
buf
ææ 
;
ææ 
}
øø 
catch
¿¿ 
(
¿¿ 
	Exception
¿¿ 
ex
¿¿ 
)
¿¿  
{
¡¡ 
FDebug
¬¬ 
.
¬¬ 
throwException
¬¬ %
(
¬¬% &
ex
¬¬& (
)
¬¬( )
;
¬¬) *
}
√√ 
finally
ƒƒ 
{
≈≈ 
buf
∆∆ 
=
∆∆ 
null
∆∆ 
;
∆∆ 
}
«« 
return
»» 
null
»» 
;
»» 
}
…… 	
public
ÕÕ 
static
ÕÕ 
UInt16
ÕÕ 
toUInt16
ÕÕ %
(
ÕÕ% &
byte
ŒŒ 
[
ŒŒ 
]
ŒŒ 
bytes
ŒŒ 
,
ŒŒ 
bool
œœ 
	isReverse
œœ 
)
–– 
{
—— 	
try
““ 
{
”” 
if
‘‘ 
(
‘‘ 
	isReverse
‘‘ 
)
‘‘ 
{
’’ 
Array
÷÷ 
.
÷÷ 
Reverse
÷÷ !
(
÷÷! "
bytes
÷÷" '
)
÷÷' (
;
÷÷( )
}
◊◊ 
return
ÿÿ 
BitConverter
ÿÿ #
.
ÿÿ# $
ToUInt16
ÿÿ$ ,
(
ÿÿ, -
bytes
ÿÿ- 2
,
ÿÿ2 3
$num
ÿÿ4 5
)
ÿÿ5 6
;
ÿÿ6 7
}
ŸŸ 
catch
⁄⁄ 
(
⁄⁄ 
	Exception
⁄⁄ 
ex
⁄⁄ 
)
⁄⁄  
{
€€ 
FDebug
‹‹ 
.
‹‹ 
throwException
‹‹ %
(
‹‹% &
ex
‹‹& (
)
‹‹( )
;
‹‹) *
}
›› 
finally
ﬁﬁ 
{
ﬂﬂ 
}
·· 
return
‚‚ 
$num
‚‚ 
;
‚‚ 
}
„„ 	
public
ÁÁ 
static
ÁÁ 
UInt32
ÁÁ 
toUInt32
ÁÁ %
(
ÁÁ% &
byte
ËË 
[
ËË 
]
ËË 
bytes
ËË 
,
ËË 
bool
ÈÈ 
	isReverse
ÈÈ 
)
ÍÍ 
{
ÎÎ 	
try
ÏÏ 
{
ÌÌ 
if
ÓÓ 
(
ÓÓ 
	isReverse
ÓÓ 
)
ÓÓ 
{
ÔÔ 
Array
 
.
 
Reverse
 !
(
! "
bytes
" '
)
' (
;
( )
}
ÒÒ 
return
ÚÚ 
BitConverter
ÚÚ #
.
ÚÚ# $
ToUInt32
ÚÚ$ ,
(
ÚÚ, -
bytes
ÚÚ- 2
,
ÚÚ2 3
$num
ÚÚ4 5
)
ÚÚ5 6
;
ÚÚ6 7
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı 
FDebug
ˆˆ 
.
ˆˆ 
throwException
ˆˆ %
(
ˆˆ% &
ex
ˆˆ& (
)
ˆˆ( )
;
ˆˆ) *
}
˜˜ 
finally
¯¯ 
{
˘˘ 
}
˚˚ 
return
¸¸ 
$num
¸¸ 
;
¸¸ 
}
˝˝ 	
public
ÅÅ 
static
ÅÅ 
UInt64
ÅÅ 
toUInt64
ÅÅ %
(
ÅÅ% &
byte
ÇÇ 
[
ÇÇ 
]
ÇÇ 
bytes
ÇÇ 
,
ÇÇ 
bool
ÉÉ 
	isReverse
ÉÉ 
)
ÑÑ 
{
ÖÖ 	
try
ÜÜ 
{
áá 
if
àà 
(
àà 
	isReverse
àà 
)
àà 
{
ââ 
Array
ää 
.
ää 
Reverse
ää !
(
ää! "
bytes
ää" '
)
ää' (
;
ää( )
}
ãã 
return
åå 
BitConverter
åå #
.
åå# $
ToUInt64
åå$ ,
(
åå, -
bytes
åå- 2
,
åå2 3
$num
åå4 5
)
åå5 6
;
åå6 7
}
çç 
catch
éé 
(
éé 
	Exception
éé 
ex
éé 
)
éé  
{
èè 
FDebug
êê 
.
êê 
throwException
êê %
(
êê% &
ex
êê& (
)
êê( )
;
êê) *
}
ëë 
finally
íí 
{
ìì 
}
ïï 
return
ññ 
$num
ññ 
;
ññ 
}
óó 	
public
õõ 
static
õõ 
Int16
õõ 
toInt16
õõ #
(
õõ# $
byte
úú 
[
úú 
]
úú 
bytes
úú 
,
úú 
bool
ùù 
	isReverse
ùù 
)
ûû 
{
üü 	
try
†† 
{
°° 
if
¢¢ 
(
¢¢ 
	isReverse
¢¢ 
)
¢¢ 
{
££ 
Array
§§ 
.
§§ 
Reverse
§§ !
(
§§! "
bytes
§§" '
)
§§' (
;
§§( )
}
•• 
return
¶¶ 
BitConverter
¶¶ #
.
¶¶# $
ToInt16
¶¶$ +
(
¶¶+ ,
bytes
¶¶, 1
,
¶¶1 2
$num
¶¶3 4
)
¶¶4 5
;
¶¶5 6
}
ßß 
catch
®® 
(
®® 
	Exception
®® 
ex
®® 
)
®®  
{
©© 
FDebug
™™ 
.
™™ 
throwException
™™ %
(
™™% &
ex
™™& (
)
™™( )
;
™™) *
}
´´ 
finally
¨¨ 
{
≠≠ 
}
ØØ 
return
∞∞ 
$num
∞∞ 
;
∞∞ 
}
±± 	
public
µµ 
static
µµ 
Int32
µµ 
toInt32
µµ #
(
µµ# $
byte
∂∂ 
[
∂∂ 
]
∂∂ 
bytes
∂∂ 
,
∂∂ 
bool
∑∑ 
	isReverse
∑∑ 
)
∏∏ 
{
ππ 	
try
∫∫ 
{
ªª 
if
ºº 
(
ºº 
	isReverse
ºº 
)
ºº 
{
ΩΩ 
Array
ææ 
.
ææ 
Reverse
ææ !
(
ææ! "
bytes
ææ" '
)
ææ' (
;
ææ( )
}
øø 
return
¿¿ 
BitConverter
¿¿ #
.
¿¿# $
ToInt32
¿¿$ +
(
¿¿+ ,
bytes
¿¿, 1
,
¿¿1 2
$num
¿¿3 4
)
¿¿4 5
;
¿¿5 6
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
ex
¬¬ 
)
¬¬  
{
√√ 
FDebug
ƒƒ 
.
ƒƒ 
throwException
ƒƒ %
(
ƒƒ% &
ex
ƒƒ& (
)
ƒƒ( )
;
ƒƒ) *
}
≈≈ 
finally
∆∆ 
{
«« 
}
…… 
return
   
$num
   
;
   
}
ÀÀ 	
public
œœ 
static
œœ 
Int64
œœ 
toInt64
œœ #
(
œœ# $
byte
–– 
[
–– 
]
–– 
bytes
–– 
,
–– 
bool
—— 
	isReverse
—— 
)
““ 
{
”” 	
try
‘‘ 
{
’’ 
if
÷÷ 
(
÷÷ 
	isReverse
÷÷ 
)
÷÷ 
{
◊◊ 
Array
ÿÿ 
.
ÿÿ 
Reverse
ÿÿ !
(
ÿÿ! "
bytes
ÿÿ" '
)
ÿÿ' (
;
ÿÿ( )
}
ŸŸ 
return
⁄⁄ 
BitConverter
⁄⁄ #
.
⁄⁄# $
ToInt64
⁄⁄$ +
(
⁄⁄+ ,
bytes
⁄⁄, 1
,
⁄⁄1 2
$num
⁄⁄3 4
)
⁄⁄4 5
;
⁄⁄5 6
}
€€ 
catch
‹‹ 
(
‹‹ 
	Exception
‹‹ 
ex
‹‹ 
)
‹‹  
{
›› 
FDebug
ﬁﬁ 
.
ﬁﬁ 
throwException
ﬁﬁ %
(
ﬁﬁ% &
ex
ﬁﬁ& (
)
ﬁﬁ( )
;
ﬁﬁ) *
}
ﬂﬂ 
finally
‡‡ 
{
·· 
}
„„ 
return
‰‰ 
$num
‰‰ 
;
‰‰ 
}
ÂÂ 	
public
ÈÈ 
static
ÈÈ 
Single
ÈÈ 
toFloat4
ÈÈ %
(
ÈÈ% &
byte
ÍÍ 
[
ÍÍ 
]
ÍÍ 
bytes
ÍÍ 
,
ÍÍ 
bool
ÎÎ 
	isReverse
ÎÎ 
)
ÏÏ 
{
ÌÌ 	
try
ÓÓ 
{
ÔÔ 
if
 
(
 
	isReverse
 
)
 
{
ÒÒ 
Array
ÚÚ 
.
ÚÚ 
Reverse
ÚÚ !
(
ÚÚ! "
bytes
ÚÚ" '
)
ÚÚ' (
;
ÚÚ( )
}
ÛÛ 
return
ÙÙ 
BitConverter
ÙÙ #
.
ÙÙ# $
ToSingle
ÙÙ$ ,
(
ÙÙ, -
bytes
ÙÙ- 2
,
ÙÙ2 3
$num
ÙÙ4 5
)
ÙÙ5 6
;
ÙÙ6 7
}
ıı 
catch
ˆˆ 
(
ˆˆ 
	Exception
ˆˆ 
ex
ˆˆ 
)
ˆˆ  
{
˜˜ 
FDebug
¯¯ 
.
¯¯ 
throwException
¯¯ %
(
¯¯% &
ex
¯¯& (
)
¯¯( )
;
¯¯) *
}
˘˘ 
finally
˙˙ 
{
˚˚ 
}
˝˝ 
return
˛˛ 
$num
˛˛ 
;
˛˛ 
}
ˇˇ 	
public
ÉÉ 
static
ÉÉ 
Double
ÉÉ 
toFloat8
ÉÉ %
(
ÉÉ% &
byte
ÑÑ 
[
ÑÑ 
]
ÑÑ 
bytes
ÑÑ 
,
ÑÑ 
bool
ÖÖ 
	isReverse
ÖÖ 
)
ÜÜ 
{
áá 	
try
àà 
{
ââ 
if
ää 
(
ää 
	isReverse
ää 
)
ää 
{
ãã 
Array
åå 
.
åå 
Reverse
åå !
(
åå! "
bytes
åå" '
)
åå' (
;
åå( )
}
çç 
return
éé 
BitConverter
éé #
.
éé# $
ToDouble
éé$ ,
(
éé, -
bytes
éé- 2
,
éé2 3
$num
éé4 5
)
éé5 6
;
éé6 7
}
èè 
catch
êê 
(
êê 
	Exception
êê 
ex
êê 
)
êê  
{
ëë 
FDebug
íí 
.
íí 
throwException
íí %
(
íí% &
ex
íí& (
)
íí( )
;
íí) *
}
ìì 
finally
îî 
{
ïï 
}
óó 
return
òò 
$num
òò 
;
òò 
}
ôô 	
public
ûû 
static
ûû 
string
ûû 
	toBoolean
ûû &
(
ûû& '
byte
üü 
bytes
üü 
)
†† 
{
°° 	
try
¢¢ 
{
££ 
if
§§ 
(
§§ 
bytes
§§ 
==
§§ 
$num
§§ !
)
§§! "
{
•• 
return
¶¶ 
$str
¶¶ 
;
¶¶ 
}
ßß 
else
®® 
{
©© 
return
™™ 
$str
™™ 
;
™™ 
}
´´ 
}
¨¨ 
catch
≠≠ 
(
≠≠ 
	Exception
≠≠ 
ex
≠≠ 
)
≠≠  
{
ÆÆ 
FDebug
ØØ 
.
ØØ 
throwException
ØØ %
(
ØØ% &
ex
ØØ& (
)
ØØ( )
;
ØØ) *
}
∞∞ 
finally
±± 
{
≤≤ 
}
¥¥ 
return
µµ 
$str
µµ 
;
µµ 
}
∂∂ 	
}
ºº 
}ΩΩ πa
qD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Common\c_FConstants.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
static 
class 

FConstants $
{ 
public!! 
const!! 
string!! 

err_m_0001!! &
=!!' (
$str!!) [
;!![ \
public(( 
const(( 
string(( 

err_m_0002(( &
=((' (
$str(() E
;((E F
public// 
const// 
string// 

err_m_0003// &
=//' (
$str//) B
;//B C
public66 
const66 
string66 

err_m_000466 &
=66' (
$str66) M
;66M N
public== 
const== 
string== 

err_m_0005== &
===' (
$str==) G
;==G H
publicDD 
constDD 
stringDD 

err_m_0006DD &
=DD' (
$strDD) F
;DDF G
publicKK 
constKK 
stringKK 

err_m_0007KK &
=KK' (
$strKK) I
;KKI J
publicRR 
constRR 
stringRR 

err_m_0008RR &
=RR' (
$strRR) I
;RRI J
publicYY 
constYY 
stringYY 

err_m_0009YY &
=YY' (
$strYY) G
;YYG H
public`` 
const`` 
string`` 

err_m_0010`` &
=``' (
$str``) >
;``> ?
publicgg 
constgg 
stringgg 

err_m_0011gg &
=gg' (
$strgg) B
;ggB C
publicnn 
constnn 
stringnn 

err_m_0012nn &
=nn' (
$strnn) >
;nn> ?
publicuu 
constuu 
stringuu 

err_m_0013uu &
=uu' (
$struu) :
;uu: ;
public|| 
const|| 
string|| 

err_m_0014|| &
=||' (
$str||) C
;||C D
public
ÉÉ 
const
ÉÉ 
string
ÉÉ 

err_m_0015
ÉÉ &
=
ÉÉ' (
$str
ÉÉ) >
;
ÉÉ> ?
public
ää 
const
ää 
string
ää 

err_m_0016
ää &
=
ää' (
$str
ää) B
;
ääB C
public
ëë 
const
ëë 
string
ëë 

err_m_0017
ëë &
=
ëë' (
$str
ëë) N
;
ëëN O
public
òò 
const
òò 
string
òò 

err_m_0018
òò &
=
òò' (
$str
òò) O
;
òòO P
public
üü 
const
üü 
string
üü 

err_m_0019
üü &
=
üü' (
$str
üü) B
;
üüB C
public
¶¶ 
const
¶¶ 
string
¶¶ 

err_m_0020
¶¶ &
=
¶¶' (
$str
¶¶) I
;
¶¶I J
public
≠≠ 
const
≠≠ 
string
≠≠ 

err_m_0021
≠≠ &
=
≠≠' (
$str
≠≠) F
;
≠≠F G
public
¥¥ 
const
¥¥ 
string
¥¥ 

err_m_0022
¥¥ &
=
¥¥' (
$str
¥¥) H
;
¥¥H I
public
ªª 
const
ªª 
string
ªª 

err_m_0023
ªª &
=
ªª' (
$str
ªª) A
;
ªªA B
public
¬¬ 
const
¬¬ 
string
¬¬ 

err_m_0024
¬¬ &
=
¬¬' (
$str
¬¬) >
;
¬¬> ?
public
…… 
const
…… 
string
…… 

err_m_0025
…… &
=
……' (
$str
……) C
;
……C D
public
–– 
const
–– 
string
–– 

err_m_0026
–– &
=
––' (
$str
––) I
;
––I J
public
◊◊ 
const
◊◊ 
string
◊◊ 

err_m_0027
◊◊ &
=
◊◊' (
$str
◊◊) E
;
◊◊E F
public
ﬁﬁ 
const
ﬁﬁ 
string
ﬁﬁ 

err_m_0028
ﬁﬁ &
=
ﬁﬁ' (
$str
ﬁﬁ) B
;
ﬁﬁB C
public
ÂÂ 
const
ÂÂ 
string
ÂÂ 

err_m_0029
ÂÂ &
=
ÂÂ' (
$str
ÂÂ) ?
;
ÂÂ? @
public
ÏÏ 
const
ÏÏ 
string
ÏÏ 

err_m_0030
ÏÏ &
=
ÏÏ' (
$str
ÏÏ) M
;
ÏÏM N
public
ÛÛ 
const
ÛÛ 
string
ÛÛ 

err_m_0031
ÛÛ &
=
ÛÛ' (
$strÛÛ) ≠
;ÛÛ≠ Æ
public
˙˙ 
const
˙˙ 
string
˙˙ 

err_m_0032
˙˙ &
=
˙˙' (
$str
˙˙) M
;
˙˙M N
public
ÅÅ 
const
ÅÅ 
string
ÅÅ 

err_m_0033
ÅÅ &
=
ÅÅ' (
$str
ÅÅ) <
;
ÅÅ< =
public
àà 
const
àà 
string
àà 

err_m_0034
àà &
=
àà' (
$str
àà) ?
;
àà? @
public
èè 
const
èè 
string
èè 

err_m_0035
èè &
=
èè' (
$str
èè) B
;
èèB C
public
ññ 
const
ññ 
string
ññ 

err_m_0036
ññ &
=
ññ' (
$str
ññ) {
;
ññ{ |
public
ùù 
const
ùù 
string
ùù 

err_m_0037
ùù &
=
ùù' (
$str
ùù) S
;
ùùS T
public
§§ 
const
§§ 
string
§§ 

err_m_0060
§§ &
=
§§' (
$str
§§) M
;
§§M N
public
´´ 
const
´´ 
string
´´ 

err_m_0061
´´ &
=
´´' (
$str
´´) >
;
´´> ?
public
≤≤ 
const
≤≤ 
string
≤≤ 

err_m_0062
≤≤ &
=
≤≤' (
$str
≤≤) C
;
≤≤C D
public
ªª 
const
ªª 
string
ªª 
err_m_12001
ªª '
=
ªª( )
$strªª* Ø
;ªªØ ∞
public
¬¬ 
const
¬¬ 
string
¬¬ 
err_m_12002
¬¬ '
=
¬¬( )
$str
¬¬* |
;
¬¬| }
public
…… 
const
…… 
string
…… 
err_m_12003
…… '
=
……( )
$str……* ‘
;……‘ ’
public
–– 
const
–– 
string
–– 
err_m_12004
–– '
=
––( )
$str
––* q
;
––q r
public
◊◊ 
const
◊◊ 
string
◊◊ 
err_m_12128
◊◊ '
=
◊◊( )
$str
◊◊* j
;
◊◊j k
public
ﬁﬁ 
const
ﬁﬁ 
string
ﬁﬁ 
err_m_14001
ﬁﬁ '
=
ﬁﬁ( )
$strﬁﬁ* æ
;ﬁﬁæ ø
public
ÂÂ 
const
ÂÂ 
string
ÂÂ 
err_m_14002
ÂÂ '
=
ÂÂ( )
$strÂÂ* ¢
;ÂÂ¢ £
public
ÏÏ 
const
ÏÏ 
string
ÏÏ 
err_m_14003
ÏÏ '
=
ÏÏ( )
$str
ÏÏ* s
;
ÏÏs t
public
ÛÛ 
const
ÛÛ 
string
ÛÛ 
err_m_14128
ÛÛ '
=
ÛÛ( )
$str
ÛÛ* l
;
ÛÛl m
public
˙˙ 
const
˙˙ 
string
˙˙ 
err_m_16001
˙˙ '
=
˙˙( )
$str
˙˙* X
;
˙˙X Y
public
ÅÅ 
const
ÅÅ 
string
ÅÅ 
err_m_16002
ÅÅ '
=
ÅÅ( )
$str
ÅÅ* Z
;
ÅÅZ [
public
àà 
const
àà 
string
àà 
err_m_16003
àà '
=
àà( )
$str
àà* W
;
ààW X
public
èè 
const
èè 
string
èè 
err_m_16004
èè '
=
èè( )
$str
èè* Z
;
èèZ [
public
ññ 
const
ññ 
string
ññ 
err_m_16005
ññ '
=
ññ( )
$str
ññ* _
;
ññ_ `
public
ùù 
const
ùù 
string
ùù 
err_m_16006
ùù '
=
ùù( )
$str
ùù* O
;
ùùO P
public
§§ 
const
§§ 
string
§§ 
err_m_16007
§§ '
=
§§( )
$str
§§* H
;
§§H I
public
´´ 
const
´´ 
string
´´ 
err_m_16008
´´ '
=
´´( )
$str
´´* g
;
´´g h
public
≤≤ 
const
≤≤ 
string
≤≤ 
err_m_16009
≤≤ '
=
≤≤( )
$str
≤≤* O
;
≤≤O P
public
ππ 
const
ππ 
string
ππ 
err_m_16010
ππ '
=
ππ( )
$str
ππ* s
;
ππs t
public
¿¿ 
const
¿¿ 
string
¿¿ 
err_m_16011
¿¿ '
=
¿¿( )
$str
¿¿* Y
;
¿¿Y Z
public
«« 
const
«« 
string
«« 
err_m_16012
«« '
=
««( )
$str
««* N
;
««N O
public
ŒŒ 
const
ŒŒ 
string
ŒŒ 
err_m_16900
ŒŒ '
=
ŒŒ( )
$str
ŒŒ* Q
;
ŒŒQ R
public
’’ 
const
’’ 
string
’’ 
err_m_17001
’’ '
=
’’( )
$str’’* Ã
;’’Ã Õ
public
‹‹ 
const
‹‹ 
string
‹‹ 
err_m_17002
‹‹ '
=
‹‹( )
$str
‹‹* Y
;
‹‹Y Z
public
„„ 
const
„„ 
string
„„ 
err_m_17003
„„ '
=
„„( )
$str„„* ±
;„„± ≤
public
ÍÍ 
const
ÍÍ 
string
ÍÍ 
err_m_17004
ÍÍ '
=
ÍÍ( )
$str
ÍÍ* |
;
ÍÍ| }
public
ÒÒ 
const
ÒÒ 
string
ÒÒ 
err_m_17005
ÒÒ '
=
ÒÒ( )
$str
ÒÒ* i
;
ÒÒi j
public
¯¯ 
const
¯¯ 
string
¯¯ 
err_m_17128
¯¯ '
=
¯¯( )
$str
¯¯* b
;
¯¯b c
public
ˇˇ 
const
ˇˇ 
string
ˇˇ 
err_m_20001
ˇˇ '
=
ˇˇ( )
$str
ˇˇ* P
;
ˇˇP Q
public
ÜÜ 
const
ÜÜ 
string
ÜÜ 
err_m_20002
ÜÜ '
=
ÜÜ( )
$str
ÜÜ* I
;
ÜÜI J
public
çç 
const
çç 
string
çç 
err_m_20003
çç '
=
çç( )
$str
çç* F
;
ççF G
public
îî 
const
îî 
string
îî 
err_m_20004
îî '
=
îî( )
$str
îî* h
;
îîh i
public
õõ 
const
õõ 
string
õõ 
err_m_20005
õõ '
=
õõ( )
$str
õõ* S
;
õõS T
public
¢¢ 
const
¢¢ 
string
¢¢ 
err_m_20006
¢¢ '
=
¢¢( )
$str
¢¢* T
;
¢¢T U
public
©© 
const
©© 
string
©© 
err_m_20007
©© '
=
©©( )
$str
©©* M
;
©©M N
public
∞∞ 
const
∞∞ 
string
∞∞ 
err_m_20008
∞∞ '
=
∞∞( )
$str
∞∞* O
;
∞∞O P
public
∑∑ 
const
∑∑ 
string
∑∑ 
err_m_21001
∑∑ '
=
∑∑( )
$str
∑∑* p
;
∑∑p q
public
ææ 
const
ææ 
string
ææ 
err_m_21002
ææ '
=
ææ( )
$str
ææ* _
;
ææ_ `
public
≈≈ 
const
≈≈ 
string
≈≈ 
err_m_21003
≈≈ '
=
≈≈( )
$str≈≈* ô
;≈≈ô ö
public
ÃÃ 
const
ÃÃ 
string
ÃÃ 
err_m_21004
ÃÃ '
=
ÃÃ( )
$str
ÃÃ* r
;
ÃÃr s
public
”” 
const
”” 
string
”” 
err_m_21005
”” '
=
””( )
$str””* ∫
;””∫ ª
public
⁄⁄ 
const
⁄⁄ 
string
⁄⁄ 
err_m_21006
⁄⁄ '
=
⁄⁄( )
$str⁄⁄* π
;⁄⁄π ∫
public
·· 
const
·· 
string
·· 
err_m_21007
·· '
=
··( )
$str··* ∂
;··∂ ∑
public
ËË 
const
ËË 
string
ËË 
err_m_21008
ËË '
=
ËË( )
$strËË* ≠
;ËË≠ Æ
}
ÓÓ 
}ÔÔ ùî
uD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Common\c_FSecsConverter.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
static 
class 
FSecsConverter (
{ 
public 
static 
string 
convertBinToSml ,
(, -
byte 
[ 
] 
binData 
) 
{ 	
StringBuilder 
smlData !
=" #
null$ (
;( )
UInt32 
pos 
= 
$num 
; 
try!! 
{"" 
smlData## 
=## 
new## 
StringBuilder## +
(##+ ,
)##, -
;##- .
smlData$$ 
.$$ 

AppendLine$$ "
($$" #
$str$$# '
)$$' (
;$$( )
convertBinToSml%% 
(%%  
binData%%  '
,%%' (
ref%%) ,
pos%%- 0
,%%0 1
smlData%%2 9
,%%9 :
$num%%; <
)%%< =
;%%= >
smlData&& 
.&& 
Append&& 
(&& 
$str&& "
)&&" #
;&&# $
return'' 
smlData'' 
.'' 
ToString'' '
(''' (
)''( )
;'') *
}(( 
catch)) 
()) 
	Exception)) 
ex)) 
)))  
{** 
FDebug++ 
.++ 
throwException++ %
(++% &
ex++& (
)++( )
;++) *
},, 
finally-- 
{.. 
}00 
return11 
string11 
.11 
Empty11 
;11  
}22 	
public66 
static66 
void66 
convertBinToSml66 *
(66* +
byte77 
[77 
]77 
binData77 
,77 
ref88 
UInt3288 
pos88 
,88 
StringBuilder99 
smlData99 !
,99! "
int:: 
depth:: 
);; 
{<< 	
FFormat== 
fFormat== 
;== 
int>> 
lenBytes>> 
=>> 
$num>> 
;>> 
UInt32?? 
len?? 
=?? 
$num?? 
;?? 
byte@@ 
tmpByte@@ 
=@@ 
$num@@ 
;@@ 
byteAA 
[AA 
]AA 
byteArrAA 
=AA 
nullAA !
;AA! "
stringBB 
depthStrBB 
=BB 
stringBB $
.BB$ %
EmptyBB% *
;BB* +
UInt32CC 
formatBytesCC 
=CC  
$numCC! "
;CC" #
UInt32DD 
itemLenDD 
=DD 
$numDD 
;DD 
stringEE 
valEE 
=EE 
stringEE 
.EE  
EmptyEE  %
;EE% &
tryGG 
{HH 
ifII 
(II 
depthII 
>II 
$numII 
)II 
{JJ 
depthStrKK 
=KK 
depthStrKK '
.KK' (
PadRightKK( 0
(KK0 1
depthKK1 6
*KK7 8
$numKK9 :
,KK: ;
$charKK< ?
)KK? @
;KK@ A
smlDataLL 
.LL 

AppendLineLL &
(LL& '
)LL' (
;LL( )
}MM 
depthNN 
++NN 
;NN 
tmpByteUU 
=UU 
binDataUU !
[UU! "
posUU" %
++UU% '
]UU' (
;UU( )
fFormatVV 
=VV 
	getFormatVV #
(VV# $
tmpByteVV$ +
>>VV, .
$numVV/ 0
)VV0 1
;VV1 2
lenBytesWW 
=WW 
tmpByteWW "
&WW# $
$numWW% )
;WW) *
byteArr^^ 
=^^ 
new^^ 
byte^^ "
[^^" #
$num^^# $
]^^$ %
;^^% &
if__ 
(__ 
lenBytes__ 
==__ 
$num__  !
)__! "
{`` 
byteArraa 
[aa 
$numaa 
]aa 
=aa  
binDataaa! (
[aa( )
posaa) ,
++aa, .
]aa. /
;aa/ 0
}bb 
elsecc 
ifcc 
(cc 
lenBytescc !
==cc" $
$numcc% &
)cc& '
{dd 
byteArree 
[ee 
$numee 
]ee 
=ee  
binDataee! (
[ee( )
posee) ,
++ee, .
]ee. /
;ee/ 0
byteArrff 
[ff 
$numff 
]ff 
=ff  
binDataff! (
[ff( )
posff) ,
++ff, .
]ff. /
;ff/ 0
}gg 
elsehh 
{ii 
byteArrjj 
[jj 
$numjj 
]jj 
=jj  
binDatajj! (
[jj( )
posjj) ,
++jj, .
]jj. /
;jj/ 0
byteArrkk 
[kk 
$numkk 
]kk 
=kk  
binDatakk! (
[kk( )
poskk) ,
++kk, .
]kk. /
;kk/ 0
byteArrll 
[ll 
$numll 
]ll 
=ll  
binDatall! (
[ll( )
posll) ,
++ll, .
]ll. /
;ll/ 0
}mm 
lennn 
=nn 
FByteConverternn $
.nn$ %
toUInt32nn% -
(nn- .
byteArrnn. 5
,nn5 6
falsenn7 <
)nn< =
;nn= >
smlDatarr 
.rr 
Appendrr 
(rr 
depthStrrr '
+rr( )
$strrr* -
+rr. /
fFormatrr0 7
.rr7 8
ToStringrr8 @
(rr@ A
)rrA B
)rrB C
;rrC D
ifss 
(ss 
fFormatss 
==ss 
FFormatss &
.ss& '
Lss' (
)ss( )
{tt 
ifuu 
(uu 
lenuu 
>uu 
$numuu 
)uu  
{vv 
smlDataww 
.ww  
Appendww  &
(ww& '
$strww' *
+ww+ ,
lenww- 0
+ww1 2
$strww3 6
)ww6 7
;ww7 8
}xx 
forzz 
(zz 
intzz 
izz 
=zz  
$numzz! "
;zz" #
izz$ %
<zz& '
lenzz( +
;zz+ ,
izz- .
++zz. 0
)zz0 1
{{{ 
convertBinToSml|| '
(||' (
binData||( /
,||/ 0
ref||1 4
pos||5 8
,||8 9
smlData||: A
,||A B
depth||C H
)||H I
;||I J
}}} 
if 
( 
len 
> 
$num 
)  
{
ÄÄ 
smlData
ÅÅ 
.
ÅÅ  

AppendLine
ÅÅ  *
(
ÅÅ* +
)
ÅÅ+ ,
;
ÅÅ, -
smlData
ÇÇ 
.
ÇÇ  
Append
ÇÇ  &
(
ÇÇ& '
depthStr
ÇÇ' /
+
ÇÇ0 1
$str
ÇÇ2 5
)
ÇÇ5 6
;
ÇÇ6 7
}
ÉÉ 
else
ÑÑ 
{
ÖÖ 
smlData
ÜÜ 
.
ÜÜ  
Append
ÜÜ  &
(
ÜÜ& '
$str
ÜÜ' *
)
ÜÜ* +
;
ÜÜ+ ,
}
áá 
}
àà 
else
ââ 
{
ää 
formatBytes
ãã 
=
ãã  !
getFormatBytes
ãã" 0
(
ãã0 1
fFormat
ãã1 8
)
ãã8 9
;
ãã9 :
itemLen
åå 
=
åå 
len
åå !
/
åå" #
formatBytes
åå$ /
;
åå/ 0
if
çç 
(
çç 
itemLen
çç 
>
çç  !
$num
çç" #
)
çç# $
{
éé 
smlData
èè 
.
èè  
Append
èè  &
(
èè& '
$str
èè' *
+
èè+ ,
itemLen
èè- 4
.
èè4 5
ToString
èè5 =
(
èè= >
)
èè> ?
+
èè@ A
$str
èèB F
)
èèF G
;
èèG H
}
êê 
if
íí 
(
íí 
itemLen
íí 
>
íí  !
$num
íí" #
)
íí# $
{
ìì 
smlData
îî 
.
îî  
Append
îî  &
(
îî& '
$str
îî' *
)
îî* +
;
îî+ ,
}
ïï 
val
ññ 
=
ññ 
getBinToValue
ññ '
(
ññ' (
fFormat
ññ( /
,
ññ/ 0
binData
ññ1 8
,
ññ8 9
pos
ññ: =
,
ññ= >
itemLen
ññ? F
,
ññF G
formatBytes
ññH S
)
ññS T
;
ññT U
pos
óó 
+=
óó 
len
óó 
;
óó 
if
õõ 
(
õõ 
fFormat
õõ 
==
õõ  "
FFormat
õõ# *
.
õõ* +
A
õõ+ ,
||
õõ- /
fFormat
õõ0 7
==
õõ8 :
FFormat
õõ; B
.
õõB C
A2
õõC E
||
õõF H
fFormat
õõI P
==
õõQ S
FFormat
õõT [
.
õõ[ \
J8
õõ\ ^
)
õõ^ _
{
úú 
if
ùù 
(
ùù 
len
ùù 
>
ùù  !
$num
ùù" #
)
ùù# $
{
ûû 
smlData
üü #
.
üü# $
Append
üü$ *
(
üü* +
$str
üü+ .
+
üü/ 0
val
üü1 4
+
üü5 6
$str
üü7 :
)
üü: ;
;
üü; <
}
†† 
}
°° 
else
¢¢ 
{
££ 
smlData
§§ 
.
§§  
Append
§§  &
(
§§& '
val
§§' *
)
§§* +
;
§§+ ,
}
•• 
smlData
¶¶ 
.
¶¶ 
Append
¶¶ "
(
¶¶" #
$str
¶¶# &
)
¶¶& '
;
¶¶' (
}
ßß 
}
®® 
catch
©© 
(
©© 
	Exception
©© 
ex
©© 
)
©©  
{
™™ 
FDebug
´´ 
.
´´ 
throwException
´´ %
(
´´% &
ex
´´& (
)
´´( )
;
´´) *
}
¨¨ 
finally
≠≠ 
{
ÆÆ 
}
∞∞ 
}
±± 	
public
µµ 
static
µµ 
FXmlNode
µµ !
convertBinToXmlNode
µµ 2
(
µµ2 3
UInt16
∂∂ 
	sessionId
∂∂ 
,
∂∂ 
byte
∑∑ 
stream
∑∑ 
,
∑∑ 
byte
∏∏ 
function
∏∏ 
,
∏∏ 
bool
ππ 
wbit
ππ 
,
ππ 
UInt32
∫∫ 
systemBytes
∫∫ 
,
∫∫ 
byte
ªª 
[
ªª 
]
ªª 
binData
ªª 
)
ºº 
{
ΩΩ 	
FXmlDocument
ææ 
fXmlDoc
ææ  
=
ææ! "
null
ææ# '
;
ææ' (
FXmlNode
øø 
fXmlNodeSmg
øø  
=
øø! "
null
øø# '
;
øø' (
UInt32
¿¿ 
pos
¿¿ 
=
¿¿ 
$num
¿¿ 
;
¿¿ 
try
¬¬ 
{
√√ 
fXmlDoc
ƒƒ 
=
ƒƒ 
new
ƒƒ 
FXmlDocument
ƒƒ *
(
ƒƒ* +
)
ƒƒ+ ,
;
ƒƒ, -
fXmlDoc
≈≈ 
.
≈≈  
preserveWhiteSpace
≈≈ *
=
≈≈+ ,
false
≈≈- 2
;
≈≈2 3
fXmlNodeSmg
ÃÃ 
=
ÃÃ 
fXmlDoc
ÃÃ %
.
ÃÃ% &

createNode
ÃÃ& 0
(
ÃÃ0 1
FSecsTag
ÃÃ1 9
.
ÃÃ9 :
E_SecsMessage
ÃÃ: G
)
ÃÃG H
;
ÃÃH I
fXmlNodeSmg
ÕÕ 
.
ÕÕ 
set_attrVal
ÕÕ '
(
ÕÕ' (
FSecsTag
ÕÕ( 0
.
ÕÕ0 1
A_SessionId
ÕÕ1 <
,
ÕÕ< =
	sessionId
ÕÕ> G
.
ÕÕG H
ToString
ÕÕH P
(
ÕÕP Q
)
ÕÕQ R
)
ÕÕR S
;
ÕÕS T
fXmlNodeSmg
ŒŒ 
.
ŒŒ 
set_attrVal
ŒŒ '
(
ŒŒ' (
FSecsTag
ŒŒ( 0
.
ŒŒ0 1
A_Stream
ŒŒ1 9
,
ŒŒ9 :
stream
ŒŒ; A
.
ŒŒA B
ToString
ŒŒB J
(
ŒŒJ K
)
ŒŒK L
)
ŒŒL M
;
ŒŒM N
fXmlNodeSmg
œœ 
.
œœ 
set_attrVal
œœ '
(
œœ' (
FSecsTag
œœ( 0
.
œœ0 1

A_Function
œœ1 ;
,
œœ; <
function
œœ= E
.
œœE F
ToString
œœF N
(
œœN O
)
œœO P
)
œœP Q
;
œœQ R
fXmlNodeSmg
–– 
.
–– 
set_attrVal
–– '
(
––' (
FSecsTag
––( 0
.
––0 1
A_WBit
––1 7
,
––7 8
wbit
––9 =
.
––= >
ToString
––> F
(
––F G
)
––G H
)
––H I
;
––I J
fXmlNodeSmg
—— 
.
—— 
set_attrVal
—— '
(
——' (
FSecsTag
——( 0
.
——0 1
A_SystemBytes
——1 >
,
——> ?
systemBytes
——@ K
.
——K L
ToString
——L T
(
——T U
)
——U V
)
——V W
;
——W X
if
ÿÿ 
(
ÿÿ 
binData
ÿÿ 
.
ÿÿ 
Length
ÿÿ "
>
ÿÿ# $
$num
ÿÿ% &
)
ÿÿ& '
{
ŸŸ !
convertBinToXmlNode
⁄⁄ '
(
⁄⁄' (
fXmlDoc
⁄⁄( /
,
⁄⁄/ 0
fXmlNodeSmg
⁄⁄1 <
,
⁄⁄< =
binData
⁄⁄> E
,
⁄⁄E F
ref
⁄⁄G J
pos
⁄⁄K N
)
⁄⁄N O
;
⁄⁄O P
}
€€ 
return
ﬂﬂ 
fXmlNodeSmg
ﬂﬂ "
;
ﬂﬂ" #
}
‡‡ 
catch
·· 
(
·· 
	Exception
·· 
ex
·· 
)
··  
{
‚‚ 
FDebug
„„ 
.
„„ 
throwException
„„ %
(
„„% &
ex
„„& (
)
„„( )
;
„„) *
}
‰‰ 
finally
ÂÂ 
{
ÊÊ 
fXmlDoc
ÁÁ 
=
ÁÁ 
null
ÁÁ 
;
ÁÁ 
}
ËË 
return
ÈÈ 
null
ÈÈ 
;
ÈÈ 
}
ÍÍ 	
public
ÓÓ 
static
ÓÓ 
void
ÓÓ !
convertBinToXmlNode
ÓÓ .
(
ÓÓ. /
FXmlDocument
ÔÔ 
fXmlDoc
ÔÔ  
,
ÔÔ  !
FXmlNode
 
fXmlNodeParent
 #
,
# $
Byte
ÒÒ 
[
ÒÒ 
]
ÒÒ 
binData
ÒÒ 
,
ÒÒ 
ref
ÚÚ 
UInt32
ÚÚ 
pos
ÚÚ 
)
ÛÛ 
{
ÙÙ 	
FFormat
ıı 
fFormat
ıı 
;
ıı 
int
ˆˆ 
lenBytes
ˆˆ 
=
ˆˆ 
$num
ˆˆ 
;
ˆˆ 
UInt32
˜˜ 
len
˜˜ 
=
˜˜ 
$num
˜˜ 
;
˜˜ 
byte
¯¯ 
tmpByte
¯¯ 
=
¯¯ 
$num
¯¯ 
;
¯¯ 
byte
˘˘ 
[
˘˘ 
]
˘˘ 
byteArr
˘˘ 
=
˘˘ 
null
˘˘ !
;
˘˘! "
string
˙˙ 
depthStr
˙˙ 
=
˙˙ 
string
˙˙ $
.
˙˙$ %
Empty
˙˙% *
;
˙˙* +
UInt32
˚˚ 
formatBytes
˚˚ 
=
˚˚  
$num
˚˚! "
;
˚˚" #
UInt32
¸¸ 
itemLen
¸¸ 
=
¸¸ 
$num
¸¸ 
;
¸¸ 
string
˝˝ 
val
˝˝ 
=
˝˝ 
string
˝˝ 
.
˝˝  
Empty
˝˝  %
;
˝˝% &
FXmlNode
˛˛ 
fXmlNodeSit
˛˛  
=
˛˛! "
null
˛˛# '
;
˛˛' (
try
ÄÄ 
{
ÅÅ 
fXmlNodeSit
ÇÇ 
=
ÇÇ 
fXmlDoc
ÇÇ %
.
ÇÇ% &

createNode
ÇÇ& 0
(
ÇÇ0 1
FSecsTag
ÇÇ1 9
.
ÇÇ9 :

E_SecsItem
ÇÇ: D
)
ÇÇD E
;
ÇÇE F
tmpByte
ââ 
=
ââ 
binData
ââ !
[
ââ! "
pos
ââ" %
++
ââ% '
]
ââ' (
;
ââ( )
fFormat
ää 
=
ää 
FSecsConverter
ää (
.
ää( )
	getFormat
ää) 2
(
ää2 3
tmpByte
ää3 :
>>
ää; =
$num
ää> ?
)
ää? @
;
ää@ A
lenBytes
ãã 
=
ãã 
tmpByte
ãã "
&
ãã# $
$num
ãã% )
;
ãã) *
fXmlNodeSit
åå 
.
åå 
set_attrVal
åå '
(
åå' (
FSecsTag
åå( 0
.
åå0 1
A_Format
åå1 9
,
åå9 :
fFormat
åå; B
.
ååB C
ToString
ååC K
(
ååK L
)
ååL M
)
ååM N
;
ååN O
byteArr
ìì 
=
ìì 
new
ìì 
byte
ìì "
[
ìì" #
$num
ìì# $
]
ìì$ %
;
ìì% &
if
îî 
(
îî 
lenBytes
îî 
==
îî 
$num
îî  !
)
îî! "
{
ïï 
byteArr
ññ 
[
ññ 
$num
ññ 
]
ññ 
=
ññ  
binData
ññ! (
[
ññ( )
pos
ññ) ,
++
ññ, .
]
ññ. /
;
ññ/ 0
}
óó 
else
òò 
if
òò 
(
òò 
lenBytes
òò !
==
òò" $
$num
òò% &
)
òò& '
{
ôô 
byteArr
öö 
[
öö 
$num
öö 
]
öö 
=
öö  
binData
öö! (
[
öö( )
pos
öö) ,
++
öö, .
]
öö. /
;
öö/ 0
byteArr
õõ 
[
õõ 
$num
õõ 
]
õõ 
=
õõ  
binData
õõ! (
[
õõ( )
pos
õõ) ,
++
õõ, .
]
õõ. /
;
õõ/ 0
}
úú 
else
ùù 
{
ûû 
byteArr
üü 
[
üü 
$num
üü 
]
üü 
=
üü  
binData
üü! (
[
üü( )
pos
üü) ,
++
üü, .
]
üü. /
;
üü/ 0
byteArr
†† 
[
†† 
$num
†† 
]
†† 
=
††  
binData
††! (
[
††( )
pos
††) ,
++
††, .
]
††. /
;
††/ 0
byteArr
°° 
[
°° 
$num
°° 
]
°° 
=
°°  
binData
°°! (
[
°°( )
pos
°°) ,
++
°°, .
]
°°. /
;
°°/ 0
}
¢¢ 
len
££ 
=
££ 
FByteConverter
££ $
.
££$ %
toUInt32
££% -
(
££- .
byteArr
££. 5
,
££5 6
false
££7 <
)
££< =
;
££= >
formatBytes
§§ 
=
§§ 
getFormatBytes
§§ ,
(
§§, -
fFormat
§§- 4
)
§§4 5
;
§§5 6
itemLen
•• 
=
•• 
len
•• 
/
•• 
formatBytes
••  +
;
••+ ,
fXmlNodeSit
¶¶ 
.
¶¶ 
set_attrVal
¶¶ '
(
¶¶' (
FSecsTag
¶¶( 0
.
¶¶0 1
A_Length
¶¶1 9
,
¶¶9 :
itemLen
¶¶; B
.
¶¶B C
ToString
¶¶C K
(
¶¶K L
)
¶¶L M
)
¶¶M N
;
¶¶N O
if
™™ 
(
™™ 
fFormat
™™ 
==
™™ 
FFormat
™™ &
.
™™& '
L
™™' (
)
™™( )
{
´´ 
for
¨¨ 
(
¨¨ 
int
¨¨ 
i
¨¨ 
=
¨¨  
$num
¨¨! "
;
¨¨" #
i
¨¨$ %
<
¨¨& '
itemLen
¨¨( /
;
¨¨/ 0
i
¨¨1 2
++
¨¨2 4
)
¨¨4 5
{
≠≠ !
convertBinToXmlNode
ÆÆ +
(
ÆÆ+ ,
fXmlDoc
ÆÆ, 3
,
ÆÆ3 4
fXmlNodeSit
ÆÆ5 @
,
ÆÆ@ A
binData
ÆÆB I
,
ÆÆI J
ref
ÆÆK N
pos
ÆÆO R
)
ÆÆR S
;
ÆÆS T
}
ØØ 
}
∞∞ 
else
±± 
{
≤≤ 
val
≥≥ 
=
≥≥ 
getBinToValue
≥≥ '
(
≥≥' (
fFormat
≥≥( /
,
≥≥/ 0
binData
≥≥1 8
,
≥≥8 9
pos
≥≥: =
,
≥≥= >
itemLen
≥≥? F
,
≥≥F G
formatBytes
≥≥H S
)
≥≥S T
;
≥≥T U
pos
¥¥ 
+=
¥¥ 
len
¥¥ 
;
¥¥ 
fXmlNodeSit
µµ 
.
µµ  
set_attrVal
µµ  +
(
µµ+ ,
FSecsTag
µµ, 4
.
µµ4 5
A_Value
µµ5 <
,
µµ< =
val
µµ> A
)
µµA B
;
µµB C
}
∂∂ 
fXmlNodeParent
∫∫ 
.
∫∫ 
appendChild
∫∫ *
(
∫∫* +
fXmlNodeSit
∫∫+ 6
)
∫∫6 7
;
∫∫7 8
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº 
ex
ºº 
)
ºº  
{
ΩΩ 
FDebug
ææ 
.
ææ 
throwException
ææ %
(
ææ% &
ex
ææ& (
)
ææ( )
;
ææ) *
}
øø 
finally
¿¿ 
{
¡¡ 
fXmlNodeSit
¬¬ 
=
¬¬ 
null
¬¬ "
;
¬¬" #
}
√√ 
}
ƒƒ 	
public
»» 
static
»» 
FSecsDataMessage
»» &)
convertXmlToSecsDataMessage
»»' B
(
»»B C
FSecs1ToHsms
…… 
fSecs1ToHsms
…… %
,
……% &
FXmlNode
   
fXmlNodeSmg
    
)
ÀÀ 
{
ÃÃ 	
UInt16
ÕÕ 
	sessionId
ÕÕ 
=
ÕÕ 
$num
ÕÕ  
;
ÕÕ  !
byte
ŒŒ 
stream
ŒŒ 
=
ŒŒ 
$num
ŒŒ 
;
ŒŒ 
byte
œœ 
function
œœ 
=
œœ 
$num
œœ 
;
œœ 
bool
–– 
wbit
–– 
=
–– 
false
–– 
;
–– 
UInt32
—— 
systemBytes
—— 
=
——  
$num
——! "
;
——" #
string
““ 
val
““ 
=
““ 
string
““ 
.
““  
Empty
““  %
;
““% &
List
”” 
<
”” 
byte
”” 
>
”” 
binData
”” 
=
””  
null
””! %
;
””% &
try
’’ 
{
÷÷ 
	sessionId
◊◊ 
=
◊◊ 
UInt16
◊◊ "
.
◊◊" #
Parse
◊◊# (
(
◊◊( )
fXmlNodeSmg
◊◊) 4
.
◊◊4 5
get_attrVal
◊◊5 @
(
◊◊@ A
FSecsTag
◊◊A I
.
◊◊I J
A_SessionId
◊◊J U
,
◊◊U V
$str
◊◊W Z
)
◊◊Z [
)
◊◊[ \
;
◊◊\ ]
stream
ÿÿ 
=
ÿÿ 
byte
ÿÿ 
.
ÿÿ 
Parse
ÿÿ #
(
ÿÿ# $
fXmlNodeSmg
ÿÿ$ /
.
ÿÿ/ 0
get_attrVal
ÿÿ0 ;
(
ÿÿ; <
FSecsTag
ÿÿ< D
.
ÿÿD E
A_Stream
ÿÿE M
,
ÿÿM N
$str
ÿÿO R
)
ÿÿR S
)
ÿÿS T
;
ÿÿT U
function
ŸŸ 
=
ŸŸ 
byte
ŸŸ 
.
ŸŸ  
Parse
ŸŸ  %
(
ŸŸ% &
fXmlNodeSmg
ŸŸ& 1
.
ŸŸ1 2
get_attrVal
ŸŸ2 =
(
ŸŸ= >
FSecsTag
ŸŸ> F
.
ŸŸF G

A_Function
ŸŸG Q
,
ŸŸQ R
$str
ŸŸS V
)
ŸŸV W
)
ŸŸW X
;
ŸŸX Y
wbit
⁄⁄ 
=
⁄⁄ 
bool
⁄⁄ 
.
⁄⁄ 
Parse
⁄⁄ !
(
⁄⁄! "
fXmlNodeSmg
⁄⁄" -
.
⁄⁄- .
get_attrVal
⁄⁄. 9
(
⁄⁄9 :
FSecsTag
⁄⁄: B
.
⁄⁄B C
A_WBit
⁄⁄C I
,
⁄⁄I J
$str
⁄⁄K R
)
⁄⁄R S
)
⁄⁄S T
;
⁄⁄T U
val
‹‹ 
=
‹‹ 
fXmlNodeSmg
‹‹ !
.
‹‹! "
get_attrVal
‹‹" -
(
‹‹- .
FSecsTag
‹‹. 6
.
‹‹6 7
A_SystemBytes
‹‹7 D
,
‹‹D E
string
‹‹F L
.
‹‹L M
Empty
‹‹M R
)
‹‹R S
;
‹‹S T
if
›› 
(
›› 
val
›› 
!=
›› 
string
›› !
.
››! "
Empty
››" '
)
››' (
{
ﬁﬁ 
systemBytes
ﬂﬂ 
=
ﬂﬂ  !
UInt32
ﬂﬂ" (
.
ﬂﬂ( )
Parse
ﬂﬂ) .
(
ﬂﬂ. /
val
ﬂﬂ/ 2
)
ﬂﬂ2 3
;
ﬂﬂ3 4
}
‡‡ 
binData
‰‰ 
=
‰‰ 
new
‰‰ 
List
‰‰ "
<
‰‰" #
byte
‰‰# '
>
‰‰' (
(
‰‰( )
)
‰‰) *
;
‰‰* +
if
ÂÂ 
(
ÂÂ 
fXmlNodeSmg
ÂÂ 
.
ÂÂ  
hasChildNode
ÂÂ  ,
)
ÂÂ, -
{
ÊÊ "
convertXmlToSecsItem
ÁÁ (
(
ÁÁ( )
fXmlNodeSmg
ÁÁ) 4
.
ÁÁ4 5
selectSingleNode
ÁÁ5 E
(
ÁÁE F
FSecsTag
ÁÁF N
.
ÁÁN O

E_SecsItem
ÁÁO Y
)
ÁÁY Z
,
ÁÁZ [
binData
ÁÁ\ c
)
ÁÁc d
;
ÁÁd e
}
ËË 
return
ÏÏ 
new
ÏÏ 
FSecsDataMessage
ÏÏ +
(
ÏÏ+ ,
fSecs1ToHsms
ÏÏ, 8
,
ÏÏ8 9
	sessionId
ÏÏ: C
,
ÏÏC D
wbit
ÏÏE I
,
ÏÏI J
stream
ÏÏK Q
,
ÏÏQ R
function
ÏÏS [
,
ÏÏ[ \
systemBytes
ÏÏ] h
,
ÏÏh i
binData
ÏÏj q
.
ÏÏq r
ToArray
ÏÏr y
(
ÏÏy z
)
ÏÏz {
)
ÏÏ{ |
;
ÏÏ| }
}
ÌÌ 
catch
ÓÓ 
(
ÓÓ 
	Exception
ÓÓ 
ex
ÓÓ 
)
ÓÓ  
{
ÔÔ 
FDebug
 
.
 
throwException
 %
(
% &
ex
& (
)
( )
;
) *
}
ÒÒ 
finally
ÚÚ 
{
ÛÛ 
}
ıı 
return
ˆˆ 
null
ˆˆ 
;
ˆˆ 
}
˜˜ 	
public
˚˚ 
static
˚˚ 
void
˚˚ "
convertXmlToSecsItem
˚˚ /
(
˚˚/ 0
FXmlNode
¸¸ 
fXmlNodeSit
¸¸  
,
¸¸  !
List
˝˝ 
<
˝˝ 
byte
˝˝ 
>
˝˝ 
binData
˝˝ 
)
˛˛ 
{
ˇˇ 	
FFormat
ÄÄ 
fFormat
ÄÄ 
;
ÄÄ 
byte
ÅÅ 

formatCode
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ  
UInt32
ÇÇ 
formatBytes
ÇÇ 
=
ÇÇ  
$num
ÇÇ! "
;
ÇÇ" #
UInt32
ÉÉ 
len
ÉÉ 
=
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
byte
ÑÑ 
lenBytes
ÑÑ 
=
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
UInt32
ÖÖ 
itemLen
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
byte
ÜÜ 
[
ÜÜ 
]
ÜÜ 
lenArr
ÜÜ 
=
ÜÜ 
null
ÜÜ  
;
ÜÜ  !
byte
áá 
[
áá 
]
áá 
byteArr
áá 
=
áá 
null
áá !
;
áá! "
byte
àà 
[
àà 
]
àà 
valArr
àà 
=
àà 
null
àà  
;
àà  !
FXmlNodeList
ââ 
fXmlNodeChilds
ââ '
=
ââ( )
null
ââ* .
;
ââ. /
try
ãã 
{
åå 
fFormat
çç 
=
çç 
(
çç 
FFormat
çç "
)
çç" #
Enum
çç# '
.
çç' (
Parse
çç( -
(
çç- .
typeof
çç. 4
(
çç4 5
FFormat
çç5 <
)
çç< =
,
çç= >
fXmlNodeSit
çç? J
.
ççJ K
get_attrVal
ççK V
(
ççV W
FSecsTag
ççW _
.
çç_ `
A_Format
çç` h
)
ççh i
)
ççi j
;
ççj k

formatCode
éé 
=
éé 
(
éé 
byte
éé "
)
éé" #
(
éé# $
(
éé$ %
int
éé% (
)
éé( )
fFormat
éé) 0
<<
éé1 3
$num
éé4 5
)
éé5 6
;
éé6 7
formatBytes
èè 
=
èè 
getFormatBytes
èè ,
(
èè, -
fFormat
èè- 4
)
èè4 5
;
èè5 6
if
ìì 
(
ìì 
fFormat
ìì 
==
ìì 
FFormat
ìì &
.
ìì& '
L
ìì' (
)
ìì( )
{
îî 
fXmlNodeChilds
ïï "
=
ïï# $
fXmlNodeSit
ïï% 0
.
ïï0 1
selectNodes
ïï1 <
(
ïï< =
FSecsTag
ïï= E
.
ïïE F

E_SecsItem
ïïF P
)
ïïP Q
;
ïïQ R
len
ññ 
=
ññ 
(
ññ 
UInt32
ññ !
)
ññ! "
fXmlNodeChilds
ññ" 0
.
ññ0 1
count
ññ1 6
;
ññ6 7
lenBytes
óó 
=
óó 
getLengthBytes
óó -
(
óó- .
len
óó. 1
)
óó1 2
;
óó2 3
if
ôô 
(
ôô 
lenBytes
ôô  
==
ôô! #
$num
ôô$ %
)
ôô% &
{
öö 

formatCode
õõ "
|=
õõ# %
$num
õõ& *
;
õõ* +
lenArr
úú 
=
úú  
new
úú! $
byte
úú% )
[
úú) *
$num
úú* +
]
úú+ ,
{
úú- .
(
úú/ 0
byte
úú0 4
)
úú4 5
len
úú5 8
}
úú9 :
;
úú: ;
}
ùù 
else
ûû 
if
ûû 
(
ûû 
lenBytes
ûû %
==
ûû& (
$num
ûû) *
)
ûû* +
{
üü 

formatCode
†† "
|=
††# %
$num
††& *
;
††* +
lenArr
°° 
=
°°  
FByteConverter
°°! /
.
°°/ 0
getBytes
°°0 8
(
°°8 9
(
°°9 :
UInt16
°°: @
)
°°@ A
len
°°A D
,
°°D E
true
°°F J
)
°°J K
;
°°K L
}
¢¢ 
else
££ 
{
§§ 

formatCode
•• "
|=
••# %
$num
••& *
;
••* +
byteArr
¶¶ 
=
¶¶  !
FByteConverter
¶¶" 0
.
¶¶0 1
getBytes
¶¶1 9
(
¶¶9 :
(
¶¶: ;
UInt32
¶¶; A
)
¶¶A B
len
¶¶B E
,
¶¶E F
true
¶¶G K
)
¶¶K L
;
¶¶L M
lenArr
ßß 
=
ßß  
new
ßß! $
byte
ßß% )
[
ßß) *
$num
ßß* +
]
ßß+ ,
;
ßß, -
lenArr
®® 
[
®® 
$num
®®  
]
®®  !
=
®®" #
byteArr
®®$ +
[
®®+ ,
$num
®®, -
]
®®- .
;
®®. /
lenArr
©© 
[
©© 
$num
©©  
]
©©  !
=
©©" #
byteArr
©©$ +
[
©©+ ,
$num
©©, -
]
©©- .
;
©©. /
lenArr
™™ 
[
™™ 
$num
™™  
]
™™  !
=
™™" #
byteArr
™™$ +
[
™™+ ,
$num
™™, -
]
™™- .
;
™™. /
}
´´ 
binData
≠≠ 
.
≠≠ 
Add
≠≠ 
(
≠≠  

formatCode
≠≠  *
)
≠≠* +
;
≠≠+ ,
binData
ÆÆ 
.
ÆÆ 
AddRange
ÆÆ $
(
ÆÆ$ %
lenArr
ÆÆ% +
)
ÆÆ+ ,
;
ÆÆ, -
foreach
∞∞ 
(
∞∞ 
FXmlNode
∞∞ %
c
∞∞& '
in
∞∞( *
fXmlNodeChilds
∞∞+ 9
)
∞∞9 :
{
±± "
convertXmlToSecsItem
≤≤ ,
(
≤≤, -
c
≤≤- .
,
≤≤. /
binData
≤≤0 7
)
≤≤7 8
;
≤≤8 9
}
≥≥ 
}
¥¥ 
else
µµ 
{
∂∂ 
valArr
∑∑ 
=
∑∑ !
getStringToBinValue
∑∑ 0
(
∑∑0 1
fFormat
∑∑1 8
,
∑∑8 9
fXmlNodeSit
∑∑: E
.
∑∑E F
get_attrVal
∑∑F Q
(
∑∑Q R
FSecsTag
∑∑R Z
.
∑∑Z [
A_Value
∑∑[ b
,
∑∑b c
string
∑∑d j
.
∑∑j k
Empty
∑∑k p
)
∑∑p q
,
∑∑q r
ref
∑∑s v
itemLen
∑∑w ~
)
∑∑~ 
;∑∑ Ä
len
∏∏ 
=
∏∏ 
itemLen
∏∏ !
*
∏∏" #
formatBytes
∏∏$ /
;
∏∏/ 0
lenBytes
ππ 
=
ππ 
getLengthBytes
ππ -
(
ππ- .
len
ππ. 1
)
ππ1 2
;
ππ2 3
if
ªª 
(
ªª 
lenBytes
ªª  
==
ªª! #
$num
ªª$ %
)
ªª% &
{
ºº 

formatCode
ΩΩ "
|=
ΩΩ# %
$num
ΩΩ& *
;
ΩΩ* +
lenArr
ææ 
=
ææ  
new
ææ! $
byte
ææ% )
[
ææ) *
$num
ææ* +
]
ææ+ ,
{
ææ- .
(
ææ/ 0
byte
ææ0 4
)
ææ4 5
len
ææ5 8
}
ææ9 :
;
ææ: ;
}
øø 
else
¿¿ 
if
¿¿ 
(
¿¿ 
lenBytes
¿¿ %
==
¿¿& (
$num
¿¿) *
)
¿¿* +
{
¡¡ 

formatCode
¬¬ "
|=
¬¬# %
$num
¬¬& *
;
¬¬* +
lenArr
√√ 
=
√√  
FByteConverter
√√! /
.
√√/ 0
getBytes
√√0 8
(
√√8 9
(
√√9 :
UInt16
√√: @
)
√√@ A
len
√√A D
,
√√D E
true
√√F J
)
√√J K
;
√√K L
}
ƒƒ 
else
≈≈ 
{
∆∆ 

formatCode
«« "
|=
««# %
$num
««& *
;
««* +
byteArr
»» 
=
»»  !
FByteConverter
»»" 0
.
»»0 1
getBytes
»»1 9
(
»»9 :
(
»»: ;
UInt32
»»; A
)
»»A B
len
»»B E
,
»»E F
true
»»G K
)
»»K L
;
»»L M
lenArr
…… 
=
……  
new
……! $
byte
……% )
[
……) *
$num
……* +
]
……+ ,
;
……, -
lenArr
   
[
   
$num
    
]
    !
=
  " #
byteArr
  $ +
[
  + ,
$num
  , -
]
  - .
;
  . /
lenArr
ÀÀ 
[
ÀÀ 
$num
ÀÀ  
]
ÀÀ  !
=
ÀÀ" #
byteArr
ÀÀ$ +
[
ÀÀ+ ,
$num
ÀÀ, -
]
ÀÀ- .
;
ÀÀ. /
lenArr
ÃÃ 
[
ÃÃ 
$num
ÃÃ  
]
ÃÃ  !
=
ÃÃ" #
byteArr
ÃÃ$ +
[
ÃÃ+ ,
$num
ÃÃ, -
]
ÃÃ- .
;
ÃÃ. /
}
ÕÕ 
binData
œœ 
.
œœ 
Add
œœ 
(
œœ  

formatCode
œœ  *
)
œœ* +
;
œœ+ ,
binData
–– 
.
–– 
AddRange
–– $
(
––$ %
lenArr
––% +
)
––+ ,
;
––, -
if
““ 
(
““ 
valArr
““ 
!=
““ !
null
““" &
)
““& '
{
”” 
binData
‘‘ 
.
‘‘  
AddRange
‘‘  (
(
‘‘( )
valArr
‘‘) /
)
‘‘/ 0
;
‘‘0 1
}
’’ 
}
÷÷ 
}
◊◊ 
catch
ÿÿ 
(
ÿÿ 
	Exception
ÿÿ 
ex
ÿÿ 
)
ÿÿ  
{
ŸŸ 
FDebug
⁄⁄ 
.
⁄⁄ 
throwException
⁄⁄ %
(
⁄⁄% &
ex
⁄⁄& (
)
⁄⁄( )
;
⁄⁄) *
}
€€ 
finally
‹‹ 
{
›› 
}
ﬂﬂ 
}
‡‡ 	
public
‰‰ 
static
‰‰ 
FFormat
‰‰ 
	getFormat
‰‰ '
(
‰‰' (
int
ÂÂ 
value
ÂÂ 
)
ÊÊ 
{
ÁÁ 	
try
ËË 
{
ÈÈ 
if
ÍÍ 
(
ÍÍ 
value
ÍÍ 
==
ÍÍ 
$num
ÍÍ 
)
ÍÍ 
{
ÎÎ 
return
ÏÏ 
FFormat
ÏÏ "
.
ÏÏ" #
L
ÏÏ# $
;
ÏÏ$ %
}
ÌÌ 
else
ÓÓ 
if
ÓÓ 
(
ÓÓ 
value
ÓÓ 
==
ÓÓ !
$num
ÓÓ" #
)
ÓÓ# $
{
ÔÔ 
return
 
FFormat
 "
.
" #
B
# $
;
$ %
}
ÒÒ 
else
ÚÚ 
if
ÚÚ 
(
ÚÚ 
value
ÚÚ 
==
ÚÚ !
$num
ÚÚ" #
)
ÚÚ# $
{
ÛÛ 
return
ÙÙ 
FFormat
ÙÙ "
.
ÙÙ" #
BL
ÙÙ# %
;
ÙÙ% &
}
ıı 
else
ˆˆ 
if
ˆˆ 
(
ˆˆ 
value
ˆˆ 
==
ˆˆ !
$num
ˆˆ" $
)
ˆˆ$ %
{
˜˜ 
return
¯¯ 
FFormat
¯¯ "
.
¯¯" #
A
¯¯# $
;
¯¯$ %
}
˘˘ 
else
˙˙ 
if
˙˙ 
(
˙˙ 
value
˙˙ 
==
˙˙ !
$num
˙˙" $
)
˙˙$ %
{
˚˚ 
return
¸¸ 
FFormat
¸¸ "
.
¸¸" #
J8
¸¸# %
;
¸¸% &
}
˝˝ 
else
˛˛ 
if
˛˛ 
(
˛˛ 
value
˛˛ 
==
˛˛ !
$num
˛˛" $
)
˛˛$ %
{
ˇˇ 
return
ÄÄ 
FFormat
ÄÄ "
.
ÄÄ" #
A2
ÄÄ# %
;
ÄÄ% &
}
ÅÅ 
else
ÇÇ 
if
ÇÇ 
(
ÇÇ 
value
ÇÇ 
==
ÇÇ !
$num
ÇÇ" $
)
ÇÇ$ %
{
ÉÉ 
return
ÑÑ 
FFormat
ÑÑ "
.
ÑÑ" #
I8
ÑÑ# %
;
ÑÑ% &
}
ÖÖ 
else
ÜÜ 
if
ÜÜ 
(
ÜÜ 
value
ÜÜ 
==
ÜÜ !
$num
ÜÜ" $
)
ÜÜ$ %
{
áá 
return
àà 
FFormat
àà "
.
àà" #
I4
àà# %
;
àà% &
}
ââ 
else
ää 
if
ää 
(
ää 
value
ää 
==
ää !
$num
ää" $
)
ää$ %
{
ãã 
return
åå 
FFormat
åå "
.
åå" #
I2
åå# %
;
åå% &
}
çç 
else
éé 
if
éé 
(
éé 
value
éé 
==
éé !
$num
éé" $
)
éé$ %
{
èè 
return
êê 
FFormat
êê "
.
êê" #
I1
êê# %
;
êê% &
}
ëë 
else
íí 
if
íí 
(
íí 
value
íí 
==
íí !
$num
íí" $
)
íí$ %
{
ìì 
return
îî 
FFormat
îî "
.
îî" #
F8
îî# %
;
îî% &
}
ïï 
else
ññ 
if
ññ 
(
ññ 
value
ññ 
==
ññ !
$num
ññ" $
)
ññ$ %
{
óó 
return
òò 
FFormat
òò "
.
òò" #
F4
òò# %
;
òò% &
}
ôô 
else
öö 
if
öö 
(
öö 
value
öö 
==
öö !
$num
öö" $
)
öö$ %
{
õõ 
return
úú 
FFormat
úú "
.
úú" #
U8
úú# %
;
úú% &
}
ùù 
else
ûû 
if
ûû 
(
ûû 
value
ûû 
==
ûû !
$num
ûû" $
)
ûû$ %
{
üü 
return
†† 
FFormat
†† "
.
††" #
U4
††# %
;
††% &
}
°° 
else
¢¢ 
if
¢¢ 
(
¢¢ 
value
¢¢ 
==
¢¢ !
$num
¢¢" $
)
¢¢$ %
{
££ 
return
§§ 
FFormat
§§ "
.
§§" #
U2
§§# %
;
§§% &
}
•• 
else
¶¶ 
if
¶¶ 
(
¶¶ 
value
¶¶ 
==
¶¶ !
$num
¶¶" $
)
¶¶$ %
{
ßß 
return
®® 
FFormat
®® "
.
®®" #
U1
®®# %
;
®®% &
}
©© 
return
™™ 
FFormat
™™ 
.
™™ 
A
™™  
;
™™  !
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨ 
ex
¨¨ 
)
¨¨  
{
≠≠ 
FDebug
ÆÆ 
.
ÆÆ 
throwException
ÆÆ %
(
ÆÆ% &
ex
ÆÆ& (
)
ÆÆ( )
;
ÆÆ) *
}
ØØ 
finally
∞∞ 
{
±± 
}
≥≥ 
return
¥¥ 
FFormat
¥¥ 
.
¥¥ 
A
¥¥ 
;
¥¥ 
}
µµ 	
public
ππ 
static
ππ 
UInt32
ππ 
getFormatBytes
ππ +
(
ππ+ ,
FFormat
∫∫ 
fFormat
∫∫ 
)
ªª 
{
ºº 	
try
ΩΩ 
{
ææ 
if
øø 
(
øø 
fFormat
øø 
==
øø 
FFormat
øø &
.
øø& '
L
øø' (
)
øø( )
{
¿¿ 
return
¡¡ 
$num
¡¡ 
;
¡¡ 
}
¬¬ 
else
√√ 
if
√√ 
(
√√ 
fFormat
√√  
==
√√! #
FFormat
√√$ +
.
√√+ ,
B
√√, -
)
√√- .
{
ƒƒ 
return
≈≈ 
$num
≈≈ 
;
≈≈ 
}
∆∆ 
else
«« 
if
«« 
(
«« 
fFormat
««  
==
««! #
FFormat
««$ +
.
««+ ,
BL
««, .
)
««. /
{
»» 
return
…… 
$num
…… 
;
…… 
}
   
else
ÀÀ 
if
ÀÀ 
(
ÀÀ 
fFormat
ÀÀ  
==
ÀÀ! #
FFormat
ÀÀ$ +
.
ÀÀ+ ,
A
ÀÀ, -
||
ÀÀ. 0
fFormat
ÀÀ1 8
==
ÀÀ9 ;
FFormat
ÀÀ< C
.
ÀÀC D
J8
ÀÀD F
||
ÀÀG I
fFormat
ÀÀJ Q
==
ÀÀR T
FFormat
ÀÀU \
.
ÀÀ\ ]
A2
ÀÀ] _
)
ÀÀ_ `
{
ÃÃ 
return
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
}
ŒŒ 
else
œœ 
if
œœ 
(
œœ 
fFormat
œœ  
==
œœ! #
FFormat
œœ$ +
.
œœ+ ,
I8
œœ, .
)
œœ. /
{
–– 
return
—— 
$num
—— 
;
—— 
}
““ 
else
”” 
if
”” 
(
”” 
fFormat
””  
==
””! #
FFormat
””$ +
.
””+ ,
I4
””, .
)
””. /
{
‘‘ 
return
’’ 
$num
’’ 
;
’’ 
}
÷÷ 
else
◊◊ 
if
◊◊ 
(
◊◊ 
fFormat
◊◊  
==
◊◊! #
FFormat
◊◊$ +
.
◊◊+ ,
I2
◊◊, .
)
◊◊. /
{
ÿÿ 
return
ŸŸ 
$num
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
else
€€ 
if
€€ 
(
€€ 
fFormat
€€  
==
€€! #
FFormat
€€$ +
.
€€+ ,
I1
€€, .
)
€€. /
{
‹‹ 
return
›› 
$num
›› 
;
›› 
}
ﬁﬁ 
else
ﬂﬂ 
if
ﬂﬂ 
(
ﬂﬂ 
fFormat
ﬂﬂ  
==
ﬂﬂ! #
FFormat
ﬂﬂ$ +
.
ﬂﬂ+ ,
F8
ﬂﬂ, .
)
ﬂﬂ. /
{
‡‡ 
return
·· 
$num
·· 
;
·· 
}
‚‚ 
else
„„ 
if
„„ 
(
„„ 
fFormat
„„  
==
„„! #
FFormat
„„$ +
.
„„+ ,
F4
„„, .
)
„„. /
{
‰‰ 
return
ÂÂ 
$num
ÂÂ 
;
ÂÂ 
}
ÊÊ 
else
ÁÁ 
if
ÁÁ 
(
ÁÁ 
fFormat
ÁÁ  
==
ÁÁ! #
FFormat
ÁÁ$ +
.
ÁÁ+ ,
U8
ÁÁ, .
)
ÁÁ. /
{
ËË 
return
ÈÈ 
$num
ÈÈ 
;
ÈÈ 
}
ÍÍ 
else
ÎÎ 
if
ÎÎ 
(
ÎÎ 
fFormat
ÎÎ  
==
ÎÎ! #
FFormat
ÎÎ$ +
.
ÎÎ+ ,
U4
ÎÎ, .
)
ÎÎ. /
{
ÏÏ 
return
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
}
ÓÓ 
else
ÔÔ 
if
ÔÔ 
(
ÔÔ 
fFormat
ÔÔ  
==
ÔÔ! #
FFormat
ÔÔ$ +
.
ÔÔ+ ,
U2
ÔÔ, .
)
ÔÔ. /
{
 
return
ÒÒ 
$num
ÒÒ 
;
ÒÒ 
}
ÚÚ 
else
ÛÛ 
if
ÛÛ 
(
ÛÛ 
fFormat
ÛÛ  
==
ÛÛ! #
FFormat
ÛÛ$ +
.
ÛÛ+ ,
U1
ÛÛ, .
)
ÛÛ. /
{
ÙÙ 
return
ıı 
$num
ıı 
;
ıı 
}
ˆˆ 
return
˜˜ 
$num
˜˜ 
;
˜˜ 
}
¯¯ 
catch
˘˘ 
(
˘˘ 
	Exception
˘˘ 
ex
˘˘ 
)
˘˘  
{
˙˙ 
FDebug
˚˚ 
.
˚˚ 
throwException
˚˚ %
(
˚˚% &
ex
˚˚& (
)
˚˚( )
;
˚˚) *
}
¸¸ 
finally
˝˝ 
{
˛˛ 
}
ÄÄ 
return
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
public
ÜÜ 
static
ÜÜ 
byte
ÜÜ 
getLengthBytes
ÜÜ )
(
ÜÜ) *
UInt32
áá 
length
áá 
)
àà 
{
ââ 	
try
ää 
{
ãã 
if
åå 
(
åå 
length
åå 
<=
åå 
$num
åå "
)
åå" #
{
çç 
return
éé 
$num
éé 
;
éé 
}
èè 
else
êê 
if
êê 
(
êê 
length
êê 
<=
êê  "
$num
êê# )
)
êê) *
{
ëë 
return
íí 
$num
íí 
;
íí 
}
ìì 
return
îî 
$num
îî 
;
îî 
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
ex
ññ 
)
ññ  
{
óó 
FDebug
òò 
.
òò 
throwException
òò %
(
òò% &
ex
òò& (
)
òò( )
;
òò) *
}
ôô 
finally
öö 
{
õõ 
}
ùù 
return
ûû 
$num
ûû 
;
ûû 
}
üü 	
public
££ 
static
££ 
string
££ 
getBinToValue
££ *
(
££* +
FFormat
§§ 
fFormat
§§ 
,
§§ 
byte
•• 
[
•• 
]
•• 
value
•• 
,
•• 
UInt32
¶¶ 
index
¶¶ 
,
¶¶ 
UInt32
ßß 
length
ßß 
,
ßß 
UInt32
®® 
formatBytes
®® 
)
©© 
{
™™ 	
StringBuilder
´´ 
returnValue
´´ %
=
´´& '
null
´´( ,
;
´´, -
byte
¨¨ 
[
¨¨ 
]
¨¨ 
byteArr
¨¨ 
=
¨¨ 
null
¨¨ !
;
¨¨! "
try
ÆÆ 
{
ØØ 
if
∞∞ 
(
∞∞ 
length
∞∞ 
==
∞∞ 
$num
∞∞ 
)
∞∞  
{
±± 
return
≤≤ 
string
≤≤ !
.
≤≤! "
Empty
≤≤" '
;
≤≤' (
}
≥≥ 
returnValue
∑∑ 
=
∑∑ 
new
∑∑ !
StringBuilder
∑∑" /
(
∑∑/ 0
)
∑∑0 1
;
∑∑1 2
if
ªª 
(
ªª 
fFormat
ªª 
==
ªª 
FFormat
ªª &
.
ªª& '
B
ªª' (
)
ªª( )
{
ºº 
for
ΩΩ 
(
ΩΩ 
int
ΩΩ 
i
ΩΩ 
=
ΩΩ  
$num
ΩΩ! "
;
ΩΩ" #
i
ΩΩ$ %
<
ΩΩ& '
length
ΩΩ( .
;
ΩΩ. /
i
ΩΩ0 1
++
ΩΩ1 3
)
ΩΩ3 4
{
ææ 
returnValue
øø #
.
øø# $
Append
øø$ *
(
øø* +
$char
øø+ .
)
øø. /
;
øø/ 0
returnValue
¿¿ #
.
¿¿# $
Append
¿¿$ *
(
¿¿* +
value
¿¿+ 0
[
¿¿0 1
index
¿¿1 6
]
¿¿6 7
.
¿¿7 8
ToString
¿¿8 @
(
¿¿@ A
$str
¿¿A E
)
¿¿E F
)
¿¿F G
;
¿¿G H
index
¡¡ 
+=
¡¡  
formatBytes
¡¡! ,
;
¡¡, -
}
¬¬ 
returnValue
√√ 
.
√√  
Remove
√√  &
(
√√& '
$num
√√' (
,
√√( )
$num
√√* +
)
√√+ ,
;
√√, -
}
ƒƒ 
else
≈≈ 
if
≈≈ 
(
≈≈ 
fFormat
≈≈  
==
≈≈! #
FFormat
≈≈$ +
.
≈≈+ ,
BL
≈≈, .
)
≈≈. /
{
∆∆ 
for
«« 
(
«« 
int
«« 
i
«« 
=
««  
$num
««! "
;
««" #
i
««$ %
<
««& '
length
««( .
;
««. /
i
««0 1
++
««1 3
)
««3 4
{
»» 
returnValue
…… #
.
……# $
Append
……$ *
(
……* +
$char
……+ .
)
……. /
;
……/ 0
returnValue
   #
.
  # $
Append
  $ *
(
  * +
FByteConverter
  + 9
.
  9 :
	toBoolean
  : C
(
  C D
value
  D I
[
  I J
index
  J O
]
  O P
)
  P Q
)
  Q R
;
  R S
index
ÀÀ 
+=
ÀÀ  
formatBytes
ÀÀ! ,
;
ÀÀ, -
}
ÃÃ 
returnValue
ÕÕ 
.
ÕÕ  
Remove
ÕÕ  &
(
ÕÕ& '
$num
ÕÕ' (
,
ÕÕ( )
$num
ÕÕ* +
)
ÕÕ+ ,
;
ÕÕ, -
}
ŒŒ 
else
œœ 
if
œœ 
(
œœ 
fFormat
œœ  
==
œœ! #
FFormat
œœ$ +
.
œœ+ ,
A
œœ, -
||
œœ. 0
fFormat
œœ1 8
==
œœ9 ;
FFormat
œœ< C
.
œœC D
A2
œœD F
)
œœF G
{
–– 
returnValue
—— 
.
——  
Append
——  &
(
——& '
Encoding
——' /
.
——/ 0
Default
——0 7
.
——7 8
	GetString
——8 A
(
——A B
value
——B G
,
——G H
(
——I J
int
——J M
)
——M N
index
——N S
,
——S T
(
——U V
int
——V Y
)
——Y Z
length
——Z `
)
——` a
)
——a b
;
——b c
}
““ 
else
”” 
if
”” 
(
”” 
fFormat
””  
==
””! #
FFormat
””$ +
.
””+ ,
I8
””, .
)
””. /
{
‘‘ 
for
’’ 
(
’’ 
int
’’ 
i
’’ 
=
’’  
$num
’’! "
;
’’" #
i
’’$ %
<
’’& '
length
’’( .
;
’’. /
i
’’0 1
++
’’1 3
)
’’3 4
{
÷÷ 
byteArr
◊◊ 
=
◊◊  !
new
◊◊" %
byte
◊◊& *
[
◊◊* +
formatBytes
◊◊+ 6
]
◊◊6 7
;
◊◊7 8
for
ÿÿ 
(
ÿÿ 
int
ÿÿ  
j
ÿÿ! "
=
ÿÿ# $
$num
ÿÿ% &
;
ÿÿ& '
j
ÿÿ( )
<
ÿÿ* +
formatBytes
ÿÿ, 7
;
ÿÿ7 8
j
ÿÿ9 :
++
ÿÿ: <
)
ÿÿ< =
{
ŸŸ 
byteArr
⁄⁄ #
[
⁄⁄# $
j
⁄⁄$ %
]
⁄⁄% &
=
⁄⁄' (
value
⁄⁄) .
[
⁄⁄. /
index
⁄⁄/ 4
+
⁄⁄5 6
j
⁄⁄7 8
]
⁄⁄8 9
;
⁄⁄9 :
}
€€ 
returnValue
ﬂﬂ #
.
ﬂﬂ# $
Append
ﬂﬂ$ *
(
ﬂﬂ* +
$char
ﬂﬂ+ .
)
ﬂﬂ. /
;
ﬂﬂ/ 0
returnValue
‡‡ #
.
‡‡# $
Append
‡‡$ *
(
‡‡* +
FByteConverter
‡‡+ 9
.
‡‡9 :
toInt64
‡‡: A
(
‡‡A B
byteArr
‡‡B I
,
‡‡I J
true
‡‡K O
)
‡‡O P
)
‡‡P Q
;
‡‡Q R
index
·· 
+=
··  
formatBytes
··! ,
;
··, -
}
‚‚ 
returnValue
„„ 
.
„„  
Remove
„„  &
(
„„& '
$num
„„' (
,
„„( )
$num
„„* +
)
„„+ ,
;
„„, -
}
‰‰ 
else
ÂÂ 
if
ÂÂ 
(
ÂÂ 
fFormat
ÂÂ  
==
ÂÂ! #
FFormat
ÂÂ$ +
.
ÂÂ+ ,
I4
ÂÂ, .
)
ÂÂ. /
{
ÊÊ 
for
ÁÁ 
(
ÁÁ 
int
ÁÁ 
i
ÁÁ 
=
ÁÁ  
$num
ÁÁ! "
;
ÁÁ" #
i
ÁÁ$ %
<
ÁÁ& '
length
ÁÁ( .
;
ÁÁ. /
i
ÁÁ0 1
++
ÁÁ1 3
)
ÁÁ3 4
{
ËË 
byteArr
ÈÈ 
=
ÈÈ  !
new
ÈÈ" %
byte
ÈÈ& *
[
ÈÈ* +
formatBytes
ÈÈ+ 6
]
ÈÈ6 7
;
ÈÈ7 8
for
ÍÍ 
(
ÍÍ 
int
ÍÍ  
j
ÍÍ! "
=
ÍÍ# $
$num
ÍÍ% &
;
ÍÍ& '
j
ÍÍ( )
<
ÍÍ* +
formatBytes
ÍÍ, 7
;
ÍÍ7 8
j
ÍÍ9 :
++
ÍÍ: <
)
ÍÍ< =
{
ÎÎ 
byteArr
ÏÏ #
[
ÏÏ# $
j
ÏÏ$ %
]
ÏÏ% &
=
ÏÏ' (
value
ÏÏ) .
[
ÏÏ. /
index
ÏÏ/ 4
+
ÏÏ5 6
j
ÏÏ7 8
]
ÏÏ8 9
;
ÏÏ9 :
}
ÌÌ 
returnValue
ÒÒ #
.
ÒÒ# $
Append
ÒÒ$ *
(
ÒÒ* +
$char
ÒÒ+ .
)
ÒÒ. /
;
ÒÒ/ 0
returnValue
ÚÚ #
.
ÚÚ# $
Append
ÚÚ$ *
(
ÚÚ* +
FByteConverter
ÚÚ+ 9
.
ÚÚ9 :
toInt32
ÚÚ: A
(
ÚÚA B
byteArr
ÚÚB I
,
ÚÚI J
true
ÚÚK O
)
ÚÚO P
)
ÚÚP Q
;
ÚÚQ R
index
ÛÛ 
+=
ÛÛ  
formatBytes
ÛÛ! ,
;
ÛÛ, -
}
ÙÙ 
returnValue
ıı 
.
ıı  
Remove
ıı  &
(
ıı& '
$num
ıı' (
,
ıı( )
$num
ıı* +
)
ıı+ ,
;
ıı, -
}
ˆˆ 
else
˜˜ 
if
˜˜ 
(
˜˜ 
fFormat
˜˜  
==
˜˜! #
FFormat
˜˜$ +
.
˜˜+ ,
I2
˜˜, .
)
˜˜. /
{
¯¯ 
for
˘˘ 
(
˘˘ 
int
˘˘ 
i
˘˘ 
=
˘˘  
$num
˘˘! "
;
˘˘" #
i
˘˘$ %
<
˘˘& '
length
˘˘( .
;
˘˘. /
i
˘˘0 1
++
˘˘1 3
)
˘˘3 4
{
˙˙ 
byteArr
˚˚ 
=
˚˚  !
new
˚˚" %
byte
˚˚& *
[
˚˚* +
formatBytes
˚˚+ 6
]
˚˚6 7
;
˚˚7 8
for
¸¸ 
(
¸¸ 
int
¸¸  
j
¸¸! "
=
¸¸# $
$num
¸¸% &
;
¸¸& '
j
¸¸( )
<
¸¸* +
formatBytes
¸¸, 7
;
¸¸7 8
j
¸¸9 :
++
¸¸: <
)
¸¸< =
{
˝˝ 
byteArr
˛˛ #
[
˛˛# $
j
˛˛$ %
]
˛˛% &
=
˛˛' (
value
˛˛) .
[
˛˛. /
index
˛˛/ 4
+
˛˛5 6
j
˛˛7 8
]
˛˛8 9
;
˛˛9 :
}
ˇˇ 
returnValue
ÉÉ #
.
ÉÉ# $
Append
ÉÉ$ *
(
ÉÉ* +
$char
ÉÉ+ .
)
ÉÉ. /
;
ÉÉ/ 0
returnValue
ÑÑ #
.
ÑÑ# $
Append
ÑÑ$ *
(
ÑÑ* +
FByteConverter
ÑÑ+ 9
.
ÑÑ9 :
toInt16
ÑÑ: A
(
ÑÑA B
byteArr
ÑÑB I
,
ÑÑI J
true
ÑÑK O
)
ÑÑO P
)
ÑÑP Q
;
ÑÑQ R
index
ÖÖ 
+=
ÖÖ  
formatBytes
ÖÖ! ,
;
ÖÖ, -
}
ÜÜ 
returnValue
áá 
.
áá  
Remove
áá  &
(
áá& '
$num
áá' (
,
áá( )
$num
áá* +
)
áá+ ,
;
áá, -
}
àà 
else
ââ 
if
ââ 
(
ââ 
fFormat
ââ  
==
ââ! #
FFormat
ââ$ +
.
ââ+ ,
I1
ââ, .
)
ââ. /
{
ää 
for
ãã 
(
ãã 
int
ãã 
i
ãã 
=
ãã  
$num
ãã! "
;
ãã" #
i
ãã$ %
<
ãã& '
length
ãã( .
;
ãã. /
i
ãã0 1
++
ãã1 3
)
ãã3 4
{
åå 
returnValue
çç #
.
çç# $
Append
çç$ *
(
çç* +
$char
çç+ .
)
çç. /
;
çç/ 0
returnValue
éé #
.
éé# $
Append
éé$ *
(
éé* +
value
éé+ 0
[
éé0 1
index
éé1 6
]
éé6 7
)
éé7 8
;
éé8 9
index
èè 
+=
èè  
formatBytes
èè! ,
;
èè, -
}
êê 
returnValue
ëë 
.
ëë  
Remove
ëë  &
(
ëë& '
$num
ëë' (
,
ëë( )
$num
ëë* +
)
ëë+ ,
;
ëë, -
}
íí 
else
ìì 
if
ìì 
(
ìì 
fFormat
ìì  
==
ìì! #
FFormat
ìì$ +
.
ìì+ ,
F8
ìì, .
)
ìì. /
{
îî 
for
ïï 
(
ïï 
int
ïï 
i
ïï 
=
ïï  
$num
ïï! "
;
ïï" #
i
ïï$ %
<
ïï& '
length
ïï( .
;
ïï. /
i
ïï0 1
++
ïï1 3
)
ïï3 4
{
ññ 
byteArr
óó 
=
óó  !
new
óó" %
byte
óó& *
[
óó* +
formatBytes
óó+ 6
]
óó6 7
;
óó7 8
for
òò 
(
òò 
int
òò  
j
òò! "
=
òò# $
$num
òò% &
;
òò& '
j
òò( )
<
òò* +
formatBytes
òò, 7
;
òò7 8
j
òò9 :
++
òò: <
)
òò< =
{
ôô 
byteArr
öö #
[
öö# $
j
öö$ %
]
öö% &
=
öö' (
value
öö) .
[
öö. /
index
öö/ 4
+
öö5 6
j
öö7 8
]
öö8 9
;
öö9 :
}
õõ 
returnValue
üü #
.
üü# $
Append
üü$ *
(
üü* +
$char
üü+ .
)
üü. /
;
üü/ 0
returnValue
†† #
.
††# $
Append
††$ *
(
††* +
FByteConverter
††+ 9
.
††9 :
toFloat8
††: B
(
††B C
byteArr
††C J
,
††J K
true
††L P
)
††P Q
)
††Q R
;
††R S
index
°° 
+=
°°  
formatBytes
°°! ,
;
°°, -
}
¢¢ 
returnValue
££ 
.
££  
Remove
££  &
(
££& '
$num
££' (
,
££( )
$num
££* +
)
££+ ,
;
££, -
}
§§ 
else
•• 
if
•• 
(
•• 
fFormat
••  
==
••! #
FFormat
••$ +
.
••+ ,
F4
••, .
)
••. /
{
¶¶ 
for
ßß 
(
ßß 
int
ßß 
i
ßß 
=
ßß  
$num
ßß! "
;
ßß" #
i
ßß$ %
<
ßß& '
length
ßß( .
;
ßß. /
i
ßß0 1
++
ßß1 3
)
ßß3 4
{
®® 
byteArr
©© 
=
©©  !
new
©©" %
byte
©©& *
[
©©* +
formatBytes
©©+ 6
]
©©6 7
;
©©7 8
for
™™ 
(
™™ 
int
™™  
j
™™! "
=
™™# $
$num
™™% &
;
™™& '
j
™™( )
<
™™* +
formatBytes
™™, 7
;
™™7 8
j
™™9 :
++
™™: <
)
™™< =
{
´´ 
byteArr
¨¨ #
[
¨¨# $
j
¨¨$ %
]
¨¨% &
=
¨¨' (
value
¨¨) .
[
¨¨. /
index
¨¨/ 4
+
¨¨5 6
j
¨¨7 8
]
¨¨8 9
;
¨¨9 :
}
≠≠ 
returnValue
±± #
.
±±# $
Append
±±$ *
(
±±* +
$char
±±+ .
)
±±. /
;
±±/ 0
returnValue
≤≤ #
.
≤≤# $
Append
≤≤$ *
(
≤≤* +
FByteConverter
≤≤+ 9
.
≤≤9 :
toFloat4
≤≤: B
(
≤≤B C
byteArr
≤≤C J
,
≤≤J K
true
≤≤L P
)
≤≤P Q
)
≤≤Q R
;
≤≤R S
index
≥≥ 
+=
≥≥  
formatBytes
≥≥! ,
;
≥≥, -
}
¥¥ 
returnValue
µµ 
.
µµ  
Remove
µµ  &
(
µµ& '
$num
µµ' (
,
µµ( )
$num
µµ* +
)
µµ+ ,
;
µµ, -
}
∂∂ 
else
∑∑ 
if
∑∑ 
(
∑∑ 
fFormat
∑∑  
==
∑∑! #
FFormat
∑∑$ +
.
∑∑+ ,
U8
∑∑, .
)
∑∑. /
{
∏∏ 
for
ππ 
(
ππ 
int
ππ 
i
ππ 
=
ππ  
$num
ππ! "
;
ππ" #
i
ππ$ %
<
ππ& '
length
ππ( .
;
ππ. /
i
ππ0 1
++
ππ1 3
)
ππ3 4
{
∫∫ 
byteArr
ªª 
=
ªª  !
new
ªª" %
byte
ªª& *
[
ªª* +
formatBytes
ªª+ 6
]
ªª6 7
;
ªª7 8
for
ºº 
(
ºº 
int
ºº  
j
ºº! "
=
ºº# $
$num
ºº% &
;
ºº& '
j
ºº( )
<
ºº* +
formatBytes
ºº, 7
;
ºº7 8
j
ºº9 :
++
ºº: <
)
ºº< =
{
ΩΩ 
byteArr
ææ #
[
ææ# $
j
ææ$ %
]
ææ% &
=
ææ' (
value
ææ) .
[
ææ. /
index
ææ/ 4
+
ææ5 6
j
ææ7 8
]
ææ8 9
;
ææ9 :
}
øø 
returnValue
√√ #
.
√√# $
Append
√√$ *
(
√√* +
$char
√√+ .
)
√√. /
;
√√/ 0
returnValue
ƒƒ #
.
ƒƒ# $
Append
ƒƒ$ *
(
ƒƒ* +
FByteConverter
ƒƒ+ 9
.
ƒƒ9 :
toUInt64
ƒƒ: B
(
ƒƒB C
byteArr
ƒƒC J
,
ƒƒJ K
true
ƒƒL P
)
ƒƒP Q
)
ƒƒQ R
;
ƒƒR S
index
≈≈ 
+=
≈≈  
formatBytes
≈≈! ,
;
≈≈, -
}
∆∆ 
returnValue
«« 
.
««  
Remove
««  &
(
««& '
$num
««' (
,
««( )
$num
««* +
)
««+ ,
;
««, -
}
»» 
else
…… 
if
…… 
(
…… 
fFormat
……  
==
……! #
FFormat
……$ +
.
……+ ,
U4
……, .
)
……. /
{
   
for
ÀÀ 
(
ÀÀ 
int
ÀÀ 
i
ÀÀ 
=
ÀÀ  
$num
ÀÀ! "
;
ÀÀ" #
i
ÀÀ$ %
<
ÀÀ& '
length
ÀÀ( .
;
ÀÀ. /
i
ÀÀ0 1
++
ÀÀ1 3
)
ÀÀ3 4
{
ÃÃ 
byteArr
ÕÕ 
=
ÕÕ  !
new
ÕÕ" %
byte
ÕÕ& *
[
ÕÕ* +
formatBytes
ÕÕ+ 6
]
ÕÕ6 7
;
ÕÕ7 8
for
ŒŒ 
(
ŒŒ 
int
ŒŒ  
j
ŒŒ! "
=
ŒŒ# $
$num
ŒŒ% &
;
ŒŒ& '
j
ŒŒ( )
<
ŒŒ* +
formatBytes
ŒŒ, 7
;
ŒŒ7 8
j
ŒŒ9 :
++
ŒŒ: <
)
ŒŒ< =
{
œœ 
byteArr
–– #
[
––# $
j
––$ %
]
––% &
=
––' (
value
––) .
[
––. /
index
––/ 4
+
––5 6
j
––7 8
]
––8 9
;
––9 :
}
—— 
returnValue
’’ #
.
’’# $
Append
’’$ *
(
’’* +
$char
’’+ .
)
’’. /
;
’’/ 0
returnValue
÷÷ #
.
÷÷# $
Append
÷÷$ *
(
÷÷* +
FByteConverter
÷÷+ 9
.
÷÷9 :
toUInt32
÷÷: B
(
÷÷B C
byteArr
÷÷C J
,
÷÷J K
true
÷÷L P
)
÷÷P Q
)
÷÷Q R
;
÷÷R S
index
◊◊ 
+=
◊◊  
formatBytes
◊◊! ,
;
◊◊, -
}
ÿÿ 
returnValue
ŸŸ 
.
ŸŸ  
Remove
ŸŸ  &
(
ŸŸ& '
$num
ŸŸ' (
,
ŸŸ( )
$num
ŸŸ* +
)
ŸŸ+ ,
;
ŸŸ, -
}
⁄⁄ 
else
€€ 
if
€€ 
(
€€ 
fFormat
€€  
==
€€! #
FFormat
€€$ +
.
€€+ ,
U2
€€, .
)
€€. /
{
‹‹ 
for
›› 
(
›› 
int
›› 
i
›› 
=
››  
$num
››! "
;
››" #
i
››$ %
<
››& '
length
››( .
;
››. /
i
››0 1
++
››1 3
)
››3 4
{
ﬁﬁ 
byteArr
ﬂﬂ 
=
ﬂﬂ  !
new
ﬂﬂ" %
byte
ﬂﬂ& *
[
ﬂﬂ* +
formatBytes
ﬂﬂ+ 6
]
ﬂﬂ6 7
;
ﬂﬂ7 8
for
‡‡ 
(
‡‡ 
int
‡‡  
j
‡‡! "
=
‡‡# $
$num
‡‡% &
;
‡‡& '
j
‡‡( )
<
‡‡* +
formatBytes
‡‡, 7
;
‡‡7 8
j
‡‡9 :
++
‡‡: <
)
‡‡< =
{
·· 
byteArr
‚‚ #
[
‚‚# $
j
‚‚$ %
]
‚‚% &
=
‚‚' (
value
‚‚) .
[
‚‚. /
index
‚‚/ 4
+
‚‚5 6
j
‚‚7 8
]
‚‚8 9
;
‚‚9 :
}
„„ 
returnValue
ÁÁ #
.
ÁÁ# $
Append
ÁÁ$ *
(
ÁÁ* +
$char
ÁÁ+ .
)
ÁÁ. /
;
ÁÁ/ 0
returnValue
ËË #
.
ËË# $
Append
ËË$ *
(
ËË* +
FByteConverter
ËË+ 9
.
ËË9 :
toUInt16
ËË: B
(
ËËB C
byteArr
ËËC J
,
ËËJ K
true
ËËL P
)
ËËP Q
)
ËËQ R
;
ËËR S
index
ÈÈ 
+=
ÈÈ  
formatBytes
ÈÈ! ,
;
ÈÈ, -
}
ÍÍ 
returnValue
ÎÎ 
.
ÎÎ  
Remove
ÎÎ  &
(
ÎÎ& '
$num
ÎÎ' (
,
ÎÎ( )
$num
ÎÎ* +
)
ÎÎ+ ,
;
ÎÎ, -
}
ÏÏ 
else
ÌÌ 
if
ÌÌ 
(
ÌÌ 
fFormat
ÌÌ  
==
ÌÌ! #
FFormat
ÌÌ$ +
.
ÌÌ+ ,
U1
ÌÌ, .
)
ÌÌ. /
{
ÓÓ 
for
ÔÔ 
(
ÔÔ 
int
ÔÔ 
i
ÔÔ 
=
ÔÔ  
$num
ÔÔ! "
;
ÔÔ" #
i
ÔÔ$ %
<
ÔÔ& '
length
ÔÔ( .
;
ÔÔ. /
i
ÔÔ0 1
++
ÔÔ1 3
)
ÔÔ3 4
{
 
returnValue
ÒÒ #
.
ÒÒ# $
Append
ÒÒ$ *
(
ÒÒ* +
$char
ÒÒ+ .
)
ÒÒ. /
;
ÒÒ/ 0
returnValue
ÚÚ #
.
ÚÚ# $
Append
ÚÚ$ *
(
ÚÚ* +
value
ÚÚ+ 0
[
ÚÚ0 1
index
ÚÚ1 6
]
ÚÚ6 7
)
ÚÚ7 8
;
ÚÚ8 9
index
ÛÛ 
+=
ÛÛ  
formatBytes
ÛÛ! ,
;
ÛÛ, -
}
ÙÙ 
returnValue
ıı 
.
ıı  
Remove
ıı  &
(
ıı& '
$num
ıı' (
,
ıı( )
$num
ıı* +
)
ıı+ ,
;
ıı, -
}
ˆˆ 
else
˜˜ 
if
˜˜ 
(
˜˜ 
fFormat
˜˜  
==
˜˜! #
FFormat
˜˜$ +
.
˜˜+ ,
J8
˜˜, .
)
˜˜. /
{
¯¯ 
for
˘˘ 
(
˘˘ 
int
˘˘ 
i
˘˘ 
=
˘˘  
$num
˘˘! "
;
˘˘" #
i
˘˘$ %
<
˘˘& '
length
˘˘( .
;
˘˘. /
i
˘˘0 1
++
˘˘1 3
)
˘˘3 4
{
˙˙ 
if
˚˚ 
(
˚˚ 
value
˚˚ !
[
˚˚! "
index
˚˚" '
]
˚˚' (
==
˚˚) +
$num
˚˚, 0
)
˚˚0 1
{
¸¸ 
returnValue
˝˝ '
.
˝˝' (
Append
˝˝( .
(
˝˝. /
$str
˝˝/ 3
)
˝˝3 4
;
˝˝4 5
}
˛˛ 
else
ˇˇ 
if
ˇˇ 
(
ˇˇ  !
value
ˇˇ! &
[
ˇˇ& '
index
ˇˇ' ,
]
ˇˇ, -
==
ˇˇ. 0
$num
ˇˇ1 5
)
ˇˇ5 6
{
ÄÄ 
returnValue
ÅÅ '
.
ÅÅ' (
Append
ÅÅ( .
(
ÅÅ. /
$str
ÅÅ/ 3
)
ÅÅ3 4
;
ÅÅ4 5
}
ÇÇ 
else
ÉÉ 
{
ÑÑ 
returnValue
ÖÖ '
.
ÖÖ' (
Append
ÖÖ( .
(
ÖÖ. /
(
ÖÖ/ 0
char
ÖÖ0 4
)
ÖÖ4 5
value
ÖÖ5 :
[
ÖÖ: ;
index
ÖÖ; @
]
ÖÖ@ A
)
ÖÖA B
;
ÖÖB C
}
ÜÜ 
index
áá 
+=
áá  
formatBytes
áá! ,
;
áá, -
}
àà 
}
ââ 
return
ää 
returnValue
ää "
.
ää" #
ToString
ää# +
(
ää+ ,
)
ää, -
;
ää- .
}
ãã 
catch
åå 
(
åå 
	Exception
åå 
ex
åå 
)
åå  
{
çç 
FDebug
éé 
.
éé 
throwException
éé %
(
éé% &
ex
éé& (
)
éé( )
;
éé) *
}
èè 
finally
êê 
{
ëë 
returnValue
íí 
=
íí 
null
íí "
;
íí" #
byteArr
ìì 
=
ìì 
null
ìì 
;
ìì 
}
îî 
return
ïï 
string
ïï 
.
ïï 
Empty
ïï 
;
ïï  
}
ññ 	
public
öö 
static
öö 
byte
öö 
[
öö 
]
öö !
getStringToBinValue
öö 0
(
öö0 1
FFormat
õõ 
fFormat
õõ 
,
õõ 
string
úú 
value
úú 
,
úú 
ref
ùù 
UInt32
ùù 
length
ùù 
)
ûû 
{
üü 	
string
†† 
[
†† 
]
†† 
arrVal
†† 
=
†† 
null
†† "
;
††" #
List
°° 
<
°° 
byte
°° 
>
°° 
binValue
°° 
=
°°  !
null
°°" &
;
°°& '
try
££ 
{
§§ 
if
•• 
(
•• 
value
•• 
==
•• 
string
•• #
.
••# $
Empty
••$ )
)
••) *
{
¶¶ 
length
ßß 
=
ßß 
$num
ßß 
;
ßß 
return
®® 
null
®® 
;
®®  
}
©© 
binValue
≠≠ 
=
≠≠ 
new
≠≠ 
List
≠≠ #
<
≠≠# $
byte
≠≠$ (
>
≠≠( )
(
≠≠) *
)
≠≠* +
;
≠≠+ ,
if
ØØ 
(
ØØ 
fFormat
ØØ 
!=
ØØ 
FFormat
ØØ &
.
ØØ& '
A
ØØ' (
&&
ØØ) +
fFormat
ØØ, 3
!=
ØØ4 6
FFormat
ØØ7 >
.
ØØ> ?
A2
ØØ? A
)
ØØA B
{
∞∞ 
arrVal
±± 
=
±± 
value
±± "
.
±±" #
Split
±±# (
(
±±( )
new
±±) ,
char
±±- 1
[
±±1 2
]
±±2 3
{
±±4 5
$char
±±6 9
}
±±: ;
,
±±; < 
StringSplitOptions
±±= O
.
±±O P 
RemoveEmptyEntries
±±P b
)
±±b c
;
±±c d
}
≤≤ 
if
∂∂ 
(
∂∂ 
fFormat
∂∂ 
==
∂∂ 
FFormat
∂∂ &
.
∂∂& '
L
∂∂' (
)
∂∂( )
{
∑∑ 
length
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
return
ππ 
null
ππ 
;
ππ  
}
∫∫ 
else
ªª 
if
ªª 
(
ªª 
fFormat
ªª  
==
ªª! #
FFormat
ªª$ +
.
ªª+ ,
B
ªª, -
)
ªª- .
{
ºº 
length
ΩΩ 
=
ΩΩ 
(
ΩΩ 
UInt32
ΩΩ $
)
ΩΩ$ %
arrVal
ΩΩ% +
.
ΩΩ+ ,
Length
ΩΩ, 2
;
ΩΩ2 3
foreach
ææ 
(
ææ 
string
ææ #
v
ææ$ %
in
ææ& (
arrVal
ææ) /
)
ææ/ 0
{
øø 
binValue
¿¿  
.
¿¿  !
Add
¿¿! $
(
¿¿$ %
byte
¿¿% )
.
¿¿) *
Parse
¿¿* /
(
¿¿/ 0
v
¿¿0 1
,
¿¿1 2
System
¿¿3 9
.
¿¿9 :
Globalization
¿¿: G
.
¿¿G H
NumberStyles
¿¿H T
.
¿¿T U
	HexNumber
¿¿U ^
)
¿¿^ _
)
¿¿_ `
;
¿¿` a
}
¡¡ 
}
¬¬ 
else
√√ 
if
√√ 
(
√√ 
fFormat
√√  
==
√√! #
FFormat
√√$ +
.
√√+ ,
BL
√√, .
)
√√. /
{
ƒƒ 
length
≈≈ 
=
≈≈ 
(
≈≈ 
UInt32
≈≈ $
)
≈≈$ %
arrVal
≈≈% +
.
≈≈+ ,
Length
≈≈, 2
;
≈≈2 3
foreach
∆∆ 
(
∆∆ 
string
∆∆ #
v
∆∆$ %
in
∆∆& (
arrVal
∆∆) /
)
∆∆/ 0
{
«« 
if
»» 
(
»» 
v
»» 
.
»» 
ToUpper
»» %
(
»»% &
)
»»& '
==
»»( *
$str
»»+ 1
)
»»1 2
{
…… 
binValue
   $
.
  $ %
Add
  % (
(
  ( )
$num
  ) -
)
  - .
;
  . /
}
ÀÀ 
else
ÃÃ 
{
ÕÕ 
binValue
ŒŒ $
.
ŒŒ$ %
Add
ŒŒ% (
(
ŒŒ( )
$num
ŒŒ) -
)
ŒŒ- .
;
ŒŒ. /
}
œœ 
}
–– 
}
—— 
else
““ 
if
““ 
(
““ 
fFormat
““  
==
““! #
FFormat
““$ +
.
““+ ,
A
““, -
||
““. 0
fFormat
““1 8
==
““9 ;
FFormat
““< C
.
““C D
A2
““D F
)
““F G
{
”” 
length
‘‘ 
=
‘‘ 
(
‘‘ 
UInt32
‘‘ $
)
‘‘$ %
Encoding
‘‘% -
.
‘‘- .
Default
‘‘. 5
.
‘‘5 6
GetByteCount
‘‘6 B
(
‘‘B C
value
‘‘C H
)
‘‘H I
;
‘‘I J
binValue
’’ 
.
’’ 
AddRange
’’ %
(
’’% &
Encoding
’’& .
.
’’. /
Default
’’/ 6
.
’’6 7
GetBytes
’’7 ?
(
’’? @
value
’’@ E
)
’’E F
)
’’F G
;
’’G H
}
÷÷ 
else
◊◊ 
if
◊◊ 
(
◊◊ 
fFormat
◊◊  
==
◊◊! #
FFormat
◊◊$ +
.
◊◊+ ,
I8
◊◊, .
)
◊◊. /
{
ÿÿ 
length
ŸŸ 
=
ŸŸ 
(
ŸŸ 
UInt32
ŸŸ $
)
ŸŸ$ %
arrVal
ŸŸ% +
.
ŸŸ+ ,
Length
ŸŸ, 2
;
ŸŸ2 3
foreach
⁄⁄ 
(
⁄⁄ 
string
⁄⁄ #
v
⁄⁄$ %
in
⁄⁄& (
arrVal
⁄⁄) /
)
⁄⁄/ 0
{
€€ 
binValue
‹‹  
.
‹‹  !
AddRange
‹‹! )
(
‹‹) *
FByteConverter
‹‹* 8
.
‹‹8 9
getBytes
‹‹9 A
(
‹‹A B
Convert
‹‹B I
.
‹‹I J
ToInt64
‹‹J Q
(
‹‹Q R
v
‹‹R S
)
‹‹S T
,
‹‹T U
true
‹‹V Z
)
‹‹Z [
)
‹‹[ \
;
‹‹\ ]
}
›› 
}
ﬁﬁ 
else
ﬂﬂ 
if
ﬂﬂ 
(
ﬂﬂ 
fFormat
ﬂﬂ  
==
ﬂﬂ! #
FFormat
ﬂﬂ$ +
.
ﬂﬂ+ ,
I4
ﬂﬂ, .
)
ﬂﬂ. /
{
‡‡ 
length
·· 
=
·· 
(
·· 
UInt32
·· $
)
··$ %
arrVal
··% +
.
··+ ,
Length
··, 2
;
··2 3
foreach
‚‚ 
(
‚‚ 
string
‚‚ #
v
‚‚$ %
in
‚‚& (
arrVal
‚‚) /
)
‚‚/ 0
{
„„ 
binValue
‰‰  
.
‰‰  !
AddRange
‰‰! )
(
‰‰) *
FByteConverter
‰‰* 8
.
‰‰8 9
getBytes
‰‰9 A
(
‰‰A B
Convert
‰‰B I
.
‰‰I J
ToInt32
‰‰J Q
(
‰‰Q R
v
‰‰R S
)
‰‰S T
,
‰‰T U
true
‰‰V Z
)
‰‰Z [
)
‰‰[ \
;
‰‰\ ]
}
ÂÂ 
}
ÊÊ 
else
ÁÁ 
if
ÁÁ 
(
ÁÁ 
fFormat
ÁÁ  
==
ÁÁ! #
FFormat
ÁÁ$ +
.
ÁÁ+ ,
I2
ÁÁ, .
)
ÁÁ. /
{
ËË 
length
ÈÈ 
=
ÈÈ 
(
ÈÈ 
UInt32
ÈÈ $
)
ÈÈ$ %
arrVal
ÈÈ% +
.
ÈÈ+ ,
Length
ÈÈ, 2
;
ÈÈ2 3
foreach
ÍÍ 
(
ÍÍ 
string
ÍÍ #
v
ÍÍ$ %
in
ÍÍ& (
arrVal
ÍÍ) /
)
ÍÍ/ 0
{
ÎÎ 
binValue
ÏÏ  
.
ÏÏ  !
AddRange
ÏÏ! )
(
ÏÏ) *
FByteConverter
ÏÏ* 8
.
ÏÏ8 9
getBytes
ÏÏ9 A
(
ÏÏA B
Convert
ÏÏB I
.
ÏÏI J
ToInt16
ÏÏJ Q
(
ÏÏQ R
v
ÏÏR S
)
ÏÏS T
,
ÏÏT U
true
ÏÏV Z
)
ÏÏZ [
)
ÏÏ[ \
;
ÏÏ\ ]
}
ÌÌ 
}
ÓÓ 
else
ÔÔ 
if
ÔÔ 
(
ÔÔ 
fFormat
ÔÔ  
==
ÔÔ! #
FFormat
ÔÔ$ +
.
ÔÔ+ ,
I1
ÔÔ, .
)
ÔÔ. /
{
 
length
ÒÒ 
=
ÒÒ 
(
ÒÒ 
UInt32
ÒÒ $
)
ÒÒ$ %
arrVal
ÒÒ% +
.
ÒÒ+ ,
Length
ÒÒ, 2
;
ÒÒ2 3
foreach
ÚÚ 
(
ÚÚ 
string
ÚÚ #
v
ÚÚ$ %
in
ÚÚ& (
arrVal
ÚÚ) /
)
ÚÚ/ 0
{
ÛÛ 
binValue
ÙÙ  
.
ÙÙ  !
Add
ÙÙ! $
(
ÙÙ$ %
(
ÙÙ% &
byte
ÙÙ& *
)
ÙÙ* +
sbyte
ÙÙ+ 0
.
ÙÙ0 1
Parse
ÙÙ1 6
(
ÙÙ6 7
v
ÙÙ7 8
)
ÙÙ8 9
)
ÙÙ9 :
;
ÙÙ: ;
}
ıı 
}
ˆˆ 
else
˜˜ 
if
˜˜ 
(
˜˜ 
fFormat
˜˜  
==
˜˜! #
FFormat
˜˜$ +
.
˜˜+ ,
U8
˜˜, .
)
˜˜. /
{
¯¯ 
length
˘˘ 
=
˘˘ 
(
˘˘ 
UInt32
˘˘ $
)
˘˘$ %
arrVal
˘˘% +
.
˘˘+ ,
Length
˘˘, 2
;
˘˘2 3
foreach
˙˙ 
(
˙˙ 
string
˙˙ #
v
˙˙$ %
in
˙˙& (
arrVal
˙˙) /
)
˙˙/ 0
{
˚˚ 
binValue
¸¸  
.
¸¸  !
AddRange
¸¸! )
(
¸¸) *
FByteConverter
¸¸* 8
.
¸¸8 9
getBytes
¸¸9 A
(
¸¸A B
Convert
¸¸B I
.
¸¸I J
ToUInt64
¸¸J R
(
¸¸R S
v
¸¸S T
)
¸¸T U
,
¸¸U V
true
¸¸W [
)
¸¸[ \
)
¸¸\ ]
;
¸¸] ^
}
˝˝ 
}
˛˛ 
else
ˇˇ 
if
ˇˇ 
(
ˇˇ 
fFormat
ˇˇ  
==
ˇˇ! #
FFormat
ˇˇ$ +
.
ˇˇ+ ,
U4
ˇˇ, .
)
ˇˇ. /
{
ÄÄ 
length
ÅÅ 
=
ÅÅ 
(
ÅÅ 
UInt32
ÅÅ $
)
ÅÅ$ %
arrVal
ÅÅ% +
.
ÅÅ+ ,
Length
ÅÅ, 2
;
ÅÅ2 3
foreach
ÇÇ 
(
ÇÇ 
string
ÇÇ #
v
ÇÇ$ %
in
ÇÇ& (
arrVal
ÇÇ) /
)
ÇÇ/ 0
{
ÉÉ 
binValue
ÑÑ  
.
ÑÑ  !
AddRange
ÑÑ! )
(
ÑÑ) *
FByteConverter
ÑÑ* 8
.
ÑÑ8 9
getBytes
ÑÑ9 A
(
ÑÑA B
Convert
ÑÑB I
.
ÑÑI J
ToUInt32
ÑÑJ R
(
ÑÑR S
v
ÑÑS T
)
ÑÑT U
,
ÑÑU V
true
ÑÑW [
)
ÑÑ[ \
)
ÑÑ\ ]
;
ÑÑ] ^
}
ÖÖ 
}
ÜÜ 
else
áá 
if
áá 
(
áá 
fFormat
áá  
==
áá! #
FFormat
áá$ +
.
áá+ ,
U2
áá, .
)
áá. /
{
àà 
length
ââ 
=
ââ 
(
ââ 
UInt32
ââ $
)
ââ$ %
arrVal
ââ% +
.
ââ+ ,
Length
ââ, 2
;
ââ2 3
foreach
ää 
(
ää 
string
ää #
v
ää$ %
in
ää& (
arrVal
ää) /
)
ää/ 0
{
ãã 
binValue
åå  
.
åå  !
AddRange
åå! )
(
åå) *
FByteConverter
åå* 8
.
åå8 9
getBytes
åå9 A
(
ååA B
Convert
ååB I
.
ååI J
ToUInt16
ååJ R
(
ååR S
v
ååS T
)
ååT U
,
ååU V
true
ååW [
)
åå[ \
)
åå\ ]
;
åå] ^
}
çç 
}
éé 
else
èè 
if
èè 
(
èè 
fFormat
èè  
==
èè! #
FFormat
èè$ +
.
èè+ ,
U1
èè, .
)
èè. /
{
êê 
length
ëë 
=
ëë 
(
ëë 
UInt32
ëë $
)
ëë$ %
arrVal
ëë% +
.
ëë+ ,
Length
ëë, 2
;
ëë2 3
foreach
íí 
(
íí 
string
íí #
v
íí$ %
in
íí& (
arrVal
íí) /
)
íí/ 0
{
ìì 
binValue
îî  
.
îî  !
Add
îî! $
(
îî$ %
byte
îî% )
.
îî) *
Parse
îî* /
(
îî/ 0
v
îî0 1
)
îî1 2
)
îî2 3
;
îî3 4
}
ïï 
}
ññ 
else
óó 
if
óó 
(
óó 
fFormat
óó  
==
óó! #
FFormat
óó$ +
.
óó+ ,
F8
óó, .
)
óó. /
{
òò 
length
ôô 
=
ôô 
(
ôô 
UInt32
ôô $
)
ôô$ %
arrVal
ôô% +
.
ôô+ ,
Length
ôô, 2
;
ôô2 3
foreach
öö 
(
öö 
string
öö #
v
öö$ %
in
öö& (
arrVal
öö) /
)
öö/ 0
{
õõ 
binValue
úú  
.
úú  !
AddRange
úú! )
(
úú) *
FByteConverter
úú* 8
.
úú8 9
getBytes
úú9 A
(
úúA B
Convert
úúB I
.
úúI J
ToDouble
úúJ R
(
úúR S
v
úúS T
)
úúT U
,
úúU V
true
úúW [
)
úú[ \
)
úú\ ]
;
úú] ^
}
ùù 
}
ûû 
else
üü 
if
üü 
(
üü 
fFormat
üü  
==
üü! #
FFormat
üü$ +
.
üü+ ,
F4
üü, .
)
üü. /
{
†† 
length
°° 
=
°° 
(
°° 
UInt32
°° $
)
°°$ %
arrVal
°°% +
.
°°+ ,
Length
°°, 2
;
°°2 3
foreach
¢¢ 
(
¢¢ 
string
¢¢ #
v
¢¢$ %
in
¢¢& (
arrVal
¢¢) /
)
¢¢/ 0
{
££ 
binValue
§§  
.
§§  !
AddRange
§§! )
(
§§) *
FByteConverter
§§* 8
.
§§8 9
getBytes
§§9 A
(
§§A B
Convert
§§B I
.
§§I J
ToSingle
§§J R
(
§§R S
v
§§S T
)
§§T U
,
§§U V
true
§§W [
)
§§[ \
)
§§\ ]
;
§§] ^
}
•• 
}
¶¶ 
return
™™ 
binValue
™™ 
.
™™  
ToArray
™™  '
(
™™' (
)
™™( )
;
™™) *
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨ 
ex
¨¨ 
)
¨¨  
{
≠≠ 
FDebug
ÆÆ 
.
ÆÆ 
throwException
ÆÆ %
(
ÆÆ% &
ex
ÆÆ& (
)
ÆÆ( )
;
ÆÆ) *
}
ØØ 
finally
∞∞ 
{
±± 
}
≥≥ 
return
¥¥ 
null
¥¥ 
;
¥¥ 
}
µµ 	
}
ππ 
}∫∫ ÷*
lD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Common\e_FEnum.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

enum 
FConnectMode 
: 
int "
{ 
Active 
, 
Passive 
} 
public 

enum 
FCommunicationState #
:$ %
int& )
{   
Closed!! 
,!! 
Opened"" 
,"" 
	Connected## 
,## 
Selected$$ 
}%% 
public)) 

enum)) 
FEventId)) 
:)) 
int)) 
{** 
None++ 
,++ 
Secs1StateChanged-- 
,-- 
Secs1ErrorRaised.. 
,.. 
Secs1TimeoutRaised// 
,// "
Secs1HandshakeReceived00 
,00 
Secs1HandshakeSent11 
,11 
Secs1BlockReceived22 
,22 
Secs1BlockSent33 
,33 $
Secs1DataMessageReceived44  
,44  ! 
Secs1DataMessageSent55 
,55 0
$Secs1InterceptingDataMessageReceived66 ,
,66, -
HsmsStateChanged88 
,88 
HsmsErrorRaised99 
,99 
HsmsTimeoutRaised:: 
,:: &
HsmsControlMessageReceived;; "
,;;" #"
HsmsControlMessageSent<< 
,<< #
HsmsDataMessageReceived== 
,==  
HsmsDataMessageSent>> 
,>> /
#HsmsInterceptingDataMessageReceived?? +
,??+ ,
LogMonitoringAA 
}BB 
publicFF 

enumFF 
FSecsTimeoutFF 
:FF 
intFF "
{GG 
T1HH 

=HH 
$numHH 
,HH 
T2II 

=II 
$numII 
,II 
T3JJ 

=JJ 
$numJJ 
,JJ 
T4KK 

=KK 
$numKK 
,KK 
T5LL 

=LL 
$numLL 
,LL 
T6MM 

=MM 
$numMM 
,MM 
T7NN 

=NN 
$numNN 
,NN 
T8OO 

=OO 
$numOO 
}PP 
publicTT 

enumTT 
FSecs1HandshakeCodeTT #
:TT$ %
intTT& )
{UU 
ENQVV 
=VV 
$numVV 
,VV 
EOTWW 
=WW 
$numWW 
,WW 
ACKXX 
=XX 
$numXX 
,XX 
NAKYY 
=YY 
$numYY 
}ZZ 
internal^^ 
enum^^ 
FSecs1RecvState^^ !
:^^" #
int^^$ '
{__ 
Enq`` 
,`` 
Eotaa 
,aa 
	Completedbb 
}cc 
internalgg 
enumgg 
FSecs1SendStategg !
:gg" #
intgg$ '
{hh 
Enqii 
,ii 
Eotjj 
,jj 
	Completedkk 
}ll 
publicpp 

enumpp #
FHsmsControlMessageTypepp '
:pp( )
intpp* -
{qq 
	SelectReqrr 
=rr 
$numrr 
,rr 
	SelectRspss 
=ss 
$numss 
,ss 
DeselectReqtt 
=tt 
$numtt 
,tt 
DeselectRspuu 
=uu 
$numuu 
,uu 
LinktestReqvv 
=vv 
$numvv 
,vv 
LinktestRspww 
=ww 
$numww 
,ww 
	RejectReqxx 
=xx 
$numxx 
,xx 
SeparateReqyy 
=yy 
$numyy 
}zz 
public~~ 

enum~~ 
FResultCode~~ 
:~~ 
int~~ !
{ 
Success
ÄÄ 
,
ÄÄ 
Warninig
ÅÅ 
,
ÅÅ 
Error
ÇÇ 
}
ÉÉ 
public
áá 

enum
áá 
FFormat
áá 
:
áá 
int
áá 
{
àà 
L
ââ 	
=
ââ
 
$num
ââ 
,
ââ 
B
ää 	
=
ää
 
$num
ää 
,
ää 
BL
ãã 

=
ãã 
$num
ãã 
,
ãã 
A
åå 	
=
åå
 
$num
åå 
,
åå 
J8
çç 

=
çç 
$num
çç 
,
çç 
A2
éé 

=
éé 
$num
éé 
,
éé 
I8
èè 

=
èè 
$num
èè 
,
èè 
I4
êê 

=
êê 
$num
êê 
,
êê 
I2
ëë 

=
ëë 
$num
ëë 
,
ëë 
I1
íí 

=
íí 
$num
íí 
,
íí 
F8
ìì 

=
ìì 
$num
ìì 
,
ìì 
F4
îî 

=
îî 
$num
îî 
,
îî 
U8
ïï 

=
ïï 
$num
ïï 
,
ïï 
U4
ññ 

=
ññ 
$num
ññ 
,
ññ 
U2
óó 

=
óó 
$num
óó 
,
óó 
U1
òò 

=
òò 
$num
òò 
,
òò 
}
ôô 
}ùù í
pD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Common\d_FDelegate.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

delegate 
void $
FEventRaisedEventHandler 1
(1 2
object2 8
sender9 ?
,? @
FEventArgsBaseA O
eP Q
)Q R
;R S
} ß
oD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Common\c_FSecsTag.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

static 
class 
FSecsTag  
{ 
public 
const 
string 
E_SecsMessage )
=* +
$str, 1
;1 2
public 
const 
string 
A_SessionId '
=( )
$str* -
;- .
public 
const 
string 
A_Stream $
=% &
$str' *
;* +
public 
const 
string 

A_Function &
=' (
$str) ,
;, -
public 
const 
string 
A_WBit "
=# $
$str% (
;( )
public 
const 
string 
A_SystemBytes )
=* +
$str, 0
;0 1
public## 
const## 
string## 

E_SecsItem## &
=##' (
$str##) .
;##. /
public$$ 
const$$ 
string$$ 
A_Format$$ $
=$$% &
$str$$' *
;$$* +
public%% 
const%% 
string%% 
A_Length%% $
=%%% &
$str%%' *
;%%* +
public&& 
const&& 
string&& 
A_Value&& #
=&&$ %
$str&&& )
;&&) *
}** 
}++ ñH
zD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Common\c_FByteConverter.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

static 
class 
FByteConverter &
{ 
public!! 
static!! 
byte!! 
[!! 
]!! 
getBytes!! %
(!!% &
UInt16"" 
value"" 
,"" 
bool## 
	isReverse## 
)$$ 
{%% 	
byte&& 
[&& 
]&& 
buf&& 
=&& 
null&& 
;&& 
try(( 
{)) 
buf** 
=** 
BitConverter** "
.**" #
GetBytes**# +
(**+ ,
value**, 1
)**1 2
;**2 3
if++ 
(++ 
	isReverse++ 
)++ 
{,, 
Array-- 
.-- 
Reverse-- !
(--! "
buf--" %
)--% &
;--& '
}.. 
return// 
buf// 
;// 
}00 
catch11 
(11 
	Exception11 
ex11 
)11  
{22 
FDebug33 
.33 
throwException33 %
(33% &
ex33& (
)33( )
;33) *
}44 
finally55 
{66 
buf77 
=77 
null77 
;77 
}88 
return99 
null99 
;99 
}:: 	
public>> 
static>> 
byte>> 
[>> 
]>> 
getBytes>> %
(>>% &
UInt32?? 
value?? 
,?? 
bool@@ 
	isReverse@@ 
)AA 
{BB 	
byteCC 
[CC 
]CC 
bufCC 
=CC 
nullCC 
;CC 
tryEE 
{FF 
bufGG 
=GG 
BitConverterGG "
.GG" #
GetBytesGG# +
(GG+ ,
valueGG, 1
)GG1 2
;GG2 3
ifHH 
(HH 
	isReverseHH 
)HH 
{II 
ArrayJJ 
.JJ 
ReverseJJ !
(JJ! "
bufJJ" %
)JJ% &
;JJ& '
}KK 
returnLL 
bufLL 
;LL 
}MM 
catchNN 
(NN 
	ExceptionNN 
exNN 
)NN  
{OO 
FDebugPP 
.PP 
throwExceptionPP %
(PP% &
exPP& (
)PP( )
;PP) *
}QQ 
finallyRR 
{SS 
bufTT 
=TT 
nullTT 
;TT 
}UU 
returnVV 
nullVV 
;VV 
}WW 	
public[[ 
static[[ 
byte[[ 
[[[ 
][[ 
getBytes[[ %
([[% &
string\\ 
	byteValue\\ 
)]] 
{^^ 	
List__ 
<__ 
byte__ 
>__ 
buf__ 
=__ 
null__ !
;__! "
tryaa 
{bb 
bufcc 
=cc 
newcc 
Listcc 
<cc 
bytecc #
>cc# $
(cc$ %
)cc% &
;cc& '
ifdd 
(dd 
	byteValuedd 
==dd 
stringdd %
.dd% &
Emptydd& +
)dd+ ,
{ee 
returnff 
nullff 
;ff  
}gg 
foreachii 
(ii 
stringii 
sii  !
inii" $
	byteValueii% .
.ii. /
Splitii/ 4
(ii4 5
$charii5 8
)ii8 9
)ii9 :
{jj 
bufkk 
.kk 
Addkk 
(kk 
Convertkk #
.kk# $
ToBytekk$ *
(kk* +
skk+ ,
,kk, -
$numkk. 0
)kk0 1
)kk1 2
;kk2 3
}ll 
returnmm 
bufmm 
.mm 
ToArraymm "
(mm" #
)mm# $
;mm$ %
}nn 
catchoo 
(oo 
	Exceptionoo 
exoo 
)oo  
{pp 
FDebugqq 
.qq 
throwExceptionqq %
(qq% &
exqq& (
)qq( )
;qq) *
}rr 
finallyss 
{tt 
bufuu 
=uu 
nulluu 
;uu 
}vv 
returnww 
nullww 
;ww 
}xx 	
public|| 
static|| 
string|| 
toString|| %
(||% &
byte}} 
[}} 
]}} 
data}} 
)~~ 
{ 	
StringBuilder
ÄÄ 
val
ÄÄ 
=
ÄÄ 
null
ÄÄ  $
;
ÄÄ$ %
try
ÇÇ 
{
ÉÉ 
val
ÑÑ 
=
ÑÑ 
new
ÑÑ 
StringBuilder
ÑÑ '
(
ÑÑ' (
)
ÑÑ( )
;
ÑÑ) *
if
ÖÖ 
(
ÖÖ 
data
ÖÖ 
==
ÖÖ 
null
ÖÖ  
)
ÖÖ  !
{
ÜÜ 
return
áá 
string
áá !
.
áá! "
Empty
áá" '
;
áá' (
}
àà 
for
åå 
(
åå 
int
åå 
i
åå 
=
åå 
$num
åå 
;
åå 
i
åå  !
<
åå" #
data
åå$ (
.
åå( )
Length
åå) /
;
åå/ 0
i
åå1 2
++
åå2 4
)
åå4 5
{
çç 
val
éé 
.
éé 
Append
éé 
(
éé 
$str
éé "
)
éé" #
;
éé# $
val
èè 
.
èè 
Append
èè 
(
èè 
data
èè #
[
èè# $
i
èè$ %
]
èè% &
.
èè& '
ToString
èè' /
(
èè/ 0
$str
èè0 4
)
èè4 5
)
èè5 6
;
èè6 7
}
êê 
if
íí 
(
íí 
val
íí 
.
íí 
Length
íí 
>
íí  
$num
íí! "
)
íí" #
{
ìì 
val
îî 
.
îî 
Remove
îî 
(
îî 
$num
îî  
,
îî  !
$num
îî" #
)
îî# $
;
îî$ %
}
ïï 
return
ôô 
val
ôô 
.
ôô 
ToString
ôô #
(
ôô# $
)
ôô$ %
;
ôô% &
}
öö 
catch
õõ 
(
õõ 
	Exception
õõ 
ex
õõ 
)
õõ  
{
úú 
FDebug
ùù 
.
ùù 
throwException
ùù %
(
ùù% &
ex
ùù& (
)
ùù( )
;
ùù) *
}
ûû 
finally
üü 
{
†† 
val
°° 
=
°° 
null
°° 
;
°° 
}
¢¢ 
return
££ 
string
££ 
.
££ 
Empty
££ 
;
££  
}
§§ 	
public
®® 
static
®® 
string
®® 
toString
®® %
(
®®% &
byte
©© 
	byteValue
©© 
)
™™ 
{
´´ 	
string
¨¨ 
s
¨¨ 
=
¨¨ 
string
¨¨ 
.
¨¨ 
Empty
¨¨ #
;
¨¨# $
try
ÆÆ 
{
ØØ 
if
∞∞ 
(
∞∞ 
	byteValue
∞∞ 
==
∞∞  

FAsciiByte
∞∞! +
.
∞∞+ ,
LF
∞∞, .
)
∞∞. /
{
±± 
s
≤≤ 
=
≤≤ 
$str
≤≤ 
;
≤≤ 
}
≥≥ 
else
¥¥ 
if
¥¥ 
(
¥¥ 
	byteValue
¥¥ "
==
¥¥# %

FAsciiByte
¥¥& 0
.
¥¥0 1
CR
¥¥1 3
)
¥¥3 4
{
µµ 
s
∂∂ 
=
∂∂ 
$str
∂∂ 
;
∂∂ 
}
∑∑ 
else
∏∏ 
if
∏∏ 
(
∏∏ 
	byteValue
∏∏ "
==
∏∏# %

FAsciiByte
∏∏& 0
.
∏∏0 1
SP
∏∏1 3
)
∏∏3 4
{
ππ 
s
∫∫ 
=
∫∫ 
$str
∫∫ 
;
∫∫ 
}
ªª 
else
ºº 
{
ΩΩ 
s
ææ 
=
ææ 
Encoding
ææ  
.
ææ  !
Default
ææ! (
.
ææ( )
	GetString
ææ) 2
(
ææ2 3
new
ææ3 6
byte
ææ7 ;
[
ææ; <
]
ææ< =
{
ææ> ?
	byteValue
ææ@ I
}
ææJ K
)
ææK L
;
ææL M
}
øø 
return
¡¡ 
s
¡¡ 
;
¡¡ 
}
¬¬ 
catch
√√ 
(
√√ 
	Exception
√√ 
ex
√√ 
)
√√  
{
ƒƒ 
FDebug
≈≈ 
.
≈≈ 
throwException
≈≈ %
(
≈≈% &
ex
≈≈& (
)
≈≈( )
;
≈≈) *
}
∆∆ 
finally
«« 
{
»» 
}
   
return
ÀÀ 
string
ÀÀ 
.
ÀÀ 
Empty
ÀÀ 
;
ÀÀ  
}
ÃÃ 	
}
““ 
}”” ´
vD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Common\c_FConstants.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
internal 
static 
class 

FConstants $
{ 
public 
const 
string 

err_m_0015 &
=' (
$str) >
;> ?
public## 
const## 
string## 

err_m_0016## &
=##' (
$str##) B
;##B C
public** 
const** 
string** 

err_m_0027** &
=**' (
$str**) E
;**E F
public11 
const11 
string11 

err_m_003011 &
=11' (
$str11) N
;11N O
}77 
}88 ú
uD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Common\d_FDelegate.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

delegate 
void $
FEventRaisedEventHandler 1
(1 2
object2 8
sender9 ?
,? @
FEventArgsBaseA O
eP Q
)Q R
;R S
} ù
qD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Common\e_FEnum.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

enum 
FConnectMode 
: 
int "
{ 
Active 
, 
Passive 
} 
public 

enum 
FCommunicationState #
:$ %
int& )
{ 
Closed 
, 
Opened 
, 
	Connected 
}!! 
public%% 

enum%% 
FEventId%% 
:%% 
int%% 
{&& 
None'' 
,'' 
SerialStateChanged)) 
,)) 
SerialErrorRaised** 
,** 
SerialDataReceived++ 
,++ 
SerialDataSent,, 
,,, 
SocketStateChanged.. 
,.. 
SocketErrorRaised// 
,// 
SocketTimeoutRaised00 
,00 
SocketDataReceived11 
,11 
SocketDataSent22 
,22  
SocketDataSendFailed33 
,33 
LogMonitoring55 
}66 
public:: 

enum:: 
FResultCode:: 
::: 
int:: !
{;; 
Success<< 
,<< 
Warninig== 
,== 
Error>> 
}?? 
}CC ·n
yD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Config\c_FSocketConfig.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

class 
FSocketConfig 
: 
IDisposable  +
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSerialToEthernet !
m_fSerialToEthernet" 5
=6 7
null8 <
;< =
private 
FConnectMode 
m_fConnectMode +
=, -
FConnectMode. :
.: ;
Passive; B
;B C
private 
string 
	m_localIp  
=! "
$str# .
;. /
private 
int 
m_localPort 
=  !
$num" &
;& '
private 
string 

m_remoteIp !
=" #
$str$ /
;/ 0
private 
int 
m_remotePort  
=! "
$num# '
;' (
private   
int    
m_retryConnectPeriod   (
=  ) *
$num  + -
;  - .
internal&& 
FSocketConfig&& 
(&& 
FSerialToEthernet'' 
fSerialToEthernet'' /
)(( 
{)) 	
m_fSerialToEthernet** 
=**  !
fSerialToEthernet**" 3
;**3 4
}++ 	
~// 	
FSocketConfig//	 
(// 
)00 
{11 	
	myDispose22 
(22 
false22 
)22 
;22 
}33 	
	protected77 
void77 
	myDispose77  
(77  !
bool88 
	disposing88 
)99 
{:: 	
if;; 
(;; 
!;; 

m_disposed;; 
);; 
{<< 
if== 
(== 
	disposing== 
)== 
{>> 
m_fSerialToEthernet?? '
=??( )
null??* .
;??. /
}@@ 

m_disposedBB 
=BB 
trueBB !
;BB! "
}CC 
}DD 	
publicLL 
voidLL 
DisposeLL 
(LL 
)MM 
{NN 	
	myDisposeOO 
(OO 
trueOO 
)OO 
;OO 
GCPP 
.PP 
SuppressFinalizePP 
(PP  
thisPP  $
)PP$ %
;PP% &
}QQ 	
publicYY 
FConnectModeYY 
fConnectModeYY (
{ZZ 	
get[[ 
{\\ 
try]] 
{^^ 
return__ 
m_fConnectMode__ )
;__) *
}`` 
catchaa 
(aa 
	Exceptionaa  
exaa! #
)aa# $
{bb 
FDebugcc 
.cc 
throwExceptioncc )
(cc) *
excc* ,
)cc, -
;cc- .
}dd 
finallyee 
{ff 
}hh 
returnii 
FConnectModeii #
.ii# $
Passiveii$ +
;ii+ ,
}jj 
setll 
{mm 
trynn 
{oo 
validateStatepp !
(pp! "
)pp" #
;pp# $
m_fConnectModerr "
=rr# $
valuerr% *
;rr* +
}ss 
catchtt 
(tt 
	Exceptiontt  
extt! #
)tt# $
{uu 
FDebugvv 
.vv 
throwExceptionvv )
(vv) *
exvv* ,
)vv, -
;vv- .
}ww 
finallyxx 
{yy 
}{{ 
}|| 
}}} 	
public
ÅÅ 
string
ÅÅ 
localIp
ÅÅ 
{
ÇÇ 	
get
ÉÉ 
{
ÑÑ 
try
ÖÖ 
{
ÜÜ 
return
áá 
	m_localIp
áá $
;
áá$ %
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ  
ex
ââ! #
)
ââ# $
{
ää 
FDebug
ãã 
.
ãã 
throwException
ãã )
(
ãã) *
ex
ãã* ,
)
ãã, -
;
ãã- .
}
åå 
finally
çç 
{
éé 
}
êê 
return
ëë 
string
ëë 
.
ëë 
Empty
ëë #
;
ëë# $
}
íí 
set
îî 
{
ïï 
try
ññ 
{
óó 
validateState
òò !
(
òò! "
)
òò" #
;
òò# $
if
öö 
(
öö 
value
öö 
.
öö 
Trim
öö "
(
öö" #
)
öö# $
==
öö% '
string
öö( .
.
öö. /
Empty
öö/ 4
)
öö4 5
{
õõ 
FDebug
úú 
.
úú 
throwFException
úú .
(
úú. /
string
úú/ 5
.
úú5 6
Format
úú6 <
(
úú< =

FConstants
úú= G
.
úúG H

err_m_0015
úúH R
,
úúR S
$str
úúT ^
)
úú^ _
)
úú_ `
;
úú` a
}
ùù 
	m_localIp
üü 
=
üü 
value
üü  %
;
üü% &
}
†† 
catch
°° 
(
°° 
	Exception
°°  
ex
°°! #
)
°°# $
{
¢¢ 
FDebug
££ 
.
££ 
throwException
££ )
(
££) *
ex
££* ,
)
££, -
;
££- .
}
§§ 
finally
•• 
{
¶¶ 
}
®® 
}
©© 
}
™™ 	
public
ÆÆ 
int
ÆÆ 
	localPort
ÆÆ 
{
ØØ 	
get
∞∞ 
{
±± 
try
≤≤ 
{
≥≥ 
return
¥¥ 
m_localPort
¥¥ &
;
¥¥& '
}
µµ 
catch
∂∂ 
(
∂∂ 
	Exception
∂∂  
ex
∂∂! #
)
∂∂# $
{
∑∑ 
FDebug
∏∏ 
.
∏∏ 
throwException
∏∏ )
(
∏∏) *
ex
∏∏* ,
)
∏∏, -
;
∏∏- .
}
ππ 
finally
∫∫ 
{
ªª 
}
ΩΩ 
return
ææ 
$num
ææ 
;
ææ 
}
øø 
set
¡¡ 
{
¬¬ 
try
√√ 
{
ƒƒ 
validateState
≈≈ !
(
≈≈! "
)
≈≈" #
;
≈≈# $
if
«« 
(
«« 
value
«« 
<
«« 
$num
««  !
||
««" $
value
««% *
>
««+ ,
$num
««- 2
)
««2 3
{
»» 
FDebug
…… 
.
…… 
throwFException
…… .
(
……. /
string
……/ 5
.
……5 6
Format
……6 <
(
……< =

FConstants
……= G
.
……G H

err_m_0015
……H R
,
……R S
$str
……T `
)
……` a
)
……a b
;
……b c
}
   
m_localPort
ÃÃ 
=
ÃÃ  !
value
ÃÃ" '
;
ÃÃ' (
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ  
ex
ŒŒ! #
)
ŒŒ# $
{
œœ 
FDebug
–– 
.
–– 
throwException
–– )
(
––) *
ex
––* ,
)
––, -
;
––- .
}
—— 
finally
““ 
{
”” 
}
’’ 
}
÷÷ 
}
◊◊ 	
public
€€ 
string
€€ 
remoteIp
€€ 
{
‹‹ 	
get
›› 
{
ﬁﬁ 
try
ﬂﬂ 
{
‡‡ 
return
·· 

m_remoteIp
·· %
;
··% &
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„  
ex
„„! #
)
„„# $
{
‰‰ 
FDebug
ÂÂ 
.
ÂÂ 
throwException
ÂÂ )
(
ÂÂ) *
ex
ÂÂ* ,
)
ÂÂ, -
;
ÂÂ- .
}
ÊÊ 
finally
ÁÁ 
{
ËË 
}
ÍÍ 
return
ÎÎ 
string
ÎÎ 
.
ÎÎ 
Empty
ÎÎ #
;
ÎÎ# $
}
ÏÏ 
set
ÓÓ 
{
ÔÔ 
try
 
{
ÒÒ 
validateState
ÚÚ !
(
ÚÚ! "
)
ÚÚ" #
;
ÚÚ# $
if
ÙÙ 
(
ÙÙ 
value
ÙÙ 
.
ÙÙ 
Trim
ÙÙ "
(
ÙÙ" #
)
ÙÙ# $
==
ÙÙ% '
string
ÙÙ( .
.
ÙÙ. /
Empty
ÙÙ/ 4
)
ÙÙ4 5
{
ıı 
FDebug
ˆˆ 
.
ˆˆ 
throwFException
ˆˆ .
(
ˆˆ. /
string
ˆˆ/ 5
.
ˆˆ5 6
Format
ˆˆ6 <
(
ˆˆ< =

FConstants
ˆˆ= G
.
ˆˆG H

err_m_0015
ˆˆH R
,
ˆˆR S
$str
ˆˆT _
)
ˆˆ_ `
)
ˆˆ` a
;
ˆˆa b
}
˜˜ 

m_remoteIp
˘˘ 
=
˘˘  
value
˘˘! &
;
˘˘& '
}
˙˙ 
catch
˚˚ 
(
˚˚ 
	Exception
˚˚  
ex
˚˚! #
)
˚˚# $
{
¸¸ 
FDebug
˝˝ 
.
˝˝ 
throwException
˝˝ )
(
˝˝) *
ex
˝˝* ,
)
˝˝, -
;
˝˝- .
}
˛˛ 
finally
ˇˇ 
{
ÄÄ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
public
àà 
int
àà 

remotePort
àà 
{
ââ 	
get
ää 
{
ãã 
try
åå 
{
çç 
return
éé 
m_remotePort
éé '
;
éé' (
}
èè 
catch
êê 
(
êê 
	Exception
êê  
ex
êê! #
)
êê# $
{
ëë 
FDebug
íí 
.
íí 
throwException
íí )
(
íí) *
ex
íí* ,
)
íí, -
;
íí- .
}
ìì 
finally
îî 
{
ïï 
}
óó 
return
òò 
$num
òò 
;
òò 
}
ôô 
set
õõ 
{
úú 
try
ùù 
{
ûû 
validateState
üü !
(
üü! "
)
üü" #
;
üü# $
if
°° 
(
°° 
value
°° 
<
°° 
$num
°°  !
||
°°" $
value
°°% *
>
°°+ ,
$num
°°- 2
)
°°2 3
{
¢¢ 
FDebug
££ 
.
££ 
throwFException
££ .
(
££. /
string
££/ 5
.
££5 6
Format
££6 <
(
££< =

FConstants
££= G
.
££G H

err_m_0015
££H R
,
££R S
$str
££T a
)
££a b
)
££b c
;
££c d
}
§§ 
m_remotePort
¶¶  
=
¶¶! "
value
¶¶# (
;
¶¶( )
}
ßß 
catch
®® 
(
®® 
	Exception
®®  
ex
®®! #
)
®®# $
{
©© 
FDebug
™™ 
.
™™ 
throwException
™™ )
(
™™) *
ex
™™* ,
)
™™, -
;
™™- .
}
´´ 
finally
¨¨ 
{
≠≠ 
}
ØØ 
}
∞∞ 
}
±± 	
public
µµ 
int
µµ  
retryConnectPeriod
µµ %
{
∂∂ 	
get
∑∑ 
{
∏∏ 
try
ππ 
{
∫∫ 
return
ªª "
m_retryConnectPeriod
ªª /
;
ªª/ 0
}
ºº 
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ  
ex
ΩΩ! #
)
ΩΩ# $
{
ææ 
FDebug
øø 
.
øø 
throwException
øø )
(
øø) *
ex
øø* ,
)
øø, -
;
øø- .
}
¿¿ 
finally
¡¡ 
{
¬¬ 
}
ƒƒ 
return
≈≈ 
$num
≈≈ 
;
≈≈ 
}
∆∆ 
set
»» 
{
…… 
try
   
{
ÀÀ 
validateState
ÃÃ !
(
ÃÃ! "
)
ÃÃ" #
;
ÃÃ# $
if
ŒŒ 
(
ŒŒ 
value
ŒŒ 
<
ŒŒ 
$num
ŒŒ  !
||
ŒŒ" $
value
ŒŒ% *
>
ŒŒ+ ,
$num
ŒŒ- 0
)
ŒŒ0 1
{
œœ 
FDebug
–– 
.
–– 
throwFException
–– .
(
––. /
string
––/ 5
.
––5 6
Format
––6 <
(
––< =

FConstants
––= G
.
––G H

err_m_0015
––H R
,
––R S
$str
––T `
)
––` a
)
––a b
;
––b c
}
—— "
m_retryConnectPeriod
”” (
=
””) *
value
””+ 0
;
””0 1
}
‘‘ 
catch
’’ 
(
’’ 
	Exception
’’  
ex
’’! #
)
’’# $
{
÷÷ 
FDebug
◊◊ 
.
◊◊ 
throwException
◊◊ )
(
◊◊) *
ex
◊◊* ,
)
◊◊, -
;
◊◊- .
}
ÿÿ 
finally
ŸŸ 
{
⁄⁄ 
}
‹‹ 
}
›› 
}
ﬁﬁ 	
private
ÊÊ 
void
ÊÊ 
validateState
ÊÊ "
(
ÊÊ" #
)
ÁÁ 
{
ËË 	
try
ÈÈ 
{
ÍÍ 
if
ÎÎ 
(
ÎÎ !
m_fSerialToEthernet
ÎÎ '
.
ÎÎ' (
fSocketState
ÎÎ( 4
!=
ÎÎ5 7!
FCommunicationState
ÎÎ8 K
.
ÎÎK L
Closed
ÎÎL R
)
ÎÎR S
{
ÏÏ 
FDebug
ÌÌ 
.
ÌÌ 
throwFException
ÌÌ *
(
ÌÌ* +
string
ÌÌ+ 1
.
ÌÌ1 2
Format
ÌÌ2 8
(
ÌÌ8 9

FConstants
ÌÌ9 C
.
ÌÌC D

err_m_0027
ÌÌD N
,
ÌÌN O
$str
ÌÌP ]
)
ÌÌ] ^
)
ÌÌ^ _
;
ÌÌ_ `
}
ÓÓ 
}
ÔÔ 
catch
 
(
 
	Exception
 
ex
 
)
  
{
ÒÒ 
FDebug
ÚÚ 
.
ÚÚ 
throwException
ÚÚ %
(
ÚÚ% &
ex
ÚÚ& (
)
ÚÚ( )
;
ÚÚ) *
}
ÛÛ 
finally
ÙÙ 
{
ıı 
}
˜˜ 
}
¯¯ 	
}
˛˛ 
}ˇˇ ≈j
D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Config\c_FSerialPluginConfig.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

class 
FSerialPluginConfig $
:$ %
IDisposable& 1
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSerialToEthernet !
m_fSerialToTcp" 0
=1 2
null3 7
;7 8
private 
string 
m_serialPort #
=$ %
$str& ,
;, -
private 
int 
m_baud 
= 
$num !
;! "
private 
StopBits 

m_stopBits #
=$ %
StopBits& .
.. /
One/ 2
;2 3
private 
int 

m_dataBits 
=  
$num! "
;" #
private   
Parity   
m_parity   
=    !
Parity  " (
.  ( )
None  ) -
;  - .
private!! 
byte!! 
[!! 
]!! 
m_prefix!! 
=!!  !
null!!" &
;!!& '
private"" 
byte"" 
["" 
]"" 
m_suffix"" 
=""  !
null""" &
;""& '
internal(( 
FSerialPluginConfig(( $
((($ %
FSerialToEthernet)) 
fSerialToEthernet)) /
)** 
{++ 	
m_fSerialToTcp,, 
=,, 
fSerialToEthernet,, .
;,,. /
}-- 	
~11 	
FSerialPluginConfig11	 
(11 
)22 
{33 	
	myDispose44 
(44 
false44 
)44 
;44 
}55 	
	protected99 
void99 
	myDispose99  
(99  !
bool:: 
	disposing:: 
);; 
{<< 	
if== 
(== 
!== 

m_disposed== 
)== 
{>> 
if?? 
(?? 
	disposing?? 
)?? 
{@@ 
m_fSerialToTcpAA "
=AA# $
nullAA% )
;AA) *
}BB 

m_disposedDD 
=DD 
trueDD !
;DD! "
}EE 
}FF 	
publicNN 
voidNN 
DisposeNN 
(NN 
)OO 
{PP 	
	myDisposeQQ 
(QQ 
trueQQ 
)QQ 
;QQ 
GCRR 
.RR 
SuppressFinalizeRR 
(RR  
thisRR  $
)RR$ %
;RR% &
}SS 	
public[[ 
string[[ 

serialPort[[  
{\\ 	
get]] 
{^^ 
try__ 
{`` 
returnaa 
m_serialPortaa '
;aa' (
}bb 
catchcc 
(cc 
	Exceptioncc  
excc! #
)cc# $
{dd 
FDebugee 
.ee 
throwExceptionee )
(ee) *
exee* ,
)ee, -
;ee- .
}ff 
finallygg 
{hh 
}jj 
returnkk 
stringkk 
.kk 
Emptykk #
;kk# $
}ll 
setnn 
{oo 
trypp 
{qq 
validateStaterr !
(rr! "
)rr" #
;rr# $
iftt 
(tt 
valuett 
.tt 
Trimtt "
(tt" #
)tt# $
==tt% '
stringtt( .
.tt. /
Emptytt/ 4
)tt4 5
{uu 
FDebugvv 
.vv 
throwFExceptionvv .
(vv. /
stringvv/ 5
.vv5 6
Formatvv6 <
(vv< =

FConstantsvv= G
.vvG H

err_m_0015vvH R
,vvR S
$strvvT a
)vva b
)vvb c
;vvc d
}ww 
m_serialPortyy  
=yy! "
valueyy# (
;yy( )
}zz 
catch{{ 
({{ 
	Exception{{  
ex{{! #
){{# $
{|| 
FDebug}} 
.}} 
throwException}} )
(}}) *
ex}}* ,
)}}, -
;}}- .
}~~ 
finally 
{
ÄÄ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
public
àà 
int
àà 
baud
àà 
{
ââ 	
get
ää 
{
ãã 
try
åå 
{
çç 
return
éé 
m_baud
éé !
;
éé! "
}
èè 
catch
êê 
(
êê 
	Exception
êê  
ex
êê! #
)
êê# $
{
ëë 
FDebug
íí 
.
íí 
throwException
íí )
(
íí) *
ex
íí* ,
)
íí, -
;
íí- .
}
ìì 
finally
îî 
{
ïï 
}
óó 
return
òò 
$num
òò 
;
òò 
}
ôô 
set
õõ 
{
úú 
try
ùù 
{
ûû 
validateState
üü !
(
üü! "
)
üü" #
;
üü# $
if
°° 
(
°° 
value
°° 
<
°° 
$num
°°  !
)
°°! "
{
¢¢ 
FDebug
££ 
.
££ 
throwFException
££ .
(
££. /
string
££/ 5
.
££5 6
Format
££6 <
(
££< =

FConstants
££= G
.
££G H

err_m_0015
££H R
,
££R S
$str
££T Z
)
££Z [
)
££[ \
;
££\ ]
}
§§ 
m_baud
¶¶ 
=
¶¶ 
value
¶¶ "
;
¶¶" #
}
ßß 
catch
®® 
(
®® 
	Exception
®®  
ex
®®! #
)
®®# $
{
©© 
FDebug
™™ 
.
™™ 
throwException
™™ )
(
™™) *
ex
™™* ,
)
™™, -
;
™™- .
}
´´ 
finally
¨¨ 
{
≠≠ 
}
ØØ 
}
∞∞ 
}
±± 	
public
µµ 
StopBits
µµ 
stopBits
µµ  
{
∂∂ 	
get
∑∑ 
{
∏∏ 
try
ππ 
{
∫∫ 
return
ªª 

m_stopBits
ªª %
;
ªª% &
}
ºº 
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ  
ex
ΩΩ! #
)
ΩΩ# $
{
ææ 
FDebug
øø 
.
øø 
throwException
øø )
(
øø) *
ex
øø* ,
)
øø, -
;
øø- .
}
¿¿ 
finally
¡¡ 
{
¬¬ 
}
ƒƒ 
return
≈≈ 
StopBits
≈≈ 
.
≈≈  
One
≈≈  #
;
≈≈# $
}
∆∆ 
set
»» 
{
…… 
try
   
{
ÀÀ 
validateState
ÃÃ !
(
ÃÃ! "
)
ÃÃ" #
;
ÃÃ# $

m_stopBits
ŒŒ 
=
ŒŒ  
value
ŒŒ! &
;
ŒŒ& '
}
œœ 
catch
–– 
(
–– 
	Exception
––  
ex
––! #
)
––# $
{
—— 
FDebug
““ 
.
““ 
throwException
““ )
(
““) *
ex
““* ,
)
““, -
;
““- .
}
”” 
finally
‘‘ 
{
’’ 
}
◊◊ 
}
ÿÿ 
}
ŸŸ 	
public
›› 
int
›› 
dataBits
›› 
{
ﬁﬁ 	
get
ﬂﬂ 
{
‡‡ 
try
·· 
{
‚‚ 
return
„„ 

m_dataBits
„„ %
;
„„% &
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ  
ex
ÂÂ! #
)
ÂÂ# $
{
ÊÊ 
FDebug
ÁÁ 
.
ÁÁ 
throwException
ÁÁ )
(
ÁÁ) *
ex
ÁÁ* ,
)
ÁÁ, -
;
ÁÁ- .
}
ËË 
finally
ÈÈ 
{
ÍÍ 
}
ÏÏ 
return
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
}
ÓÓ 
set
 
{
ÒÒ 
try
ÚÚ 
{
ÛÛ 
validateState
ÙÙ !
(
ÙÙ! "
)
ÙÙ" #
;
ÙÙ# $

m_dataBits
ˆˆ 
=
ˆˆ  
value
ˆˆ! &
;
ˆˆ& '
}
˜˜ 
catch
¯¯ 
(
¯¯ 
	Exception
¯¯  
ex
¯¯! #
)
¯¯# $
{
˘˘ 
FDebug
˙˙ 
.
˙˙ 
throwException
˙˙ )
(
˙˙) *
ex
˙˙* ,
)
˙˙, -
;
˙˙- .
}
˚˚ 
finally
¸¸ 
{
˝˝ 
}
ˇˇ 
}
ÄÄ 
}
ÅÅ 	
public
ÖÖ 
Parity
ÖÖ 
parity
ÖÖ 
{
ÜÜ 	
get
áá 
{
àà 
try
ââ 
{
ää 
return
ãã 
m_parity
ãã #
;
ãã# $
}
åå 
catch
çç 
(
çç 
	Exception
çç  
ex
çç! #
)
çç# $
{
éé 
FDebug
èè 
.
èè 
throwException
èè )
(
èè) *
ex
èè* ,
)
èè, -
;
èè- .
}
êê 
finally
ëë 
{
íí 
}
îî 
return
ïï 
Parity
ïï 
.
ïï 
None
ïï "
;
ïï" #
}
ññ 
set
òò 
{
ôô 
try
öö 
{
õõ 
validateState
úú !
(
úú! "
)
úú" #
;
úú# $
m_parity
ûû 
=
ûû 
value
ûû $
;
ûû$ %
}
üü 
catch
†† 
(
†† 
	Exception
††  
ex
††! #
)
††# $
{
°° 
FDebug
¢¢ 
.
¢¢ 
throwException
¢¢ )
(
¢¢) *
ex
¢¢* ,
)
¢¢, -
;
¢¢- .
}
££ 
finally
§§ 
{
•• 
}
ßß 
}
®® 
}
©© 	
public
≠≠ 
byte
≠≠ 
[
≠≠ 
]
≠≠ 
prefix
≠≠ 
{
ÆÆ 	
get
ØØ 
{
∞∞ 
try
±± 
{
≤≤ 
return
≥≥ 
m_prefix
≥≥ #
;
≥≥# $
}
¥¥ 
catch
µµ 
(
µµ 
	Exception
µµ  
ex
µµ! #
)
µµ# $
{
∂∂ 
FDebug
∑∑ 
.
∑∑ 
throwException
∑∑ )
(
∑∑) *
ex
∑∑* ,
)
∑∑, -
;
∑∑- .
}
∏∏ 
finally
ππ 
{
∫∫ 
}
ºº 
return
ΩΩ 
null
ΩΩ 
;
ΩΩ 
}
ææ 
set
¿¿ 
{
¡¡ 
try
¬¬ 
{
√√ 
m_prefix
ƒƒ 
=
ƒƒ 
value
ƒƒ $
;
ƒƒ$ %
}
≈≈ 
catch
∆∆ 
(
∆∆ 
	Exception
∆∆  
ex
∆∆! #
)
∆∆# $
{
«« 
FDebug
»» 
.
»» 
throwException
»» )
(
»») *
ex
»»* ,
)
»», -
;
»»- .
}
…… 
finally
   
{
ÀÀ 
}
ÕÕ 
}
ŒŒ 
}
œœ 	
public
”” 
byte
”” 
[
”” 
]
”” 
suffix
”” 
{
‘‘ 	
get
’’ 
{
÷÷ 
try
◊◊ 
{
ÿÿ 
return
ŸŸ 
m_suffix
ŸŸ #
;
ŸŸ# $
}
⁄⁄ 
catch
€€ 
(
€€ 
	Exception
€€  
ex
€€! #
)
€€# $
{
‹‹ 
FDebug
›› 
.
›› 
throwException
›› )
(
››) *
ex
››* ,
)
››, -
;
››- .
}
ﬁﬁ 
finally
ﬂﬂ 
{
‡‡ 
}
‚‚ 
return
„„ 
null
„„ 
;
„„ 
}
‰‰ 
set
ÊÊ 
{
ÁÁ 
try
ËË 
{
ÈÈ 
m_suffix
ÍÍ 
=
ÍÍ 
value
ÍÍ $
;
ÍÍ$ %
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ  
ex
ÏÏ! #
)
ÏÏ# $
{
ÌÌ 
FDebug
ÓÓ 
.
ÓÓ 
throwException
ÓÓ )
(
ÓÓ) *
ex
ÓÓ* ,
)
ÓÓ, -
;
ÓÓ- .
}
ÔÔ 
finally
 
{
ÒÒ 
}
ÛÛ 
}
ÙÙ 
}
ıı 	
private
˝˝ 
void
˝˝ 
validateState
˝˝ "
(
˝˝" #
)
˛˛ 
{
ˇˇ 	
try
ÄÄ 
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
m_fSerialToTcp
ÇÇ "
.
ÇÇ" #
fSerialState
ÇÇ# /
!=
ÇÇ0 2!
FCommunicationState
ÇÇ3 F
.
ÇÇF G
Closed
ÇÇG M
)
ÇÇM N
{
ÉÉ 
FDebug
ÑÑ 
.
ÑÑ 
throwFException
ÑÑ *
(
ÑÑ* +
string
ÑÑ+ 1
.
ÑÑ1 2
Format
ÑÑ2 8
(
ÑÑ8 9

FConstants
ÑÑ9 C
.
ÑÑC D

err_m_0027
ÑÑD N
,
ÑÑN O
$str
ÑÑP Z
)
ÑÑZ [
)
ÑÑ[ \
;
ÑÑ\ ]
}
ÖÖ 
}
ÜÜ 
catch
áá 
(
áá 
	Exception
áá 
ex
áá 
)
áá  
{
àà 
FDebug
ââ 
.
ââ 
throwException
ââ %
(
ââ% &
ex
ââ& (
)
ââ( )
;
ââ) *
}
ää 
finally
ãã 
{
åå 
}
éé 
}
èè 	
}
ïï 
}ññ ˇ•
vD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\c_FSerialToEthernet.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

class 
FSerialToEthernet "
:" #
IDisposable$ /
{ 
public 
event $
FEventRaisedEventHandler -
EventRaised. 9
=: ;
null< @
;@ A
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
bool 
m_logEnabled !
=" #
false$ )
;) *
private   
string   
m_logDirectory   %
=  & '
string  ( .
.  . /
Empty  / 4
;  4 5
private!! 
string!! 
m_logFileNameSuffix!! *
=!!+ ,
string!!- 3
.!!3 4
Empty!!4 9
;!!9 :
private"" 
int"" 
m_logFileMaxSize"" $
=""% &
$num""' (
;""( )
private## 
bool## "
m_logMonitoringEnabled## +
=##, -
false##. 3
;##3 4
private%% 
FCommunicationState%% #
m_fSerialState%%$ 2
=%%3 4
FCommunicationState%%5 H
.%%H I
Closed%%I O
;%%O P
private&& 
FCommunicationState&& #
m_fSocketState&&$ 2
=&&3 4
FCommunicationState&&5 H
.&&H I
Closed&&I O
;&&O P
private'' 
FSerialPluginConfig'' #
m_fSerialConfig''$ 3
=''4 5
null''6 :
;'': ;
private(( 
FSocketConfig(( 
m_fSocketConfig(( -
=((. /
null((0 4
;((4 5
private)) 
FEventPusher)) 
m_fEventPusher)) +
=)), -
null)). 2
;))2 3
private** 
FSerialPlugin** 
	m_fSerial** '
=**( )
null*** .
;**. /
private++ 
FBaseTcp++ 
m_fTcp++ 
=++  !
null++" &
;++& '
private,, 

FLogWriter,, 
m_fLogWriter,, '
=,,( )
null,,* .
;,,. /
public22 
FSerialToEthernet22  
(22  !
string33 
licFileName33 
)44 
{55 	
validateLicense66 
(66 
licFileName66 '
)66' (
;66( )
init:: 
(:: 
):: 
;:: 
};; 	
~?? 	
FSerialToEthernet??	 
(?? 
)@@ 
{AA 	
	myDisposeBB 
(BB 
falseBB 
)BB 
;BB 
}CC 	
	protectedGG 
voidGG 
	myDisposeGG  
(GG  !
boolHH 
	disposingHH 
)II 
{JJ 	
ifKK 
(KK 
!KK 

m_disposedKK 
)KK 
{LL 
ifMM 
(MM 
	disposingMM 
)MM 
{NN 
termOO 
(OO 
)OO 
;OO 
}PP 

m_disposedRR 
=RR 
trueRR !
;RR! "
}SS 
}TT 	
public\\ 
void\\ 
Dispose\\ 
(\\ 
)]] 
{^^ 	
	myDispose__ 
(__ 
true__ 
)__ 
;__ 
GC`` 
.`` 
SuppressFinalize`` 
(``  
this``  $
)``$ %
;``% &
}aa 	
publicii 
FSerialPluginConfigii "
fSerialConfigii# 0
{jj 	
getkk 
{ll 
trymm 
{nn 
returnoo 
m_fSerialConfigoo *
;oo* +
}pp 
catchqq 
(qq 
	Exceptionqq  
exqq! #
)qq# $
{rr 
FDebugss 
.ss 
throwExceptionss )
(ss) *
exss* ,
)ss, -
;ss- .
}tt 
finallyuu 
{vv 
}xx 
returnyy 
nullyy 
;yy 
}zz 
}{{ 	
public 
FSocketConfig 
fSocketConfig *
{
ÄÄ 	
get
ÅÅ 
{
ÇÇ 
try
ÉÉ 
{
ÑÑ 
return
ÖÖ 
m_fSocketConfig
ÖÖ *
;
ÖÖ* +
}
ÜÜ 
catch
áá 
(
áá 
	Exception
áá  
ex
áá! #
)
áá# $
{
àà 
FDebug
ââ 
.
ââ 
throwException
ââ )
(
ââ) *
ex
ââ* ,
)
ââ, -
;
ââ- .
}
ää 
finally
ãã 
{
åå 
}
éé 
return
èè 
null
èè 
;
èè 
}
êê 
}
ëë 	
public
ïï !
FCommunicationState
ïï "
fSerialState
ïï# /
{
ññ 	
get
óó 
{
òò 
try
ôô 
{
öö 
return
õõ 
m_fSerialState
õõ )
;
õõ) *
}
úú 
catch
ùù 
(
ùù 
	Exception
ùù  
ex
ùù! #
)
ùù# $
{
ûû 
FDebug
üü 
.
üü 
throwException
üü )
(
üü) *
ex
üü* ,
)
üü, -
;
üü- .
}
†† 
finally
°° 
{
¢¢ 
}
§§ 
return
•• !
FCommunicationState
•• *
.
••* +
Closed
••+ 1
;
••1 2
}
¶¶ 
}
ßß 	
public
´´ !
FCommunicationState
´´ "
fSocketState
´´# /
{
¨¨ 	
get
≠≠ 
{
ÆÆ 
try
ØØ 
{
∞∞ 
return
±± 
m_fSocketState
±± )
;
±±) *
}
≤≤ 
catch
≥≥ 
(
≥≥ 
	Exception
≥≥  
ex
≥≥! #
)
≥≥# $
{
¥¥ 
FDebug
µµ 
.
µµ 
throwException
µµ )
(
µµ) *
ex
µµ* ,
)
µµ, -
;
µµ- .
}
∂∂ 
finally
∑∑ 
{
∏∏ 
}
∫∫ 
return
ªª !
FCommunicationState
ªª *
.
ªª* +
Closed
ªª+ 1
;
ªª1 2
}
ºº 
}
ΩΩ 	
internal
¡¡ 
FEventPusher
¡¡ 
fEventPusher
¡¡ *
{
¬¬ 	
get
√√ 
{
ƒƒ 
try
≈≈ 
{
∆∆ 
return
«« 
m_fEventPusher
«« )
;
««) *
}
»» 
catch
…… 
(
…… 
	Exception
……  
ex
……! #
)
……# $
{
   
FDebug
ÀÀ 
.
ÀÀ 
throwException
ÀÀ )
(
ÀÀ) *
ex
ÀÀ* ,
)
ÀÀ, -
;
ÀÀ- .
}
ÃÃ 
finally
ÕÕ 
{
ŒŒ 
}
–– 
return
—— 
null
—— 
;
—— 
}
““ 
}
”” 	
public
◊◊ 
bool
◊◊ 

logEnabled
◊◊ 
{
ÿÿ 	
get
ŸŸ 
{
⁄⁄ 
try
€€ 
{
‹‹ 
return
›› 
m_logEnabled
›› '
;
››' (
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
	Exception
ﬂﬂ  
ex
ﬂﬂ! #
)
ﬂﬂ# $
{
‡‡ 
FDebug
·· 
.
·· 
throwException
·· )
(
··) *
ex
··* ,
)
··, -
;
··- .
}
‚‚ 
finally
„„ 
{
‰‰ 
}
ÊÊ 
return
ÁÁ 
false
ÁÁ 
;
ÁÁ 
}
ËË 
set
ÍÍ 
{
ÎÎ 
try
ÏÏ 
{
ÌÌ 
m_logEnabled
ÓÓ  
=
ÓÓ! "
value
ÓÓ# (
;
ÓÓ( )
}
ÔÔ 
catch
 
(
 
	Exception
  
ex
! #
)
# $
{
ÒÒ 
FDebug
ÚÚ 
.
ÚÚ 
throwException
ÚÚ )
(
ÚÚ) *
ex
ÚÚ* ,
)
ÚÚ, -
;
ÚÚ- .
}
ÛÛ 
finally
ÙÙ 
{
ıı 
}
˜˜ 
}
¯¯ 
}
˘˘ 	
public
˝˝ 
string
˝˝ 
logDirectory
˝˝ "
{
˛˛ 	
get
ˇˇ 
{
ÄÄ 
try
ÅÅ 
{
ÇÇ 
return
ÉÉ 
m_logDirectory
ÉÉ )
;
ÉÉ) *
}
ÑÑ 
catch
ÖÖ 
(
ÖÖ 
	Exception
ÖÖ  
ex
ÖÖ! #
)
ÖÖ# $
{
ÜÜ 
FDebug
áá 
.
áá 
throwException
áá )
(
áá) *
ex
áá* ,
)
áá, -
;
áá- .
}
àà 
finally
ââ 
{
ää 
}
åå 
return
çç 
string
çç 
.
çç 
Empty
çç #
;
çç# $
}
éé 
set
êê 
{
ëë 
try
íí 
{
ìì 
m_logDirectory
îî "
=
îî# $
value
îî% *
;
îî* +
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ  
ex
ññ! #
)
ññ# $
{
óó 
FDebug
òò 
.
òò 
throwException
òò )
(
òò) *
ex
òò* ,
)
òò, -
;
òò- .
}
ôô 
finally
öö 
{
õõ 
}
ùù 
}
ûû 
}
üü 	
public
££ 
string
££ 
logFileNameSuffix
££ '
{
§§ 	
get
•• 
{
¶¶ 
try
ßß 
{
®® 
return
©© !
m_logFileNameSuffix
©© .
;
©©. /
}
™™ 
catch
´´ 
(
´´ 
	Exception
´´  
ex
´´! #
)
´´# $
{
¨¨ 
FDebug
≠≠ 
.
≠≠ 
throwException
≠≠ )
(
≠≠) *
ex
≠≠* ,
)
≠≠, -
;
≠≠- .
}
ÆÆ 
finally
ØØ 
{
∞∞ 
}
≤≤ 
return
≥≥ 
string
≥≥ 
.
≥≥ 
Empty
≥≥ #
;
≥≥# $
}
¥¥ 
set
∂∂ 
{
∑∑ 
try
∏∏ 
{
ππ !
m_logFileNameSuffix
∫∫ '
=
∫∫( )
value
∫∫* /
;
∫∫/ 0
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº  
ex
ºº! #
)
ºº# $
{
ΩΩ 
FDebug
ææ 
.
ææ 
throwException
ææ )
(
ææ) *
ex
ææ* ,
)
ææ, -
;
ææ- .
}
øø 
finally
¿¿ 
{
¡¡ 
}
√√ 
}
ƒƒ 
}
≈≈ 	
public
…… 
int
…… 
logFileMaxSize
…… !
{
   	
get
ÀÀ 
{
ÃÃ 
try
ÕÕ 
{
ŒŒ 
return
œœ 
m_logFileMaxSize
œœ +
;
œœ+ ,
}
–– 
catch
—— 
(
—— 
	Exception
——  
ex
——! #
)
——# $
{
““ 
FDebug
”” 
.
”” 
throwException
”” )
(
””) *
ex
””* ,
)
””, -
;
””- .
}
‘‘ 
finally
’’ 
{
÷÷ 
}
ÿÿ 
return
ŸŸ 
$num
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
set
‹‹ 
{
›› 
try
ﬁﬁ 
{
ﬂﬂ 
m_logFileMaxSize
‡‡ $
=
‡‡% &
value
‡‡' ,
;
‡‡, -
}
·· 
catch
‚‚ 
(
‚‚ 
	Exception
‚‚  
ex
‚‚! #
)
‚‚# $
{
„„ 
FDebug
‰‰ 
.
‰‰ 
throwException
‰‰ )
(
‰‰) *
ex
‰‰* ,
)
‰‰, -
;
‰‰- .
}
ÂÂ 
finally
ÊÊ 
{
ÁÁ 
}
ÈÈ 
}
ÍÍ 
}
ÎÎ 	
public
ÔÔ 
bool
ÔÔ "
logMonitoringEnabled
ÔÔ (
{
 	
get
ÒÒ 
{
ÚÚ 
try
ÛÛ 
{
ÙÙ 
return
ıı $
m_logMonitoringEnabled
ıı 1
;
ıı1 2
}
ˆˆ 
catch
˜˜ 
(
˜˜ 
	Exception
˜˜  
ex
˜˜! #
)
˜˜# $
{
¯¯ 
FDebug
˘˘ 
.
˘˘ 
throwException
˘˘ )
(
˘˘) *
ex
˘˘* ,
)
˘˘, -
;
˘˘- .
}
˙˙ 
finally
˚˚ 
{
¸¸ 
}
˛˛ 
return
ˇˇ 
false
ˇˇ 
;
ˇˇ 
}
ÄÄ 
set
ÇÇ 
{
ÉÉ 
try
ÑÑ 
{
ÖÖ $
m_logMonitoringEnabled
ÜÜ *
=
ÜÜ+ ,
value
ÜÜ- 2
;
ÜÜ2 3
}
áá 
catch
àà 
(
àà 
	Exception
àà  
ex
àà! #
)
àà# $
{
ââ 
FDebug
ää 
.
ää 
throwException
ää )
(
ää) *
ex
ää* ,
)
ää, -
;
ää- .
}
ãã 
finally
åå 
{
çç 
}
èè 
}
êê 
}
ëë 	
private
ôô 
void
ôô 
validateLicense
ôô $
(
ôô$ %
string
öö 
fileName
öö 
)
õõ 
{
úú 	
FLic2License
†† 
fLic
†† 
=
†† 
null
††  $
;
††$ %
	FLic2Info
°° 
fLicInfo
°° 
=
°°  
null
°°! %
;
°°% &
try
££ 
{
§§ 
fLic
•• 
=
•• 
new
•• 
FLic2License
•• '
(
••' (
)
••( )
;
••) *
fLicInfo
¶¶ 
=
¶¶ 
fLic
¶¶ 
.
¶¶  
validate
¶¶  (
(
¶¶( )
fileName
¶¶) 1
)
¶¶1 2
;
¶¶2 3
if
≠≠ 
(
≠≠ 
fLicInfo
≠≠ 
.
≠≠ 

fLicS2hCvt
≠≠ '
.
≠≠' (
productEnabled
≠≠( 6
==
≠≠7 9
FYesNo
≠≠: @
.
≠≠@ A
No
≠≠A C
)
≠≠C D
{
ÆÆ 
fLic
ØØ 
.
ØØ "
rasieValidationError
ØØ -
(
ØØ- .
$str
ØØ. ?
)
ØØ? @
;
ØØ@ A
}
∞∞ 
if
∑∑ 
(
∑∑ 
fLicInfo
∑∑ 
.
∑∑ 

fLicS2hCvt
∑∑ '
.
∑∑' (
expireIssuedCheck
∑∑( 9
==
∑∑: <
FYesNo
∑∑= C
.
∑∑C D
Yes
∑∑D G
&&
∑∑H J
!
∑∑K L
fLic
∑∑L P
.
∑∑P Q%
validateExpireIssueDate
∑∑Q h
(
∑∑h i
fLicInfo
∑∑i q
.
∑∑q r

fLicS2hCvt
∑∑r |
.
∑∑| }
expireIssuedDate∑∑} ç
)∑∑ç é
)∑∑é è
{
∏∏ 
fLic
ππ 
.
ππ "
rasieValidationError
ππ -
(
ππ- .
$str
ππ. B
)
ππB C
;
ππC D
}
∫∫ 
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº 
ex
ºº 
)
ºº  
{
ΩΩ 
FDebug
ææ 
.
ææ 
throwException
ææ %
(
ææ% &
ex
ææ& (
)
ææ( )
;
ææ) *
}
øø 
finally
¿¿ 
{
¡¡ 
if
¬¬ 
(
¬¬ 
fLic
¬¬ 
!=
¬¬ 
null
¬¬  
)
¬¬  !
{
√√ 
fLic
ƒƒ 
.
ƒƒ 
Dispose
ƒƒ  
(
ƒƒ  !
)
ƒƒ! "
;
ƒƒ" #
fLic
≈≈ 
=
≈≈ 
null
≈≈ 
;
≈≈  
}
∆∆ 
if
»» 
(
»» 
fLicInfo
»» 
!=
»» 
null
»»  $
)
»»$ %
{
…… 
fLicInfo
   
.
   
Dispose
   $
(
  $ %
)
  % &
;
  & '
fLicInfo
ÀÀ 
=
ÀÀ 
null
ÀÀ #
;
ÀÀ# $
}
ÃÃ 
}
ÕÕ 
}
ŒŒ 	
private
““ 
void
““ 
init
““ 
(
““ 
)
”” 
{
‘‘ 	
try
’’ 
{
÷÷ 
m_logDirectory
◊◊ 
=
◊◊  
Application
◊◊! ,
.
◊◊, -
StartupPath
◊◊- 8
+
◊◊9 :
$str
◊◊; B
;
◊◊B C!
m_logFileNameSuffix
ÿÿ #
=
ÿÿ$ %
$str
ÿÿ& 8
;
ÿÿ8 9
m_logFileMaxSize
ŸŸ  
=
ŸŸ! "
$num
ŸŸ# $
;
ŸŸ$ %
m_fLogWriter
›› 
=
›› 
new
›› "

FLogWriter
››# -
(
››- .
this
››. 2
)
››2 3
;
››3 4
m_fSerialConfig
‰‰ 
=
‰‰  !
new
‰‰" %!
FSerialPluginConfig
‰‰& 9
(
‰‰9 :
this
‰‰: >
)
‰‰> ?
;
‰‰? @
m_fSocketConfig
ÂÂ 
=
ÂÂ  !
new
ÂÂ" %
FSocketConfig
ÂÂ& 3
(
ÂÂ3 4
this
ÂÂ4 8
)
ÂÂ8 9
;
ÂÂ9 :
m_fEventPusher
ÈÈ 
=
ÈÈ  
new
ÈÈ! $
FEventPusher
ÈÈ% 1
(
ÈÈ1 2
this
ÈÈ2 6
)
ÈÈ6 7
;
ÈÈ7 8
}
ÍÍ 
catch
ÎÎ 
(
ÎÎ 
	Exception
ÎÎ 
ex
ÎÎ 
)
ÎÎ  
{
ÏÏ 
FDebug
ÌÌ 
.
ÌÌ 
throwException
ÌÌ %
(
ÌÌ% &
ex
ÌÌ& (
)
ÌÌ( )
;
ÌÌ) *
}
ÓÓ 
finally
ÔÔ 
{
 
}
ÚÚ 
}
ÛÛ 	
private
˜˜ 
void
˜˜ 
term
˜˜ 
(
˜˜ 
)
¯¯ 
{
˘˘ 	
try
˙˙ 
{
˚˚ 
closeAll
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
if
ÄÄ 
(
ÄÄ 
m_fEventPusher
ÄÄ "
!=
ÄÄ# %
null
ÄÄ& *
)
ÄÄ* +
{
ÅÅ 
m_fEventPusher
ÇÇ "
.
ÇÇ" #
Dispose
ÇÇ# *
(
ÇÇ* +
)
ÇÇ+ ,
;
ÇÇ, -
m_fEventPusher
ÉÉ "
=
ÉÉ# $
null
ÉÉ% )
;
ÉÉ) *
}
ÑÑ 
if
àà 
(
àà 
m_fSerialConfig
àà #
!=
àà$ &
null
àà' +
)
àà+ ,
{
ââ 
m_fSerialConfig
ää #
.
ää# $
Dispose
ää$ +
(
ää+ ,
)
ää, -
;
ää- .
m_fSerialConfig
ãã #
=
ãã$ %
null
ãã& *
;
ãã* +
}
åå 
if
çç 
(
çç 
m_fSocketConfig
çç #
!=
çç$ &
null
çç' +
)
çç+ ,
{
éé 
m_fSocketConfig
èè #
.
èè# $
Dispose
èè$ +
(
èè+ ,
)
èè, -
;
èè- .
m_fSocketConfig
êê #
=
êê$ %
null
êê& *
;
êê* +
}
ëë 
if
ïï 
(
ïï 
m_fLogWriter
ïï  
!=
ïï! #
null
ïï$ (
)
ïï( )
{
ññ 
m_fLogWriter
óó  
.
óó  !
Dispose
óó! (
(
óó( )
)
óó) *
;
óó* +
m_fLogWriter
òò  
=
òò! "
null
òò# '
;
òò' (
}
ôô 
}
öö 
catch
õõ 
(
õõ 
	Exception
õõ 
ex
õõ 
)
õõ  
{
úú 
FDebug
ùù 
.
ùù 
throwException
ùù %
(
ùù% &
ex
ùù& (
)
ùù( )
;
ùù) *
}
ûû 
finally
üü 
{
†† 
}
¢¢ 
}
££ 	
public
ßß 
void
ßß 

openSerial
ßß 
(
ßß 
)
®® 
{
©© 	
try
™™ 
{
´´ 
if
¨¨ 
(
¨¨ 
m_fSerialState
¨¨ "
!=
¨¨# %!
FCommunicationState
¨¨& 9
.
¨¨9 :
Closed
¨¨: @
)
¨¨@ A
{
≠≠ 
return
ÆÆ 
;
ÆÆ 
}
ØØ 
	m_fSerial
≥≥ 
=
≥≥ 
new
≥≥ 
FSerialPlugin
≥≥  -
(
≥≥- .
this
≥≥. 2
)
≥≥2 3
;
≥≥3 4
	m_fSerial
¥¥ 
.
¥¥ 
open
¥¥ 
(
¥¥ 
)
¥¥  
;
¥¥  !
}
µµ 
catch
∂∂ 
(
∂∂ 
	Exception
∂∂ 
ex
∂∂ 
)
∂∂  
{
∑∑ 
if
∏∏ 
(
∏∏ 
	m_fSerial
∏∏ 
!=
∏∏  
null
∏∏! %
)
∏∏% &
{
ππ 
	m_fSerial
∫∫ 
.
∫∫ 
Dispose
∫∫ %
(
∫∫% &
)
∫∫& '
;
∫∫' (
	m_fSerial
ªª 
=
ªª 
null
ªª  $
;
ªª$ %
}
ºº 
FDebug
ΩΩ 
.
ΩΩ 
throwException
ΩΩ %
(
ΩΩ% &
ex
ΩΩ& (
)
ΩΩ( )
;
ΩΩ) *
}
ææ 
finally
øø 
{
¿¿ 
}
¬¬ 
}
√√ 	
public
«« 
void
«« 

openSocket
«« 
(
«« 
)
»» 
{
…… 	
try
   
{
ÀÀ 
if
ÃÃ 
(
ÃÃ 
m_fSocketState
ÃÃ "
!=
ÃÃ# %!
FCommunicationState
ÃÃ& 9
.
ÃÃ9 :
Closed
ÃÃ: @
)
ÃÃ@ A
{
ÕÕ 
return
ŒŒ 
;
ŒŒ 
}
œœ 
if
”” 
(
”” 
m_fSocketConfig
”” #
.
””# $
fConnectMode
””$ 0
==
””1 3
FConnectMode
””4 @
.
””@ A
Passive
””A H
)
””H I
{
‘‘ 
m_fTcp
’’ 
=
’’ 
new
’’  
FTcpPassive
’’! ,
(
’’, -
this
’’- 1
)
’’1 2
;
’’2 3
}
÷÷ 
else
◊◊ 
{
ÿÿ 
m_fTcp
ŸŸ 
=
ŸŸ 
new
ŸŸ  

FTcpActive
ŸŸ! +
(
ŸŸ+ ,
this
ŸŸ, 0
)
ŸŸ0 1
;
ŸŸ1 2
}
⁄⁄ 
m_fTcp
‹‹ 
.
‹‹ 
open
‹‹ 
(
‹‹ 
)
‹‹ 
;
‹‹ 
}
›› 
catch
ﬁﬁ 
(
ﬁﬁ 
	Exception
ﬁﬁ 
ex
ﬁﬁ 
)
ﬁﬁ  
{
ﬂﬂ 
if
‡‡ 
(
‡‡ 
m_fTcp
‡‡ 
!=
‡‡ 
null
‡‡ "
)
‡‡" #
{
·· 
m_fTcp
‚‚ 
.
‚‚ 
Dispose
‚‚ "
(
‚‚" #
)
‚‚# $
;
‚‚$ %
m_fTcp
„„ 
=
„„ 
null
„„ !
;
„„! "
}
‰‰ 
FDebug
ÂÂ 
.
ÂÂ 
throwException
ÂÂ %
(
ÂÂ% &
ex
ÂÂ& (
)
ÂÂ( )
;
ÂÂ) *
}
ÊÊ 
finally
ÁÁ 
{
ËË 
}
ÍÍ 
}
ÎÎ 	
public
ÔÔ 
void
ÔÔ 
closeSerial
ÔÔ 
(
ÔÔ  
)
 
{
ÒÒ 	
try
ÚÚ 
{
ÛÛ 
if
ÙÙ 
(
ÙÙ 
m_fSerialState
ÙÙ "
==
ÙÙ# %!
FCommunicationState
ÙÙ& 9
.
ÙÙ9 :
Closed
ÙÙ: @
)
ÙÙ@ A
{
ıı 
return
ˆˆ 
;
ˆˆ 
}
˜˜ 
if
˚˚ 
(
˚˚ 
	m_fSerial
˚˚ 
!=
˚˚  
null
˚˚! %
)
˚˚% &
{
¸¸ 
	m_fSerial
˝˝ 
.
˝˝ 
close
˝˝ #
(
˝˝# $
)
˝˝$ %
;
˝˝% &
	m_fSerial
˛˛ 
.
˛˛ 
Dispose
˛˛ %
(
˛˛% &
)
˛˛& '
;
˛˛' (
	m_fSerial
ˇˇ 
=
ˇˇ 
null
ˇˇ  $
;
ˇˇ$ %
}
ÄÄ 
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
	Exception
ÇÇ 
ex
ÇÇ 
)
ÇÇ  
{
ÉÉ 
FDebug
ÑÑ 
.
ÑÑ 
throwException
ÑÑ %
(
ÑÑ% &
ex
ÑÑ& (
)
ÑÑ( )
;
ÑÑ) *
}
ÖÖ 
finally
ÜÜ 
{
áá 
}
ââ 
}
ää 	
public
éé 
void
éé 
closeTcp
éé 
(
éé 
)
èè 
{
êê 	
try
ëë 
{
íí 
if
ìì 
(
ìì 
m_fSocketState
ìì "
==
ìì# %!
FCommunicationState
ìì& 9
.
ìì9 :
Closed
ìì: @
)
ìì@ A
{
îî 
return
ïï 
;
ïï 
}
ññ 
if
öö 
(
öö 
m_fTcp
öö 
!=
öö 
null
öö "
)
öö" #
{
õõ 
m_fTcp
úú 
.
úú 
close
úú  
(
úú  !
)
úú! "
;
úú" #
m_fTcp
ùù 
.
ùù 
Dispose
ùù "
(
ùù" #
)
ùù# $
;
ùù$ %
m_fTcp
ûû 
=
ûû 
null
ûû !
;
ûû! "
}
üü 
}
†† 
catch
°° 
(
°° 
	Exception
°° 
ex
°° 
)
°°  
{
¢¢ 
FDebug
££ 
.
££ 
throwException
££ %
(
££% &
ex
££& (
)
££( )
;
££) *
}
§§ 
finally
•• 
{
¶¶ 
}
®® 
}
©© 	
public
≠≠ 
void
≠≠ 
openAll
≠≠ 
(
≠≠ 
)
ÆÆ 
{
ØØ 	
try
∞∞ 
{
±± 

openSerial
≤≤ 
(
≤≤ 
)
≤≤ 
;
≤≤ 

openSocket
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
}
¥¥ 
catch
µµ 
(
µµ 
	Exception
µµ 
ex
µµ 
)
µµ  
{
∂∂ 
FDebug
∑∑ 
.
∑∑ 
throwException
∑∑ %
(
∑∑% &
ex
∑∑& (
)
∑∑( )
;
∑∑) *
}
∏∏ 
finally
ππ 
{
∫∫ 
}
ºº 
}
ΩΩ 	
public
¡¡ 
void
¡¡ 
closeAll
¡¡ 
(
¡¡ 
)
¬¬ 
{
√√ 	
try
ƒƒ 
{
≈≈ 
closeTcp
∆∆ 
(
∆∆ 
)
∆∆ 
;
∆∆ 
closeSerial
«« 
(
«« 
)
«« 
;
«« 
}
»» 
catch
…… 
(
…… 
	Exception
…… 
ex
…… 
)
……  
{
   
FDebug
ÀÀ 
.
ÀÀ 
throwException
ÀÀ %
(
ÀÀ% &
ex
ÀÀ& (
)
ÀÀ( )
;
ÀÀ) *
}
ÃÃ 
finally
ÕÕ 
{
ŒŒ 
}
–– 
}
—— 	
internal
’’ 
void
’’ 
changeSerialState
’’ '
(
’’' (!
FCommunicationState
÷÷ 
fState
÷÷  &
,
÷÷& '
string
◊◊ 

serialPort
◊◊ 
,
◊◊ 
int
ÿÿ 
baud
ÿÿ 
)
ŸŸ 
{
⁄⁄ 	
try
€€ 
{
‹‹ 
if
›› 
(
›› 
m_fSerialState
›› "
==
››# %
fState
››& ,
)
››, -
{
ﬁﬁ 
return
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
m_fSerialState
·· 
=
··  
fState
··! '
;
··' (
m_fEventPusher
ÂÂ 
.
ÂÂ 
pushSerialEvent
ÂÂ .
(
ÂÂ. /
new
ÊÊ 0
"FSerialPluginStateChangedEventArgs
ÊÊ :
(
ÊÊ: ;
this
ÁÁ 
,
ÁÁ 
FEventId
ËË  
.
ËË  ! 
SerialStateChanged
ËË! 3
,
ËË3 4
FResultCode
ÈÈ #
.
ÈÈ# $
Success
ÈÈ$ +
,
ÈÈ+ ,
string
ÍÍ 
.
ÍÍ 
Empty
ÍÍ $
,
ÍÍ$ %
fState
ÎÎ 
,
ÎÎ 

serialPort
ÏÏ "
,
ÏÏ" #
baud
ÌÌ 
)
ÓÓ 
)
ÔÔ 
;
ÔÔ 
}
 
catch
ÒÒ 
(
ÒÒ 
	Exception
ÒÒ 
ex
ÒÒ 
)
ÒÒ  
{
ÚÚ 
FDebug
ÛÛ 
.
ÛÛ 
throwException
ÛÛ %
(
ÛÛ% &
ex
ÛÛ& (
)
ÛÛ( )
;
ÛÛ) *
}
ÙÙ 
finally
ıı 
{
ˆˆ 
}
¯¯ 
}
˘˘ 	
internal
˝˝ 
void
˝˝ 
changeTcpState
˝˝ $
(
˝˝$ %!
FCommunicationState
˛˛ 
fState
˛˛  &
,
˛˛& '
FConnectMode
ˇˇ 
fConnectMode
ˇˇ %
,
ˇˇ% &
string
ÄÄ 
localIp
ÄÄ 
,
ÄÄ 
int
ÅÅ 
	localPort
ÅÅ 
,
ÅÅ 
string
ÇÇ 
remoteIp
ÇÇ 
,
ÇÇ 
int
ÉÉ 

remotePort
ÉÉ 
)
ÑÑ 
{
ÖÖ 	
try
ÜÜ 
{
áá 
if
àà 
(
àà 
m_fSocketState
àà "
==
àà# %
fState
àà& ,
)
àà, -
{
ââ 
return
ää 
;
ää 
}
ãã 
m_fSocketState
åå 
=
åå  
fState
åå! '
;
åå' (
m_fEventPusher
êê 
.
êê 
pushTcpEvent
êê +
(
êê+ ,
new
ëë *
FSocketStateChangedEventArgs
ëë 4
(
ëë4 5
this
íí 
,
íí 
FEventId
ìì  
.
ìì  ! 
SocketStateChanged
ìì! 3
,
ìì3 4
FResultCode
îî #
.
îî# $
Success
îî$ +
,
îî+ ,
string
ïï 
.
ïï 
Empty
ïï $
,
ïï$ %
fState
ññ 
,
ññ 
fConnectMode
óó $
,
óó$ %
localIp
òò 
,
òò  
	localPort
ôô !
,
ôô! "
remoteIp
öö  
,
öö  !

remotePort
õõ "
)
úú 
)
ùù 
;
ùù 
}
ûû 
catch
üü 
(
üü 
	Exception
üü 
ex
üü 
)
üü  
{
†† 
FDebug
°° 
.
°° 
throwException
°° %
(
°°% &
ex
°°& (
)
°°( )
;
°°) *
}
¢¢ 
finally
££ 
{
§§ 
}
¶¶ 
}
ßß 	
private
´´ 
void
´´ 
sendSerialData
´´ #
(
´´# $
FSerialSendData
¨¨ 
fSerialSendData
¨¨ +
)
≠≠ 
{
ÆÆ 	
try
ØØ 
{
∞∞ 
if
±± 
(
±± 
this
±± 
.
±± 
fSerialState
±± %
==
±±& (!
FCommunicationState
±±) <
.
±±< =
	Connected
±±= F
)
±±F G
{
≤≤ 
	m_fSerial
≥≥ 
.
≥≥ 
send
≥≥ "
(
≥≥" #
fSerialSendData
≥≥# 2
)
≥≥2 3
;
≥≥3 4
}
¥¥ 
else
µµ 
{
∂∂ 
m_fEventPusher
∑∑ "
.
∑∑" #
pushSerialEvent
∑∑# 2
(
∑∑2 3
new
∏∏ ,
FSerialPluginDataSentEventArgs
∏∏ :
(
∏∏: ;
this
ππ  
,
ππ  !
FEventId
∫∫ $
.
∫∫$ %
SerialDataSent
∫∫% 3
,
∫∫3 4
FResultCode
ªª '
.
ªª' (
Error
ªª( -
,
ªª- .
string
ºº "
.
ºº" #
Format
ºº# )
(
ºº) *

FConstants
ºº* 4
.
ºº4 5

err_m_0030
ºº5 ?
,
ºº? @
$str
ººA I
)
ººI J
,
ººJ K
fSerialSendData
ΩΩ +
)
ææ 
)
øø 
;
øø 
}
¿¿ 
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
ex
¬¬ 
)
¬¬  
{
√√ 
FDebug
ƒƒ 
.
ƒƒ 
throwException
ƒƒ %
(
ƒƒ% &
ex
ƒƒ& (
)
ƒƒ( )
;
ƒƒ) *
}
≈≈ 
finally
∆∆ 
{
«« 
}
…… 
}
   	
public
ŒŒ 
void
ŒŒ 
sendSerialData
ŒŒ "
(
ŒŒ" #
byte
œœ 
[
œœ 
]
œœ 
data
œœ 
)
–– 
{
—— 	
try
““ 
{
”” 
sendSerialData
‘‘ 
(
‘‘ 
new
’’ 
FSerialSendData
’’ '
(
’’' (
data
’’( ,
)
’’, -
)
÷÷ 
;
÷÷ 
}
◊◊ 
catch
ÿÿ 
(
ÿÿ 
	Exception
ÿÿ 
ex
ÿÿ 
)
ÿÿ  
{
ŸŸ 
FDebug
⁄⁄ 
.
⁄⁄ 
throwException
⁄⁄ %
(
⁄⁄% &
ex
⁄⁄& (
)
⁄⁄( )
;
⁄⁄) *
}
€€ 
finally
‹‹ 
{
›› 
}
ﬂﬂ 
}
‡‡ 	
private
‰‰ 
void
‰‰ 
sendTcpData
‰‰  
(
‰‰  !
FSocketSendData
ÂÂ 
fSocketSendData
ÂÂ +
)
ÊÊ 
{
ÁÁ 	
try
ËË 
{
ÈÈ 
if
ÍÍ 
(
ÍÍ 
this
ÍÍ 
.
ÍÍ 
fSocketState
ÍÍ %
==
ÍÍ& (!
FCommunicationState
ÍÍ) <
.
ÍÍ< =
	Connected
ÍÍ= F
)
ÍÍF G
{
ÎÎ 
m_fTcp
ÏÏ 
.
ÏÏ 
send
ÏÏ 
(
ÏÏ  
fSocketSendData
ÏÏ  /
)
ÏÏ/ 0
;
ÏÏ0 1
}
ÌÌ 
else
ÓÓ 
{
ÔÔ 
m_fEventPusher
 "
.
" #
pushTcpEvent
# /
(
/ 0
new
ÒÒ &
FSocketDataSentEventArgs
ÒÒ 4
(
ÒÒ4 5
this
ÚÚ  
,
ÚÚ  !
FEventId
ÛÛ $
.
ÛÛ$ %
SocketDataSent
ÛÛ% 3
,
ÛÛ3 4
FResultCode
ÙÙ '
.
ÙÙ' (
Error
ÙÙ( -
,
ÙÙ- .
string
ıı "
.
ıı" #
Format
ıı# )
(
ıı) *

FConstants
ıı* 4
.
ıı4 5

err_m_0030
ıı5 ?
,
ıı? @
$str
ııA I
)
ııI J
,
ııJ K
fSocketSendData
ˆˆ +
)
˜˜ 
)
¯¯ 
;
¯¯ 
}
˘˘ 
}
˙˙ 
catch
˚˚ 
(
˚˚ 
	Exception
˚˚ 
ex
˚˚ 
)
˚˚  
{
¸¸ 
FDebug
˝˝ 
.
˝˝ 
writeLog
˝˝ 
(
˝˝  
ex
˝˝  "
)
˝˝" #
;
˝˝# $
}
˛˛ 
finally
ˇˇ 
{
ÄÄ 
}
ÇÇ 
}
ÉÉ 	
public
áá 
void
áá 
sendTcpData
áá 
(
áá  '
FSerialPluginDataTransfer
àà %!
fSerialDataTransfer
àà& 9
)
ââ 
{
ää 	
try
ãã 
{
åå 
sendTcpData
çç 
(
çç !
fSerialDataTransfer
çç /
.
çç/ 0
getSerialData
çç0 =
(
çç= >
)
çç> ?
)
çç? @
;
çç@ A
}
éé 
catch
èè 
(
èè 
	Exception
èè 
ex
èè 
)
èè  
{
êê 
FDebug
ëë 
.
ëë 
throwException
ëë %
(
ëë% &
ex
ëë& (
)
ëë( )
;
ëë) *
}
íí 
finally
ìì 
{
îî 
}
ññ 
}
óó 	
internal
õõ 
void
õõ 
onEventRaised
õõ #
(
õõ# $
FEventArgsBase
úú 
fArgs
úú  
)
ùù 
{
ûû 	
try
üü 
{
†† 
if
°° 
(
°° 
m_logEnabled
°°  
)
°°  !
{
¢¢ 
m_fLogWriter
££  
.
££  !
write
££! &
(
££& '
fArgs
££' ,
)
££, -
;
££- .
}
§§ 
if
®® 
(
®® 
EventRaised
®® 
!=
®®  "
null
®®# '
)
®®' (
{
©© 
EventRaised
™™ 
(
™™  
this
™™  $
,
™™$ %
fArgs
™™& +
)
™™+ ,
;
™™, -
}
´´ 
}
¨¨ 
catch
≠≠ 
(
≠≠ 
	Exception
≠≠ 
ex
≠≠ 
)
≠≠  
{
ÆÆ 
FDebug
ØØ 
.
ØØ 
throwException
ØØ %
(
ØØ% &
ex
ØØ& (
)
ØØ( )
;
ØØ) *
}
∞∞ 
finally
±± 
{
≤≤ 
}
¥¥ 
}
µµ 	
public
ππ 
void
ππ (
waitEventHandlingCompleted
ππ .
(
ππ. /
)
∫∫ 
{
ªª 	
try
ºº 
{
ΩΩ 
m_fEventPusher
ææ 
.
ææ (
waitEventHandlingCompleted
ææ 9
(
ææ9 :
)
ææ: ;
;
ææ; <
}
øø 
catch
¿¿ 
(
¿¿ 
	Exception
¿¿ 
ex
¿¿ 
)
¿¿  
{
¡¡ 
FDebug
¬¬ 
.
¬¬ 
throwException
¬¬ %
(
¬¬% &
ex
¬¬& (
)
¬¬( )
;
¬¬) *
}
√√ 
finally
ƒƒ 
{
≈≈ 
}
«« 
}
»» 	
public
ÃÃ 
void
ÃÃ 
writeAppLog
ÃÃ 
(
ÃÃ  
string
ÕÕ 
log
ÕÕ 
)
ŒŒ 
{
œœ 	
try
–– 
{
—— 
m_fLogWriter
““ 
.
““ 
write
““ "
(
““" #
log
““# &
)
““& '
;
““' (
}
”” 
catch
‘‘ 
(
‘‘ 
	Exception
‘‘ 
ex
‘‘ 
)
‘‘  
{
’’ 
FDebug
÷÷ 
.
÷÷ 
throwException
÷÷ %
(
÷÷% &
ex
÷÷& (
)
÷÷( )
;
÷÷) *
}
◊◊ 
finally
ÿÿ 
{
ŸŸ 
}
€€ 
}
‹‹ 	
}
‚‚ 
}„„ ˜π
lD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\c_FSecs1ToHsms.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

class 
FSecs1ToHsms 
: 
IDisposable *
{ 
public 
event $
FEventRaisedEventHandler -
EventRaised. 9
=: ;
null< @
;@ A
private 
bool 

m_disposed 
=  !
false" '
;' (
private!! 
bool!! 
m_logEnabled!! !
=!!" #
false!!$ )
;!!) *
private"" 
string"" 
m_logDirectory"" %
=""& '
string""( .
."". /
Empty""/ 4
;""4 5
private## 
string## 
m_logFileNameSuffix## *
=##+ ,
string##- 3
.##3 4
Empty##4 9
;##9 :
private$$ 
int$$ 
m_logFileMaxSize$$ $
=$$% &
$num$$' (
;$$( )
private%% 
bool%% "
m_logMonitoringEnabled%% +
=%%, -
false%%. 3
;%%3 4
private'' 
FCommunicationState'' #
m_fSecs1State''$ 1
=''2 3
FCommunicationState''4 G
.''G H
Closed''H N
;''N O
private(( 
FCommunicationState(( #
m_fHsmsState(($ 0
=((1 2
FCommunicationState((3 F
.((F G
Closed((G M
;((M N
private)) 
FSecs1Config)) 
m_fSecs1Config)) +
=)), -
null)). 2
;))2 3
private** 
FHsmsConfig** 
m_fHsmsConfig** )
=*** +
null**, 0
;**0 1
private++ 
FEventPusher++ 
m_fEventPusher++ +
=++, -
null++. 2
;++2 3
private,, 
FSECS1,, 
m_fSecs1,, 
=,,  !
null,," &
;,,& '
private-- 
	FBaseHsms-- 
m_fHsms-- !
=--" #
null--$ (
;--( )
private.. 

FLogWriter.. 
m_fLogWriter.. '
=..( )
null..* .
;... /
private// 
FIDPointer32// !
m_fSystemBytesPointer// 2
=//3 4
null//5 9
;//9 :
private11 

Dictionary11 
<11 
string11 !
,11! "$
FInterceptingDataMessage11# ;
>11; <,
 m_fSecs1InterceptingDataMessages11= ]
=11^ _
null11` d
;11d e
private22 

Dictionary22 
<22 
string22 !
,22! "$
FInterceptingDataMessage22# ;
>22; <+
m_fHsmsInterceptingDataMessages22= \
=22] ^
null22_ c
;22c d
public88 
FSecs1ToHsms88 
(88 
string99 
licFileName99 
):: 
{;; 	
validateLicense<< 
(<< 
licFileName<< '
)<<' (
;<<( )
init@@ 
(@@ 
)@@ 
;@@ 
}AA 	
~EE 	
FSecs1ToHsmsEE	 
(EE 
)FF 
{GG 	
	myDisposeHH 
(HH 
falseHH 
)HH 
;HH 
}II 	
	protectedMM 
voidMM 
	myDisposeMM  
(MM  !
boolNN 
	disposingNN 
)OO 
{PP 	
ifQQ 
(QQ 
!QQ 

m_disposedQQ 
)QQ 
{RR 
ifSS 
(SS 
	disposingSS 
)SS 
{TT 
termUU 
(UU 
)UU 
;UU 
}VV 

m_disposedXX 
=XX 
trueXX !
;XX! "
}YY 
}ZZ 	
publicbb 
voidbb 
Disposebb 
(bb 
)cc 
{dd 	
	myDisposeee 
(ee 
trueee 
)ee 
;ee 
GCff 
.ff 
SuppressFinalizeff 
(ff  
thisff  $
)ff$ %
;ff% &
}gg 	
publicoo 
FSecs1Configoo 
fSecs1Configoo (
{pp 	
getqq 
{rr 
tryss 
{tt 
returnuu 
m_fSecs1Configuu )
;uu) *
}vv 
catchww 
(ww 
	Exceptionww  
exww! #
)ww# $
{xx 
FDebugyy 
.yy 
throwExceptionyy )
(yy) *
exyy* ,
)yy, -
;yy- .
}zz 
finally{{ 
{|| 
}~~ 
return 
null 
; 
}
ÄÄ 
}
ÅÅ 	
public
ÖÖ 
FHsmsConfig
ÖÖ 
fHsmsConfig
ÖÖ &
{
ÜÜ 	
get
áá 
{
àà 
try
ââ 
{
ää 
return
ãã 
m_fHsmsConfig
ãã (
;
ãã( )
}
åå 
catch
çç 
(
çç 
	Exception
çç  
ex
çç! #
)
çç# $
{
éé 
FDebug
èè 
.
èè 
throwException
èè )
(
èè) *
ex
èè* ,
)
èè, -
;
èè- .
}
êê 
finally
ëë 
{
íí 
}
îî 
return
ïï 
null
ïï 
;
ïï 
}
ññ 
}
óó 	
public
õõ !
FCommunicationState
õõ "
fSecs1State
õõ# .
{
úú 	
get
ùù 
{
ûû 
try
üü 
{
†† 
return
°° 
m_fSecs1State
°° (
;
°°( )
}
¢¢ 
catch
££ 
(
££ 
	Exception
££  
ex
££! #
)
££# $
{
§§ 
FDebug
•• 
.
•• 
throwException
•• )
(
••) *
ex
••* ,
)
••, -
;
••- .
}
¶¶ 
finally
ßß 
{
®® 
}
™™ 
return
´´ !
FCommunicationState
´´ *
.
´´* +
Closed
´´+ 1
;
´´1 2
}
¨¨ 
}
≠≠ 	
public
±± !
FCommunicationState
±± "

fHsmsState
±±# -
{
≤≤ 	
get
≥≥ 
{
¥¥ 
try
µµ 
{
∂∂ 
return
∑∑ 
m_fHsmsState
∑∑ '
;
∑∑' (
}
∏∏ 
catch
ππ 
(
ππ 
	Exception
ππ  
ex
ππ! #
)
ππ# $
{
∫∫ 
FDebug
ªª 
.
ªª 
throwException
ªª )
(
ªª) *
ex
ªª* ,
)
ªª, -
;
ªª- .
}
ºº 
finally
ΩΩ 
{
ææ 
}
¿¿ 
return
¡¡ !
FCommunicationState
¡¡ *
.
¡¡* +
Closed
¡¡+ 1
;
¡¡1 2
}
¬¬ 
}
√√ 	
internal
«« 
FEventPusher
«« 
fEventPusher
«« *
{
»» 	
get
…… 
{
   
try
ÀÀ 
{
ÃÃ 
return
ÕÕ 
m_fEventPusher
ÕÕ )
;
ÕÕ) *
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ  
ex
œœ! #
)
œœ# $
{
–– 
FDebug
—— 
.
—— 
throwException
—— )
(
——) *
ex
——* ,
)
——, -
;
——- .
}
““ 
finally
”” 
{
‘‘ 
}
÷÷ 
return
◊◊ 
null
◊◊ 
;
◊◊ 
}
ÿÿ 
}
ŸŸ 	
public
›› 
bool
›› 

logEnabled
›› 
{
ﬁﬁ 	
get
ﬂﬂ 
{
‡‡ 
try
·· 
{
‚‚ 
return
„„ 
m_logEnabled
„„ '
;
„„' (
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ  
ex
ÂÂ! #
)
ÂÂ# $
{
ÊÊ 
FDebug
ÁÁ 
.
ÁÁ 
throwException
ÁÁ )
(
ÁÁ) *
ex
ÁÁ* ,
)
ÁÁ, -
;
ÁÁ- .
}
ËË 
finally
ÈÈ 
{
ÍÍ 
}
ÏÏ 
return
ÌÌ 
false
ÌÌ 
;
ÌÌ 
}
ÓÓ 
set
 
{
ÒÒ 
try
ÚÚ 
{
ÛÛ 
m_logEnabled
ÙÙ  
=
ÙÙ! "
value
ÙÙ# (
;
ÙÙ( )
}
ıı 
catch
ˆˆ 
(
ˆˆ 
	Exception
ˆˆ  
ex
ˆˆ! #
)
ˆˆ# $
{
˜˜ 
FDebug
¯¯ 
.
¯¯ 
throwException
¯¯ )
(
¯¯) *
ex
¯¯* ,
)
¯¯, -
;
¯¯- .
}
˘˘ 
finally
˙˙ 
{
˚˚ 
}
˝˝ 
}
˛˛ 
}
ˇˇ 	
public
ÉÉ 
string
ÉÉ 
logDirectory
ÉÉ "
{
ÑÑ 	
get
ÖÖ 
{
ÜÜ 
try
áá 
{
àà 
return
ââ 
m_logDirectory
ââ )
;
ââ) *
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã  
ex
ãã! #
)
ãã# $
{
åå 
FDebug
çç 
.
çç 
throwException
çç )
(
çç) *
ex
çç* ,
)
çç, -
;
çç- .
}
éé 
finally
èè 
{
êê 
}
íí 
return
ìì 
string
ìì 
.
ìì 
Empty
ìì #
;
ìì# $
}
îî 
set
ññ 
{
óó 
try
òò 
{
ôô 
m_logDirectory
öö "
=
öö# $
value
öö% *
;
öö* +
}
õõ 
catch
úú 
(
úú 
	Exception
úú  
ex
úú! #
)
úú# $
{
ùù 
FDebug
ûû 
.
ûû 
throwException
ûû )
(
ûû) *
ex
ûû* ,
)
ûû, -
;
ûû- .
}
üü 
finally
†† 
{
°° 
}
££ 
}
§§ 
}
•• 	
public
©© 
string
©© 
logFileNameSuffix
©© '
{
™™ 	
get
´´ 
{
¨¨ 
try
≠≠ 
{
ÆÆ 
return
ØØ !
m_logFileNameSuffix
ØØ .
;
ØØ. /
}
∞∞ 
catch
±± 
(
±± 
	Exception
±±  
ex
±±! #
)
±±# $
{
≤≤ 
FDebug
≥≥ 
.
≥≥ 
throwException
≥≥ )
(
≥≥) *
ex
≥≥* ,
)
≥≥, -
;
≥≥- .
}
¥¥ 
finally
µµ 
{
∂∂ 
}
∏∏ 
return
ππ 
string
ππ 
.
ππ 
Empty
ππ #
;
ππ# $
}
∫∫ 
set
ºº 
{
ΩΩ 
try
ææ 
{
øø !
m_logFileNameSuffix
¿¿ '
=
¿¿( )
value
¿¿* /
;
¿¿/ 0
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬  
ex
¬¬! #
)
¬¬# $
{
√√ 
FDebug
ƒƒ 
.
ƒƒ 
throwException
ƒƒ )
(
ƒƒ) *
ex
ƒƒ* ,
)
ƒƒ, -
;
ƒƒ- .
}
≈≈ 
finally
∆∆ 
{
«« 
}
…… 
}
   
}
ÀÀ 	
public
œœ 
int
œœ 
logFileMaxSize
œœ !
{
–– 	
get
—— 
{
““ 
try
”” 
{
‘‘ 
return
’’ 
m_logFileMaxSize
’’ +
;
’’+ ,
}
÷÷ 
catch
◊◊ 
(
◊◊ 
	Exception
◊◊  
ex
◊◊! #
)
◊◊# $
{
ÿÿ 
FDebug
ŸŸ 
.
ŸŸ 
throwException
ŸŸ )
(
ŸŸ) *
ex
ŸŸ* ,
)
ŸŸ, -
;
ŸŸ- .
}
⁄⁄ 
finally
€€ 
{
‹‹ 
}
ﬁﬁ 
return
ﬂﬂ 
$num
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
set
‚‚ 
{
„„ 
try
‰‰ 
{
ÂÂ 
m_logFileMaxSize
ÊÊ $
=
ÊÊ% &
value
ÊÊ' ,
;
ÊÊ, -
}
ÁÁ 
catch
ËË 
(
ËË 
	Exception
ËË  
ex
ËË! #
)
ËË# $
{
ÈÈ 
FDebug
ÍÍ 
.
ÍÍ 
throwException
ÍÍ )
(
ÍÍ) *
ex
ÍÍ* ,
)
ÍÍ, -
;
ÍÍ- .
}
ÎÎ 
finally
ÏÏ 
{
ÌÌ 
}
ÔÔ 
}
 
}
ÒÒ 	
public
ıı 
bool
ıı "
logMonitoringEnabled
ıı (
{
ˆˆ 	
get
˜˜ 
{
¯¯ 
try
˘˘ 
{
˙˙ 
return
˚˚ $
m_logMonitoringEnabled
˚˚ 1
;
˚˚1 2
}
¸¸ 
catch
˝˝ 
(
˝˝ 
	Exception
˝˝  
ex
˝˝! #
)
˝˝# $
{
˛˛ 
FDebug
ˇˇ 
.
ˇˇ 
throwException
ˇˇ )
(
ˇˇ) *
ex
ˇˇ* ,
)
ˇˇ, -
;
ˇˇ- .
}
ÄÄ 
finally
ÅÅ 
{
ÇÇ 
}
ÑÑ 
return
ÖÖ 
false
ÖÖ 
;
ÖÖ 
}
ÜÜ 
set
àà 
{
ââ 
try
ää 
{
ãã $
m_logMonitoringEnabled
åå *
=
åå+ ,
value
åå- 2
;
åå2 3
}
çç 
catch
éé 
(
éé 
	Exception
éé  
ex
éé! #
)
éé# $
{
èè 
FDebug
êê 
.
êê 
throwException
êê )
(
êê) *
ex
êê* ,
)
êê, -
;
êê- .
}
ëë 
finally
íí 
{
ìì 
}
ïï 
}
ññ 
}
óó 	
public
õõ 
int
õõ /
!secs1InterceptingDataMessageCount
õõ 4
{
úú 	
get
ùù 
{
ûû 
try
üü 
{
†† 
return
°° .
 m_fSecs1InterceptingDataMessages
°° ;
.
°°; <
Count
°°< A
;
°°A B
}
¢¢ 
catch
££ 
(
££ 
	Exception
££  
ex
££! #
)
££# $
{
§§ 
FDebug
•• 
.
•• 
throwException
•• )
(
••) *
ex
••* ,
)
••, -
;
••- .
}
¶¶ 
finally
ßß 
{
®® 
}
™™ 
return
´´ 
$num
´´ 
;
´´ 
}
¨¨ 
}
≠≠ 	
public
±± 
int
±± .
 hsmsInterceptingDataMessageCount
±± 3
{
≤≤ 	
get
≥≥ 
{
¥¥ 
try
µµ 
{
∂∂ 
return
∑∑ -
m_fHsmsInterceptingDataMessages
∑∑ :
.
∑∑: ;
Count
∑∑; @
;
∑∑@ A
}
∏∏ 
catch
ππ 
(
ππ 
	Exception
ππ  
ex
ππ! #
)
ππ# $
{
∫∫ 
FDebug
ªª 
.
ªª 
throwException
ªª )
(
ªª) *
ex
ªª* ,
)
ªª, -
;
ªª- .
}
ºº 
finally
ΩΩ 
{
ææ 
}
¿¿ 
return
¡¡ 
$num
¡¡ 
;
¡¡ 
}
¬¬ 
}
√√ 	
internal
«« 
FIDPointer32
«« !
fSystemBytesPointer
«« 1
{
»» 	
get
…… 
{
   
try
ÀÀ 
{
ÃÃ 
return
ÕÕ #
m_fSystemBytesPointer
ÕÕ 0
;
ÕÕ0 1
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ  
ex
œœ! #
)
œœ# $
{
–– 
FDebug
—— 
.
—— 
throwException
—— )
(
——) *
ex
——* ,
)
——, -
;
——- .
}
““ 
finally
”” 
{
‘‘ 
}
÷÷ 
return
◊◊ 
null
◊◊ 
;
◊◊ 
}
ÿÿ 
}
ŸŸ 	
private
·· 
void
·· 
validateLicense
·· $
(
··$ %
string
‚‚ 
fileName
‚‚ 
)
„„ 
{
‰‰ 	
FLic2License
ËË 
fLic
ËË 
=
ËË 
null
ËË  $
;
ËË$ %
	FLic2Info
ÈÈ 
fLicInfo
ÈÈ 
=
ÈÈ  
null
ÈÈ! %
;
ÈÈ% &
try
ÎÎ 
{
ÏÏ 
fLic
ÌÌ 
=
ÌÌ 
new
ÌÌ 
FLic2License
ÌÌ '
(
ÌÌ' (
)
ÌÌ( )
;
ÌÌ) *
fLicInfo
ÓÓ 
=
ÓÓ 
fLic
ÓÓ 
.
ÓÓ  
validate
ÓÓ  (
(
ÓÓ( )
fileName
ÓÓ) 1
)
ÓÓ1 2
;
ÓÓ2 3
if
ıı 
(
ıı 
fLicInfo
ıı 
.
ıı 

fLicS2hCvt
ıı '
.
ıı' (
productEnabled
ıı( 6
==
ıı7 9
FYesNo
ıı: @
.
ıı@ A
No
ııA C
)
ııC D
{
ˆˆ 
fLic
˜˜ 
.
˜˜ "
rasieValidationError
˜˜ -
(
˜˜- .
$str
˜˜. ?
)
˜˜? @
;
˜˜@ A
}
¯¯ 
if
ˇˇ 
(
ˇˇ 
fLicInfo
ˇˇ 
.
ˇˇ 

fLicS2hCvt
ˇˇ '
.
ˇˇ' (
expireIssuedCheck
ˇˇ( 9
==
ˇˇ: <
FYesNo
ˇˇ= C
.
ˇˇC D
Yes
ˇˇD G
&&
ˇˇH J
!
ˇˇK L
fLic
ˇˇL P
.
ˇˇP Q%
validateExpireIssueDate
ˇˇQ h
(
ˇˇh i
fLicInfo
ˇˇi q
.
ˇˇq r

fLicS2hCvt
ˇˇr |
.
ˇˇ| }
expireIssuedDateˇˇ} ç
)ˇˇç é
)ˇˇé è
{
ÄÄ 
fLic
ÅÅ 
.
ÅÅ "
rasieValidationError
ÅÅ -
(
ÅÅ- .
$str
ÅÅ. B
)
ÅÅB C
;
ÅÅC D
}
ÇÇ 
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ 
ex
ÑÑ 
)
ÑÑ  
{
ÖÖ 
FDebug
ÜÜ 
.
ÜÜ 
throwException
ÜÜ %
(
ÜÜ% &
ex
ÜÜ& (
)
ÜÜ( )
;
ÜÜ) *
}
áá 
finally
àà 
{
ââ 
if
ää 
(
ää 
fLic
ää 
!=
ää 
null
ää  
)
ää  !
{
ãã 
fLic
åå 
.
åå 
Dispose
åå  
(
åå  !
)
åå! "
;
åå" #
fLic
çç 
=
çç 
null
çç 
;
çç  
}
éé 
if
êê 
(
êê 
fLicInfo
êê 
!=
êê 
null
êê  $
)
êê$ %
{
ëë 
fLicInfo
íí 
.
íí 
Dispose
íí $
(
íí$ %
)
íí% &
;
íí& '
fLicInfo
ìì 
=
ìì 
null
ìì #
;
ìì# $
}
îî 
}
ïï 
}
ññ 	
private
öö 
void
öö 
init
öö 
(
öö 
)
õõ 
{
úú 	
try
ùù 
{
ûû 
m_logDirectory
üü 
=
üü  
Application
üü! ,
.
üü, -
StartupPath
üü- 8
+
üü9 :
$str
üü; B
;
üüB C!
m_logFileNameSuffix
†† #
=
††$ %
$str
††& 3
;
††3 4
m_logFileMaxSize
°°  
=
°°! "
$num
°°# $
;
°°$ %
m_fLogWriter
•• 
=
•• 
new
•• "

FLogWriter
••# -
(
••- .
this
••. 2
)
••2 3
;
••3 4#
m_fSystemBytesPointer
¶¶ %
=
¶¶& '
new
¶¶( +
FIDPointer32
¶¶, 8
(
¶¶8 9
$num
¶¶9 >
)
¶¶> ?
;
¶¶? @
m_fSecs1Config
≠≠ 
=
≠≠  
new
≠≠! $
FSecs1Config
≠≠% 1
(
≠≠1 2
this
≠≠2 6
)
≠≠6 7
;
≠≠7 8
m_fHsmsConfig
ÆÆ 
=
ÆÆ 
new
ÆÆ  #
FHsmsConfig
ÆÆ$ /
(
ÆÆ/ 0
this
ÆÆ0 4
)
ÆÆ4 5
;
ÆÆ5 6.
 m_fSecs1InterceptingDataMessages
≤≤ 0
=
≤≤1 2
new
≤≤3 6

Dictionary
≤≤7 A
<
≤≤A B
string
≤≤B H
,
≤≤H I&
FInterceptingDataMessage
≤≤J b
>
≤≤b c
(
≤≤c d
)
≤≤d e
;
≤≤e f-
m_fHsmsInterceptingDataMessages
≥≥ /
=
≥≥0 1
new
≥≥2 5

Dictionary
≥≥6 @
<
≥≥@ A
string
≥≥A G
,
≥≥G H&
FInterceptingDataMessage
≥≥I a
>
≥≥a b
(
≥≥b c
)
≥≥c d
;
≥≥d e
m_fEventPusher
∑∑ 
=
∑∑  
new
∑∑! $
FEventPusher
∑∑% 1
(
∑∑1 2
this
∑∑2 6
)
∑∑6 7
;
∑∑7 8
}
∏∏ 
catch
ππ 
(
ππ 
	Exception
ππ 
ex
ππ 
)
ππ  
{
∫∫ 
FDebug
ªª 
.
ªª 
throwException
ªª %
(
ªª% &
ex
ªª& (
)
ªª( )
;
ªª) *
}
ºº 
finally
ΩΩ 
{
ææ 
}
¿¿ 
}
¡¡ 	
private
≈≈ 
void
≈≈ 
term
≈≈ 
(
≈≈ 
)
∆∆ 
{
«« 	
try
»» 
{
…… 
closeAll
   
(
   
)
   
;
   
if
ŒŒ 
(
ŒŒ 
m_fEventPusher
ŒŒ "
!=
ŒŒ# %
null
ŒŒ& *
)
ŒŒ* +
{
œœ 
m_fEventPusher
–– "
.
––" #
Dispose
––# *
(
––* +
)
––+ ,
;
––, -
m_fEventPusher
—— "
=
——# $
null
——% )
;
——) *
}
““ 
if
÷÷ 
(
÷÷ 
m_fSecs1Config
÷÷ "
!=
÷÷# %
null
÷÷& *
)
÷÷* +
{
◊◊ 
m_fSecs1Config
ÿÿ "
.
ÿÿ" #
Dispose
ÿÿ# *
(
ÿÿ* +
)
ÿÿ+ ,
;
ÿÿ, -
m_fSecs1Config
ŸŸ "
=
ŸŸ# $
null
ŸŸ% )
;
ŸŸ) *
}
⁄⁄ 
if
€€ 
(
€€ 
m_fHsmsConfig
€€ !
!=
€€" $
null
€€% )
)
€€) *
{
‹‹ 
m_fHsmsConfig
›› !
.
››! "
Dispose
››" )
(
››) *
)
››* +
;
››+ ,
m_fHsmsConfig
ﬁﬁ !
=
ﬁﬁ" #
null
ﬁﬁ$ (
;
ﬁﬁ( )
}
ﬂﬂ .
 m_fSecs1InterceptingDataMessages
„„ 0
=
„„1 2
null
„„3 7
;
„„7 8-
m_fHsmsInterceptingDataMessages
‰‰ /
=
‰‰0 1
null
‰‰2 6
;
‰‰6 7
if
ËË 
(
ËË 
m_fLogWriter
ËË  
!=
ËË! #
null
ËË$ (
)
ËË( )
{
ÈÈ 
m_fLogWriter
ÍÍ  
.
ÍÍ  !
Dispose
ÍÍ! (
(
ÍÍ( )
)
ÍÍ) *
;
ÍÍ* +
m_fLogWriter
ÎÎ  
=
ÎÎ! "
null
ÎÎ# '
;
ÎÎ' (
}
ÏÏ 
if
ÓÓ 
(
ÓÓ #
m_fSystemBytesPointer
ÓÓ )
!=
ÓÓ* ,
null
ÓÓ- 1
)
ÓÓ1 2
{
ÔÔ #
m_fSystemBytesPointer
 )
.
) *
Dispose
* 1
(
1 2
)
2 3
;
3 4#
m_fSystemBytesPointer
ÒÒ )
=
ÒÒ* +
null
ÒÒ, 0
;
ÒÒ0 1
}
ÚÚ 
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı 
FDebug
ˆˆ 
.
ˆˆ 
throwException
ˆˆ %
(
ˆˆ% &
ex
ˆˆ& (
)
ˆˆ( )
;
ˆˆ) *
}
˜˜ 
finally
¯¯ 
{
˘˘ 
}
˚˚ 
}
¸¸ 	
public
ÄÄ 
void
ÄÄ 
	openSecs1
ÄÄ 
(
ÄÄ 
)
ÅÅ 
{
ÇÇ 	
try
ÉÉ 
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
m_fSecs1State
ÖÖ !
!=
ÖÖ" $!
FCommunicationState
ÖÖ% 8
.
ÖÖ8 9
Closed
ÖÖ9 ?
)
ÖÖ? @
{
ÜÜ 
return
áá 
;
áá 
}
àà 
m_fSecs1
åå 
=
åå 
new
åå 
FSECS1
åå %
(
åå% &
this
åå& *
)
åå* +
;
åå+ ,
m_fSecs1
çç 
.
çç 
open
çç 
(
çç 
)
çç 
;
çç  
}
éé 
catch
èè 
(
èè 
	Exception
èè 
ex
èè 
)
èè  
{
êê 
if
ëë 
(
ëë 
m_fSecs1
ëë 
!=
ëë 
null
ëë  $
)
ëë$ %
{
íí 
m_fSecs1
ìì 
.
ìì 
Dispose
ìì $
(
ìì$ %
)
ìì% &
;
ìì& '
m_fSecs1
îî 
=
îî 
null
îî #
;
îî# $
}
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ %
(
ññ% &
ex
ññ& (
)
ññ( )
;
ññ) *
}
óó 
finally
òò 
{
ôô 
}
õõ 
}
úú 	
public
†† 
void
†† 

closeSecs1
†† 
(
†† 
)
°° 
{
¢¢ 	
try
££ 
{
§§ 
if
•• 
(
•• 
m_fSecs1State
•• !
==
••" $!
FCommunicationState
••% 8
.
••8 9
Closed
••9 ?
)
••? @
{
¶¶ 
return
ßß 
;
ßß 
}
®® 
if
¨¨ 
(
¨¨ 
m_fSecs1
¨¨ 
!=
¨¨ 
null
¨¨  $
)
¨¨$ %
{
≠≠ 
m_fSecs1
ÆÆ 
.
ÆÆ 
close
ÆÆ "
(
ÆÆ" #
)
ÆÆ# $
;
ÆÆ$ %
m_fSecs1
ØØ 
.
ØØ 
Dispose
ØØ $
(
ØØ$ %
)
ØØ% &
;
ØØ& '
m_fSecs1
∞∞ 
=
∞∞ 
null
∞∞ #
;
∞∞# $
}
±± 
}
≤≤ 
catch
≥≥ 
(
≥≥ 
	Exception
≥≥ 
ex
≥≥ 
)
≥≥  
{
¥¥ 
FDebug
µµ 
.
µµ 
throwException
µµ %
(
µµ% &
ex
µµ& (
)
µµ( )
;
µµ) *
}
∂∂ 
finally
∑∑ 
{
∏∏ 
}
∫∫ 
}
ªª 	
public
øø 
void
øø 
openHsms
øø 
(
øø 
)
¿¿ 
{
¡¡ 	
try
¬¬ 
{
√√ 
if
ƒƒ 
(
ƒƒ 
m_fHsmsState
ƒƒ  
!=
ƒƒ! #!
FCommunicationState
ƒƒ$ 7
.
ƒƒ7 8
Closed
ƒƒ8 >
)
ƒƒ> ?
{
≈≈ 
return
∆∆ 
;
∆∆ 
}
«« 
if
ÀÀ 
(
ÀÀ 
m_fHsmsConfig
ÀÀ !
.
ÀÀ! "
fConnectMode
ÀÀ" .
==
ÀÀ/ 1
FConnectMode
ÀÀ2 >
.
ÀÀ> ?
Passive
ÀÀ? F
)
ÀÀF G
{
ÃÃ 
m_fHsms
ÕÕ 
=
ÕÕ 
new
ÕÕ !
FHsmsPassive
ÕÕ" .
(
ÕÕ. /
this
ÕÕ/ 3
)
ÕÕ3 4
;
ÕÕ4 5
}
ŒŒ 
else
œœ 
{
–– 
m_fHsms
—— 
=
—— 
new
—— !
FHsmsActive
——" -
(
——- .
this
——. 2
)
——2 3
;
——3 4
}
““ 
m_fHsms
‘‘ 
.
‘‘ 
open
‘‘ 
(
‘‘ 
)
‘‘ 
;
‘‘ 
}
’’ 
catch
÷÷ 
(
÷÷ 
	Exception
÷÷ 
ex
÷÷ 
)
÷÷  
{
◊◊ 
if
ÿÿ 
(
ÿÿ 
m_fHsms
ÿÿ 
!=
ÿÿ 
null
ÿÿ #
)
ÿÿ# $
{
ŸŸ 
m_fHsms
⁄⁄ 
.
⁄⁄ 
Dispose
⁄⁄ #
(
⁄⁄# $
)
⁄⁄$ %
;
⁄⁄% &
m_fHsms
€€ 
=
€€ 
null
€€ "
;
€€" #
}
‹‹ 
FDebug
›› 
.
›› 
throwException
›› %
(
››% &
ex
››& (
)
››( )
;
››) *
}
ﬁﬁ 
finally
ﬂﬂ 
{
‡‡ 
}
‚‚ 
}
„„ 	
public
ÁÁ 
void
ÁÁ 
	closeHsms
ÁÁ 
(
ÁÁ 
)
ËË 
{
ÈÈ 	
try
ÍÍ 
{
ÎÎ 
if
ÏÏ 
(
ÏÏ 
m_fHsmsState
ÏÏ  
==
ÏÏ! #!
FCommunicationState
ÏÏ$ 7
.
ÏÏ7 8
Closed
ÏÏ8 >
)
ÏÏ> ?
{
ÌÌ 
return
ÓÓ 
;
ÓÓ 
}
ÔÔ 
if
ÛÛ 
(
ÛÛ 
m_fHsms
ÛÛ 
!=
ÛÛ 
null
ÛÛ #
)
ÛÛ# $
{
ÙÙ 
m_fHsms
ıı 
.
ıı 
close
ıı !
(
ıı! "
)
ıı" #
;
ıı# $
m_fHsms
ˆˆ 
.
ˆˆ 
Dispose
ˆˆ #
(
ˆˆ# $
)
ˆˆ$ %
;
ˆˆ% &
m_fHsms
˜˜ 
=
˜˜ 
null
˜˜ "
;
˜˜" #
}
¯¯ 
}
˘˘ 
catch
˙˙ 
(
˙˙ 
	Exception
˙˙ 
ex
˙˙ 
)
˙˙  
{
˚˚ 
FDebug
¸¸ 
.
¸¸ 
throwException
¸¸ %
(
¸¸% &
ex
¸¸& (
)
¸¸( )
;
¸¸) *
}
˝˝ 
finally
˛˛ 
{
ˇˇ 
}
ÅÅ 
}
ÇÇ 	
public
ÜÜ 
void
ÜÜ 
openAll
ÜÜ 
(
ÜÜ 
)
áá 
{
àà 	
try
ââ 
{
ää 
openHsms
ãã 
(
ãã 
)
ãã 
;
ãã 
	openSecs1
åå 
(
åå 
)
åå 
;
åå 
}
çç 
catch
éé 
(
éé 
	Exception
éé 
ex
éé 
)
éé  
{
èè 
FDebug
êê 
.
êê 
throwException
êê %
(
êê% &
ex
êê& (
)
êê( )
;
êê) *
}
ëë 
finally
íí 
{
ìì 
}
ïï 
}
ññ 	
public
öö 
void
öö 
closeAll
öö 
(
öö 
)
õõ 
{
úú 	
try
ùù 
{
ûû 

closeSecs1
üü 
(
üü 
)
üü 
;
üü 
	closeHsms
†† 
(
†† 
)
†† 
;
†† 
}
°° 
catch
¢¢ 
(
¢¢ 
	Exception
¢¢ 
ex
¢¢ 
)
¢¢  
{
££ 
FDebug
§§ 
.
§§ 
throwException
§§ %
(
§§% &
ex
§§& (
)
§§( )
;
§§) *
}
•• 
finally
¶¶ 
{
ßß 
}
©© 
}
™™ 	
internal
ÆÆ 
void
ÆÆ 
changeSecs1State
ÆÆ &
(
ÆÆ& '!
FCommunicationState
ØØ 
fState
ØØ  &
,
ØØ& '
string
∞∞ 

serialPort
∞∞ 
,
∞∞ 
int
±± 
baud
±± 
)
≤≤ 
{
≥≥ 	
try
¥¥ 
{
µµ 
if
∂∂ 
(
∂∂ 
m_fSecs1State
∂∂ !
==
∂∂" $
fState
∂∂% +
)
∂∂+ ,
{
∑∑ 
return
∏∏ 
;
∏∏ 
}
ππ 
m_fSecs1State
∫∫ 
=
∫∫ 
fState
∫∫  &
;
∫∫& '
m_fEventPusher
ææ 
.
ææ 
pushSecs1Event
ææ -
(
ææ- .
new
øø )
FSecs1StateChangedEventArgs
øø 3
(
øø3 4
this
øø4 8
,
øø8 9
FEventId
øø: B
.
øøB C
Secs1StateChanged
øøC T
,
øøT U
FResultCode
øøV a
.
øøa b
Success
øøb i
,
øøi j
string
øøk q
.
øøq r
Empty
øør w
,
øøw x
fState
øøy 
,øø Ä

serialPortøøÅ ã
,øøã å
baudøøç ë
)øøë í
)
¿¿ 
;
¿¿ 
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
ex
¬¬ 
)
¬¬  
{
√√ 
FDebug
ƒƒ 
.
ƒƒ 
throwException
ƒƒ %
(
ƒƒ% &
ex
ƒƒ& (
)
ƒƒ( )
;
ƒƒ) *
}
≈≈ 
finally
∆∆ 
{
«« 
}
…… 
}
   	
internal
ŒŒ 
void
ŒŒ 
changeHsmsState
ŒŒ %
(
ŒŒ% &
FConnectMode
œœ 
fConnectMode
œœ %
,
œœ% &
string
–– 
localIp
–– 
,
–– 
int
—— 
	localPort
—— 
,
—— 
string
““ 
remoteIp
““ 
,
““ 
int
”” 

remotePort
”” 
,
”” !
FCommunicationState
‘‘ 
fState
‘‘  &
)
’’ 
{
÷÷ 	
try
◊◊ 
{
ÿÿ 
if
ŸŸ 
(
ŸŸ 
m_fHsmsState
ŸŸ  
==
ŸŸ! #
fState
ŸŸ$ *
)
ŸŸ* +
{
⁄⁄ 
return
€€ 
;
€€ 
}
‹‹ 
m_fHsmsState
›› 
=
›› 
fState
›› %
;
››% &
m_fEventPusher
·· 
.
·· 
pushHsmsEvent
·· ,
(
··, -
new
‚‚ (
FHsmsStateChangedEventArgs
‚‚ 2
(
‚‚2 3
this
„„ 
,
„„ 
FEventId
‰‰  
.
‰‰  !
HsmsStateChanged
‰‰! 1
,
‰‰1 2
FResultCode
ÂÂ #
.
ÂÂ# $
Success
ÂÂ$ +
,
ÂÂ+ ,
string
ÊÊ 
.
ÊÊ 
Empty
ÊÊ $
,
ÊÊ$ %
fConnectMode
ÁÁ $
,
ÁÁ$ %
localIp
ËË 
,
ËË  
	localPort
ÈÈ !
,
ÈÈ! "
remoteIp
ÍÍ  
,
ÍÍ  !

remotePort
ÎÎ "
,
ÎÎ" #
fState
ÏÏ 
)
ÌÌ 
)
ÓÓ 
;
ÓÓ 
}
ÔÔ 
catch
 
(
 
	Exception
 
ex
 
)
  
{
ÒÒ 
FDebug
ÚÚ 
.
ÚÚ 
throwException
ÚÚ %
(
ÚÚ% &
ex
ÚÚ& (
)
ÚÚ( )
;
ÚÚ) *
}
ÛÛ 
finally
ÙÙ 
{
ıı 
}
˜˜ 
}
¯¯ 	
internal
¸¸ 
void
¸¸ 
onEventRaised
¸¸ #
(
¸¸# $
FEventArgsBase
˝˝ 
fArgs
˝˝  
)
˛˛ 
{
ˇˇ 	
FSecsDataMessage
ÄÄ 
fSecsDataMessage
ÄÄ -
=
ÄÄ. /
null
ÄÄ0 4
;
ÄÄ4 5
try
ÇÇ 
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
m_logEnabled
ÑÑ  
)
ÑÑ  !
{
ÖÖ 
m_fLogWriter
ÜÜ  
.
ÜÜ  !
write
ÜÜ! &
(
ÜÜ& '
fArgs
ÜÜ' ,
)
ÜÜ, -
;
ÜÜ- .
}
áá 
if
ãã 
(
ãã 
EventRaised
ãã 
!=
ãã  "
null
ãã# '
)
ãã' (
{
åå 
EventRaised
çç 
(
çç  
this
çç  $
,
çç$ %
fArgs
çç& +
)
çç+ ,
;
çç, -
}
éé 
if
íí 
(
íí 
fArgs
íí 
.
íí 
fEventId
íí "
==
íí# %
FEventId
íí& .
.
íí. /&
Secs1DataMessageReceived
íí/ G
)
ííG H
{
ìì 
if
îî 
(
îî 
(
îî 
(
îî 0
"FSecs1DataMessageReceivedEventArgs
îî <
)
îî< =
fArgs
îî= B
)
îîB C
.
îîC D
fResult
îîD K
==
îîL N
FResultCode
îîO Z
.
îîZ [
Success
îî[ b
)
îîb c
{
ïï 
fSecsDataMessage
ññ (
=
ññ) *
(
ññ+ ,
(
ññ, -0
"FSecs1DataMessageReceivedEventArgs
ññ- O
)
ññO P
fArgs
ññP U
)
ññU V
.
ññV W
fSecsDataMessage
ññW g
;
ññg h
if
óó 
(
óó 
!
óó ,
isSecs1InterceptingDataMessage
óó ;
(
óó; <
fSecsDataMessage
óó< L
.
óóL M
stream
óóM S
,
óóS T
fSecsDataMessage
óóU e
.
óóe f
function
óóf n
)
óón o
)
óóo p
{
òò !
sendHsmsDataMessage
ôô /
(
ôô/ 0
(
ôô0 1
(
ôô1 20
"FSecs1DataMessageReceivedEventArgs
ôô2 T
)
ôôT U
fArgs
ôôU Z
)
ôôZ [
.
ôô[ \
fSecsDataMessage
ôô\ l
)
ôôl m
;
ôôm n
}
öö 
}
õõ 
}
úú 
else
ùù 
if
ùù 
(
ùù 
fArgs
ùù 
.
ùù 
fEventId
ùù '
==
ùù( *
FEventId
ùù+ 3
.
ùù3 4%
HsmsDataMessageReceived
ùù4 K
)
ùùK L
{
ûû 
if
üü 
(
üü 
(
üü 
(
üü /
!FHsmsDataMessageReceivedEventArgs
üü ;
)
üü; <
fArgs
üü< A
)
üüA B
.
üüB C
fResult
üüC J
==
üüK M
FResultCode
üüN Y
.
üüY Z
Success
üüZ a
)
üüa b
{
†† 
fSecsDataMessage
°° (
=
°°) *
(
°°+ ,
(
°°, -/
!FHsmsDataMessageReceivedEventArgs
°°- N
)
°°N O
fArgs
°°O T
)
°°T U
.
°°U V
fSecsDataMessage
°°V f
;
°°f g
if
¢¢ 
(
¢¢ 
!
¢¢ +
isHsmsInterceptingDataMessage
¢¢ :
(
¢¢: ;
fSecsDataMessage
¢¢; K
.
¢¢K L
stream
¢¢L R
,
¢¢R S
fSecsDataMessage
¢¢T d
.
¢¢d e
function
¢¢e m
)
¢¢m n
)
¢¢n o
{
££ "
sendSecs1DataMessage
§§ 0
(
§§0 1
(
§§1 2
(
§§2 3/
!FHsmsDataMessageReceivedEventArgs
§§3 T
)
§§T U
fArgs
§§U Z
)
§§Z [
.
§§[ \
fSecsDataMessage
§§\ l
)
§§l m
;
§§m n
}
•• 
}
¶¶ 
}
ßß 
}
®® 
catch
©© 
(
©© 
	Exception
©© 
ex
©© 
)
©©  
{
™™ 
FDebug
´´ 
.
´´ 
throwException
´´ %
(
´´% &
ex
´´& (
)
´´( )
;
´´) *
}
¨¨ 
finally
≠≠ 
{
ÆÆ 
fSecsDataMessage
ØØ  
=
ØØ! "
null
ØØ# '
;
ØØ' (
}
∞∞ 
}
±± 	
private
µµ 
void
µµ !
sendHsmsDataMessage
µµ (
(
µµ( )
FSecsDataMessage
∂∂ 
fSecsDataMessage
∂∂ -
)
∑∑ 
{
∏∏ 	
FSecsDataMessage
ππ 
fMsg
ππ !
=
ππ" #
null
ππ$ (
;
ππ( )
try
ªª 
{
ºº 
fMsg
ΩΩ 
=
ΩΩ 
fSecsDataMessage
ΩΩ '
.
ΩΩ' (
clone
ΩΩ( -
(
ΩΩ- .
)
ΩΩ. /
;
ΩΩ/ 0
if
¡¡ 
(
¡¡ 
this
¡¡ 
.
¡¡ 

fHsmsState
¡¡ #
==
¡¡$ &!
FCommunicationState
¡¡' :
.
¡¡: ;
Selected
¡¡; C
)
¡¡C D
{
¬¬ 
m_fHsms
√√ 
.
√√ 
send
√√  
(
√√  !
fMsg
√√! %
)
√√% &
;
√√& '
}
ƒƒ 
else
≈≈ 
{
∆∆ 
m_fEventPusher
«« "
.
««" #
pushHsmsEvent
««# 0
(
««0 1
new
»» +
FHsmsDataMessageSentEventArgs
»» 9
(
»»9 :
this
»»: >
,
»»> ?
FEventId
»»@ H
.
»»H I!
HsmsDataMessageSent
»»I \
,
»»\ ]
FResultCode
»»^ i
.
»»i j
Error
»»j o
,
»»o p
string
»»q w
.
»»w x
Format
»»x ~
(
»»~ 

FConstants»» â
.»»â ä

err_m_0030»»ä î
,»»î ï
$str»»ñ ú
)»»ú ù
,»»ù û
fMsg»»ü £
)»»£ §
)
…… 
;
…… 
}
   
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ 
ex
ÃÃ 
)
ÃÃ  
{
ÕÕ 
FDebug
ŒŒ 
.
ŒŒ 
writeLog
ŒŒ 
(
ŒŒ  
ex
ŒŒ  "
)
ŒŒ" #
;
ŒŒ# $
}
œœ 
finally
–– 
{
—— 
fMsg
““ 
=
““ 
null
““ 
;
““ 
}
”” 
}
‘‘ 	
private
ÿÿ 
void
ÿÿ "
sendSecs1DataMessage
ÿÿ )
(
ÿÿ) *
FSecsDataMessage
ŸŸ 
fSecsDataMessage
ŸŸ -
)
⁄⁄ 
{
€€ 	
FSecsDataMessage
‹‹ 
fMsg
‹‹ !
=
‹‹" #
null
‹‹$ (
;
‹‹( )
try
ﬁﬁ 
{
ﬂﬂ 
fMsg
‡‡ 
=
‡‡ 
fSecsDataMessage
‡‡ '
.
‡‡' (
clone
‡‡( -
(
‡‡- .
)
‡‡. /
;
‡‡/ 0
if
‰‰ 
(
‰‰ 
this
‰‰ 
.
‰‰ 
fSecs1State
‰‰ $
==
‰‰% '!
FCommunicationState
‰‰( ;
.
‰‰; <
Selected
‰‰< D
)
‰‰D E
{
ÂÂ 
m_fSecs1
ÊÊ 
.
ÊÊ 
send
ÊÊ !
(
ÊÊ! "
fMsg
ÊÊ" &
)
ÊÊ& '
;
ÊÊ' (
}
ÁÁ 
else
ËË 
{
ÈÈ 
m_fEventPusher
ÍÍ "
.
ÍÍ" #
pushSecs1Event
ÍÍ# 1
(
ÍÍ1 2
new
ÎÎ ,
FSecs1DataMessageSentEventArgs
ÎÎ :
(
ÎÎ: ;
this
ÎÎ; ?
,
ÎÎ? @
FEventId
ÎÎA I
.
ÎÎI J"
Secs1DataMessageSent
ÎÎJ ^
,
ÎÎ^ _
FResultCode
ÎÎ` k
.
ÎÎk l
Error
ÎÎl q
,
ÎÎq r
string
ÎÎs y
.
ÎÎy z
FormatÎÎz Ä
(ÎÎÄ Å

FConstantsÎÎÅ ã
.ÎÎã å

err_m_0030ÎÎå ñ
,ÎÎñ ó
$strÎÎò ü
)ÎÎü †
,ÎÎ† °
fMsgÎÎ¢ ¶
)ÎÎ¶ ß
)
ÏÏ 
;
ÏÏ 
}
ÌÌ 
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
	Exception
ÔÔ 
ex
ÔÔ 
)
ÔÔ  
{
 
FDebug
ÒÒ 
.
ÒÒ 
writeLog
ÒÒ 
(
ÒÒ  
ex
ÒÒ  "
)
ÒÒ" #
;
ÒÒ# $
}
ÚÚ 
finally
ÛÛ 
{
ÙÙ 
fMsg
ıı 
=
ıı 
null
ıı 
;
ıı 
}
ˆˆ 
}
˜˜ 	
public
˚˚ 
void
˚˚ (
waitEventHandlingCompleted
˚˚ .
(
˚˚. /
)
¸¸ 
{
˝˝ 	
try
˛˛ 
{
ˇˇ 
m_fEventPusher
ÄÄ 
.
ÄÄ (
waitEventHandlingCompleted
ÄÄ 9
(
ÄÄ9 :
)
ÄÄ: ;
;
ÄÄ; <
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
	Exception
ÇÇ 
ex
ÇÇ 
)
ÇÇ  
{
ÉÉ 
FDebug
ÑÑ 
.
ÑÑ 
throwException
ÑÑ %
(
ÑÑ% &
ex
ÑÑ& (
)
ÑÑ( )
;
ÑÑ) *
}
ÖÖ 
finally
ÜÜ 
{
áá 
}
ââ 
}
ää 	
public
éé 
bool
éé 2
$containsSecs1InterceptingDataMessage
éé 8
(
éé8 9&
FInterceptingDataMessage
èè $&
fInterceptingDataMessage
èè% =
)
êê 
{
ëë 	
try
íí 
{
ìì 
return
îî .
 m_fSecs1InterceptingDataMessages
îî 7
.
îî7 8
ContainsKey
îî8 C
(
îîC D&
fInterceptingDataMessage
îîD \
.
îî\ ]
getKey
îî] c
(
îîc d
)
îîd e
)
îîe f
;
îîf g
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
ex
ññ 
)
ññ  
{
óó 
FDebug
òò 
.
òò 
throwException
òò %
(
òò% &
ex
òò& (
)
òò( )
;
òò) *
}
ôô 
finally
öö 
{
õõ 
}
ùù 
return
ûû 
false
ûû 
;
ûû 
}
üü 	
public
££ 
bool
££ 1
#containsHsmsInterceptingDataMessage
££ 7
(
££7 8&
FInterceptingDataMessage
§§ $&
fInterceptingDataMessage
§§% =
)
•• 
{
¶¶ 	
try
ßß 
{
®® 
return
©© -
m_fHsmsInterceptingDataMessages
©© 6
.
©©6 7
ContainsKey
©©7 B
(
©©B C&
fInterceptingDataMessage
©©C [
.
©©[ \
getKey
©©\ b
(
©©b c
)
©©c d
)
©©d e
;
©©e f
}
™™ 
catch
´´ 
(
´´ 
	Exception
´´ 
ex
´´ 
)
´´  
{
¨¨ 
FDebug
≠≠ 
.
≠≠ 
throwException
≠≠ %
(
≠≠% &
ex
≠≠& (
)
≠≠( )
;
≠≠) *
}
ÆÆ 
finally
ØØ 
{
∞∞ 
}
≤≤ 
return
≥≥ 
false
≥≥ 
;
≥≥ 
}
¥¥ 	
public
∏∏ 
void
∏∏ -
addSecs1InterceptingDataMessage
∏∏ 3
(
∏∏3 4&
FInterceptingDataMessage
ππ $&
fInterceptingDataMessage
ππ% =
)
∫∫ 
{
ªª 	
try
ºº 
{
ΩΩ 
if
ææ 
(
ææ .
 m_fSecs1InterceptingDataMessages
ææ 4
.
ææ4 5
ContainsKey
ææ5 @
(
ææ@ A&
fInterceptingDataMessage
ææA Y
.
ææY Z
getKey
ææZ `
(
ææ` a
)
ææa b
)
ææb c
)
ææc d
{
øø 
return
¿¿ 
;
¿¿ 
}
¡¡ .
 m_fSecs1InterceptingDataMessages
¬¬ 0
.
¬¬0 1
Add
¬¬1 4
(
¬¬4 5&
fInterceptingDataMessage
¬¬5 M
.
¬¬M N
getKey
¬¬N T
(
¬¬T U
)
¬¬U V
,
¬¬V W&
fInterceptingDataMessage
¬¬X p
)
¬¬p q
;
¬¬q r
}
√√ 
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ 
ex
ƒƒ 
)
ƒƒ  
{
≈≈ 
FDebug
∆∆ 
.
∆∆ 
throwException
∆∆ %
(
∆∆% &
ex
∆∆& (
)
∆∆( )
;
∆∆) *
}
«« 
finally
»» 
{
…… 
}
ÀÀ 
}
ÃÃ 	
public
–– 
void
–– ,
addHsmsInterceptingDataMessage
–– 2
(
––2 3&
FInterceptingDataMessage
—— $&
fInterceptingDataMessage
——% =
)
““ 
{
”” 	
try
‘‘ 
{
’’ 
if
÷÷ 
(
÷÷ -
m_fHsmsInterceptingDataMessages
÷÷ 3
.
÷÷3 4
ContainsKey
÷÷4 ?
(
÷÷? @&
fInterceptingDataMessage
÷÷@ X
.
÷÷X Y
getKey
÷÷Y _
(
÷÷_ `
)
÷÷` a
)
÷÷a b
)
÷÷b c
{
◊◊ 
return
ÿÿ 
;
ÿÿ 
}
ŸŸ -
m_fHsmsInterceptingDataMessages
⁄⁄ /
.
⁄⁄/ 0
Add
⁄⁄0 3
(
⁄⁄3 4&
fInterceptingDataMessage
⁄⁄4 L
.
⁄⁄L M
getKey
⁄⁄M S
(
⁄⁄S T
)
⁄⁄T U
,
⁄⁄U V&
fInterceptingDataMessage
⁄⁄W o
)
⁄⁄o p
;
⁄⁄p q
}
€€ 
catch
‹‹ 
(
‹‹ 
	Exception
‹‹ 
ex
‹‹ 
)
‹‹  
{
›› 
FDebug
ﬁﬁ 
.
ﬁﬁ 
throwException
ﬁﬁ %
(
ﬁﬁ% &
ex
ﬁﬁ& (
)
ﬁﬁ( )
;
ﬁﬁ) *
}
ﬂﬂ 
finally
‡‡ 
{
·· 
}
„„ 
}
‰‰ 	
public
ËË 
void
ËË 0
"removeSecs1InterceptingDataMessage
ËË 6
(
ËË6 7&
FInterceptingDataMessage
ÈÈ $&
fInterceptingDataMessage
ÈÈ% =
)
ÍÍ 
{
ÎÎ 	
try
ÏÏ 
{
ÌÌ 
if
ÓÓ 
(
ÓÓ 
!
ÓÓ .
 m_fSecs1InterceptingDataMessages
ÓÓ 5
.
ÓÓ5 6
ContainsKey
ÓÓ6 A
(
ÓÓA B&
fInterceptingDataMessage
ÓÓB Z
.
ÓÓZ [
getKey
ÓÓ[ a
(
ÓÓa b
)
ÓÓb c
)
ÓÓc d
)
ÓÓd e
{
ÔÔ 
return
 
;
 
}
ÒÒ .
 m_fSecs1InterceptingDataMessages
ÚÚ 0
.
ÚÚ0 1
Remove
ÚÚ1 7
(
ÚÚ7 8&
fInterceptingDataMessage
ÚÚ8 P
.
ÚÚP Q
getKey
ÚÚQ W
(
ÚÚW X
)
ÚÚX Y
)
ÚÚY Z
;
ÚÚZ [
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı 
FDebug
ˆˆ 
.
ˆˆ 
throwException
ˆˆ %
(
ˆˆ% &
ex
ˆˆ& (
)
ˆˆ( )
;
ˆˆ) *
}
˜˜ 
finally
¯¯ 
{
˘˘ 
}
˚˚ 
}
¸¸ 	
public
Ä	Ä	 
void
Ä	Ä	 /
!removeHsmsInterceptingDataMessage
Ä	Ä	 5
(
Ä	Ä	5 6&
FInterceptingDataMessage
Å	Å	 $&
fInterceptingDataMessage
Å	Å	% =
)
Ç	Ç	 
{
É	É	 	
try
Ñ	Ñ	 
{
Ö	Ö	 
if
Ü	Ü	 
(
Ü	Ü	 
!
Ü	Ü	 -
m_fHsmsInterceptingDataMessages
Ü	Ü	 4
.
Ü	Ü	4 5
ContainsKey
Ü	Ü	5 @
(
Ü	Ü	@ A&
fInterceptingDataMessage
Ü	Ü	A Y
.
Ü	Ü	Y Z
getKey
Ü	Ü	Z `
(
Ü	Ü	` a
)
Ü	Ü	a b
)
Ü	Ü	b c
)
Ü	Ü	c d
{
á	á	 
return
à	à	 
;
à	à	 
}
â	â	 -
m_fHsmsInterceptingDataMessages
ä	ä	 /
.
ä	ä	/ 0
Remove
ä	ä	0 6
(
ä	ä	6 7&
fInterceptingDataMessage
ä	ä	7 O
.
ä	ä	O P
getKey
ä	ä	P V
(
ä	ä	V W
)
ä	ä	W X
)
ä	ä	X Y
;
ä	ä	Y Z
}
ã	ã	 
catch
å	å	 
(
å	å	 
	Exception
å	å	 
ex
å	å	 
)
å	å	  
{
ç	ç	 
FDebug
é	é	 
.
é	é	 
throwException
é	é	 %
(
é	é	% &
ex
é	é	& (
)
é	é	( )
;
é	é	) *
}
è	è	 
finally
ê	ê	 
{
ë	ë	 
}
ì	ì	 
}
î	î	 	
public
ò	ò	 
void
ò	ò	 3
%removeAllSecs1InterceptingDataMessage
ò	ò	 9
(
ò	ò	9 :
)
ô	ô	 
{
ö	ö	 	
try
õ	õ	 
{
ú	ú	 .
 m_fSecs1InterceptingDataMessages
ù	ù	 0
.
ù	ù	0 1
Clear
ù	ù	1 6
(
ù	ù	6 7
)
ù	ù	7 8
;
ù	ù	8 9
}
û	û	 
catch
ü	ü	 
(
ü	ü	 
	Exception
ü	ü	 
ex
ü	ü	 
)
ü	ü	  
{
†	†	 
FDebug
°	°	 
.
°	°	 
throwException
°	°	 %
(
°	°	% &
ex
°	°	& (
)
°	°	( )
;
°	°	) *
}
¢	¢	 
finally
£	£	 
{
§	§	 
}
¶	¶	 
}
ß	ß	 	
public
´	´	 
void
´	´	 2
$removeAllHsmsInterceptingDataMessage
´	´	 8
(
´	´	8 9
)
¨	¨	 
{
≠	≠	 	
try
Æ	Æ	 
{
Ø	Ø	 -
m_fHsmsInterceptingDataMessages
∞	∞	 /
.
∞	∞	/ 0
Clear
∞	∞	0 5
(
∞	∞	5 6
)
∞	∞	6 7
;
∞	∞	7 8
}
±	±	 
catch
≤	≤	 
(
≤	≤	 
	Exception
≤	≤	 
ex
≤	≤	 
)
≤	≤	  
{
≥	≥	 
FDebug
¥	¥	 
.
¥	¥	 
throwException
¥	¥	 %
(
¥	¥	% &
ex
¥	¥	& (
)
¥	¥	( )
;
¥	¥	) *
}
µ	µ	 
finally
∂	∂	 
{
∑	∑	 
}
π	π	 
}
∫	∫	 	
internal
æ	æ	 
bool
æ	æ	 ,
isSecs1InterceptingDataMessage
æ	æ	 4
(
æ	æ	4 5
byte
ø	ø	 
stream
ø	ø	 
,
ø	ø	 
byte
¿	¿	 
function
¿	¿	 
)
¡	¡	 
{
¬	¬	 	
const
√	√	 
string
√	√	 
	KeyFormat
√	√	 "
=
√	√	# $
$str
√	√	% .
;
√	√	. /
try
≈	≈	 
{
∆	∆	 
return
«	«	 .
 m_fSecs1InterceptingDataMessages
«	«	 7
.
«	«	7 8
ContainsKey
«	«	8 C
(
«	«	C D
string
«	«	D J
.
«	«	J K
Format
«	«	K Q
(
«	«	Q R
	KeyFormat
«	«	R [
,
«	«	[ \
stream
«	«	] c
.
«	«	c d
ToString
«	«	d l
(
«	«	l m
)
«	«	m n
,
«	«	n o
function
«	«	p x
.
«	«	x y
ToString«	«	y Å
(«	«	Å Ç
)«	«	Ç É
)«	«	É Ñ
)«	«	Ñ Ö
;«	«	Ö Ü
}
»	»	 
catch
…	…	 
(
…	…	 
	Exception
…	…	 
ex
…	…	 
)
…	…	  
{
 	 	 
FDebug
À	À	 
.
À	À	 
throwException
À	À	 %
(
À	À	% &
ex
À	À	& (
)
À	À	( )
;
À	À	) *
}
Ã	Ã	 
finally
Õ	Õ	 
{
Œ	Œ	 
}
–	–	 
return
—	—	 
false
—	—	 
;
—	—	 
}
“	“	 	
internal
÷	÷	 
bool
÷	÷	 +
isHsmsInterceptingDataMessage
÷	÷	 3
(
÷	÷	3 4
byte
◊	◊	 
stream
◊	◊	 
,
◊	◊	 
byte
ÿ	ÿ	 
function
ÿ	ÿ	 
)
Ÿ	Ÿ	 
{
⁄	⁄	 	
const
€	€	 
string
€	€	 
	KeyFormat
€	€	 "
=
€	€	# $
$str
€	€	% .
;
€	€	. /
try
›	›	 
{
ﬁ	ﬁ	 
return
ﬂ	ﬂ	 -
m_fHsmsInterceptingDataMessages
ﬂ	ﬂ	 6
.
ﬂ	ﬂ	6 7
ContainsKey
ﬂ	ﬂ	7 B
(
ﬂ	ﬂ	B C
string
ﬂ	ﬂ	C I
.
ﬂ	ﬂ	I J
Format
ﬂ	ﬂ	J P
(
ﬂ	ﬂ	P Q
	KeyFormat
ﬂ	ﬂ	Q Z
,
ﬂ	ﬂ	Z [
stream
ﬂ	ﬂ	\ b
.
ﬂ	ﬂ	b c
ToString
ﬂ	ﬂ	c k
(
ﬂ	ﬂ	k l
)
ﬂ	ﬂ	l m
,
ﬂ	ﬂ	m n
function
ﬂ	ﬂ	o w
.
ﬂ	ﬂ	w x
ToStringﬂ	ﬂ	x Ä
(ﬂ	ﬂ	Ä Å
)ﬂ	ﬂ	Å Ç
)ﬂ	ﬂ	Ç É
)ﬂ	ﬂ	É Ñ
;ﬂ	ﬂ	Ñ Ö
}
‡	‡	 
catch
·	·	 
(
·	·	 
	Exception
·	·	 
ex
·	·	 
)
·	·	  
{
‚	‚	 
FDebug
„	„	 
.
„	„	 
throwException
„	„	 %
(
„	„	% &
ex
„	„	& (
)
„	„	( )
;
„	„	) *
}
‰	‰	 
finally
Â	Â	 
{
Ê	Ê	 
}
Ë	Ë	 
return
È	È	 
false
È	È	 
;
È	È	 
}
Í	Í	 	
public
Ó	Ó	 
void
Ó	Ó	 "
sendSecs1DataMessage
Ó	Ó	 (
(
Ó	Ó	( )&
FSecsDataMessageTransfer
Ô	Ô	 $&
fSecsDataMessageTransfer
Ô	Ô	% =
)
		 
{
Ò	Ò	 	
try
Ú	Ú	 
{
Û	Û	 "
sendSecs1DataMessage
Ù	Ù	 $
(
Ù	Ù	$ %&
fSecsDataMessageTransfer
Ù	Ù	% =
.
Ù	Ù	= > 
getSecsDataMessage
Ù	Ù	> P
(
Ù	Ù	P Q
)
Ù	Ù	Q R
)
Ù	Ù	R S
;
Ù	Ù	S T
}
ı	ı	 
catch
ˆ	ˆ	 
(
ˆ	ˆ	 
	Exception
ˆ	ˆ	 
ex
ˆ	ˆ	 
)
ˆ	ˆ	  
{
˜	˜	 
FDebug
¯	¯	 
.
¯	¯	 
throwException
¯	¯	 %
(
¯	¯	% &
ex
¯	¯	& (
)
¯	¯	( )
;
¯	¯	) *
}
˘	˘	 
finally
˙	˙	 
{
˚	˚	 
}
˝	˝	 
}
˛	˛	 	
public
Ç
Ç
 
void
Ç
Ç
 !
sendHsmsDataMessage
Ç
Ç
 '
(
Ç
Ç
' (&
FSecsDataMessageTransfer
É
É
 $&
fSecsDataMessageTransfer
É
É
% =
)
Ñ
Ñ
 
{
Ö
Ö
 	
try
Ü
Ü
 
{
á
á
 !
sendHsmsDataMessage
à
à
 #
(
à
à
# $&
fSecsDataMessageTransfer
à
à
$ <
.
à
à
< = 
getSecsDataMessage
à
à
= O
(
à
à
O P
)
à
à
P Q
)
à
à
Q R
;
à
à
R S
}
â
â
 
catch
ä
ä
 
(
ä
ä
 
	Exception
ä
ä
 
ex
ä
ä
 
)
ä
ä
  
{
ã
ã
 
FDebug
å
å
 
.
å
å
 
throwException
å
å
 %
(
å
å
% &
ex
å
å
& (
)
å
å
( )
;
å
å
) *
}
ç
ç
 
finally
é
é
 
{
è
è
 
}
ë
ë
 
}
í
í
 	
public
ñ
ñ
 
void
ñ
ñ
 
writeAppLog
ñ
ñ
 
(
ñ
ñ
  
string
ó
ó
 
log
ó
ó
 
)
ò
ò
 
{
ô
ô
 	
try
ö
ö
 
{
õ
õ
 
m_fLogWriter
ú
ú
 
.
ú
ú
 
write
ú
ú
 "
(
ú
ú
" #
log
ú
ú
# &
)
ú
ú
& '
;
ú
ú
' (
}
ù
ù
 
catch
û
û
 
(
û
û
 
	Exception
û
û
 
ex
û
û
 
)
û
û
  
{
ü
ü
 
FDebug
†
†
 
.
†
†
 
throwException
†
†
 %
(
†
†
% &
ex
†
†
& (
)
†
†
( )
;
†
†
) *
}
°
°
 
finally
¢
¢
 
{
£
£
 
}
•
•
 
}
¶
¶
 	
}
¨
¨
 
}≠
≠
 §¥
sD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Config\c_FSecs1Config.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

class 
FSecs1Config 
: 
IDisposable *
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
UInt16 
m_sessionId "
=# $
$num% &
;& '
private 
string 
m_serialPort #
=$ %
$str& ,
;, -
private   
int   
m_baud   
=   
$num   !
;  ! "
private!! 
bool!! 
m_rbit!! 
=!! 
false!! #
;!!# $
private"" 
bool"" 
m_interleave"" !
=""" #
true""$ (
;""( )
private## 
bool## 
m_duplicateError## %
=##& '
true##( ,
;##, -
private$$ 
bool$$ 
m_ignoreSystemBytes$$ (
=$$) *
false$$+ 0
;$$0 1
private%% 
int%% 
m_retryLimit%%  
=%%! "
$num%%# $
;%%$ %
private'' 
float'' 
m_t1Timeout'' !
=''" #
$num''$ (
;''( )
private(( 
float(( 
m_t2Timeout(( !
=((" #
$num(($ &
;((& '
private)) 
int)) 
m_t3Timeout)) 
=))  !
$num))" $
;))$ %
private** 
int** 
m_t4Timeout** 
=**  !
$num**" $
;**$ %
internal00 
FSecs1Config00 
(00 
FSecs1ToHsms11 
fSecs1ToHsms11 %
)22 
{33 	
m_fSecs1ToHsms44 
=44 
fSecs1ToHsms44 )
;44) *
}55 	
~99 	
FSecs1Config99	 
(99 
):: 
{;; 	
	myDispose<< 
(<< 
false<< 
)<< 
;<< 
}== 	
	protectedAA 
voidAA 
	myDisposeAA  
(AA  !
boolBB 
	disposingBB 
)CC 
{DD 	
ifEE 
(EE 
!EE 

m_disposedEE 
)EE 
{FF 
ifGG 
(GG 
	disposingGG 
)GG 
{HH 
m_fSecs1ToHsmsII "
=II# $
nullII% )
;II) *
}JJ 

m_disposedLL 
=LL 
trueLL !
;LL! "
}MM 
}NN 	
publicVV 
voidVV 
DisposeVV 
(VV 
)WW 
{XX 	
	myDisposeYY 
(YY 
trueYY 
)YY 
;YY 
GCZZ 
.ZZ 
SuppressFinalizeZZ 
(ZZ  
thisZZ  $
)ZZ$ %
;ZZ% &
}[[ 	
publiccc 
UInt16cc 
	sessionIdcc 
{dd 	
getee 
{ff 
trygg 
{hh 
returnii 
m_sessionIdii &
;ii& '
}jj 
catchkk 
(kk 
	Exceptionkk  
exkk! #
)kk# $
{ll 
FDebugmm 
.mm 
throwExceptionmm )
(mm) *
exmm* ,
)mm, -
;mm- .
}nn 
finallyoo 
{pp 
}rr 
returnss 
$numss 
;ss 
}tt 
setvv 
{ww 
tryxx 
{yy 
m_sessionIdzz 
=zz  !
valuezz" '
;zz' (
}{{ 
catch|| 
(|| 
	Exception||  
ex||! #
)||# $
{}} 
FDebug~~ 
.~~ 
throwException~~ )
(~~) *
ex~~* ,
)~~, -
;~~- .
} 
finally
ÄÄ 
{
ÅÅ 
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
public
ââ 
string
ââ 

serialPort
ââ  
{
ää 	
get
ãã 
{
åå 
try
çç 
{
éé 
return
èè 
m_serialPort
èè '
;
èè' (
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë  
ex
ëë! #
)
ëë# $
{
íí 
FDebug
ìì 
.
ìì 
throwException
ìì )
(
ìì) *
ex
ìì* ,
)
ìì, -
;
ìì- .
}
îî 
finally
ïï 
{
ññ 
}
òò 
return
ôô 
string
ôô 
.
ôô 
Empty
ôô #
;
ôô# $
}
öö 
set
úú 
{
ùù 
try
ûû 
{
üü 
validateState
†† !
(
††! "
)
††" #
;
††# $
if
¢¢ 
(
¢¢ 
value
¢¢ 
.
¢¢ 
Trim
¢¢ "
(
¢¢" #
)
¢¢# $
==
¢¢% '
string
¢¢( .
.
¢¢. /
Empty
¢¢/ 4
)
¢¢4 5
{
££ 
FDebug
§§ 
.
§§ 
throwFException
§§ .
(
§§. /
string
§§/ 5
.
§§5 6
Format
§§6 <
(
§§< =

FConstants
§§= G
.
§§G H

err_m_0015
§§H R
,
§§R S
$str
§§T a
)
§§a b
)
§§b c
;
§§c d
}
•• 
m_serialPort
ßß  
=
ßß! "
value
ßß# (
;
ßß( )
}
®® 
catch
©© 
(
©© 
	Exception
©©  
ex
©©! #
)
©©# $
{
™™ 
FDebug
´´ 
.
´´ 
throwException
´´ )
(
´´) *
ex
´´* ,
)
´´, -
;
´´- .
}
¨¨ 
finally
≠≠ 
{
ÆÆ 
}
∞∞ 
}
±± 
}
≤≤ 	
public
∂∂ 
int
∂∂ 
baud
∂∂ 
{
∑∑ 	
get
∏∏ 
{
ππ 
try
∫∫ 
{
ªª 
return
ºº 
m_baud
ºº !
;
ºº! "
}
ΩΩ 
catch
ææ 
(
ææ 
	Exception
ææ  
ex
ææ! #
)
ææ# $
{
øø 
FDebug
¿¿ 
.
¿¿ 
throwException
¿¿ )
(
¿¿) *
ex
¿¿* ,
)
¿¿, -
;
¿¿- .
}
¡¡ 
finally
¬¬ 
{
√√ 
}
≈≈ 
return
∆∆ 
$num
∆∆ 
;
∆∆ 
}
«« 
set
…… 
{
   
try
ÀÀ 
{
ÃÃ 
validateState
ÕÕ !
(
ÕÕ! "
)
ÕÕ" #
;
ÕÕ# $
if
œœ 
(
œœ 
value
œœ 
<
œœ 
$num
œœ  !
)
œœ! "
{
–– 
FDebug
—— 
.
—— 
throwFException
—— .
(
——. /
string
——/ 5
.
——5 6
Format
——6 <
(
——< =

FConstants
——= G
.
——G H

err_m_0015
——H R
,
——R S
$str
——T Z
)
——Z [
)
——[ \
;
——\ ]
}
““ 
m_baud
‘‘ 
=
‘‘ 
value
‘‘ "
;
‘‘" #
}
’’ 
catch
÷÷ 
(
÷÷ 
	Exception
÷÷  
ex
÷÷! #
)
÷÷# $
{
◊◊ 
FDebug
ÿÿ 
.
ÿÿ 
throwException
ÿÿ )
(
ÿÿ) *
ex
ÿÿ* ,
)
ÿÿ, -
;
ÿÿ- .
}
ŸŸ 
finally
⁄⁄ 
{
€€ 
}
›› 
}
ﬁﬁ 
}
ﬂﬂ 	
public
„„ 
bool
„„ 
rbit
„„ 
{
‰‰ 	
get
ÂÂ 
{
ÊÊ 
try
ÁÁ 
{
ËË 
return
ÈÈ 
m_rbit
ÈÈ !
;
ÈÈ! "
}
ÍÍ 
catch
ÎÎ 
(
ÎÎ 
	Exception
ÎÎ  
ex
ÎÎ! #
)
ÎÎ# $
{
ÏÏ 
FDebug
ÌÌ 
.
ÌÌ 
throwException
ÌÌ )
(
ÌÌ) *
ex
ÌÌ* ,
)
ÌÌ, -
;
ÌÌ- .
}
ÓÓ 
finally
ÔÔ 
{
 
}
ÚÚ 
return
ÛÛ 
false
ÛÛ 
;
ÛÛ 
}
ÙÙ 
set
ˆˆ 
{
˜˜ 
try
¯¯ 
{
˘˘ 
validateState
˙˙ !
(
˙˙! "
)
˙˙" #
;
˙˙# $
m_rbit
¸¸ 
=
¸¸ 
value
¸¸ "
;
¸¸" #
}
˝˝ 
catch
˛˛ 
(
˛˛ 
	Exception
˛˛  
ex
˛˛! #
)
˛˛# $
{
ˇˇ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ )
(
ÄÄ) *
ex
ÄÄ* ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
}
ÜÜ 
}
áá 	
public
ãã 
bool
ãã 

interleave
ãã 
{
åå 	
get
çç 
{
éé 
try
èè 
{
êê 
return
ëë 
m_interleave
ëë '
;
ëë' (
}
íí 
catch
ìì 
(
ìì 
	Exception
ìì  
ex
ìì! #
)
ìì# $
{
îî 
FDebug
ïï 
.
ïï 
throwException
ïï )
(
ïï) *
ex
ïï* ,
)
ïï, -
;
ïï- .
}
ññ 
finally
óó 
{
òò 
}
öö 
return
õõ 
false
õõ 
;
õõ 
}
úú 
set
ûû 
{
üü 
try
†† 
{
°° 
validateState
¢¢ !
(
¢¢! "
)
¢¢" #
;
¢¢# $
m_interleave
§§  
=
§§! "
value
§§# (
;
§§( )
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶  
ex
¶¶! #
)
¶¶# $
{
ßß 
FDebug
®® 
.
®® 
throwException
®® )
(
®®) *
ex
®®* ,
)
®®, -
;
®®- .
}
©© 
finally
™™ 
{
´´ 
}
≠≠ 
}
ÆÆ 
}
ØØ 	
public
≥≥ 
bool
≥≥ 
duplicateError
≥≥ "
{
¥¥ 	
get
µµ 
{
∂∂ 
try
∑∑ 
{
∏∏ 
return
ππ 
m_duplicateError
ππ +
;
ππ+ ,
}
∫∫ 
catch
ªª 
(
ªª 
	Exception
ªª  
ex
ªª! #
)
ªª# $
{
ºº 
FDebug
ΩΩ 
.
ΩΩ 
throwException
ΩΩ )
(
ΩΩ) *
ex
ΩΩ* ,
)
ΩΩ, -
;
ΩΩ- .
}
ææ 
finally
øø 
{
¿¿ 
}
¬¬ 
return
√√ 
false
√√ 
;
√√ 
}
ƒƒ 
set
∆∆ 
{
«« 
try
»» 
{
…… 
validateState
   !
(
  ! "
)
  " #
;
  # $
m_duplicateError
ÃÃ $
=
ÃÃ% &
value
ÃÃ' ,
;
ÃÃ, -
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ  
ex
ŒŒ! #
)
ŒŒ# $
{
œœ 
FDebug
–– 
.
–– 
throwException
–– )
(
––) *
ex
––* ,
)
––, -
;
––- .
}
—— 
finally
““ 
{
”” 
}
’’ 
}
÷÷ 
}
◊◊ 	
public
€€ 
bool
€€ 
ignoreSystemBytes
€€ %
{
‹‹ 	
get
›› 
{
ﬁﬁ 
try
ﬂﬂ 
{
‡‡ 
return
·· !
m_ignoreSystemBytes
·· .
;
··. /
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„  
ex
„„! #
)
„„# $
{
‰‰ 
FDebug
ÂÂ 
.
ÂÂ 
throwException
ÂÂ )
(
ÂÂ) *
ex
ÂÂ* ,
)
ÂÂ, -
;
ÂÂ- .
}
ÊÊ 
finally
ÁÁ 
{
ËË 
}
ÍÍ 
return
ÎÎ 
false
ÎÎ 
;
ÎÎ 
}
ÏÏ 
set
ÓÓ 
{
ÔÔ 
try
 
{
ÒÒ 
validateState
ÚÚ !
(
ÚÚ! "
)
ÚÚ" #
;
ÚÚ# $!
m_ignoreSystemBytes
ÙÙ '
=
ÙÙ( )
value
ÙÙ* /
;
ÙÙ/ 0
}
ıı 
catch
ˆˆ 
(
ˆˆ 
	Exception
ˆˆ  
ex
ˆˆ! #
)
ˆˆ# $
{
˜˜ 
FDebug
¯¯ 
.
¯¯ 
throwException
¯¯ )
(
¯¯) *
ex
¯¯* ,
)
¯¯, -
;
¯¯- .
}
˘˘ 
finally
˙˙ 
{
˚˚ 
}
˝˝ 
}
˛˛ 
}
ˇˇ 	
public
ÉÉ 
int
ÉÉ 

retryLimit
ÉÉ 
{
ÑÑ 	
get
ÖÖ 
{
ÜÜ 
try
áá 
{
àà 
return
ââ 
m_retryLimit
ââ '
;
ââ' (
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã  
ex
ãã! #
)
ãã# $
{
åå 
FDebug
çç 
.
çç 
throwException
çç )
(
çç) *
ex
çç* ,
)
çç, -
;
çç- .
}
éé 
finally
èè 
{
êê 
}
íí 
return
ìì 
$num
ìì 
;
ìì 
}
îî 
set
ññ 
{
óó 
try
òò 
{
ôô 
validateState
öö !
(
öö! "
)
öö" #
;
öö# $
if
úú 
(
úú 
value
úú 
<
úú 
$num
úú  !
||
úú" $
value
úú% *
>
úú+ ,
$num
úú- /
)
úú/ 0
{
ùù 
FDebug
ûû 
.
ûû 
throwFException
ûû .
(
ûû. /
string
ûû/ 5
.
ûû5 6
Format
ûû6 <
(
ûû< =

FConstants
ûû= G
.
ûûG H

err_m_0015
ûûH R
,
ûûR S
$str
ûûT a
)
ûûa b
)
ûûb c
;
ûûc d
}
üü 
m_retryLimit
°°  
=
°°! "
value
°°# (
;
°°( )
}
¢¢ 
catch
££ 
(
££ 
	Exception
££  
ex
££! #
)
££# $
{
§§ 
FDebug
•• 
.
•• 
throwException
•• )
(
••) *
ex
••* ,
)
••, -
;
••- .
}
¶¶ 
finally
ßß 
{
®® 
}
™™ 
}
´´ 
}
¨¨ 	
public
∞∞ 
float
∞∞ 
	t1Timeout
∞∞ 
{
±± 	
get
≤≤ 
{
≥≥ 
try
¥¥ 
{
µµ 
return
∂∂ 
m_t1Timeout
∂∂ &
;
∂∂& '
}
∑∑ 
catch
∏∏ 
(
∏∏ 
	Exception
∏∏  
ex
∏∏! #
)
∏∏# $
{
ππ 
FDebug
∫∫ 
.
∫∫ 
throwException
∫∫ )
(
∫∫) *
ex
∫∫* ,
)
∫∫, -
;
∫∫- .
}
ªª 
finally
ºº 
{
ΩΩ 
}
øø 
return
¿¿ 
$num
¿¿ 
;
¿¿ 
}
¡¡ 
set
√√ 
{
ƒƒ 
try
≈≈ 
{
∆∆ 
validateState
«« !
(
««! "
)
««" #
;
««# $
if
…… 
(
…… 
value
…… 
<
…… 
$num
……  $
||
……% '
value
……( -
>
……. /
$num
……0 5
)
……5 6
{
   
FDebug
ÀÀ 
.
ÀÀ 
throwFException
ÀÀ .
(
ÀÀ. /
string
ÀÀ/ 5
.
ÀÀ5 6
Format
ÀÀ6 <
(
ÀÀ< =

FConstants
ÀÀ= G
.
ÀÀG H

err_m_0015
ÀÀH R
,
ÀÀR S
$str
ÀÀT `
)
ÀÀ` a
)
ÀÀa b
;
ÀÀb c
}
ÃÃ 
m_t1Timeout
ŒŒ 
=
ŒŒ  !
value
ŒŒ" '
;
ŒŒ' (
}
œœ 
catch
–– 
(
–– 
	Exception
––  
ex
––! #
)
––# $
{
—— 
FDebug
““ 
.
““ 
throwException
““ )
(
““) *
ex
““* ,
)
““, -
;
““- .
}
”” 
finally
‘‘ 
{
’’ 
}
◊◊ 
}
ÿÿ 
}
ŸŸ 	
public
›› 
float
›› 
	t2Timeout
›› 
{
ﬁﬁ 	
get
ﬂﬂ 
{
‡‡ 
try
·· 
{
‚‚ 
return
„„ 
m_t2Timeout
„„ &
;
„„& '
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ  
ex
ÂÂ! #
)
ÂÂ# $
{
ÊÊ 
FDebug
ÁÁ 
.
ÁÁ 
throwException
ÁÁ )
(
ÁÁ) *
ex
ÁÁ* ,
)
ÁÁ, -
;
ÁÁ- .
}
ËË 
finally
ÈÈ 
{
ÍÍ 
}
ÏÏ 
return
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
}
ÓÓ 
set
 
{
ÒÒ 
try
ÚÚ 
{
ÛÛ 
validateState
ÙÙ !
(
ÙÙ! "
)
ÙÙ" #
;
ÙÙ# $
if
ˆˆ 
(
ˆˆ 
value
ˆˆ 
<
ˆˆ 
$num
ˆˆ  $
||
ˆˆ% '
value
ˆˆ( -
>
ˆˆ. /
$num
ˆˆ0 5
)
ˆˆ5 6
{
˜˜ 
FDebug
¯¯ 
.
¯¯ 
throwFException
¯¯ .
(
¯¯. /
string
¯¯/ 5
.
¯¯5 6
Format
¯¯6 <
(
¯¯< =

FConstants
¯¯= G
.
¯¯G H

err_m_0015
¯¯H R
,
¯¯R S
$str
¯¯T `
)
¯¯` a
)
¯¯a b
;
¯¯b c
}
˘˘ 
m_t2Timeout
˚˚ 
=
˚˚  !
value
˚˚" '
;
˚˚' (
}
¸¸ 
catch
˝˝ 
(
˝˝ 
	Exception
˝˝  
ex
˝˝! #
)
˝˝# $
{
˛˛ 
FDebug
ˇˇ 
.
ˇˇ 
throwException
ˇˇ )
(
ˇˇ) *
ex
ˇˇ* ,
)
ˇˇ, -
;
ˇˇ- .
}
ÄÄ 
finally
ÅÅ 
{
ÇÇ 
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
public
ää 
int
ää 
	t3Timeout
ää 
{
ãã 	
get
åå 
{
çç 
try
éé 
{
èè 
return
êê 
m_t3Timeout
êê &
;
êê& '
}
ëë 
catch
íí 
(
íí 
	Exception
íí  
ex
íí! #
)
íí# $
{
ìì 
FDebug
îî 
.
îî 
throwException
îî )
(
îî) *
ex
îî* ,
)
îî, -
;
îî- .
}
ïï 
finally
ññ 
{
óó 
}
ôô 
return
öö 
$num
öö 
;
öö 
}
õõ 
set
ùù 
{
ûû 
try
üü 
{
†† 
validateState
°° !
(
°°! "
)
°°" #
;
°°# $
if
££ 
(
££ 
value
££ 
<
££ 
$num
££  !
||
££" $
value
££% *
>
££+ ,
$num
££- 0
)
££0 1
{
§§ 
FDebug
•• 
.
•• 
throwFException
•• .
(
••. /
string
••/ 5
.
••5 6
Format
••6 <
(
••< =

FConstants
••= G
.
••G H

err_m_0015
••H R
,
••R S
$str
••T `
)
••` a
)
••a b
;
••b c
}
¶¶ 
m_t3Timeout
®® 
=
®®  !
value
®®" '
;
®®' (
}
©© 
catch
™™ 
(
™™ 
	Exception
™™  
ex
™™! #
)
™™# $
{
´´ 
FDebug
¨¨ 
.
¨¨ 
throwException
¨¨ )
(
¨¨) *
ex
¨¨* ,
)
¨¨, -
;
¨¨- .
}
≠≠ 
finally
ÆÆ 
{
ØØ 
}
±± 
}
≤≤ 
}
≥≥ 	
public
∑∑ 
int
∑∑ 
	t4Timeout
∑∑ 
{
∏∏ 	
get
ππ 
{
∫∫ 
try
ªª 
{
ºº 
return
ΩΩ 
m_t4Timeout
ΩΩ &
;
ΩΩ& '
}
ææ 
catch
øø 
(
øø 
	Exception
øø  
ex
øø! #
)
øø# $
{
¿¿ 
FDebug
¡¡ 
.
¡¡ 
throwException
¡¡ )
(
¡¡) *
ex
¡¡* ,
)
¡¡, -
;
¡¡- .
}
¬¬ 
finally
√√ 
{
ƒƒ 
}
∆∆ 
return
«« 
$num
«« 
;
«« 
}
»» 
set
   
{
ÀÀ 
try
ÃÃ 
{
ÕÕ 
validateState
ŒŒ !
(
ŒŒ! "
)
ŒŒ" #
;
ŒŒ# $
if
–– 
(
–– 
value
–– 
<
–– 
$num
––  !
||
––" $
value
––% *
>
––+ ,
$num
––- 0
)
––0 1
{
—— 
FDebug
““ 
.
““ 
throwFException
““ .
(
““. /
string
““/ 5
.
““5 6
Format
““6 <
(
““< =

FConstants
““= G
.
““G H

err_m_0015
““H R
,
““R S
$str
““T `
)
““` a
)
““a b
;
““b c
}
”” 
m_t4Timeout
’’ 
=
’’  !
value
’’" '
;
’’' (
}
÷÷ 
catch
◊◊ 
(
◊◊ 
	Exception
◊◊  
ex
◊◊! #
)
◊◊# $
{
ÿÿ 
FDebug
ŸŸ 
.
ŸŸ 
throwException
ŸŸ )
(
ŸŸ) *
ex
ŸŸ* ,
)
ŸŸ, -
;
ŸŸ- .
}
⁄⁄ 
finally
€€ 
{
‹‹ 
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 	
private
ËË 
void
ËË 
validateState
ËË "
(
ËË" #
)
ÈÈ 
{
ÍÍ 	
try
ÎÎ 
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
m_fSecs1ToHsms
ÌÌ "
.
ÌÌ" #
fSecs1State
ÌÌ# .
!=
ÌÌ/ 1!
FCommunicationState
ÌÌ2 E
.
ÌÌE F
Closed
ÌÌF L
)
ÌÌL M
{
ÓÓ 
FDebug
ÔÔ 
.
ÔÔ 
throwFException
ÔÔ *
(
ÔÔ* +
string
ÔÔ+ 1
.
ÔÔ1 2
Format
ÔÔ2 8
(
ÔÔ8 9

FConstants
ÔÔ9 C
.
ÔÔC D

err_m_0027
ÔÔD N
,
ÔÔN O
$str
ÔÔP \
)
ÔÔ\ ]
)
ÔÔ] ^
;
ÔÔ^ _
}
 
}
ÒÒ 
catch
ÚÚ 
(
ÚÚ 
	Exception
ÚÚ 
ex
ÚÚ 
)
ÚÚ  
{
ÛÛ 
FDebug
ÙÙ 
.
ÙÙ 
throwException
ÙÙ %
(
ÙÙ% &
ex
ÙÙ& (
)
ÙÙ( )
;
ÙÙ) *
}
ıı 
finally
ˆˆ 
{
˜˜ 
}
˘˘ 
}
˙˙ 	
}
ÄÄ 
}ÅÅ Ì¬
rD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Config\c_FHsmsConfig.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

class 
FHsmsConfig 
: 
IDisposable )
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
UInt16 
m_sessionId "
=# $
$num% &
;& '
private 
FConnectMode 
m_fConnectMode +
=, -
FConnectMode. :
.: ;
Passive; B
;B C
private   
string   
	m_localIp    
=  ! "
$str  # .
;  . /
private!! 
int!! 
m_localPort!! 
=!!  !
$num!!" &
;!!& '
private"" 
string"" 

m_remoteIp"" !
=""" #
$str""$ /
;""/ 0
private## 
int## 
m_remotePort##  
=##! "
$num### '
;##' (
private$$ 
int$$ 
m_linkTestPeriod$$ $
=$$% &
$num$$' )
;$$) *
private%% 
int%% 
m_t3Timeout%% 
=%%  !
$num%%" $
;%%$ %
private&& 
int&& 
m_t5Timeout&& 
=&&  !
$num&&" $
;&&$ %
private'' 
int'' 
m_t6Timeout'' 
=''  !
$num''" #
;''# $
private(( 
int(( 
m_t7Timeout(( 
=((  !
$num((" $
;(($ %
private)) 
int)) 
m_t8Timeout)) 
=))  !
$num))" #
;))# $
internal// 
FHsmsConfig// 
(// 
FSecs1ToHsms00 
fSecs1ToHsms00 %
)11 
{22 	
m_fSecs1ToHsms33 
=33 
fSecs1ToHsms33 )
;33) *
}44 	
~88 	
FHsmsConfig88	 
(88 
)99 
{:: 	
	myDispose;; 
(;; 
false;; 
);; 
;;; 
}<< 	
	protected@@ 
void@@ 
	myDispose@@  
(@@  !
boolAA 
	disposingAA 
)BB 
{CC 	
ifDD 
(DD 
!DD 

m_disposedDD 
)DD 
{EE 
ifFF 
(FF 
	disposingFF 
)FF 
{GG 
m_fSecs1ToHsmsHH "
=HH# $
nullHH% )
;HH) *
}II 

m_disposedKK 
=KK 
trueKK !
;KK! "
}LL 
}MM 	
publicUU 
voidUU 
DisposeUU 
(UU 
)VV 
{WW 	
	myDisposeXX 
(XX 
trueXX 
)XX 
;XX 
GCYY 
.YY 
SuppressFinalizeYY 
(YY  
thisYY  $
)YY$ %
;YY% &
}ZZ 	
publicbb 
UInt16bb 
	sessionIdbb 
{cc 	
getdd 
{ee 
tryff 
{gg 
returnhh 
m_sessionIdhh &
;hh& '
}ii 
catchjj 
(jj 
	Exceptionjj  
exjj! #
)jj# $
{kk 
FDebugll 
.ll 
throwExceptionll )
(ll) *
exll* ,
)ll, -
;ll- .
}mm 
finallynn 
{oo 
}qq 
returnrr 
$numrr 
;rr 
}ss 
setuu 
{vv 
tryww 
{xx 
m_sessionIdyy 
=yy  !
valueyy" '
;yy' (
}zz 
catch{{ 
({{ 
	Exception{{  
ex{{! #
){{# $
{|| 
FDebug}} 
.}} 
throwException}} )
(}}) *
ex}}* ,
)}}, -
;}}- .
}~~ 
finally 
{
ÄÄ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
public
àà 
FConnectMode
àà 
fConnectMode
àà (
{
ââ 	
get
ää 
{
ãã 
try
åå 
{
çç 
return
éé 
m_fConnectMode
éé )
;
éé) *
}
èè 
catch
êê 
(
êê 
	Exception
êê  
ex
êê! #
)
êê# $
{
ëë 
FDebug
íí 
.
íí 
throwException
íí )
(
íí) *
ex
íí* ,
)
íí, -
;
íí- .
}
ìì 
finally
îî 
{
ïï 
}
óó 
return
òò 
FConnectMode
òò #
.
òò# $
Passive
òò$ +
;
òò+ ,
}
ôô 
set
õõ 
{
úú 
try
ùù 
{
ûû 
validateState
üü !
(
üü! "
)
üü" #
;
üü# $
m_fConnectMode
°° "
=
°°# $
value
°°% *
;
°°* +
}
¢¢ 
catch
££ 
(
££ 
	Exception
££  
ex
££! #
)
££# $
{
§§ 
FDebug
•• 
.
•• 
throwException
•• )
(
••) *
ex
••* ,
)
••, -
;
••- .
}
¶¶ 
finally
ßß 
{
®® 
}
™™ 
}
´´ 
}
¨¨ 	
public
∞∞ 
string
∞∞ 
localIp
∞∞ 
{
±± 	
get
≤≤ 
{
≥≥ 
try
¥¥ 
{
µµ 
return
∂∂ 
	m_localIp
∂∂ $
;
∂∂$ %
}
∑∑ 
catch
∏∏ 
(
∏∏ 
	Exception
∏∏  
ex
∏∏! #
)
∏∏# $
{
ππ 
FDebug
∫∫ 
.
∫∫ 
throwException
∫∫ )
(
∫∫) *
ex
∫∫* ,
)
∫∫, -
;
∫∫- .
}
ªª 
finally
ºº 
{
ΩΩ 
}
øø 
return
¿¿ 
string
¿¿ 
.
¿¿ 
Empty
¿¿ #
;
¿¿# $
}
¡¡ 
set
√√ 
{
ƒƒ 
try
≈≈ 
{
∆∆ 
validateState
«« !
(
««! "
)
««" #
;
««# $
if
…… 
(
…… 
value
…… 
.
…… 
Trim
…… "
(
……" #
)
……# $
==
……% '
string
……( .
.
……. /
Empty
……/ 4
)
……4 5
{
   
FDebug
ÀÀ 
.
ÀÀ 
throwFException
ÀÀ .
(
ÀÀ. /
string
ÀÀ/ 5
.
ÀÀ5 6
Format
ÀÀ6 <
(
ÀÀ< =

FConstants
ÀÀ= G
.
ÀÀG H

err_m_0015
ÀÀH R
,
ÀÀR S
$str
ÀÀT ^
)
ÀÀ^ _
)
ÀÀ_ `
;
ÀÀ` a
}
ÃÃ 
	m_localIp
ŒŒ 
=
ŒŒ 
value
ŒŒ  %
;
ŒŒ% &
}
œœ 
catch
–– 
(
–– 
	Exception
––  
ex
––! #
)
––# $
{
—— 
FDebug
““ 
.
““ 
throwException
““ )
(
““) *
ex
““* ,
)
““, -
;
““- .
}
”” 
finally
‘‘ 
{
’’ 
}
◊◊ 
}
ÿÿ 
}
ŸŸ 	
public
›› 
int
›› 
	localPort
›› 
{
ﬁﬁ 	
get
ﬂﬂ 
{
‡‡ 
try
·· 
{
‚‚ 
return
„„ 
m_localPort
„„ &
;
„„& '
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ  
ex
ÂÂ! #
)
ÂÂ# $
{
ÊÊ 
FDebug
ÁÁ 
.
ÁÁ 
throwException
ÁÁ )
(
ÁÁ) *
ex
ÁÁ* ,
)
ÁÁ, -
;
ÁÁ- .
}
ËË 
finally
ÈÈ 
{
ÍÍ 
}
ÏÏ 
return
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
}
ÓÓ 
set
 
{
ÒÒ 
try
ÚÚ 
{
ÛÛ 
validateState
ÙÙ !
(
ÙÙ! "
)
ÙÙ" #
;
ÙÙ# $
if
ˆˆ 
(
ˆˆ 
value
ˆˆ 
<
ˆˆ 
$num
ˆˆ  !
||
ˆˆ" $
value
ˆˆ% *
>
ˆˆ+ ,
$num
ˆˆ- 2
)
ˆˆ2 3
{
˜˜ 
FDebug
¯¯ 
.
¯¯ 
throwFException
¯¯ .
(
¯¯. /
string
¯¯/ 5
.
¯¯5 6
Format
¯¯6 <
(
¯¯< =

FConstants
¯¯= G
.
¯¯G H

err_m_0015
¯¯H R
,
¯¯R S
$str
¯¯T `
)
¯¯` a
)
¯¯a b
;
¯¯b c
}
˘˘ 
m_localPort
˚˚ 
=
˚˚  !
value
˚˚" '
;
˚˚' (
}
¸¸ 
catch
˝˝ 
(
˝˝ 
	Exception
˝˝  
ex
˝˝! #
)
˝˝# $
{
˛˛ 
FDebug
ˇˇ 
.
ˇˇ 
throwException
ˇˇ )
(
ˇˇ) *
ex
ˇˇ* ,
)
ˇˇ, -
;
ˇˇ- .
}
ÄÄ 
finally
ÅÅ 
{
ÇÇ 
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
public
ää 
string
ää 
remoteIp
ää 
{
ãã 	
get
åå 
{
çç 
try
éé 
{
èè 
return
êê 

m_remoteIp
êê %
;
êê% &
}
ëë 
catch
íí 
(
íí 
	Exception
íí  
ex
íí! #
)
íí# $
{
ìì 
FDebug
îî 
.
îî 
throwException
îî )
(
îî) *
ex
îî* ,
)
îî, -
;
îî- .
}
ïï 
finally
ññ 
{
óó 
}
ôô 
return
öö 
string
öö 
.
öö 
Empty
öö #
;
öö# $
}
õõ 
set
ùù 
{
ûû 
try
üü 
{
†† 
validateState
°° !
(
°°! "
)
°°" #
;
°°# $
if
££ 
(
££ 
value
££ 
.
££ 
Trim
££ "
(
££" #
)
££# $
==
££% '
string
££( .
.
££. /
Empty
££/ 4
)
££4 5
{
§§ 
FDebug
•• 
.
•• 
throwFException
•• .
(
••. /
string
••/ 5
.
••5 6
Format
••6 <
(
••< =

FConstants
••= G
.
••G H

err_m_0015
••H R
,
••R S
$str
••T _
)
••_ `
)
••` a
;
••a b
}
¶¶ 

m_remoteIp
®® 
=
®®  
value
®®! &
;
®®& '
}
©© 
catch
™™ 
(
™™ 
	Exception
™™  
ex
™™! #
)
™™# $
{
´´ 
FDebug
¨¨ 
.
¨¨ 
throwException
¨¨ )
(
¨¨) *
ex
¨¨* ,
)
¨¨, -
;
¨¨- .
}
≠≠ 
finally
ÆÆ 
{
ØØ 
}
±± 
}
≤≤ 
}
≥≥ 	
public
∑∑ 
int
∑∑ 

remotePort
∑∑ 
{
∏∏ 	
get
ππ 
{
∫∫ 
try
ªª 
{
ºº 
return
ΩΩ 
m_remotePort
ΩΩ '
;
ΩΩ' (
}
ææ 
catch
øø 
(
øø 
	Exception
øø  
ex
øø! #
)
øø# $
{
¿¿ 
FDebug
¡¡ 
.
¡¡ 
throwException
¡¡ )
(
¡¡) *
ex
¡¡* ,
)
¡¡, -
;
¡¡- .
}
¬¬ 
finally
√√ 
{
ƒƒ 
}
∆∆ 
return
«« 
$num
«« 
;
«« 
}
»» 
set
   
{
ÀÀ 
try
ÃÃ 
{
ÕÕ 
validateState
ŒŒ !
(
ŒŒ! "
)
ŒŒ" #
;
ŒŒ# $
if
–– 
(
–– 
value
–– 
<
–– 
$num
––  !
||
––" $
value
––% *
>
––+ ,
$num
––- 2
)
––2 3
{
—— 
FDebug
““ 
.
““ 
throwFException
““ .
(
““. /
string
““/ 5
.
““5 6
Format
““6 <
(
““< =

FConstants
““= G
.
““G H

err_m_0015
““H R
,
““R S
$str
““T a
)
““a b
)
““b c
;
““c d
}
”” 
m_remotePort
’’  
=
’’! "
value
’’# (
;
’’( )
}
÷÷ 
catch
◊◊ 
(
◊◊ 
	Exception
◊◊  
ex
◊◊! #
)
◊◊# $
{
ÿÿ 
FDebug
ŸŸ 
.
ŸŸ 
throwException
ŸŸ )
(
ŸŸ) *
ex
ŸŸ* ,
)
ŸŸ, -
;
ŸŸ- .
}
⁄⁄ 
finally
€€ 
{
‹‹ 
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 	
public
‰‰ 
int
‰‰ 
linkTestPeriod
‰‰ !
{
ÂÂ 	
get
ÊÊ 
{
ÁÁ 
try
ËË 
{
ÈÈ 
return
ÍÍ 
m_linkTestPeriod
ÍÍ +
;
ÍÍ+ ,
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ  
ex
ÏÏ! #
)
ÏÏ# $
{
ÌÌ 
FDebug
ÓÓ 
.
ÓÓ 
throwException
ÓÓ )
(
ÓÓ) *
ex
ÓÓ* ,
)
ÓÓ, -
;
ÓÓ- .
}
ÔÔ 
finally
 
{
ÒÒ 
}
ÛÛ 
return
ÙÙ 
$num
ÙÙ 
;
ÙÙ 
}
ıı 
set
˜˜ 
{
¯¯ 
try
˘˘ 
{
˙˙ 
validateState
˚˚ !
(
˚˚! "
)
˚˚" #
;
˚˚# $
if
˝˝ 
(
˝˝ 
value
˝˝ 
<
˝˝ 
$num
˝˝  !
||
˝˝" $
value
˝˝% *
>
˝˝+ ,
$num
˝˝- 0
)
˝˝0 1
{
˛˛ 
FDebug
ˇˇ 
.
ˇˇ 
throwFException
ˇˇ .
(
ˇˇ. /
string
ˇˇ/ 5
.
ˇˇ5 6
Format
ˇˇ6 <
(
ˇˇ< =

FConstants
ˇˇ= G
.
ˇˇG H

err_m_0015
ˇˇH R
,
ˇˇR S
$str
ˇˇT f
)
ˇˇf g
)
ˇˇg h
;
ˇˇh i
}
ÄÄ 
m_linkTestPeriod
ÇÇ $
=
ÇÇ% &
value
ÇÇ' ,
;
ÇÇ, -
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ  
ex
ÑÑ! #
)
ÑÑ# $
{
ÖÖ 
FDebug
ÜÜ 
.
ÜÜ 
throwException
ÜÜ )
(
ÜÜ) *
ex
ÜÜ* ,
)
ÜÜ, -
;
ÜÜ- .
}
áá 
finally
àà 
{
ââ 
}
ãã 
}
åå 
}
çç 	
public
ëë 
int
ëë 
	t3Timeout
ëë 
{
íí 	
get
ìì 
{
îî 
try
ïï 
{
ññ 
return
óó 
m_t3Timeout
óó &
;
óó& '
}
òò 
catch
ôô 
(
ôô 
	Exception
ôô  
ex
ôô! #
)
ôô# $
{
öö 
FDebug
õõ 
.
õõ 
throwException
õõ )
(
õõ) *
ex
õõ* ,
)
õõ, -
;
õõ- .
}
úú 
finally
ùù 
{
ûû 
}
†† 
return
°° 
$num
°° 
;
°° 
}
¢¢ 
set
§§ 
{
•• 
try
¶¶ 
{
ßß 
validateState
®® !
(
®®! "
)
®®" #
;
®®# $
if
™™ 
(
™™ 
value
™™ 
<
™™ 
$num
™™  !
||
™™" $
value
™™% *
>
™™+ ,
$num
™™- 0
)
™™0 1
{
´´ 
FDebug
¨¨ 
.
¨¨ 
throwFException
¨¨ .
(
¨¨. /
string
¨¨/ 5
.
¨¨5 6
Format
¨¨6 <
(
¨¨< =

FConstants
¨¨= G
.
¨¨G H

err_m_0015
¨¨H R
,
¨¨R S
$str
¨¨T `
)
¨¨` a
)
¨¨a b
;
¨¨b c
}
≠≠ 
m_t3Timeout
ØØ 
=
ØØ  !
value
ØØ" '
;
ØØ' (
}
∞∞ 
catch
±± 
(
±± 
	Exception
±±  
ex
±±! #
)
±±# $
{
≤≤ 
FDebug
≥≥ 
.
≥≥ 
throwException
≥≥ )
(
≥≥) *
ex
≥≥* ,
)
≥≥, -
;
≥≥- .
}
¥¥ 
finally
µµ 
{
∂∂ 
}
∏∏ 
}
ππ 
}
∫∫ 	
public
ææ 
int
ææ 
	t5Timeout
ææ 
{
øø 	
get
¿¿ 
{
¡¡ 
try
¬¬ 
{
√√ 
return
ƒƒ 
m_t5Timeout
ƒƒ &
;
ƒƒ& '
}
≈≈ 
catch
∆∆ 
(
∆∆ 
	Exception
∆∆  
ex
∆∆! #
)
∆∆# $
{
«« 
FDebug
»» 
.
»» 
throwException
»» )
(
»») *
ex
»»* ,
)
»», -
;
»»- .
}
…… 
finally
   
{
ÀÀ 
}
ÕÕ 
return
ŒŒ 
$num
ŒŒ 
;
ŒŒ 
}
œœ 
set
—— 
{
““ 
try
”” 
{
‘‘ 
validateState
’’ !
(
’’! "
)
’’" #
;
’’# $
if
◊◊ 
(
◊◊ 
value
◊◊ 
<
◊◊ 
$num
◊◊  !
||
◊◊" $
value
◊◊% *
>
◊◊+ ,
$num
◊◊- 0
)
◊◊0 1
{
ÿÿ 
FDebug
ŸŸ 
.
ŸŸ 
throwFException
ŸŸ .
(
ŸŸ. /
string
ŸŸ/ 5
.
ŸŸ5 6
Format
ŸŸ6 <
(
ŸŸ< =

FConstants
ŸŸ= G
.
ŸŸG H

err_m_0015
ŸŸH R
,
ŸŸR S
$str
ŸŸT `
)
ŸŸ` a
)
ŸŸa b
;
ŸŸb c
}
⁄⁄ 
m_t5Timeout
‹‹ 
=
‹‹  !
value
‹‹" '
;
‹‹' (
}
›› 
catch
ﬁﬁ 
(
ﬁﬁ 
	Exception
ﬁﬁ  
ex
ﬁﬁ! #
)
ﬁﬁ# $
{
ﬂﬂ 
FDebug
‡‡ 
.
‡‡ 
throwException
‡‡ )
(
‡‡) *
ex
‡‡* ,
)
‡‡, -
;
‡‡- .
}
·· 
finally
‚‚ 
{
„„ 
}
ÂÂ 
}
ÊÊ 
}
ÁÁ 	
public
ÎÎ 
int
ÎÎ 
	t6Timeout
ÎÎ 
{
ÏÏ 	
get
ÌÌ 
{
ÓÓ 
try
ÔÔ 
{
 
return
ÒÒ 
m_t6Timeout
ÒÒ &
;
ÒÒ& '
}
ÚÚ 
catch
ÛÛ 
(
ÛÛ 
	Exception
ÛÛ  
ex
ÛÛ! #
)
ÛÛ# $
{
ÙÙ 
FDebug
ıı 
.
ıı 
throwException
ıı )
(
ıı) *
ex
ıı* ,
)
ıı, -
;
ıı- .
}
ˆˆ 
finally
˜˜ 
{
¯¯ 
}
˙˙ 
return
˚˚ 
$num
˚˚ 
;
˚˚ 
}
¸¸ 
set
˛˛ 
{
ˇˇ 
try
ÄÄ 
{
ÅÅ 
validateState
ÇÇ !
(
ÇÇ! "
)
ÇÇ" #
;
ÇÇ# $
if
ÑÑ 
(
ÑÑ 
value
ÑÑ 
<
ÑÑ 
$num
ÑÑ  !
||
ÑÑ" $
value
ÑÑ% *
>
ÑÑ+ ,
$num
ÑÑ- 0
)
ÑÑ0 1
{
ÖÖ 
FDebug
ÜÜ 
.
ÜÜ 
throwFException
ÜÜ .
(
ÜÜ. /
string
ÜÜ/ 5
.
ÜÜ5 6
Format
ÜÜ6 <
(
ÜÜ< =

FConstants
ÜÜ= G
.
ÜÜG H

err_m_0015
ÜÜH R
,
ÜÜR S
$str
ÜÜT `
)
ÜÜ` a
)
ÜÜa b
;
ÜÜb c
}
áá 
m_t6Timeout
ââ 
=
ââ  !
value
ââ" '
;
ââ' (
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã  
ex
ãã! #
)
ãã# $
{
åå 
FDebug
çç 
.
çç 
throwException
çç )
(
çç) *
ex
çç* ,
)
çç, -
;
çç- .
}
éé 
finally
èè 
{
êê 
}
íí 
}
ìì 
}
îî 	
public
òò 
int
òò 
	t7Timeout
òò 
{
ôô 	
get
öö 
{
õõ 
try
úú 
{
ùù 
return
ûû 
m_t7Timeout
ûû &
;
ûû& '
}
üü 
catch
†† 
(
†† 
	Exception
††  
ex
††! #
)
††# $
{
°° 
FDebug
¢¢ 
.
¢¢ 
throwException
¢¢ )
(
¢¢) *
ex
¢¢* ,
)
¢¢, -
;
¢¢- .
}
££ 
finally
§§ 
{
•• 
}
ßß 
return
®® 
$num
®® 
;
®® 
}
©© 
set
´´ 
{
¨¨ 
try
≠≠ 
{
ÆÆ 
validateState
ØØ !
(
ØØ! "
)
ØØ" #
;
ØØ# $
if
±± 
(
±± 
value
±± 
<
±± 
$num
±±  !
||
±±" $
value
±±% *
>
±±+ ,
$num
±±- 0
)
±±0 1
{
≤≤ 
FDebug
≥≥ 
.
≥≥ 
throwFException
≥≥ .
(
≥≥. /
string
≥≥/ 5
.
≥≥5 6
Format
≥≥6 <
(
≥≥< =

FConstants
≥≥= G
.
≥≥G H

err_m_0015
≥≥H R
,
≥≥R S
$str
≥≥T `
)
≥≥` a
)
≥≥a b
;
≥≥b c
}
¥¥ 
m_t7Timeout
∂∂ 
=
∂∂  !
value
∂∂" '
;
∂∂' (
}
∑∑ 
catch
∏∏ 
(
∏∏ 
	Exception
∏∏  
ex
∏∏! #
)
∏∏# $
{
ππ 
FDebug
∫∫ 
.
∫∫ 
throwException
∫∫ )
(
∫∫) *
ex
∫∫* ,
)
∫∫, -
;
∫∫- .
}
ªª 
finally
ºº 
{
ΩΩ 
}
øø 
}
¿¿ 
}
¡¡ 	
public
≈≈ 
int
≈≈ 
	t8Timeout
≈≈ 
{
∆∆ 	
get
«« 
{
»» 
try
…… 
{
   
return
ÀÀ 
m_t8Timeout
ÀÀ &
;
ÀÀ& '
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ  
ex
ÕÕ! #
)
ÕÕ# $
{
ŒŒ 
FDebug
œœ 
.
œœ 
throwException
œœ )
(
œœ) *
ex
œœ* ,
)
œœ, -
;
œœ- .
}
–– 
finally
—— 
{
““ 
}
‘‘ 
return
’’ 
$num
’’ 
;
’’ 
}
÷÷ 
set
ÿÿ 
{
ŸŸ 
try
⁄⁄ 
{
€€ 
validateState
‹‹ !
(
‹‹! "
)
‹‹" #
;
‹‹# $
if
ﬁﬁ 
(
ﬁﬁ 
value
ﬁﬁ 
<
ﬁﬁ 
$num
ﬁﬁ  !
||
ﬁﬁ" $
value
ﬁﬁ% *
>
ﬁﬁ+ ,
$num
ﬁﬁ- 0
)
ﬁﬁ0 1
{
ﬂﬂ 
FDebug
‡‡ 
.
‡‡ 
throwFException
‡‡ .
(
‡‡. /
string
‡‡/ 5
.
‡‡5 6
Format
‡‡6 <
(
‡‡< =

FConstants
‡‡= G
.
‡‡G H

err_m_0015
‡‡H R
,
‡‡R S
$str
‡‡T `
)
‡‡` a
)
‡‡a b
;
‡‡b c
}
·· 
m_t8Timeout
„„ 
=
„„  !
value
„„" '
;
„„' (
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ  
ex
ÂÂ! #
)
ÂÂ# $
{
ÊÊ 
FDebug
ÁÁ 
.
ÁÁ 
throwException
ÁÁ )
(
ÁÁ) *
ex
ÁÁ* ,
)
ÁÁ, -
;
ÁÁ- .
}
ËË 
finally
ÈÈ 
{
ÍÍ 
}
ÏÏ 
}
ÌÌ 
}
ÓÓ 	
private
ˆˆ 
void
ˆˆ 
validateState
ˆˆ "
(
ˆˆ" #
)
˜˜ 
{
¯¯ 	
try
˘˘ 
{
˙˙ 
if
˚˚ 
(
˚˚ 
m_fSecs1ToHsms
˚˚ "
.
˚˚" #

fHsmsState
˚˚# -
!=
˚˚. 0!
FCommunicationState
˚˚1 D
.
˚˚D E
Closed
˚˚E K
)
˚˚K L
{
¸¸ 
FDebug
˝˝ 
.
˝˝ 
throwFException
˝˝ *
(
˝˝* +
string
˝˝+ 1
.
˝˝1 2
Format
˝˝2 8
(
˝˝8 9

FConstants
˝˝9 C
.
˝˝C D

err_m_0027
˝˝D N
,
˝˝N O
$str
˝˝P [
)
˝˝[ \
)
˝˝\ ]
;
˝˝] ^
}
˛˛ 
}
ˇˇ 
catch
ÄÄ 
(
ÄÄ 
	Exception
ÄÄ 
ex
ÄÄ 
)
ÄÄ  
{
ÅÅ 
FDebug
ÇÇ 
.
ÇÇ 
throwException
ÇÇ %
(
ÇÇ% &
ex
ÇÇ& (
)
ÇÇ( )
;
ÇÇ) *
}
ÉÉ 
finally
ÑÑ 
{
ÖÖ 
}
áá 
}
àà 	
}
éé 
}èè ªo
rD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\c_FEventPusher.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FEventPusher 
:  
IDisposable! ,
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
FQueue 
< 
FEventArgsBase %
>% &
m_fSecs1Events' 5
=6 7
null8 <
;< =
private 
FQueue 
< 
FEventArgsBase %
>% &
m_fHsmsEvents' 4
=5 6
null7 ;
;; <
private   
FThread   
m_fThdEventPusher   )
=  * +
null  , 0
;  0 1
private!! 
bool!! &
m_isCompletedEventHandling!! /
=!!0 1
false!!2 7
;!!7 8
internal'' 
FEventPusher'' 
('' 
FSecs1ToHsms(( 
fSecs1ToHsms(( %
))) 
{** 	
m_fSecs1ToHsms++ 
=++ 
fSecs1ToHsms++ )
;++) *
init-- 
(-- 
)-- 
;-- 
}.. 	
~22 	
FEventPusher22	 
(22 
)33 
{44 	
	myDispose55 
(55 
false55 
)55 
;55 
}66 	
	protected:: 
void:: 
	myDispose::  
(::  !
bool;; 
	disposing;; 
)<< 
{== 	
if>> 
(>> 
!>> 

m_disposed>> 
)>> 
{?? 
if@@ 
(@@ 
	disposing@@ 
)@@ 
{AA 
termBB 
(BB 
)BB 
;BB 
m_fSecs1ToHsmsDD "
=DD# $
nullDD% )
;DD) *
}EE 

m_disposedGG 
=GG 
trueGG !
;GG! "
}HH 
}II 	
publicQQ 
voidQQ 
DisposeQQ 
(QQ 
)RR 
{SS 	
	myDisposeTT 
(TT 
trueTT 
)TT 
;TT 
GCUU 
.UU 
SuppressFinalizeUU 
(UU  
thisUU  $
)UU$ %
;UU% &
}VV 	
public^^ 
int^^ 
secs1EventCount^^ "
{__ 	
get`` 
{aa 
trybb 
{cc 
returndd 
m_fSecs1Eventsdd )
.dd) *
countdd* /
;dd/ 0
}ee 
catchff 
(ff 
	Exceptionff  
exff! #
)ff# $
{gg 
FDebughh 
.hh 
throwExceptionhh )
(hh) *
exhh* ,
)hh, -
;hh- .
}ii 
finallyjj 
{kk 
}mm 
returnnn 
$numnn 
;nn 
}oo 
}pp 	
publictt 
inttt 
hsmsEventCounttt !
{uu 	
getvv 
{ww 
tryxx 
{yy 
returnzz 
m_fHsmsEventszz (
.zz( )
countzz) .
;zz. /
}{{ 
catch|| 
(|| 
	Exception||  
ex||! #
)||# $
{}} 
FDebug~~ 
.~~ 
throwException~~ )
(~~) *
ex~~* ,
)~~, -
;~~- .
} 
finally
ÄÄ 
{
ÅÅ 
}
ÉÉ 
return
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
public
ää 
bool
ää &
isCompletedEventHandling
ää ,
{
ãã 	
get
åå 
{
çç 
try
éé 
{
èè 
if
êê 
(
êê 
this
êê 
.
êê 
secs1EventCount
êê ,
==
êê- /
$num
êê0 1
&&
êê2 4
this
êê5 9
.
êê9 :
hsmsEventCount
êê: H
==
êêI K
$num
êêL M
&&
êêN P(
m_isCompletedEventHandling
êêQ k
)
êêk l
{
ëë 
return
íí 
true
íí #
;
íí# $
}
ìì 
return
îî 
false
îî  
;
îî  !
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ  
ex
ññ! #
)
ññ# $
{
óó 
FDebug
òò 
.
òò 
throwException
òò )
(
òò) *
ex
òò* ,
)
òò, -
;
òò- .
}
ôô 
finally
öö 
{
õõ 
}
ùù 
return
ûû 
false
ûû 
;
ûû 
}
üü 
}
†† 	
private
®® 
void
®® 
init
®® 
(
®® 
)
©© 
{
™™ 	
try
´´ 
{
¨¨ 
m_fSecs1Events
≠≠ 
=
≠≠  
new
≠≠! $
FQueue
≠≠% +
<
≠≠+ ,
FEventArgsBase
≠≠, :
>
≠≠: ;
(
≠≠; <
)
≠≠< =
;
≠≠= >
m_fHsmsEvents
ÆÆ 
=
ÆÆ 
new
ÆÆ  #
FQueue
ÆÆ$ *
<
ÆÆ* +
FEventArgsBase
ÆÆ+ 9
>
ÆÆ9 :
(
ÆÆ: ;
)
ÆÆ; <
;
ÆÆ< =(
m_isCompletedEventHandling
≤≤ *
=
≤≤+ ,
true
≤≤- 1
;
≤≤1 2
m_fThdEventPusher
≥≥ !
=
≥≥" #
new
≥≥$ '
FThread
≥≥( /
(
≥≥/ 0
$str
≥≥0 A
,
≥≥A B
false
≥≥C H
,
≥≥H I
System
≥≥J P
.
≥≥P Q
	Threading
≥≥Q Z
.
≥≥Z [
ThreadPriority
≥≥[ i
.
≥≥i j
Normal
≥≥j p
,
≥≥p q
true
≥≥r v
)
≥≥v w
;
≥≥w x
m_fThdEventPusher
¥¥ !
.
¥¥! "
ThreadJobCalled
¥¥" 1
+=
¥¥2 4
new
¥¥5 8*
FThreadJobCalledEventHandler
¥¥9 U
(
¥¥U V/
!m_fThdEventPusher_ThreadJobCalled
¥¥V w
)
¥¥w x
;
¥¥x y
m_fThdEventPusher
µµ !
.
µµ! "
start
µµ" '
(
µµ' (
)
µµ( )
;
µµ) *
}
∂∂ 
catch
∑∑ 
(
∑∑ 
	Exception
∑∑ 
ex
∑∑ 
)
∑∑  
{
∏∏ 
FDebug
ππ 
.
ππ 
throwException
ππ %
(
ππ% &
ex
ππ& (
)
ππ( )
;
ππ) *
}
∫∫ 
finally
ªª 
{
ºº 
}
ææ 
}
øø 	
private
√√ 
void
√√ 
term
√√ 
(
√√ 
)
ƒƒ 
{
≈≈ 	
try
∆∆ 
{
«« 
if
»» 
(
»» 
m_fThdEventPusher
»» %
!=
»»& (
null
»») -
)
»»- .
{
…… 
while
   
(
   
!
   
this
    
.
    !&
isCompletedEventHandling
  ! 9
)
  9 :
{
ÀÀ 
System
ÃÃ 
.
ÃÃ 
	Threading
ÃÃ (
.
ÃÃ( )
Thread
ÃÃ) /
.
ÃÃ/ 0
Sleep
ÃÃ0 5
(
ÃÃ5 6
$num
ÃÃ6 8
)
ÃÃ8 9
;
ÃÃ9 :
}
ÕÕ 
m_fThdEventPusher
—— %
.
——% &
ThreadJobCalled
——& 5
-=
——6 8
new
——9 <*
FThreadJobCalledEventHandler
——= Y
(
——Y Z/
!m_fThdEventPusher_ThreadJobCalled
——Z {
)
——{ |
;
——| }
m_fThdEventPusher
““ %
.
““% &
stop
““& *
(
““* +
)
““+ ,
;
““, -
m_fThdEventPusher
”” %
.
””% &
Dispose
””& -
(
””- .
)
””. /
;
””/ 0
m_fThdEventPusher
‘‘ %
=
‘‘& '
null
‘‘( ,
;
‘‘, -
}
’’ 
if
◊◊ 
(
◊◊ 
m_fSecs1Events
◊◊ "
!=
◊◊# %
null
◊◊& *
)
◊◊* +
{
ÿÿ 
m_fSecs1Events
ŸŸ "
.
ŸŸ" #
Dispose
ŸŸ# *
(
ŸŸ* +
)
ŸŸ+ ,
;
ŸŸ, -
m_fSecs1Events
⁄⁄ "
=
⁄⁄# $
null
⁄⁄% )
;
⁄⁄) *
}
€€ 
if
›› 
(
›› 
m_fHsmsEvents
›› !
!=
››" $
null
››% )
)
››) *
{
ﬁﬁ 
m_fHsmsEvents
ﬂﬂ !
.
ﬂﬂ! "
Dispose
ﬂﬂ" )
(
ﬂﬂ) *
)
ﬂﬂ* +
;
ﬂﬂ+ ,
m_fHsmsEvents
‡‡ !
=
‡‡" #
null
‡‡$ (
;
‡‡( )
}
·· 
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
ex
„„ 
)
„„  
{
‰‰ 
FDebug
ÂÂ 
.
ÂÂ 
throwException
ÂÂ %
(
ÂÂ% &
ex
ÂÂ& (
)
ÂÂ( )
;
ÂÂ) *
}
ÊÊ 
finally
ÁÁ 
{
ËË 
}
ÍÍ 
}
ÎÎ 	
public
ÔÔ 
void
ÔÔ 
pushSecs1Event
ÔÔ "
(
ÔÔ" #
FEventArgsBase
 
fArgs
  
)
ÒÒ 
{
ÚÚ 	
try
ÛÛ 
{
ÙÙ 
m_fSecs1Events
ıı 
.
ıı 
enqueue
ıı &
(
ıı& '
fArgs
ıı' ,
)
ıı, -
;
ıı- .
}
ˆˆ 
catch
˜˜ 
(
˜˜ 
	Exception
˜˜ 
ex
˜˜ 
)
˜˜  
{
¯¯ 
FDebug
˘˘ 
.
˘˘ 
throwException
˘˘ %
(
˘˘% &
ex
˘˘& (
)
˘˘( )
;
˘˘) *
}
˙˙ 
finally
˚˚ 
{
¸¸ 
}
˛˛ 
}
ˇˇ 	
public
ÉÉ 
void
ÉÉ 
pushHsmsEvent
ÉÉ !
(
ÉÉ! "
FEventArgsBase
ÑÑ 
fArgs
ÑÑ  
)
ÖÖ 
{
ÜÜ 	
try
áá 
{
àà 
m_fHsmsEvents
ââ 
.
ââ 
enqueue
ââ %
(
ââ% &
fArgs
ââ& +
)
ââ+ ,
;
ââ, -
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
FDebug
çç 
.
çç 
throwException
çç %
(
çç% &
ex
çç& (
)
çç( )
;
çç) *
}
éé 
finally
èè 
{
êê 
}
íí 
}
ìì 	
public
óó 
void
óó (
waitEventHandlingCompleted
óó .
(
óó. /
)
òò 
{
ôô 	
try
öö 
{
õõ 
while
úú 
(
úú 
!
úú 
this
úú 
.
úú &
isCompletedEventHandling
úú 5
)
úú5 6
{
ùù 
if
ûû 
(
ûû 
System
ûû 
.
ûû 
Windows
ûû &
.
ûû& '
Forms
ûû' ,
.
ûû, -
Application
ûû- 8
.
ûû8 9
MessageLoop
ûû9 D
)
ûûD E
{
üü 
System
†† 
.
†† 
Windows
†† &
.
††& '
Forms
††' ,
.
††, -
Application
††- 8
.
††8 9
DoEvents
††9 A
(
††A B
)
††B C
;
††C D
}
°° 
System
¢¢ 
.
¢¢ 
	Threading
¢¢ $
.
¢¢$ %
Thread
¢¢% +
.
¢¢+ ,
Sleep
¢¢, 1
(
¢¢1 2
$num
¢¢2 3
)
¢¢3 4
;
¢¢4 5
}
££ 
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶ 
FDebug
ßß 
.
ßß 
throwException
ßß %
(
ßß% &
ex
ßß& (
)
ßß( )
;
ßß) *
}
®® 
finally
©© 
{
™™ 
}
¨¨ 
}
≠≠ 	
private
µµ 
void
µµ /
!m_fThdEventPusher_ThreadJobCalled
µµ 6
(
µµ6 7
object
∂∂ 
sender
∂∂ 
,
∂∂ 
FThreadEventArgs
∑∑ 
e
∑∑ 
)
∏∏ 
{
ππ 	
try
∫∫ 
{
ªª 
if
ºº 
(
ºº 
this
ºº 
.
ºº 
secs1EventCount
ºº (
==
ºº) +
$num
ºº, -
&&
ºº. 0
this
ºº1 5
.
ºº5 6
hsmsEventCount
ºº6 D
==
ººE G
$num
ººH I
)
ººI J
{
ΩΩ (
m_isCompletedEventHandling
ææ .
=
ææ/ 0
true
ææ1 5
;
ææ5 6
e
øø 
.
øø 
sleepThread
øø !
(
øø! "
$num
øø" #
)
øø# $
;
øø$ %
return
¿¿ 
;
¿¿ 
}
¡¡ (
m_isCompletedEventHandling
¬¬ *
=
¬¬+ ,
false
¬¬- 2
;
¬¬2 3
while
∆∆ 
(
∆∆ 
this
∆∆ 
.
∆∆ 
secs1EventCount
∆∆ +
>
∆∆, -
$num
∆∆. /
)
∆∆/ 0
{
«« 
m_fSecs1ToHsms
»» "
.
»»" #
onEventRaised
»»# 0
(
»»0 1
m_fSecs1Events
»»1 ?
.
»»? @
dequeue
»»@ G
(
»»G H
)
»»H I
)
»»I J
;
»»J K
}
…… 
while
ÕÕ 
(
ÕÕ 
this
ÕÕ 
.
ÕÕ 
hsmsEventCount
ÕÕ *
>
ÕÕ+ ,
$num
ÕÕ- .
)
ÕÕ. /
{
ŒŒ 
m_fSecs1ToHsms
œœ "
.
œœ" #
onEventRaised
œœ# 0
(
œœ0 1
m_fHsmsEvents
œœ1 >
.
œœ> ?
dequeue
œœ? F
(
œœF G
)
œœG H
)
œœH I
;
œœI J
}
–– 
}
—— 
catch
““ 
(
““ 
	Exception
““ 
ex
““ 
)
““  
{
”” 
FDebug
‘‘ 
.
‘‘ 
writeLog
‘‘ 
(
‘‘  
ex
‘‘  "
)
‘‘" #
;
‘‘# $
}
’’ 
finally
÷÷ 
{
◊◊ 
}
ŸŸ 
}
⁄⁄ 	
}
‡‡ 
}·· ‡=
sD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\c_FEventHandler.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

class 
FEventHandler 
: 
IDisposable  +
{ 
public 
event $
FEventRaisedEventHandler -
EventRaised. 9
=: ;
null< @
;@ A
private 
bool 

m_disposed 
=  !
false" '
;' (
private!! 
FSecs1ToHsms!! 
m_fSecs1ToHsms!! +
=!!, -
null!!. 2
;!!2 3
private"" 
Control"" 
	m_invoker"" !
=""" #
null""$ (
;""( )
public(( 
FEventHandler(( 
((( 
FSecs1ToHsms)) 
fSecs1ToHsms)) %
,))% &
Control** 
invoker** 
)++ 
{,, 	
m_fSecs1ToHsms-- 
=-- 
fSecs1ToHsms-- )
;--) *
	m_invoker.. 
=.. 
invoker.. 
;..  
init00 
(00 
)00 
;00 
}11 	
~55 	
FEventHandler55	 
(55 
)66 
{77 	
	myDispose88 
(88 
false88 
)88 
;88 
}99 	
	protected== 
void== 
	myDispose==  
(==  !
bool>> 
	disposing>> 
)?? 
{@@ 	
ifAA 
(AA 
!AA 

m_disposedAA 
)AA 
{BB 
ifCC 
(CC 
	disposingCC 
)CC 
{DD 
termEE 
(EE 
)EE 
;EE 
m_fSecs1ToHsmsGG "
=GG# $
nullGG% )
;GG) *
	m_invokerHH 
=HH 
nullHH  $
;HH$ %
}II 

m_disposedKK 
=KK 
trueKK !
;KK! "
}LL 
}MM 	
publicUU 
voidUU 
DisposeUU 
(UU 
)VV 
{WW 	
	myDisposeXX 
(XX 
trueXX 
)XX 
;XX 
GCYY 
.YY 
SuppressFinalizeYY 
(YY  
thisYY  $
)YY$ %
;YY% &
}ZZ 	
privatehh 
voidhh 
inithh 
(hh 
)ii 
{jj 	
trykk 
{ll 
m_fSecs1ToHsmsmm 
.mm 
EventRaisedmm *
+=mm+ -
newmm. 1$
FEventRaisedEventHandlermm2 J
(mmJ K&
m_fSecs1ToHsms_EventRaisedmmK e
)mme f
;mmf g
}nn 
catchoo 
(oo 
	Exceptionoo 
exoo 
)oo  
{pp 
FDebugqq 
.qq 
throwExceptionqq %
(qq% &
exqq& (
)qq( )
;qq) *
}rr 
finallyss 
{tt 
}vv 
}ww 	
private{{ 
void{{ 
term{{ 
({{ 
)|| 
{}} 	
try~~ 
{ 
m_fSecs1ToHsms
ÄÄ 
.
ÄÄ 
EventRaised
ÄÄ *
-=
ÄÄ+ -
new
ÄÄ. 1&
FEventRaisedEventHandler
ÄÄ2 J
(
ÄÄJ K(
m_fSecs1ToHsms_EventRaised
ÄÄK e
)
ÄÄe f
;
ÄÄf g
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
	Exception
ÇÇ 
ex
ÇÇ 
)
ÇÇ  
{
ÉÉ 
FDebug
ÑÑ 
.
ÑÑ 
throwException
ÑÑ %
(
ÑÑ% &
ex
ÑÑ& (
)
ÑÑ( )
;
ÑÑ) *
}
ÖÖ 
finally
ÜÜ 
{
áá 
}
ââ 
}
ää 	
private
éé 
bool
éé 
validateInvoker
éé $
(
éé$ %
)
èè 
{
êê 	
try
ëë 
{
íí 
if
ìì 
(
ìì 
	m_invoker
ìì 
!=
ìì  
null
ìì! %
)
ìì% &
{
îî 
if
ïï 
(
ïï 
!
ïï 
	m_invoker
ïï "
.
ïï" #
Created
ïï# *
||
ïï+ -
!
ïï. /
	m_invoker
ïï/ 8
.
ïï8 9
IsHandleCreated
ïï9 H
)
ïïH I
{
ññ 
return
óó 
false
óó $
;
óó$ %
}
òò 
}
ôô 
return
öö 
true
öö 
;
öö 
}
õõ 
catch
úú 
(
úú 
	Exception
úú 
ex
úú 
)
úú  
{
ùù 
FDebug
ûû 
.
ûû 
throwException
ûû %
(
ûû% &
ex
ûû& (
)
ûû( )
;
ûû) *
}
üü 
finally
†† 
{
°° 
}
££ 
return
§§ 
false
§§ 
;
§§ 
}
•• 	
public
©© 
void
©© (
waitEventHandlingCompleted
©© .
(
©©. /
)
™™ 
{
´´ 	
try
¨¨ 
{
≠≠ 
m_fSecs1ToHsms
ÆÆ 
.
ÆÆ 
fEventPusher
ÆÆ +
.
ÆÆ+ ,(
waitEventHandlingCompleted
ÆÆ, F
(
ÆÆF G
)
ÆÆG H
;
ÆÆH I
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞ 
ex
∞∞ 
)
∞∞  
{
±± 
FDebug
≤≤ 
.
≤≤ 
throwException
≤≤ %
(
≤≤% &
ex
≤≤& (
)
≤≤( )
;
≤≤) *
}
≥≥ 
finally
¥¥ 
{
µµ 
}
∑∑ 
}
∏∏ 	
private
¿¿ 
void
¿¿ (
m_fSecs1ToHsms_EventRaised
¿¿ /
(
¿¿/ 0
object
¡¡ 
sender
¡¡ 
,
¡¡ 
FEventArgsBase
¬¬ 
e
¬¬ 
)
√√ 
{
ƒƒ 	
try
≈≈ 
{
∆∆ 
if
«« 
(
«« 
EventRaised
«« 
==
««  "
null
««# '
)
««' (
{
»» 
return
…… 
;
…… 
}
   
if
ŒŒ 
(
ŒŒ 
!
ŒŒ 
validateInvoker
ŒŒ $
(
ŒŒ$ %
)
ŒŒ% &
)
ŒŒ& '
{
œœ 
return
–– 
;
–– 
}
—— 
if
’’ 
(
’’ 
	m_invoker
’’ 
==
’’  
null
’’! %
||
’’& (
!
’’) *
	m_invoker
’’* 3
.
’’3 4
InvokeRequired
’’4 B
)
’’B C
{
÷÷ 
EventRaised
◊◊ 
(
◊◊  
this
◊◊  $
,
◊◊$ %
e
◊◊& '
)
◊◊' (
;
◊◊( )
}
ÿÿ 
else
ŸŸ 
{
⁄⁄ 
	m_invoker
€€ 
.
€€ 
Invoke
€€ $
(
€€$ %
new
€€% (
MethodInvoker
€€) 6
(
€€6 7
delegate
€€7 ?
(
€€? @
)
€€@ A
{
‹‹ 
EventRaised
›› #
(
››# $
this
››$ (
,
››( )
e
››* +
)
››+ ,
;
››, -
}
ﬁﬁ 
)
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
catch
·· 
(
·· 
	Exception
·· 
ex
·· 
)
··  
{
‚‚ 
if
„„ 
(
„„ 
ex
„„ 
is
„„ %
ObjectDisposedException
„„ 1
)
„„1 2
{
‰‰ 
return
ÂÂ 
;
ÂÂ 
}
ÊÊ 
FDebug
ÁÁ 
.
ÁÁ 
writeLog
ÁÁ 
(
ÁÁ  
ex
ÁÁ  "
)
ÁÁ" #
;
ÁÁ# $
}
ËË 
finally
ÈÈ 
{
ÍÍ 
}
ÏÏ 
}
ÌÌ 	
}
ÛÛ 
}ÙÙ ú
~D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FEventArgsBase.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class 
FEventArgsBase 
:  
	EventArgs! *
,* +
IDisposable, 7
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
FEventId 

m_fEventId #
=$ %
FEventId& .
.. /
None/ 3
;3 4
internal$$ 
FEventArgsBase$$ 
($$  
FSecs1ToHsms%% 
fSecs1ToHsms%% %
,%%% &
FEventId&& 
fEventId&& 
)'' 
{(( 	
m_fSecs1ToHsms)) 
=)) 
fSecs1ToHsms)) )
;))) *

m_fEventId** 
=** 
fEventId** !
;**! "
}++ 	
~// 	
FEventArgsBase//	 
(// 
)00 
{11 	
	myDispose22 
(22 
false22 
)22 
;22 
}33 	
	protected77 
virtual77 
void77 
	myDispose77 (
(77( )
bool88 
	disposing88 
)99 
{:: 	
if;; 
(;; 
!;; 

m_disposed;; 
);; 
{<< 
if== 
(== 
	disposing== 
)== 
{>> 
m_fSecs1ToHsms?? "
=??# $
null??% )
;??) *
}@@ 

m_disposedBB 
=BB 
trueBB !
;BB! "
}CC 
}DD 	
publicLL 
voidLL 
DisposeLL 
(LL 
)MM 
{NN 	
	myDisposeOO 
(OO 
trueOO 
)OO 
;OO 
GCPP 
.PP 
SuppressFinalizePP 
(PP  
thisPP  $
)PP$ %
;PP% &
}QQ 	
publicYY 
FSecs1ToHsmsYY 
fSecs1ToHsmsYY (
{ZZ 	
get[[ 
{\\ 
try]] 
{^^ 
return__ 
m_fSecs1ToHsms__ )
;__) *
}`` 
catchaa 
(aa 
	Exceptionaa  
exaa! #
)aa# $
{bb 
FDebugcc 
.cc 
throwExceptioncc )
(cc) *
excc* ,
)cc, -
;cc- .
}dd 
finallyee 
{ff 
}hh 
returnii 
nullii 
;ii 
}jj 
}kk 	
publicoo 
FEventIdoo 
fEventIdoo  
{pp 	
getqq 
{rr 
tryss 
{tt 
returnuu 

m_fEventIduu %
;uu% &
}vv 
catchww 
(ww 
	Exceptionww  
exww! #
)ww# $
{xx 
FDebugyy 
.yy 
throwExceptionyy )
(yy) *
exyy* ,
)yy, -
;yy- .
}zz 
finally{{ 
{|| 
}~~ 
return 
FEventId 
.  
None  $
;$ %
}
ÄÄ 
}
ÅÅ 	
}
çç 
}éé ≠6
ãD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FSecs1StateChangedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class '
FSecs1StateChangedEventArgs ,
:- .
FEventArgsBase/ =
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FCommunicationState #
m_fState$ ,
=- .
FCommunicationState/ B
.B C
ClosedC I
;I J
private   
string   
m_serialPort   #
=  $ %
string  & ,
.  , -
Empty  - 2
;  2 3
private!! 
int!! 
m_baud!! 
=!! 
$num!! 
;!! 
internal'' '
FSecs1StateChangedEventArgs'' ,
('', -
FSecs1ToHsms(( 
fSecs1ToHsms(( %
,((% &
FEventId)) 
fEventId)) 
,)) 
FResultCode** 
fResult** 
,**  
string++ 
errorMessage++ 
,++  
FCommunicationState,, 
fState,,  &
,,,& '
string-- 

serialPort-- 
,-- 
int.. 
baud.. 
)// 
:00 
base00 
(00 
fSecs1ToHsms00 
,00  
fEventId00! )
)00) *
{11 	
	m_fResult22 
=22 
fResult22 
;22  
m_errorMessage33 
=33 
errorMessage33 )
;33) *
m_fState44 
=44 
fState44 
;44 
m_serialPort55 
=55 

serialPort55 %
;55% &
m_baud66 
=66 
baud66 
;66 
}77 	
~;; 	'
FSecs1StateChangedEventArgs;;	 $
(;;$ %
)<< 
{== 	
	myDispose>> 
(>> 
false>> 
)>> 
;>> 
}?? 	
	protectedCC 
overrideCC 
voidCC 
	myDisposeCC  )
(CC) *
boolDD 
	disposingDD 
)EE 
{FF 	
ifGG 
(GG 
!GG 

m_disposedGG 
)GG 
{HH 
ifII 
(II 
	disposingII 
)II 
{JJ 
}LL 

m_disposedMM 
=MM 
trueMM !
;MM! "
baseOO 
.OO 
	myDisposeOO 
(OO 
	disposingOO (
)OO( )
;OO) *
}PP 
}QQ 	
publicYY 
voidYY 
DisposeYY 
(YY 
)ZZ 
{[[ 	
	myDispose\\ 
(\\ 
true\\ 
)\\ 
;\\ 
GC]] 
.]] 
SuppressFinalize]] 
(]]  
this]]  $
)]]$ %
;]]% &
}^^ 	
publicff 
FResultCodeff 
fResultff "
{gg 	
gethh 
{ii 
tryjj 
{kk 
returnll 
	m_fResultll $
;ll$ %
}mm 
catchnn 
(nn 
	Exceptionnn  
exnn! #
)nn# $
{oo 
FDebugpp 
.pp 
throwExceptionpp )
(pp) *
expp* ,
)pp, -
;pp- .
}qq 
finallyrr 
{ss 
}uu 
returnvv 
FResultCodevv "
.vv" #
Successvv# *
;vv* +
}ww 
}xx 	
public|| 
string|| 
errorMessage|| "
{}} 	
get~~ 
{ 
try
ÄÄ 
{
ÅÅ 
return
ÇÇ 
m_errorMessage
ÇÇ )
;
ÇÇ) *
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ  
ex
ÑÑ! #
)
ÑÑ# $
{
ÖÖ 
FDebug
ÜÜ 
.
ÜÜ 
throwException
ÜÜ )
(
ÜÜ) *
ex
ÜÜ* ,
)
ÜÜ, -
;
ÜÜ- .
}
áá 
finally
àà 
{
ââ 
}
ãã 
return
åå 
string
åå 
.
åå 
Empty
åå #
;
åå# $
}
çç 
}
éé 	
public
íí !
FCommunicationState
íí "
fState
íí# )
{
ìì 	
get
îî 
{
ïï 
try
ññ 
{
óó 
return
òò 
m_fState
òò #
;
òò# $
}
ôô 
catch
öö 
(
öö 
	Exception
öö  
ex
öö! #
)
öö# $
{
õõ 
FDebug
úú 
.
úú 
throwException
úú )
(
úú) *
ex
úú* ,
)
úú, -
;
úú- .
}
ùù 
finally
ûû 
{
üü 
}
°° 
return
¢¢ !
FCommunicationState
¢¢ *
.
¢¢* +
Closed
¢¢+ 1
;
¢¢1 2
}
££ 
}
§§ 	
public
®® 
string
®® 

serialPort
®®  
{
©© 	
get
™™ 
{
´´ 
try
¨¨ 
{
≠≠ 
return
ÆÆ 
m_serialPort
ÆÆ '
;
ÆÆ' (
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞  
ex
∞∞! #
)
∞∞# $
{
±± 
FDebug
≤≤ 
.
≤≤ 
throwException
≤≤ )
(
≤≤) *
ex
≤≤* ,
)
≤≤, -
;
≤≤- .
}
≥≥ 
finally
¥¥ 
{
µµ 
}
∑∑ 
return
∏∏ 
string
∏∏ 
.
∏∏ 
Empty
∏∏ #
;
∏∏# $
}
ππ 
}
∫∫ 	
public
ææ 
int
ææ 
baud
ææ 
{
øø 	
get
¿¿ 
{
¡¡ 
try
¬¬ 
{
√√ 
return
ƒƒ 
m_baud
ƒƒ !
;
ƒƒ! "
}
≈≈ 
catch
∆∆ 
(
∆∆ 
	Exception
∆∆  
ex
∆∆! #
)
∆∆# $
{
«« 
FDebug
»» 
.
»» 
throwException
»» )
(
»») *
ex
»»* ,
)
»», -
;
»»- .
}
…… 
finally
   
{
ÀÀ 
}
ÕÕ 
return
ŒŒ 
$num
ŒŒ 
;
ŒŒ 
}
œœ 
}
–– 	
}
‹‹ 
}›› 
äD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FSecs1ErrorRaisedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class &
FSecs1ErrorRaisedEventArgs +
:, -
FEventArgsBase. <
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
internal## &
FSecs1ErrorRaisedEventArgs## +
(##+ ,
FSecs1ToHsms$$ 
fSecs1ToHsms$$ %
,$$% &
FEventId%% 
fEventId%% 
,%% 
string&& 
errorMessage&& 
)'' 
:(( 
base(( 
((( 
fSecs1ToHsms(( 
,((  
fEventId((! )
)(() *
{)) 	
m_errorMessage** 
=** 
errorMessage** )
;**) *
}++ 	
~// 	&
FSecs1ErrorRaisedEventArgs//	 #
(//# $
)00 
{11 	
	myDispose22 
(22 
false22 
)22 
;22 
}33 	
	protected77 
override77 
void77 
	myDispose77  )
(77) *
bool88 
	disposing88 
)99 
{:: 	
if;; 
(;; 
!;; 

m_disposed;; 
);; 
{<< 
if== 
(== 
	disposing== 
)== 
{>> 
}@@ 

m_disposedAA 
=AA 
trueAA !
;AA! "
baseCC 
.CC 
	myDisposeCC 
(CC 
	disposingCC (
)CC( )
;CC) *
}DD 
}EE 	
publicMM 
voidMM 
DisposeMM 
(MM 
)NN 
{OO 	
	myDisposePP 
(PP 
truePP 
)PP 
;PP 
GCQQ 
.QQ 
SuppressFinalizeQQ 
(QQ  
thisQQ  $
)QQ$ %
;QQ% &
}RR 	
publicZZ 
stringZZ 
errorMessageZZ "
{[[ 	
get\\ 
{]] 
try^^ 
{__ 
return`` 
m_errorMessage`` )
;``) *
}aa 
catchbb 
(bb 
	Exceptionbb  
exbb! #
)bb# $
{cc 
FDebugdd 
.dd 
throwExceptiondd )
(dd) *
exdd* ,
)dd, -
;dd- .
}ee 
finallyff 
{gg 
}ii 
returnjj 
stringjj 
.jj 
Emptyjj #
;jj# $
}kk 
}ll 	
}xx 
}yy ÿ.
êD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FSecs1HandshakeReceivedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class ,
 FSecs1HandshakeReceivedEventArgs 1
:2 3
FEventArgsBase4 B
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSecs1HandshakeCode #
m_fHandshakeCode$ 4
=5 6
FSecs1HandshakeCode7 J
.J K
ENQK N
;N O
internal%% ,
 FSecs1HandshakeReceivedEventArgs%% 1
(%%1 2
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  
FSecs1HandshakeCode** 
fHandshakeCode**  .
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	
	m_fResult.. 
=.. 
fResult.. 
;..  
m_errorMessage// 
=// 
errorMessage// )
;//) *
m_fHandshakeCode00 
=00 
fHandshakeCode00 -
;00- .
}11 	
~55 	,
 FSecs1HandshakeReceivedEventArgs55	 )
(55) *
)66 
{77 	
	myDispose88 
(88 
false88 
)88 
;88 
}99 	
	protected== 
override== 
void== 
	myDispose==  )
(==) *
bool>> 
	disposing>> 
)?? 
{@@ 	
ifAA 
(AA 
!AA 

m_disposedAA 
)AA 
{BB 
ifCC 
(CC 
	disposingCC 
)CC 
{DD 
}FF 

m_disposedGG 
=GG 
trueGG !
;GG! "
baseII 
.II 
	myDisposeII 
(II 
	disposingII (
)II( )
;II) *
}JJ 
}KK 	
publicSS 
voidSS 
DisposeSS 
(SS 
)TT 
{UU 	
	myDisposeVV 
(VV 
trueVV 
)VV 
;VV 
GCWW 
.WW 
SuppressFinalizeWW 
(WW  
thisWW  $
)WW$ %
;WW% &
}XX 	
public`` 
FResultCode`` 
fResult`` "
{aa 	
getbb 
{cc 
trydd 
{ee 
returnff 
	m_fResultff $
;ff$ %
}gg 
catchhh 
(hh 
	Exceptionhh  
exhh! #
)hh# $
{ii 
FDebugjj 
.jj 
throwExceptionjj )
(jj) *
exjj* ,
)jj, -
;jj- .
}kk 
finallyll 
{mm 
}oo 
returnpp 
FResultCodepp "
.pp" #
Successpp# *
;pp* +
}qq 
}rr 	
publicvv 
stringvv 
errorMessagevv "
{ww 	
getxx 
{yy 
tryzz 
{{{ 
return|| 
m_errorMessage|| )
;||) *
}}} 
catch~~ 
(~~ 
	Exception~~  
ex~~! #
)~~# $
{ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ )
(
ÄÄ) *
ex
ÄÄ* ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
return
ÜÜ 
string
ÜÜ 
.
ÜÜ 
Empty
ÜÜ #
;
ÜÜ# $
}
áá 
}
àà 	
public
åå !
FSecs1HandshakeCode
åå "
fHandshakeCode
åå# 1
{
çç 	
get
éé 
{
èè 
try
êê 
{
ëë 
return
íí 
m_fHandshakeCode
íí +
;
íí+ ,
}
ìì 
catch
îî 
(
îî 
	Exception
îî  
ex
îî! #
)
îî# $
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ )
(
ññ) *
ex
ññ* ,
)
ññ, -
;
ññ- .
}
óó 
finally
òò 
{
ôô 
}
õõ 
return
úú !
FSecs1HandshakeCode
úú *
.
úú* +
ENQ
úú+ .
;
úú. /
}
ùù 
}
ûû 	
internal
¶¶ 
byte
¶¶ 
[
¶¶ 
]
¶¶ 
getBinaryData
¶¶ %
(
¶¶% &
)
ßß 
{
®® 	
try
©© 
{
™™ 
return
´´ 
new
´´ 
byte
´´ 
[
´´  
]
´´  !
{
´´" #
(
´´$ %
byte
´´% )
)
´´) *
m_fHandshakeCode
´´* :
}
´´; <
;
´´< =
}
¨¨ 
catch
≠≠ 
(
≠≠ 
	Exception
≠≠ 
ex
≠≠ 
)
≠≠  
{
ÆÆ 
FDebug
ØØ 
.
ØØ 
throwException
ØØ %
(
ØØ% &
ex
ØØ& (
)
ØØ( )
;
ØØ) *
}
∞∞ 
finally
±± 
{
≤≤ 
}
¥¥ 
return
µµ 
null
µµ 
;
µµ 
}
∂∂ 	
}
ºº 
}ΩΩ ».
åD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FSecs1HandshakeSentEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class (
FSecs1HandshakeSentEventArgs -
:. /
FEventArgsBase0 >
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSecs1HandshakeCode #
m_fHandshakeCode$ 4
=5 6
FSecs1HandshakeCode7 J
.J K
ENQK N
;N O
internal%% (
FSecs1HandshakeSentEventArgs%% -
(%%- .
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  
FSecs1HandshakeCode** 
fHandshakeCode**  .
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	
	m_fResult.. 
=.. 
fResult.. 
;..  
m_errorMessage// 
=// 
errorMessage// )
;//) *
m_fHandshakeCode00 
=00 
fHandshakeCode00 -
;00- .
}11 	
~55 	(
FSecs1HandshakeSentEventArgs55	 %
(55% &
)66 
{77 	
	myDispose88 
(88 
false88 
)88 
;88 
}99 	
	protected== 
override== 
void== 
	myDispose==  )
(==) *
bool>> 
	disposing>> 
)?? 
{@@ 	
ifAA 
(AA 
!AA 

m_disposedAA 
)AA 
{BB 
ifCC 
(CC 
	disposingCC 
)CC 
{DD 
}FF 

m_disposedGG 
=GG 
trueGG !
;GG! "
baseII 
.II 
	myDisposeII 
(II 
	disposingII (
)II( )
;II) *
}JJ 
}KK 	
publicSS 
voidSS 
DisposeSS 
(SS 
)TT 
{UU 	
	myDisposeVV 
(VV 
trueVV 
)VV 
;VV 
GCWW 
.WW 
SuppressFinalizeWW 
(WW  
thisWW  $
)WW$ %
;WW% &
}XX 	
public`` 
FResultCode`` 
fResult`` "
{aa 	
getbb 
{cc 
trydd 
{ee 
returnff 
	m_fResultff $
;ff$ %
}gg 
catchhh 
(hh 
	Exceptionhh  
exhh! #
)hh# $
{ii 
FDebugjj 
.jj 
throwExceptionjj )
(jj) *
exjj* ,
)jj, -
;jj- .
}kk 
finallyll 
{mm 
}oo 
returnpp 
FResultCodepp "
.pp" #
Successpp# *
;pp* +
}qq 
}rr 	
publicvv 
stringvv 
errorMessagevv "
{ww 	
getxx 
{yy 
tryzz 
{{{ 
return|| 
m_errorMessage|| )
;||) *
}}} 
catch~~ 
(~~ 
	Exception~~  
ex~~! #
)~~# $
{ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ )
(
ÄÄ) *
ex
ÄÄ* ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
return
ÜÜ 
string
ÜÜ 
.
ÜÜ 
Empty
ÜÜ #
;
ÜÜ# $
}
áá 
}
àà 	
public
åå !
FSecs1HandshakeCode
åå "
fHandshakeCode
åå# 1
{
çç 	
get
éé 
{
èè 
try
êê 
{
ëë 
return
íí 
m_fHandshakeCode
íí +
;
íí+ ,
}
ìì 
catch
îî 
(
îî 
	Exception
îî  
ex
îî! #
)
îî# $
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ )
(
ññ) *
ex
ññ* ,
)
ññ, -
;
ññ- .
}
óó 
finally
òò 
{
ôô 
}
õõ 
return
úú !
FSecs1HandshakeCode
úú *
.
úú* +
ENQ
úú+ .
;
úú. /
}
ùù 
}
ûû 	
internal
¶¶ 
byte
¶¶ 
[
¶¶ 
]
¶¶ 
getBinaryData
¶¶ %
(
¶¶% &
)
ßß 
{
®® 	
try
©© 
{
™™ 
return
´´ 
new
´´ 
byte
´´ 
[
´´  
]
´´  !
{
´´" #
(
´´$ %
byte
´´% )
)
´´) *
m_fHandshakeCode
´´* :
}
´´; <
;
´´< =
}
¨¨ 
catch
≠≠ 
(
≠≠ 
	Exception
≠≠ 
ex
≠≠ 
)
≠≠  
{
ÆÆ 
FDebug
ØØ 
.
ØØ 
throwException
ØØ %
(
ØØ% &
ex
ØØ& (
)
ØØ( )
;
ØØ) *
}
∞∞ 
finally
±± 
{
≤≤ 
}
¥¥ 
return
µµ 
null
µµ 
;
µµ 
}
∂∂ 	
}
ºº 
}ΩΩ Å&
åD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FSecs1BlockReceivedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class (
FSecs1BlockReceivedEventArgs -
:. /
FEventArgsBase0 >
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 

FSecsBlock 
m_fSecsBlock '
=( )
null* .
;. /
internal%% (
FSecs1BlockReceivedEventArgs%% -
(%%- .
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  

FSecsBlock** 

fSecsBlock** !
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	
m_fSecsBlock.. 
=.. 

fSecsBlock.. %
;..% &
}// 	
~33 	(
FSecs1BlockReceivedEventArgs33	 %
(33% &
)44 
{55 	
	myDispose66 
(66 
false66 
)66 
;66 
}77 	
	protected;; 
override;; 
void;; 
	myDispose;;  )
(;;) *
bool<< 
	disposing<< 
)== 
{>> 	
if?? 
(?? 
!?? 

m_disposed?? 
)?? 
{@@ 
ifAA 
(AA 
	disposingAA 
)AA 
{BB 
m_fSecsBlockCC  
=CC! "
nullCC# '
;CC' (
}DD 

m_disposedEE 
=EE 
trueEE !
;EE! "
baseGG 
.GG 
	myDisposeGG 
(GG 
	disposingGG (
)GG( )
;GG) *
}HH 
}II 	
publicQQ 
voidQQ 
DisposeQQ 
(QQ 
)RR 
{SS 	
	myDisposeTT 
(TT 
trueTT 
)TT 
;TT 
GCUU 
.UU 
SuppressFinalizeUU 
(UU  
thisUU  $
)UU$ %
;UU% &
}VV 	
public^^ 
FResultCode^^ 
fResult^^ "
{__ 	
get`` 
{aa 
trybb 
{cc 
returndd 
	m_fResultdd $
;dd$ %
}ee 
catchff 
(ff 
	Exceptionff  
exff! #
)ff# $
{gg 
FDebughh 
.hh 
throwExceptionhh )
(hh) *
exhh* ,
)hh, -
;hh- .
}ii 
finallyjj 
{kk 
}mm 
returnnn 
FResultCodenn "
.nn" #
Successnn# *
;nn* +
}oo 
}pp 	
publictt 
stringtt 
errorMessagett "
{uu 	
getvv 
{ww 
tryxx 
{yy 
returnzz 
m_errorMessagezz )
;zz) *
}{{ 
catch|| 
(|| 
	Exception||  
ex||! #
)||# $
{}} 
FDebug~~ 
.~~ 
throwException~~ )
(~~) *
ex~~* ,
)~~, -
;~~- .
} 
finally
ÄÄ 
{
ÅÅ 
}
ÉÉ 
return
ÑÑ 
string
ÑÑ 
.
ÑÑ 
Empty
ÑÑ #
;
ÑÑ# $
}
ÖÖ 
}
ÜÜ 	
public
ää 

FSecsBlock
ää 

fSecsBlock
ää $
{
ãã 	
get
åå 
{
çç 
try
éé 
{
èè 
return
êê 
m_fSecsBlock
êê '
;
êê' (
}
ëë 
catch
íí 
(
íí 
	Exception
íí  
ex
íí! #
)
íí# $
{
ìì 
FDebug
îî 
.
îî 
throwException
îî )
(
îî) *
ex
îî* ,
)
îî, -
;
îî- .
}
ïï 
finally
ññ 
{
óó 
}
ôô 
return
öö 
null
öö 
;
öö 
}
õõ 
}
úú 	
}
®® 
}©© É(
íD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FSecs1DataMessageReceivedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class .
"FSecs1DataMessageReceivedEventArgs 3
:4 5
FEventArgsBase6 D
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSecsDataMessage  
m_fSecsDataMessage! 3
=4 5
null6 :
;: ;
internal%% .
"FSecs1DataMessageReceivedEventArgs%% 3
(%%3 4
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  
FSecsDataMessage** 
fSecsDataMessage** -
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	
	m_fResult.. 
=.. 
fResult.. 
;..  
m_errorMessage// 
=// 
errorMessage// )
;//) *
m_fSecsDataMessage00 
=00  
fSecsDataMessage00! 1
;001 2
}11 	
~55 	.
"FSecs1DataMessageReceivedEventArgs55	 +
(55+ ,
)66 
{77 	
	myDispose88 
(88 
false88 
)88 
;88 
}99 	
	protected== 
override== 
void== 
	myDispose==  )
(==) *
bool>> 
	disposing>> 
)?? 
{@@ 	
ifAA 
(AA 
!AA 

m_disposedAA 
)AA 
{BB 
ifCC 
(CC 
	disposingCC 
)CC 
{DD 
m_fSecsDataMessageEE &
=EE' (
nullEE) -
;EE- .
}FF 

m_disposedGG 
=GG 
trueGG !
;GG! "
baseII 
.II 
	myDisposeII 
(II 
	disposingII (
)II( )
;II) *
}JJ 
}KK 	
publicSS 
voidSS 
DisposeSS 
(SS 
)TT 
{UU 	
	myDisposeVV 
(VV 
trueVV 
)VV 
;VV 
GCWW 
.WW 
SuppressFinalizeWW 
(WW  
thisWW  $
)WW$ %
;WW% &
}XX 	
public`` 
FResultCode`` 
fResult`` "
{aa 	
getbb 
{cc 
trydd 
{ee 
returnff 
	m_fResultff $
;ff$ %
}gg 
catchhh 
(hh 
	Exceptionhh  
exhh! #
)hh# $
{ii 
FDebugjj 
.jj 
throwExceptionjj )
(jj) *
exjj* ,
)jj, -
;jj- .
}kk 
finallyll 
{mm 
}oo 
returnpp 
FResultCodepp "
.pp" #
Successpp# *
;pp* +
}qq 
}rr 	
publicvv 
stringvv 
errorMessagevv "
{ww 	
getxx 
{yy 
tryzz 
{{{ 
return|| 
m_errorMessage|| )
;||) *
}}} 
catch~~ 
(~~ 
	Exception~~  
ex~~! #
)~~# $
{ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ )
(
ÄÄ) *
ex
ÄÄ* ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
return
ÜÜ 
string
ÜÜ 
.
ÜÜ 
Empty
ÜÜ #
;
ÜÜ# $
}
áá 
}
àà 	
public
åå 
FSecsDataMessage
åå 
fSecsDataMessage
åå  0
{
çç 	
get
éé 
{
èè 
try
êê 
{
ëë 
return
íí  
m_fSecsDataMessage
íí -
;
íí- .
}
ìì 
catch
îî 
(
îî 
	Exception
îî  
ex
îî! #
)
îî# $
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ )
(
ññ) *
ex
ññ* ,
)
ññ, -
;
ññ- .
}
óó 
finally
òò 
{
ôô 
}
õõ 
return
úú 
null
úú 
;
úú 
}
ùù 
}
ûû 	
}
™™ 
}´´ ≥
åD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FSecs1TimeoutRaisedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class (
FSecs1TimeoutRaisedEventArgs -
:. /
FEventArgsBase0 >
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecsTimeout 

m_fTimeout '
=( )
FSecsTimeout* 6
.6 7
T17 9
;9 :
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
internal$$ (
FSecs1TimeoutRaisedEventArgs$$ -
($$- .
FSecs1ToHsms%% 
fSecs1ToHsms%% %
,%%% &
FEventId&& 
fEventId&& 
,&& 
FSecsTimeout'' 
fTimeout'' !
,''! "
string(( 
errorMessage(( 
))) 
:** 
base** 
(** 
fSecs1ToHsms** 
,**  
fEventId**! )
)**) *
{++ 	

m_fTimeout,, 
=,, 
fTimeout,, !
;,,! "
m_errorMessage-- 
=-- 
errorMessage-- )
;--) *
}.. 	
~22 	(
FSecs1TimeoutRaisedEventArgs22	 %
(22% &
)33 
{44 	
	myDispose55 
(55 
false55 
)55 
;55 
}66 	
	protected:: 
override:: 
void:: 
	myDispose::  )
(::) *
bool;; 
	disposing;; 
)<< 
{== 	
if>> 
(>> 
!>> 

m_disposed>> 
)>> 
{?? 
if@@ 
(@@ 
	disposing@@ 
)@@ 
{AA 
}CC 

m_disposedDD 
=DD 
trueDD !
;DD! "
baseFF 
.FF 
	myDisposeFF 
(FF 
	disposingFF (
)FF( )
;FF) *
}GG 
}HH 	
publicPP 
voidPP 
DisposePP 
(PP 
)QQ 
{RR 	
	myDisposeSS 
(SS 
trueSS 
)SS 
;SS 
GCTT 
.TT 
SuppressFinalizeTT 
(TT  
thisTT  $
)TT$ %
;TT% &
}UU 	
public]] 
FSecsTimeout]] 
fTimeout]] $
{^^ 	
get__ 
{`` 
tryaa 
{bb 
returncc 

m_fTimeoutcc %
;cc% &
}dd 
catchee 
(ee 
	Exceptionee  
exee! #
)ee# $
{ff 
FDebuggg 
.gg 
throwExceptiongg )
(gg) *
exgg* ,
)gg, -
;gg- .
}hh 
finallyii 
{jj 
}ll 
returnmm 
FSecsTimeoutmm #
.mm# $
T1mm$ &
;mm& '
}nn 
}oo 	
publicss 
stringss 
errorMessagess "
{tt 	
getuu 
{vv 
tryww 
{xx 
returnyy 
m_errorMessageyy )
;yy) *
}zz 
catch{{ 
({{ 
	Exception{{  
ex{{! #
){{# $
{|| 
FDebug}} 
.}} 
throwException}} )
(}}) *
ex}}* ,
)}}, -
;}}- .
}~~ 
finally 
{
ÄÄ 
}
ÇÇ 
return
ÉÉ 
string
ÉÉ 
.
ÉÉ 
Empty
ÉÉ #
;
ÉÉ# $
}
ÑÑ 
}
ÖÖ 	
}
ëë 
}íí ¥M
äD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FHsmsStateChangedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class &
FHsmsStateChangedEventArgs +
:, -
FEventArgsBase. <
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FConnectMode 
m_fConnectMode +
=, -
FConnectMode. :
.: ;
Passive; B
;B C
private   
string   
	m_localIp    
=  ! "
string  # )
.  ) *
Empty  * /
;  / 0
private!! 
int!! 
m_localPort!! 
=!!  !
$num!!" #
;!!# $
private"" 
string"" 

m_remoteIp"" !
=""" #
string""$ *
.""* +
Empty""+ 0
;""0 1
private## 
int## 
m_remotePort##  
=##! "
$num### $
;##$ %
private$$ 
FCommunicationState$$ #
m_fState$$$ ,
=$$- .
FCommunicationState$$/ B
.$$B C
Closed$$C I
;$$I J
internal** &
FHsmsStateChangedEventArgs** +
(**+ ,
FSecs1ToHsms++ 
fSecs1ToHsms++ %
,++% &
FEventId,, 
fEventId,, 
,,, 
FResultCode-- 
fResult-- 
,--  
string.. 
errorMessage.. 
,..  
FConnectMode// 
fConnectMode// %
,//% &
string00 
localIp00 
,00 
int11 
	localPort11 
,11 
string22 
remoteIp22 
,22 
int33 

remotePort33 
,33 
FCommunicationState44 
fState44  &
)55 
:66 
base66 
(66 
fSecs1ToHsms66 
,66  
fEventId66! )
)66) *
{77 	
	m_fResult88 
=88 
fResult88 
;88  
m_errorMessage99 
=99 
errorMessage99 )
;99) *
m_fConnectMode:: 
=:: 
fConnectMode:: )
;::) *
	m_localIp;; 
=;; 
localIp;; 
;;;  
m_localPort<< 
=<< 
	localPort<< #
;<<# $

m_remoteIp== 
=== 
remoteIp== !
;==! "
m_remotePort>> 
=>> 

remotePort>> %
;>>% &
m_fState?? 
=?? 
fState?? 
;?? 
}@@ 	
~DD 	&
FHsmsStateChangedEventArgsDD	 #
(DD# $
)EE 
{FF 	
	myDisposeGG 
(GG 
falseGG 
)GG 
;GG 
}HH 	
	protectedLL 
overrideLL 
voidLL 
	myDisposeLL  )
(LL) *
boolMM 
	disposingMM 
)NN 
{OO 	
ifPP 
(PP 
!PP 

m_disposedPP 
)PP 
{QQ 
ifRR 
(RR 
	disposingRR 
)RR 
{SS 
}UU 

m_disposedVV 
=VV 
trueVV !
;VV! "
baseXX 
.XX 
	myDisposeXX 
(XX 
	disposingXX (
)XX( )
;XX) *
}YY 
}ZZ 	
publicbb 
voidbb 
Disposebb 
(bb 
)cc 
{dd 	
	myDisposeee 
(ee 
trueee 
)ee 
;ee 
GCff 
.ff 
SuppressFinalizeff 
(ff  
thisff  $
)ff$ %
;ff% &
}gg 	
publicoo 
FResultCodeoo 
fResultoo "
{pp 	
getqq 
{rr 
tryss 
{tt 
returnuu 
	m_fResultuu $
;uu$ %
}vv 
catchww 
(ww 
	Exceptionww  
exww! #
)ww# $
{xx 
FDebugyy 
.yy 
throwExceptionyy )
(yy) *
exyy* ,
)yy, -
;yy- .
}zz 
finally{{ 
{|| 
}~~ 
return 
FResultCode "
." #
Success# *
;* +
}
ÄÄ 
}
ÅÅ 	
public
ÖÖ 
string
ÖÖ 
errorMessage
ÖÖ "
{
ÜÜ 	
get
áá 
{
àà 
try
ââ 
{
ää 
return
ãã 
m_errorMessage
ãã )
;
ãã) *
}
åå 
catch
çç 
(
çç 
	Exception
çç  
ex
çç! #
)
çç# $
{
éé 
FDebug
èè 
.
èè 
throwException
èè )
(
èè) *
ex
èè* ,
)
èè, -
;
èè- .
}
êê 
finally
ëë 
{
íí 
}
îî 
return
ïï 
string
ïï 
.
ïï 
Empty
ïï #
;
ïï# $
}
ññ 
}
óó 	
public
õõ 
FConnectMode
õõ 
fConnectMode
õõ (
{
úú 	
get
ùù 
{
ûû 
try
üü 
{
†† 
return
°° 
m_fConnectMode
°° )
;
°°) *
}
¢¢ 
catch
££ 
(
££ 
	Exception
££  
ex
££! #
)
££# $
{
§§ 
FDebug
•• 
.
•• 
throwException
•• )
(
••) *
ex
••* ,
)
••, -
;
••- .
}
¶¶ 
finally
ßß 
{
®® 
}
™™ 
return
´´ 
FConnectMode
´´ #
.
´´# $
Active
´´$ *
;
´´* +
}
¨¨ 
}
≠≠ 	
public
±± 
string
±± 
localIp
±± 
{
≤≤ 	
get
≥≥ 
{
¥¥ 
try
µµ 
{
∂∂ 
return
∑∑ 
	m_localIp
∑∑ $
;
∑∑$ %
}
∏∏ 
catch
ππ 
(
ππ 
	Exception
ππ  
ex
ππ! #
)
ππ# $
{
∫∫ 
FDebug
ªª 
.
ªª 
throwException
ªª )
(
ªª) *
ex
ªª* ,
)
ªª, -
;
ªª- .
}
ºº 
finally
ΩΩ 
{
ææ 
}
¿¿ 
return
¡¡ 
string
¡¡ 
.
¡¡ 
Empty
¡¡ #
;
¡¡# $
}
¬¬ 
}
√√ 	
public
«« 
int
«« 
	localPort
«« 
{
»» 	
get
…… 
{
   
try
ÀÀ 
{
ÃÃ 
return
ÕÕ 
m_localPort
ÕÕ &
;
ÕÕ& '
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ  
ex
œœ! #
)
œœ# $
{
–– 
FDebug
—— 
.
—— 
throwException
—— )
(
——) *
ex
——* ,
)
——, -
;
——- .
}
““ 
finally
”” 
{
‘‘ 
}
÷÷ 
return
◊◊ 
$num
◊◊ 
;
◊◊ 
}
ÿÿ 
}
ŸŸ 	
public
›› 
string
›› 
remoteIp
›› 
{
ﬁﬁ 	
get
ﬂﬂ 
{
‡‡ 
try
·· 
{
‚‚ 
return
„„ 

m_remoteIp
„„ %
;
„„% &
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ  
ex
ÂÂ! #
)
ÂÂ# $
{
ÊÊ 
FDebug
ÁÁ 
.
ÁÁ 
throwException
ÁÁ )
(
ÁÁ) *
ex
ÁÁ* ,
)
ÁÁ, -
;
ÁÁ- .
}
ËË 
finally
ÈÈ 
{
ÍÍ 
}
ÏÏ 
return
ÌÌ 
string
ÌÌ 
.
ÌÌ 
Empty
ÌÌ #
;
ÌÌ# $
}
ÓÓ 
}
ÔÔ 	
public
ÛÛ 
int
ÛÛ 

remotePort
ÛÛ 
{
ÙÙ 	
get
ıı 
{
ˆˆ 
try
˜˜ 
{
¯¯ 
return
˘˘ 
m_remotePort
˘˘ '
;
˘˘' (
}
˙˙ 
catch
˚˚ 
(
˚˚ 
	Exception
˚˚  
ex
˚˚! #
)
˚˚# $
{
¸¸ 
FDebug
˝˝ 
.
˝˝ 
throwException
˝˝ )
(
˝˝) *
ex
˝˝* ,
)
˝˝, -
;
˝˝- .
}
˛˛ 
finally
ˇˇ 
{
ÄÄ 
}
ÇÇ 
return
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
public
ââ !
FCommunicationState
ââ "
fState
ââ# )
{
ää 	
get
ãã 
{
åå 
try
çç 
{
éé 
return
èè 
m_fState
èè #
;
èè# $
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë  
ex
ëë! #
)
ëë# $
{
íí 
FDebug
ìì 
.
ìì 
throwException
ìì )
(
ìì) *
ex
ìì* ,
)
ìì, -
;
ìì- .
}
îî 
finally
ïï 
{
ññ 
}
òò 
return
ôô !
FCommunicationState
ôô *
.
ôô* +
Closed
ôô+ 1
;
ôô1 2
}
öö 
}
õõ 	
}
ßß 
}®® Ï
âD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FHsmsErrorRaisedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class %
FHsmsErrorRaisedEventArgs *
:+ ,
FEventArgsBase- ;
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
internal## %
FHsmsErrorRaisedEventArgs## *
(##* +
FSecs1ToHsms$$ 
fSecs1ToHsms$$ %
,$$% &
FEventId%% 
fEventId%% 
,%% 
string&& 
errorMessage&& 
)'' 
:(( 
base(( 
((( 
fSecs1ToHsms(( 
,((  
fEventId((! )
)(() *
{)) 	
m_errorMessage** 
=** 
errorMessage** )
;**) *
}++ 	
~// 	%
FHsmsErrorRaisedEventArgs//	 "
(//" #
)00 
{11 	
	myDispose22 
(22 
false22 
)22 
;22 
}33 	
	protected77 
override77 
void77 
	myDispose77  )
(77) *
bool88 
	disposing88 
)99 
{:: 	
if;; 
(;; 
!;; 

m_disposed;; 
);; 
{<< 
if== 
(== 
	disposing== 
)== 
{>> 
}@@ 

m_disposedAA 
=AA 
trueAA !
;AA! "
baseCC 
.CC 
	myDisposeCC 
(CC 
	disposingCC (
)CC( )
;CC) *
}DD 
}EE 	
publicMM 
voidMM 
DisposeMM 
(MM 
)NN 
{OO 	
	myDisposePP 
(PP 
truePP 
)PP 
;PP 
GCQQ 
.QQ 
SuppressFinalizeQQ 
(QQ  
thisQQ  $
)QQ$ %
;QQ% &
}RR 	
publicZZ 
stringZZ 
errorMessageZZ "
{[[ 	
get\\ 
{]] 
try^^ 
{__ 
return`` 
m_errorMessage`` )
;``) *
}aa 
catchbb 
(bb 
	Exceptionbb  
exbb! #
)bb# $
{cc 
FDebugdd 
.dd 
throwExceptiondd )
(dd) *
exdd* ,
)dd, -
;dd- .
}ee 
finallyff 
{gg 
}ii 
returnjj 
stringjj 
.jj 
Emptyjj #
;jj# $
}kk 
}ll 	
}xx 
}yy Î&
êD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FHsmsControlMessageSentEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class ,
 FHsmsControlMessageSentEventArgs 1
:2 3
FEventArgsBase4 B
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSecsControlMessage #!
m_fSecsControlMessage$ 9
=: ;
null< @
;@ A
internal%% ,
 FHsmsControlMessageSentEventArgs%% 1
(%%1 2
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  
FSecsControlMessage** 
fSecsControlMessage**  3
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	!
m_fSecsControlMessage.. !
=.." #
fSecsControlMessage..$ 7
;..7 8
}// 	
~33 	,
 FHsmsControlMessageSentEventArgs33	 )
(33) *
)44 
{55 	
	myDispose66 
(66 
false66 
)66 
;66 
}77 	
	protected;; 
override;; 
void;; 
	myDispose;;  )
(;;) *
bool<< 
	disposing<< 
)== 
{>> 	
if?? 
(?? 
!?? 

m_disposed?? 
)?? 
{@@ 
ifAA 
(AA 
	disposingAA 
)AA 
{BB !
m_fSecsControlMessageCC )
=CC* +
nullCC, 0
;CC0 1
}DD 

m_disposedEE 
=EE 
trueEE !
;EE! "
baseGG 
.GG 
	myDisposeGG 
(GG 
	disposingGG (
)GG( )
;GG) *
}HH 
}II 	
publicQQ 
voidQQ 
DisposeQQ 
(QQ 
)RR 
{SS 	
	myDisposeTT 
(TT 
trueTT 
)TT 
;TT 
GCUU 
.UU 
SuppressFinalizeUU 
(UU  
thisUU  $
)UU$ %
;UU% &
}VV 	
public^^ 
FResultCode^^ 
fResult^^ "
{__ 	
get`` 
{aa 
trybb 
{cc 
returndd 
	m_fResultdd $
;dd$ %
}ee 
catchff 
(ff 
	Exceptionff  
exff! #
)ff# $
{gg 
FDebughh 
.hh 
throwExceptionhh )
(hh) *
exhh* ,
)hh, -
;hh- .
}ii 
finallyjj 
{kk 
}mm 
returnnn 
FResultCodenn "
.nn" #
Successnn# *
;nn* +
}oo 
}pp 	
publictt 
stringtt 
errorMessagett "
{uu 	
getvv 
{ww 
tryxx 
{yy 
returnzz 
m_errorMessagezz )
;zz) *
}{{ 
catch|| 
(|| 
	Exception||  
ex||! #
)||# $
{}} 
FDebug~~ 
.~~ 
throwException~~ )
(~~) *
ex~~* ,
)~~, -
;~~- .
} 
finally
ÄÄ 
{
ÅÅ 
}
ÉÉ 
return
ÑÑ 
string
ÑÑ 
.
ÑÑ 
Empty
ÑÑ #
;
ÑÑ# $
}
ÖÖ 
}
ÜÜ 	
public
ää !
FSecsControlMessage
ää "!
fSecsControlMessage
ää# 6
{
ãã 	
get
åå 
{
çç 
try
éé 
{
èè 
return
êê #
m_fSecsControlMessage
êê 0
;
êê0 1
}
ëë 
catch
íí 
(
íí 
	Exception
íí  
ex
íí! #
)
íí# $
{
ìì 
FDebug
îî 
.
îî 
throwException
îî )
(
îî) *
ex
îî* ,
)
îî, -
;
îî- .
}
ïï 
finally
ññ 
{
óó 
}
ôô 
return
öö 
null
öö 
;
öö 
}
õõ 
}
úú 	
}
®® 
}©© ˚&
îD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FHsmsControlMessageReceivedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class 0
$FHsmsControlMessageReceivedEventArgs 5
:6 7
FEventArgsBase8 F
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSecsControlMessage #!
m_fSecsControlMessage$ 9
=: ;
null< @
;@ A
internal%% 0
$FHsmsControlMessageReceivedEventArgs%% 5
(%%5 6
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  
FSecsControlMessage** 
fSecsControlMessage**  3
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	!
m_fSecsControlMessage.. !
=.." #
fSecsControlMessage..$ 7
;..7 8
}// 	
~33 	0
$FHsmsControlMessageReceivedEventArgs33	 -
(33- .
)44 
{55 	
	myDispose66 
(66 
false66 
)66 
;66 
}77 	
	protected;; 
override;; 
void;; 
	myDispose;;  )
(;;) *
bool<< 
	disposing<< 
)== 
{>> 	
if?? 
(?? 
!?? 

m_disposed?? 
)?? 
{@@ 
ifAA 
(AA 
	disposingAA 
)AA 
{BB !
m_fSecsControlMessageCC )
=CC* +
nullCC, 0
;CC0 1
}DD 

m_disposedEE 
=EE 
trueEE !
;EE! "
baseGG 
.GG 
	myDisposeGG 
(GG 
	disposingGG (
)GG( )
;GG) *
}HH 
}II 	
publicQQ 
voidQQ 
DisposeQQ 
(QQ 
)RR 
{SS 	
	myDisposeTT 
(TT 
trueTT 
)TT 
;TT 
GCUU 
.UU 
SuppressFinalizeUU 
(UU  
thisUU  $
)UU$ %
;UU% &
}VV 	
public^^ 
FResultCode^^ 
fResult^^ "
{__ 	
get`` 
{aa 
trybb 
{cc 
returndd 
	m_fResultdd $
;dd$ %
}ee 
catchff 
(ff 
	Exceptionff  
exff! #
)ff# $
{gg 
FDebughh 
.hh 
throwExceptionhh )
(hh) *
exhh* ,
)hh, -
;hh- .
}ii 
finallyjj 
{kk 
}mm 
returnnn 
FResultCodenn "
.nn" #
Successnn# *
;nn* +
}oo 
}pp 	
publictt 
stringtt 
errorMessagett "
{uu 	
getvv 
{ww 
tryxx 
{yy 
returnzz 
m_errorMessagezz )
;zz) *
}{{ 
catch|| 
(|| 
	Exception||  
ex||! #
)||# $
{}} 
FDebug~~ 
.~~ 
throwException~~ )
(~~) *
ex~~* ,
)~~, -
;~~- .
} 
finally
ÄÄ 
{
ÅÅ 
}
ÉÉ 
return
ÑÑ 
string
ÑÑ 
.
ÑÑ 
Empty
ÑÑ #
;
ÑÑ# $
}
ÖÖ 
}
ÜÜ 	
public
ää !
FSecsControlMessage
ää "!
fSecsControlMessage
ää# 6
{
ãã 	
get
åå 
{
çç 
try
éé 
{
èè 
return
êê #
m_fSecsControlMessage
êê 0
;
êê0 1
}
ëë 
catch
íí 
(
íí 
	Exception
íí  
ex
íí! #
)
íí# $
{
ìì 
FDebug
îî 
.
îî 
throwException
îî )
(
îî) *
ex
îî* ,
)
îî, -
;
îî- .
}
ïï 
finally
ññ 
{
óó 
}
ôô 
return
öö 
null
öö 
;
öö 
}
õõ 
}
úú 	
}
®® 
}©© ˇ'
ëD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FHsmsDataMessageReceivedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class -
!FHsmsDataMessageReceivedEventArgs 2
:3 4
FEventArgsBase5 C
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSecsDataMessage  
m_fSecsDataMessage! 3
=4 5
null6 :
;: ;
internal%% -
!FHsmsDataMessageReceivedEventArgs%% 2
(%%2 3
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  
FSecsDataMessage** 
fSecsDataMessage** -
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	
	m_fResult.. 
=.. 
fResult.. 
;..  
m_errorMessage// 
=// 
errorMessage// )
;//) *
m_fSecsDataMessage00 
=00  
fSecsDataMessage00! 1
;001 2
}11 	
~55 	-
!FHsmsDataMessageReceivedEventArgs55	 *
(55* +
)66 
{77 	
	myDispose88 
(88 
false88 
)88 
;88 
}99 	
	protected== 
override== 
void== 
	myDispose==  )
(==) *
bool>> 
	disposing>> 
)?? 
{@@ 	
ifAA 
(AA 
!AA 

m_disposedAA 
)AA 
{BB 
ifCC 
(CC 
	disposingCC 
)CC 
{DD 
m_fSecsDataMessageEE &
=EE' (
nullEE) -
;EE- .
}FF 

m_disposedGG 
=GG 
trueGG !
;GG! "
baseII 
.II 
	myDisposeII 
(II 
	disposingII (
)II( )
;II) *
}JJ 
}KK 	
publicSS 
voidSS 
DisposeSS 
(SS 
)TT 
{UU 	
	myDisposeVV 
(VV 
trueVV 
)VV 
;VV 
GCWW 
.WW 
SuppressFinalizeWW 
(WW  
thisWW  $
)WW$ %
;WW% &
}XX 	
public`` 
FResultCode`` 
fResult`` "
{aa 	
getbb 
{cc 
trydd 
{ee 
returnff 
	m_fResultff $
;ff$ %
}gg 
catchhh 
(hh 
	Exceptionhh  
exhh! #
)hh# $
{ii 
FDebugjj 
.jj 
throwExceptionjj )
(jj) *
exjj* ,
)jj, -
;jj- .
}kk 
finallyll 
{mm 
}oo 
returnpp 
FResultCodepp "
.pp" #
Successpp# *
;pp* +
}qq 
}rr 	
publicvv 
stringvv 
errorMessagevv "
{ww 	
getxx 
{yy 
tryzz 
{{{ 
return|| 
m_errorMessage|| )
;||) *
}}} 
catch~~ 
(~~ 
	Exception~~  
ex~~! #
)~~# $
{ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ )
(
ÄÄ) *
ex
ÄÄ* ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
return
ÜÜ 
string
ÜÜ 
.
ÜÜ 
Empty
ÜÜ #
;
ÜÜ# $
}
áá 
}
àà 	
public
åå 
FSecsDataMessage
åå 
fSecsDataMessage
åå  0
{
çç 	
get
éé 
{
èè 
try
êê 
{
ëë 
return
íí  
m_fSecsDataMessage
íí -
;
íí- .
}
ìì 
catch
îî 
(
îî 
	Exception
îî  
ex
îî! #
)
îî# $
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ )
(
ññ) *
ex
ññ* ,
)
ññ, -
;
ññ- .
}
óó 
finally
òò 
{
ôô 
}
õõ 
return
úú 
null
úú 
;
úú 
}
ùù 
}
ûû 	
}
™™ 
}´´ Ø
ãD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FHsmsTimeoutRaisedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class '
FHsmsTimeoutRaisedEventArgs ,
:- .
FEventArgsBase/ =
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecsTimeout 

m_fTimeout '
=( )
FSecsTimeout* 6
.6 7
T17 9
;9 :
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
internal$$ '
FHsmsTimeoutRaisedEventArgs$$ ,
($$, -
FSecs1ToHsms%% 
fSecs1ToHsms%% %
,%%% &
FEventId&& 
fEventId&& 
,&& 
FSecsTimeout'' 
fTimeout'' !
,''! "
string(( 
errorMessage(( 
))) 
:** 
base** 
(** 
fSecs1ToHsms** 
,**  
fEventId**! )
)**) *
{++ 	

m_fTimeout,, 
=,, 
fTimeout,, !
;,,! "
m_errorMessage-- 
=-- 
errorMessage-- )
;--) *
}.. 	
~22 	'
FHsmsTimeoutRaisedEventArgs22	 $
(22$ %
)33 
{44 	
	myDispose55 
(55 
false55 
)55 
;55 
}66 	
	protected:: 
override:: 
void:: 
	myDispose::  )
(::) *
bool;; 
	disposing;; 
)<< 
{== 	
if>> 
(>> 
!>> 

m_disposed>> 
)>> 
{?? 
if@@ 
(@@ 
	disposing@@ 
)@@ 
{AA 
}CC 

m_disposedDD 
=DD 
trueDD !
;DD! "
baseFF 
.FF 
	myDisposeFF 
(FF 
	disposingFF (
)FF( )
;FF) *
}GG 
}HH 	
publicPP 
voidPP 
DisposePP 
(PP 
)QQ 
{RR 	
	myDisposeSS 
(SS 
trueSS 
)SS 
;SS 
GCTT 
.TT 
SuppressFinalizeTT 
(TT  
thisTT  $
)TT$ %
;TT% &
}UU 	
public]] 
FSecsTimeout]] 
fTimeout]] $
{^^ 	
get__ 
{`` 
tryaa 
{bb 
returncc 

m_fTimeoutcc %
;cc% &
}dd 
catchee 
(ee 
	Exceptionee  
exee! #
)ee# $
{ff 
FDebuggg 
.gg 
throwExceptiongg )
(gg) *
exgg* ,
)gg, -
;gg- .
}hh 
finallyii 
{jj 
}ll 
returnmm 
FSecsTimeoutmm #
.mm# $
T1mm$ &
;mm& '
}nn 
}oo 	
publicss 
stringss 
errorMessagess "
{tt 	
getuu 
{vv 
tryww 
{xx 
returnyy 
m_errorMessageyy )
;yy) *
}zz 
catch{{ 
({{ 
	Exception{{  
ex{{! #
){{# $
{|| 
FDebug}} 
.}} 
throwException}} )
(}}) *
ex}}* ,
)}}, -
;}}- .
}~~ 
finally 
{
ÄÄ 
}
ÇÇ 
return
ÉÉ 
string
ÉÉ 
.
ÉÉ 
Empty
ÉÉ #
;
ÉÉ# $
}
ÑÑ 
}
ÖÖ 	
}
ëë 
}íí Ô'
çD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FHsmsDataMessageSentEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class )
FHsmsDataMessageSentEventArgs .
:/ 0
FEventArgsBase1 ?
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSecsDataMessage  
m_fSecsDataMessage! 3
=4 5
null6 :
;: ;
internal%% )
FHsmsDataMessageSentEventArgs%% .
(%%. /
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  
FSecsDataMessage** 
fSecsDataMessage** -
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	
	m_fResult.. 
=.. 
fResult.. 
;..  
m_errorMessage// 
=// 
errorMessage// )
;//) *
m_fSecsDataMessage00 
=00  
fSecsDataMessage00! 1
;001 2
}11 	
~55 	)
FHsmsDataMessageSentEventArgs55	 &
(55& '
)66 
{77 	
	myDispose88 
(88 
false88 
)88 
;88 
}99 	
	protected== 
override== 
void== 
	myDispose==  )
(==) *
bool>> 
	disposing>> 
)?? 
{@@ 	
ifAA 
(AA 
!AA 

m_disposedAA 
)AA 
{BB 
ifCC 
(CC 
	disposingCC 
)CC 
{DD 
m_fSecsDataMessageEE &
=EE' (
nullEE) -
;EE- .
}FF 

m_disposedGG 
=GG 
trueGG !
;GG! "
baseII 
.II 
	myDisposeII 
(II 
	disposingII (
)II( )
;II) *
}JJ 
}KK 	
publicSS 
voidSS 
DisposeSS 
(SS 
)TT 
{UU 	
	myDisposeVV 
(VV 
trueVV 
)VV 
;VV 
GCWW 
.WW 
SuppressFinalizeWW 
(WW  
thisWW  $
)WW$ %
;WW% &
}XX 	
public`` 
FResultCode`` 
fResult`` "
{aa 	
getbb 
{cc 
trydd 
{ee 
returnff 
	m_fResultff $
;ff$ %
}gg 
catchhh 
(hh 
	Exceptionhh  
exhh! #
)hh# $
{ii 
FDebugjj 
.jj 
throwExceptionjj )
(jj) *
exjj* ,
)jj, -
;jj- .
}kk 
finallyll 
{mm 
}oo 
returnpp 
FResultCodepp "
.pp" #
Successpp# *
;pp* +
}qq 
}rr 	
publicvv 
stringvv 
errorMessagevv "
{ww 	
getxx 
{yy 
tryzz 
{{{ 
return|| 
m_errorMessage|| )
;||) *
}}} 
catch~~ 
(~~ 
	Exception~~  
ex~~! #
)~~# $
{ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ )
(
ÄÄ) *
ex
ÄÄ* ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
return
ÜÜ 
string
ÜÜ 
.
ÜÜ 
Empty
ÜÜ #
;
ÜÜ# $
}
áá 
}
àà 	
public
åå 
FSecsDataMessage
åå 
fSecsDataMessage
åå  0
{
çç 	
get
éé 
{
èè 
try
êê 
{
ëë 
return
íí  
m_fSecsDataMessage
íí -
;
íí- .
}
ìì 
catch
îî 
(
îî 
	Exception
îî  
ex
îî! #
)
îî# $
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ )
(
ññ) *
ex
ññ* ,
)
ññ, -
;
ññ- .
}
óó 
finally
òò 
{
ôô 
}
õõ 
return
úú 
null
úú 
;
úú 
}
ùù 
}
ûû 	
}
™™ 
}´´ Û'
éD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FSecs1DataMessageSentEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class *
FSecs1DataMessageSentEventArgs /
:0 1
FEventArgsBase2 @
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSecsDataMessage  
m_fSecsDataMessage! 3
=4 5
null6 :
;: ;
internal%% *
FSecs1DataMessageSentEventArgs%% /
(%%/ 0
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  
FSecsDataMessage** 
fSecsDataMessage** -
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	
	m_fResult.. 
=.. 
fResult.. 
;..  
m_errorMessage// 
=// 
errorMessage// )
;//) *
m_fSecsDataMessage00 
=00  
fSecsDataMessage00! 1
;001 2
}11 	
~55 	*
FSecs1DataMessageSentEventArgs55	 '
(55' (
)66 
{77 	
	myDispose88 
(88 
false88 
)88 
;88 
}99 	
	protected== 
override== 
void== 
	myDispose==  )
(==) *
bool>> 
	disposing>> 
)?? 
{@@ 	
ifAA 
(AA 
!AA 

m_disposedAA 
)AA 
{BB 
ifCC 
(CC 
	disposingCC 
)CC 
{DD 
m_fSecsDataMessageEE &
=EE' (
nullEE) -
;EE- .
}FF 

m_disposedGG 
=GG 
trueGG !
;GG! "
baseII 
.II 
	myDisposeII 
(II 
	disposingII (
)II( )
;II) *
}JJ 
}KK 	
publicSS 
voidSS 
DisposeSS 
(SS 
)TT 
{UU 	
	myDisposeVV 
(VV 
trueVV 
)VV 
;VV 
GCWW 
.WW 
SuppressFinalizeWW 
(WW  
thisWW  $
)WW$ %
;WW% &
}XX 	
public`` 
FResultCode`` 
fResult`` "
{aa 	
getbb 
{cc 
trydd 
{ee 
returnff 
	m_fResultff $
;ff$ %
}gg 
catchhh 
(hh 
	Exceptionhh  
exhh! #
)hh# $
{ii 
FDebugjj 
.jj 
throwExceptionjj )
(jj) *
exjj* ,
)jj, -
;jj- .
}kk 
finallyll 
{mm 
}oo 
returnpp 
FResultCodepp "
.pp" #
Successpp# *
;pp* +
}qq 
}rr 	
publicvv 
stringvv 
errorMessagevv "
{ww 	
getxx 
{yy 
tryzz 
{{{ 
return|| 
m_errorMessage|| )
;||) *
}}} 
catch~~ 
(~~ 
	Exception~~  
ex~~! #
)~~# $
{ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ )
(
ÄÄ) *
ex
ÄÄ* ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
return
ÜÜ 
string
ÜÜ 
.
ÜÜ 
Empty
ÜÜ #
;
ÜÜ# $
}
áá 
}
àà 	
public
åå 
FSecsDataMessage
åå 
fSecsDataMessage
åå  0
{
çç 	
get
éé 
{
èè 
try
êê 
{
ëë 
return
íí  
m_fSecsDataMessage
íí -
;
íí- .
}
ìì 
catch
îî 
(
îî 
	Exception
îî  
ex
îî! #
)
îî# $
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ )
(
ññ) *
ex
ññ* ,
)
ññ, -
;
ññ- .
}
óó 
finally
òò 
{
ôô 
}
õõ 
return
úú 
null
úú 
;
úú 
}
ùù 
}
ûû 	
}
™™ 
}´´ Ò%
àD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FSecs1BlockSentEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class $
FSecs1BlockSentEventArgs )
:* +
FEventArgsBase, :
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 

FSecsBlock 
m_fSecsBlock '
=( )
null* .
;. /
internal%% $
FSecs1BlockSentEventArgs%% )
(%%) *
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  

FSecsBlock** 

fSecsBlock** !
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	
m_fSecsBlock.. 
=.. 

fSecsBlock.. %
;..% &
}// 	
~33 	$
FSecs1BlockSentEventArgs33	 !
(33! "
)44 
{55 	
	myDispose66 
(66 
false66 
)66 
;66 
}77 	
	protected;; 
override;; 
void;; 
	myDispose;;  )
(;;) *
bool<< 
	disposing<< 
)== 
{>> 	
if?? 
(?? 
!?? 

m_disposed?? 
)?? 
{@@ 
ifAA 
(AA 
	disposingAA 
)AA 
{BB 
m_fSecsBlockCC  
=CC! "
nullCC# '
;CC' (
}DD 

m_disposedEE 
=EE 
trueEE !
;EE! "
baseGG 
.GG 
	myDisposeGG 
(GG 
	disposingGG (
)GG( )
;GG) *
}HH 
}II 	
publicQQ 
voidQQ 
DisposeQQ 
(QQ 
)RR 
{SS 	
	myDisposeTT 
(TT 
trueTT 
)TT 
;TT 
GCUU 
.UU 
SuppressFinalizeUU 
(UU  
thisUU  $
)UU$ %
;UU% &
}VV 	
public^^ 
FResultCode^^ 
fResult^^ "
{__ 	
get`` 
{aa 
trybb 
{cc 
returndd 
	m_fResultdd $
;dd$ %
}ee 
catchff 
(ff 
	Exceptionff  
exff! #
)ff# $
{gg 
FDebughh 
.hh 
throwExceptionhh )
(hh) *
exhh* ,
)hh, -
;hh- .
}ii 
finallyjj 
{kk 
}mm 
returnnn 
FResultCodenn "
.nn" #
Successnn# *
;nn* +
}oo 
}pp 	
publictt 
stringtt 
errorMessagett "
{uu 	
getvv 
{ww 
tryxx 
{yy 
returnzz 
m_errorMessagezz )
;zz) *
}{{ 
catch|| 
(|| 
	Exception||  
ex||! #
)||# $
{}} 
FDebug~~ 
.~~ 
throwException~~ )
(~~) *
ex~~* ,
)~~, -
;~~- .
} 
finally
ÄÄ 
{
ÅÅ 
}
ÉÉ 
return
ÑÑ 
string
ÑÑ 
.
ÑÑ 
Empty
ÑÑ #
;
ÑÑ# $
}
ÖÖ 
}
ÜÜ 	
public
ää 

FSecsBlock
ää 

fSecsBlock
ää $
{
ãã 	
get
åå 
{
çç 
try
éé 
{
èè 
return
êê 
m_fSecsBlock
êê '
;
êê' (
}
ëë 
catch
íí 
(
íí 
	Exception
íí  
ex
íí! #
)
íí# $
{
ìì 
FDebug
îî 
.
îî 
throwException
îî )
(
îî) *
ex
îî* ,
)
îî, -
;
îî- .
}
ïï 
finally
ññ 
{
óó 
}
ôô 
return
öö 
null
öö 
;
öö 
}
õõ 
}
úú 	
}
®® 
}©© ≥(
ûD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FSecs1InterceptingDataMessageReceivedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class :
.FSecs1InterceptingDataMessageReceivedEventArgs ?
:@ A
FEventArgsBaseB P
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSecsDataMessage  
m_fSecsDataMessage! 3
=4 5
null6 :
;: ;
internal%% :
.FSecs1InterceptingDataMessageReceivedEventArgs%% ?
(%%? @
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  
FSecsDataMessage** 
fSecsDataMessage** -
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	
	m_fResult.. 
=.. 
fResult.. 
;..  
m_errorMessage// 
=// 
errorMessage// )
;//) *
m_fSecsDataMessage00 
=00  
fSecsDataMessage00! 1
;001 2
}11 	
~55 	:
.FSecs1InterceptingDataMessageReceivedEventArgs55	 7
(557 8
)66 
{77 	
	myDispose88 
(88 
false88 
)88 
;88 
}99 	
	protected== 
override== 
void== 
	myDispose==  )
(==) *
bool>> 
	disposing>> 
)?? 
{@@ 	
ifAA 
(AA 
!AA 

m_disposedAA 
)AA 
{BB 
ifCC 
(CC 
	disposingCC 
)CC 
{DD 
m_fSecsDataMessageEE &
=EE' (
nullEE) -
;EE- .
}FF 

m_disposedGG 
=GG 
trueGG !
;GG! "
baseII 
.II 
	myDisposeII 
(II 
	disposingII (
)II( )
;II) *
}JJ 
}KK 	
publicSS 
voidSS 
DisposeSS 
(SS 
)TT 
{UU 	
	myDisposeVV 
(VV 
trueVV 
)VV 
;VV 
GCWW 
.WW 
SuppressFinalizeWW 
(WW  
thisWW  $
)WW$ %
;WW% &
}XX 	
public`` 
FResultCode`` 
fResult`` "
{aa 	
getbb 
{cc 
trydd 
{ee 
returnff 
	m_fResultff $
;ff$ %
}gg 
catchhh 
(hh 
	Exceptionhh  
exhh! #
)hh# $
{ii 
FDebugjj 
.jj 
throwExceptionjj )
(jj) *
exjj* ,
)jj, -
;jj- .
}kk 
finallyll 
{mm 
}oo 
returnpp 
FResultCodepp "
.pp" #
Successpp# *
;pp* +
}qq 
}rr 	
publicvv 
stringvv 
errorMessagevv "
{ww 	
getxx 
{yy 
tryzz 
{{{ 
return|| 
m_errorMessage|| )
;||) *
}}} 
catch~~ 
(~~ 
	Exception~~  
ex~~! #
)~~# $
{ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ )
(
ÄÄ) *
ex
ÄÄ* ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
return
ÜÜ 
string
ÜÜ 
.
ÜÜ 
Empty
ÜÜ #
;
ÜÜ# $
}
áá 
}
àà 	
public
åå 
FSecsDataMessage
åå 
fSecsDataMessage
åå  0
{
çç 	
get
éé 
{
èè 
try
êê 
{
ëë 
return
íí  
m_fSecsDataMessage
íí -
;
íí- .
}
ìì 
catch
îî 
(
îî 
	Exception
îî  
ex
îî! #
)
îî# $
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ )
(
ññ) *
ex
ññ* ,
)
ññ, -
;
ññ- .
}
óó 
finally
òò 
{
ôô 
}
õõ 
return
úú 
null
úú 
;
úú 
}
ùù 
}
ûû 	
}
™™ 
}´´ Ø(
ùD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FHsmsInterceptingDataMessageReceivedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class 9
-FHsmsInterceptingDataMessageReceivedEventArgs >
:? @
FEventArgsBaseA O
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSecsDataMessage  
m_fSecsDataMessage! 3
=4 5
null6 :
;: ;
internal%% 9
-FHsmsInterceptingDataMessageReceivedEventArgs%% >
(%%> ?
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FEventId'' 
fEventId'' 
,'' 
FResultCode(( 
fResult(( 
,((  
string)) 
errorMessage)) 
,))  
FSecsDataMessage** 
fSecsDataMessage** -
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
,,,  
fEventId,,! )
),,) *
{-- 	
	m_fResult.. 
=.. 
fResult.. 
;..  
m_errorMessage// 
=// 
errorMessage// )
;//) *
m_fSecsDataMessage00 
=00  
fSecsDataMessage00! 1
;001 2
}11 	
~55 	9
-FHsmsInterceptingDataMessageReceivedEventArgs55	 6
(556 7
)66 
{77 	
	myDispose88 
(88 
false88 
)88 
;88 
}99 	
	protected== 
override== 
void== 
	myDispose==  )
(==) *
bool>> 
	disposing>> 
)?? 
{@@ 	
ifAA 
(AA 
!AA 

m_disposedAA 
)AA 
{BB 
ifCC 
(CC 
	disposingCC 
)CC 
{DD 
m_fSecsDataMessageEE &
=EE' (
nullEE) -
;EE- .
}FF 

m_disposedGG 
=GG 
trueGG !
;GG! "
baseII 
.II 
	myDisposeII 
(II 
	disposingII (
)II( )
;II) *
}JJ 
}KK 	
publicSS 
voidSS 
DisposeSS 
(SS 
)TT 
{UU 	
	myDisposeVV 
(VV 
trueVV 
)VV 
;VV 
GCWW 
.WW 
SuppressFinalizeWW 
(WW  
thisWW  $
)WW$ %
;WW% &
}XX 	
public`` 
FResultCode`` 
fResult`` "
{aa 	
getbb 
{cc 
trydd 
{ee 
returnff 
	m_fResultff $
;ff$ %
}gg 
catchhh 
(hh 
	Exceptionhh  
exhh! #
)hh# $
{ii 
FDebugjj 
.jj 
throwExceptionjj )
(jj) *
exjj* ,
)jj, -
;jj- .
}kk 
finallyll 
{mm 
}oo 
returnpp 
FResultCodepp "
.pp" #
Successpp# *
;pp* +
}qq 
}rr 	
publicvv 
stringvv 
errorMessagevv "
{ww 	
getxx 
{yy 
tryzz 
{{{ 
return|| 
m_errorMessage|| )
;||) *
}}} 
catch~~ 
(~~ 
	Exception~~  
ex~~! #
)~~# $
{ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ )
(
ÄÄ) *
ex
ÄÄ* ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
return
ÜÜ 
string
ÜÜ 
.
ÜÜ 
Empty
ÜÜ #
;
ÜÜ# $
}
áá 
}
àà 	
public
åå 
FSecsDataMessage
åå 
fSecsDataMessage
åå  0
{
çç 	
get
éé 
{
èè 
try
êê 
{
ëë 
return
íí  
m_fSecsDataMessage
íí -
;
íí- .
}
ìì 
catch
îî 
(
îî 
	Exception
îî  
ex
îî! #
)
îî# $
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ )
(
ññ) *
ex
ññ* ,
)
ññ, -
;
ññ- .
}
óó 
finally
òò 
{
ôô 
}
õõ 
return
úú 
null
úú 
;
úú 
}
ùù 
}
ûû 	
}
™™ 
}´´ Æ
áD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Event\EventArgs\c_FLogMonitoringEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
[ 
Serializable 
] 
public 

class #
FLogMonitoringEventArgs (
:) *
FEventArgsBase+ 9
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
string 
m_log 
= 
string %
.% &
Empty& +
;+ ,
internal## #
FLogMonitoringEventArgs## (
(##( )
FSecs1ToHsms$$ 
fSecs1ToHsms$$ %
,$$% &
FEventId%% 
fEventId%% 
,%% 
string&& 
log&& 
)'' 
:(( 
base(( 
((( 
fSecs1ToHsms(( 
,((  
fEventId((! )
)(() *
{)) 	
m_log** 
=** 
log** 
;** 
}++ 	
~// 	#
FLogMonitoringEventArgs//	  
(//  !
)00 
{11 	
	myDispose22 
(22 
false22 
)22 
;22 
}33 	
	protected77 
override77 
void77 
	myDispose77  )
(77) *
bool88 
	disposing88 
)99 
{:: 	
if;; 
(;; 
!;; 

m_disposed;; 
);; 
{<< 
if== 
(== 
	disposing== 
)== 
{>> 
}@@ 

m_disposedAA 
=AA 
trueAA !
;AA! "
baseCC 
.CC 
	myDisposeCC 
(CC 
	disposingCC (
)CC( )
;CC) *
}DD 
}EE 	
publicMM 
voidMM 
DisposeMM 
(MM 
)NN 
{OO 	
	myDisposePP 
(PP 
truePP 
)PP 
;PP 
GCQQ 
.QQ 
SuppressFinalizeQQ 
(QQ  
thisQQ  $
)QQ$ %
;QQ% &
}RR 	
publicZZ 
stringZZ 
logZZ 
{[[ 	
get\\ 
{]] 
try^^ 
{__ 
return`` 
m_log``  
;``  !
}aa 
catchbb 
(bb 
	Exceptionbb  
exbb! #
)bb# $
{cc 
FDebugdd 
.dd 
throwExceptiondd )
(dd) *
exdd* ,
)dd, -
;dd- .
}ee 
finallyff 
{gg 
}ii 
returnjj 
stringjj 
.jj 
Emptyjj #
;jj# $
}kk 
}ll 	
}xx 
}yy ◊⁄
tD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\LogWriter\c_FLogWriter.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 

FLogWriter 
: 
IDisposable *
{ 
const 
string 

LogFileExt 
=  !
$str" '
;' (
private 
bool 

m_disposed 
=  !
false" '
;' (
private!! 
FSecs1ToHsms!! 
m_fSecs1ToHsms!! +
=!!, -
null!!. 2
;!!2 3
private"" 
FQueue"" 
<"" 
string"" 
>"" 
m_fLogQueue"" *
=""+ ,
null""- 1
;""1 2
private## 
FThread## 

m_fThdMain## "
=### $
null##% )
;##) *
private%% 
string%% 
m_logFileName%% $
=%%% &
string%%' -
.%%- .
Empty%%. 3
;%%3 4
private&& 

FileStream&& 
m_fsLogFile&& &
=&&' (
null&&) -
;&&- .
private'' 
StreamWriter'' 
m_swLogFile'' (
='') *
null''+ /
;''/ 0
private(( 
string(( 
m_logFileNameSuffix(( *
=((+ ,
string((- 3
.((3 4
Empty((4 9
;((9 :
public.. 

FLogWriter.. 
(.. 
FSecs1ToHsms// 
fSecs1ToHsms// %
)00 
{11 	
m_fSecs1ToHsms22 
=22 
fSecs1ToHsms22 )
;22) *
init33 
(33 
)33 
;33 
}44 	
~88 	

FLogWriter88	 
(88 
)99 
{:: 	
	myDispose;; 
(;; 
false;; 
);; 
;;; 
}<< 	
	protected@@ 
void@@ 
	myDispose@@  
(@@  !
boolAA 
	disposingAA 
)BB 
{CC 	
ifDD 
(DD 
!DD 

m_disposedDD 
)DD 
{EE 
ifFF 
(FF 
	disposingFF 
)FF 
{GG 
termHH 
(HH 
)HH 
;HH 
m_fSecs1ToHsmsII "
=II# $
nullII% )
;II) *
}JJ 

m_disposedLL 
=LL 
trueLL !
;LL! "
}MM 
}NN 	
publicVV 
voidVV 
DisposeVV 
(VV 
)WW 
{XX 	
	myDisposeYY 
(YY 
trueYY 
)YY 
;YY 
GCZZ 
.ZZ 
SuppressFinalizeZZ 
(ZZ  
thisZZ  $
)ZZ$ %
;ZZ% &
}[[ 	
privateii 
voidii 
initii 
(ii 
)jj 
{kk 	
tryll 
{mm 
m_fLogQueuenn 
=nn 
newnn !
FQueuenn" (
<nn( )
stringnn) /
>nn/ 0
(nn0 1
)nn1 2
;nn2 3
m_logFileNameSuffixrr #
=rr$ %
m_fSecs1ToHsmsrr& 4
.rr4 5
logFileNameSuffixrr5 F
;rrF G

m_fThdMainvv 
=vv 
newvv  
FThreadvv! (
(vv( )
$strvv) :
)vv: ;
;vv; <

m_fThdMainww 
.ww 
ThreadJobCalledww *
+=ww+ -
newww. 1(
FThreadJobCalledEventHandlerww2 N
(wwN O&
m_fThdMain_ThreadJobCalledwwO i
)wwi j
;wwj k

m_fThdMainxx 
.xx 
startxx  
(xx  !
)xx! "
;xx" #
}yy 
catchzz 
(zz 
	Exceptionzz 
exzz 
)zz  
{{{ 
FDebug|| 
.|| 
throwException|| %
(||% &
ex||& (
)||( )
;||) *
}}} 
finally~~ 
{ 
}
ÅÅ 
}
ÇÇ 	
private
ÜÜ 
void
ÜÜ 
term
ÜÜ 
(
ÜÜ 
)
áá 
{
àà 	
try
ââ 
{
ää 
if
ãã 
(
ãã 

m_fThdMain
ãã 
!=
ãã !
null
ãã" &
)
ãã& '
{
åå 
if
çç 
(
çç 
m_fLogQueue
çç #
!=
çç$ &
null
çç' +
)
çç+ ,
{
éé 
while
èè 
(
èè 
m_fLogQueue
èè *
.
èè* +
count
èè+ 0
>
èè1 2
$num
èè3 4
)
èè4 5
{
êê 
System
ëë "
.
ëë" #
	Threading
ëë# ,
.
ëë, -
Thread
ëë- 3
.
ëë3 4
Sleep
ëë4 9
(
ëë9 :
$num
ëë: <
)
ëë< =
;
ëë= >
}
íí 
}
ìì 

m_fThdMain
óó 
.
óó 
stop
óó #
(
óó# $
)
óó$ %
;
óó% &

m_fThdMain
òò 
.
òò 
Dispose
òò &
(
òò& '
)
òò' (
;
òò( )

m_fThdMain
ôô 
.
ôô 
ThreadJobCalled
ôô .
-=
ôô/ 1
new
ôô2 5*
FThreadJobCalledEventHandler
ôô6 R
(
ôôR S(
m_fThdMain_ThreadJobCalled
ôôS m
)
ôôm n
;
ôôn o

m_fThdMain
öö 
=
öö  
null
öö! %
;
öö% &
}
õõ 
if
üü 
(
üü 
m_fLogQueue
üü 
!=
üü  "
null
üü# '
)
üü' (
{
†† 
m_fLogQueue
°° 
.
°°  
Dispose
°°  '
(
°°' (
)
°°( )
;
°°) *
m_fLogQueue
¢¢ 
=
¢¢  !
null
¢¢" &
;
¢¢& '
}
££ 
closeLogFile
ßß 
(
ßß 
)
ßß 
;
ßß 
}
®® 
catch
©© 
(
©© 
	Exception
©© 
ex
©© 
)
©©  
{
™™ 
FDebug
´´ 
.
´´ 
throwException
´´ %
(
´´% &
ex
´´& (
)
´´( )
;
´´) *
}
¨¨ 
finally
≠≠ 
{
ÆÆ 
}
∞∞ 
}
±± 	
private
µµ 
void
µµ 
openLogFile
µµ  
(
µµ  !
)
∂∂ 
{
∑∑ 	
string
∏∏ 
searchPattern
∏∏  
=
∏∏! "
string
∏∏# )
.
∏∏) *
Empty
∏∏* /
;
∏∏/ 0
string
ππ 
[
ππ 
]
ππ 
files
ππ 
=
ππ 
null
ππ !
;
ππ! "
FileInfo
∫∫ 
fileInfo
∫∫ 
=
∫∫ 
null
∫∫  $
;
∫∫$ %
string
ªª 
newLogFileName
ªª !
=
ªª" #
string
ªª$ *
.
ªª* +
Empty
ªª+ 0
;
ªª0 1
try
ΩΩ 
{
ææ 
if
øø 
(
øø 
!
øø 
	Directory
øø 
.
øø 
Exists
øø %
(
øø% &
m_fSecs1ToHsms
øø& 4
.
øø4 5
logDirectory
øø5 A
)
øøA B
)
øøB C
{
¿¿ 
	Directory
¡¡ 
.
¡¡ 
CreateDirectory
¡¡ -
(
¡¡- .
m_fSecs1ToHsms
¡¡. <
.
¡¡< =
logDirectory
¡¡= I
)
¡¡I J
;
¡¡J K
}
¬¬ 
if
∆∆ 
(
∆∆ 
m_fsLogFile
∆∆ 
==
∆∆  "
null
∆∆# '
)
∆∆' (
{
«« !
m_logFileNameSuffix
»» '
=
»»( )
m_fSecs1ToHsms
»»* 8
.
»»8 9
logFileNameSuffix
»»9 J
;
»»J K
searchPattern
…… !
=
……" #
$str
……$ (
+
……) *!
m_logFileNameSuffix
……+ >
+
……? @
$str
……A D
+
……E F

LogFileExt
……G Q
;
……Q R
files
   
=
   
	Directory
   %
.
  % &
GetFiles
  & .
(
  . /
m_fSecs1ToHsms
  / =
.
  = >
logDirectory
  > J
,
  J K
searchPattern
  L Y
)
  Y Z
;
  Z [
if
ÃÃ 
(
ÃÃ 
files
ÃÃ 
.
ÃÃ 
Length
ÃÃ $
==
ÃÃ% '
$num
ÃÃ( )
)
ÃÃ) *
{
ÕÕ 
m_logFileName
ŒŒ %
=
ŒŒ& '
string
ŒŒ( .
.
ŒŒ. /
Empty
ŒŒ/ 4
;
ŒŒ4 5
}
œœ 
else
–– 
{
—— 
m_logFileName
““ %
=
““& '
files
““( -
[
““- .
files
““. 3
.
““3 4
Length
““4 :
-
““; <
$num
““= >
]
““> ?
;
““? @
fileInfo
””  
=
””! "
new
””# &
FileInfo
””' /
(
””/ 0
m_logFileName
””0 =
)
””= >
;
””> ?
if
‘‘ 
(
‘‘ 
fileInfo
‘‘ $
.
‘‘$ %
Length
‘‘% +
>=
‘‘, .
(
‘‘/ 0
m_fSecs1ToHsms
‘‘0 >
.
‘‘> ?
logFileMaxSize
‘‘? M
*
‘‘N O
$num
‘‘P T
*
‘‘U V
$num
‘‘W [
)
‘‘[ \
)
‘‘\ ]
{
’’ 
m_logFileName
÷÷ )
=
÷÷* +
string
÷÷, 2
.
÷÷2 3
Empty
÷÷3 8
;
÷÷8 9
}
◊◊ 
}
ÿÿ 
}
ŸŸ 
else
⁄⁄ 
{
€€ 
fileInfo
‹‹ 
=
‹‹ 
new
‹‹ "
FileInfo
‹‹# +
(
‹‹+ ,
m_logFileName
‹‹, 9
)
‹‹9 :
;
‹‹: ;
if
›› 
(
›› 
fileInfo
››  
.
››  !
Length
››! '
>=
››( *
(
››+ ,
m_fSecs1ToHsms
››, :
.
››: ;
logFileMaxSize
››; I
*
››J K
$num
››L P
*
››Q R
$num
››S W
)
››W X
)
››X Y
{
ﬁﬁ 
closeLogFile
ﬂﬂ $
(
ﬂﬂ$ %
)
ﬂﬂ% &
;
ﬂﬂ& '
m_logFileName
‡‡ %
=
‡‡& '
string
‡‡( .
.
‡‡. /
Empty
‡‡/ 4
;
‡‡4 5
}
·· 
else
‚‚ 
if
‚‚ 
(
‚‚ !
m_logFileNameSuffix
‚‚ 0
!=
‚‚1 3
m_fSecs1ToHsms
‚‚4 B
.
‚‚B C
logFileNameSuffix
‚‚C T
)
‚‚T U
{
„„ 
closeLogFile
‰‰ $
(
‰‰$ %
)
‰‰% &
;
‰‰& '
m_logFileName
ÂÂ %
=
ÂÂ& '
string
ÂÂ( .
.
ÂÂ. /
Empty
ÂÂ/ 4
;
ÂÂ4 5
}
ÊÊ 
}
ÁÁ 
if
ÎÎ 
(
ÎÎ 
m_swLogFile
ÎÎ 
==
ÎÎ  "
null
ÎÎ# '
)
ÎÎ' (
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
m_logFileName
ÌÌ %
==
ÌÌ& (
string
ÌÌ) /
.
ÌÌ/ 0
Empty
ÌÌ0 5
)
ÌÌ5 6
{
ÓÓ !
m_logFileNameSuffix
ÔÔ +
=
ÔÔ, -
m_fSecs1ToHsms
ÔÔ. <
.
ÔÔ< =
logFileNameSuffix
ÔÔ= N
;
ÔÔN O
m_logFileName
 %
=
& '
m_fSecs1ToHsms
( 6
.
6 7
logDirectory
7 C
+
D E
$str
F J
+
K L
DateTime
M U
.
U V
Now
V Y
.
Y Z
ToString
Z b
(
b c
$str
c v
)
v w
+
x y
$str
z }
+
~ #
m_logFileNameSuffixÄ ì
+î ï
$strñ ô
+ö õ

LogFileExtú ¶
;¶ ß
}
ÒÒ 
m_fsLogFile
ÚÚ 
=
ÚÚ  !
new
ÚÚ" %

FileStream
ÚÚ& 0
(
ÚÚ0 1
m_logFileName
ÚÚ1 >
,
ÚÚ> ?
FileMode
ÚÚ@ H
.
ÚÚH I
OpenOrCreate
ÚÚI U
|
ÚÚV W
FileMode
ÚÚX `
.
ÚÚ` a
Append
ÚÚa g
,
ÚÚg h

FileAccess
ÚÚi s
.
ÚÚs t
Write
ÚÚt y
,
ÚÚy z
	FileShareÚÚ{ Ñ
.ÚÚÑ Ö
ReadÚÚÖ â
)ÚÚâ ä
;ÚÚä ã
m_swLogFile
ÛÛ 
=
ÛÛ  !
new
ÛÛ" %
StreamWriter
ÛÛ& 2
(
ÛÛ2 3
m_fsLogFile
ÛÛ3 >
,
ÛÛ> ?
Encoding
ÛÛ@ H
.
ÛÛH I
Default
ÛÛI P
)
ÛÛP Q
;
ÛÛQ R
}
ÙÙ 
}
ıı 
catch
ˆˆ 
(
ˆˆ 
	Exception
ˆˆ 
ex
ˆˆ 
)
ˆˆ  
{
˜˜ 
FDebug
¯¯ 
.
¯¯ 
throwException
¯¯ %
(
¯¯% &
ex
¯¯& (
)
¯¯( )
;
¯¯) *
}
˘˘ 
finally
˙˙ 
{
˚˚ 
files
¸¸ 
=
¸¸ 
null
¸¸ 
;
¸¸ 
fileInfo
˝˝ 
=
˝˝ 
null
˝˝ 
;
˝˝  
}
˛˛ 
}
ˇˇ 	
private
ÉÉ 
void
ÉÉ 
closeLogFile
ÉÉ !
(
ÉÉ! "
)
ÑÑ 
{
ÖÖ 	
try
ÜÜ 
{
áá 
if
àà 
(
àà 
m_swLogFile
àà 
!=
àà  "
null
àà# '
)
àà' (
{
ââ 
m_swLogFile
ää 
.
ää  
Flush
ää  %
(
ää% &
)
ää& '
;
ää' (
}
ãã 
if
çç 
(
çç 
m_fsLogFile
çç 
!=
çç  "
null
çç# '
)
çç' (
{
éé 
m_fsLogFile
èè 
.
èè  
Flush
èè  %
(
èè% &
)
èè& '
;
èè' (
}
êê 
if
îî 
(
îî 
m_swLogFile
îî 
!=
îî  "
null
îî# '
)
îî' (
{
ïï 
m_swLogFile
ññ 
.
ññ  
Close
ññ  %
(
ññ% &
)
ññ& '
;
ññ' (
m_swLogFile
óó 
.
óó  
Dispose
óó  '
(
óó' (
)
óó( )
;
óó) *
m_swLogFile
òò 
=
òò  !
null
òò" &
;
òò& '
}
ôô 
if
õõ 
(
õõ 
m_fsLogFile
õõ 
!=
õõ  "
null
õõ# '
)
õõ' (
{
úú 
m_fsLogFile
ùù 
.
ùù  
Close
ùù  %
(
ùù% &
)
ùù& '
;
ùù' (
m_fsLogFile
ûû 
.
ûû  
Dispose
ûû  '
(
ûû' (
)
ûû( )
;
ûû) *
m_fsLogFile
üü 
=
üü  !
null
üü" &
;
üü& '
}
†† 
}
°° 
catch
¢¢ 
(
¢¢ 
	Exception
¢¢ 
ex
¢¢ 
)
¢¢  
{
££ 
FDebug
§§ 
.
§§ 
throwException
§§ %
(
§§% &
ex
§§& (
)
§§( )
;
§§) *
}
•• 
finally
¶¶ 
{
ßß 
}
©© 
}
™™ 	
private
ÆÆ 
void
ÆÆ 
writeLog
ÆÆ 
(
ÆÆ 
)
ØØ 
{
∞∞ 	
string
±± 
log
±± 
=
±± 
string
±± 
.
±±  
Empty
±±  %
;
±±% &
try
≥≥ 
{
¥¥ 
openLogFile
µµ 
(
µµ 
)
µµ 
;
µµ 
while
∂∂ 
(
∂∂ 
m_fLogQueue
∂∂ "
.
∂∂" #
count
∂∂# (
>
∂∂) *
$num
∂∂+ ,
)
∂∂, -
{
∑∑ 
log
∏∏ 
=
∏∏ 
m_fLogQueue
∏∏ %
.
∏∏% &
dequeue
∏∏& -
(
∏∏- .
)
∏∏. /
;
∏∏/ 0
m_swLogFile
ππ 
.
ππ  
Write
ππ  %
(
ππ% &
log
ππ& )
)
ππ) *
;
ππ* +
}
¡¡ 
m_swLogFile
¬¬ 
.
¬¬ 
Flush
¬¬ !
(
¬¬! "
)
¬¬" #
;
¬¬# $
m_fsLogFile
√√ 
.
√√ 
Flush
√√ !
(
√√! "
)
√√" #
;
√√# $
}
ƒƒ 
catch
≈≈ 
(
≈≈ 
	Exception
≈≈ 
ex
≈≈ 
)
≈≈  
{
∆∆ 
FDebug
«« 
.
«« 
throwException
«« %
(
««% &
ex
««& (
)
««( )
;
««) *
}
»» 
finally
…… 
{
   
}
ÃÃ 
}
ÕÕ 	
private
—— 
string
—— 
[
—— 
]
—— 
binToString
—— $
(
——$ %
byte
““ 
[
““ 
]
““ 
byteData
““ 
)
”” 
{
‘‘ 	
List
’’ 
<
’’ 
string
’’ 
>
’’ 
strData
’’  
=
’’! "
null
’’# '
;
’’' (
StringBuilder
÷÷ 
sb
÷÷ 
=
÷÷ 
null
÷÷ #
;
÷÷# $
int
◊◊ 
index
◊◊ 
=
◊◊ 
$num
◊◊ 
;
◊◊ 
try
ŸŸ 
{
⁄⁄ 
strData
€€ 
=
€€ 
new
€€ 
List
€€ "
<
€€" #
string
€€# )
>
€€) *
(
€€* +
)
€€+ ,
;
€€, -
strData
‹‹ 
.
‹‹ 
Add
‹‹ 
(
‹‹ 
$str
‹‹  
)
‹‹  !
;
‹‹! "
sb
›› 
=
›› 
new
›› 
StringBuilder
›› &
(
››& '
)
››' (
;
››( )
foreach
ﬁﬁ 
(
ﬁﬁ 
byte
ﬁﬁ 
b
ﬁﬁ 
in
ﬁﬁ  "
byteData
ﬁﬁ# +
)
ﬁﬁ+ ,
{
ﬂﬂ 
sb
‡‡ 
.
‡‡ 
Append
‡‡ 
(
‡‡ 
b
‡‡ 
.
‡‡  
ToString
‡‡  (
(
‡‡( )
$str
‡‡) -
)
‡‡- .
+
‡‡/ 0
$str
‡‡1 4
)
‡‡4 5
;
‡‡5 6
index
·· 
++
·· 
;
·· 
if
‚‚ 
(
‚‚ 
index
‚‚ 
%
‚‚ 
$num
‚‚  "
==
‚‚# %
$num
‚‚& '
)
‚‚' (
{
„„ 
strData
‰‰ 
.
‰‰  
Add
‰‰  #
(
‰‰# $
sb
‰‰$ &
.
‰‰& '
ToString
‰‰' /
(
‰‰/ 0
)
‰‰0 1
)
‰‰1 2
;
‰‰2 3
sb
ÂÂ 
.
ÂÂ 
Clear
ÂÂ  
(
ÂÂ  !
)
ÂÂ! "
;
ÂÂ" #
}
ÊÊ 
}
ÁÁ 
if
ËË 
(
ËË 
sb
ËË 
.
ËË 
Length
ËË 
>
ËË 
$num
ËË  !
)
ËË! "
{
ÈÈ 
strData
ÍÍ 
.
ÍÍ 
Add
ÍÍ 
(
ÍÍ  
sb
ÍÍ  "
.
ÍÍ" #
ToString
ÍÍ# +
(
ÍÍ+ ,
)
ÍÍ, -
)
ÍÍ- .
;
ÍÍ. /
}
ÎÎ 
return
ÔÔ 
strData
ÔÔ 
.
ÔÔ 
ToArray
ÔÔ &
(
ÔÔ& '
)
ÔÔ' (
;
ÔÔ( )
}
 
catch
ÒÒ 
(
ÒÒ 
	Exception
ÒÒ 
ex
ÒÒ 
)
ÒÒ  
{
ÚÚ 
FDebug
ÛÛ 
.
ÛÛ 
throwException
ÛÛ %
(
ÛÛ% &
ex
ÛÛ& (
)
ÛÛ( )
;
ÛÛ) *
}
ÙÙ 
finally
ıı 
{
ˆˆ 
strData
˜˜ 
=
˜˜ 
null
˜˜ 
;
˜˜ 
sb
¯¯ 
=
¯¯ 
null
¯¯ 
;
¯¯ 
}
˘˘ 
return
˙˙ 
null
˙˙ 
;
˙˙ 
}
˚˚ 	
private
ˇˇ 
void
ˇˇ $
writeSecs1StateChanged
ˇˇ +
(
ˇˇ+ ,)
FSecs1StateChangedEventArgs
ÄÄ '
fArgs
ÄÄ( -
)
ÅÅ 
{
ÇÇ 	
StringBuilder
ÉÉ 
logData
ÉÉ !
=
ÉÉ" #
new
ÉÉ$ '
StringBuilder
ÉÉ( 5
(
ÉÉ5 6
)
ÉÉ6 7
;
ÉÉ7 8
try
ÖÖ 
{
ÜÜ 
logData
áá 
.
áá 

AppendLine
áá "
(
áá" #
$str
áá# &
+
áá' (
DateTime
áá) 1
.
áá1 2
Now
áá2 5
.
áá5 6
ToString
áá6 >
(
áá> ?
$str
áá? X
)
ááX Y
+
ááZ [
$str
áá\ _
)
áá_ `
;
áá` a
logData
ãã 
.
ãã 
Append
ãã 
(
ãã 
fArgs
ãã $
.
ãã$ %
fEventId
ãã% -
.
ãã- .
ToString
ãã. 6
(
ãã6 7
)
ãã7 8
)
ãã8 9
;
ãã9 :
logData
åå 
.
åå 
Append
åå 
(
åå 
$str
åå +
+
åå, -
fArgs
åå. 3
.
åå3 4
fResult
åå4 ;
.
åå; <
ToString
åå< D
(
ååD E
)
ååE F
+
ååG H
$str
ååI L
)
ååL M
;
ååM N
if
çç 
(
çç 
fArgs
çç 
.
çç 
fResult
çç !
!=
çç" $
FResultCode
çç% 0
.
çç0 1
Success
çç1 8
)
çç8 9
{
éé 
logData
èè 
.
èè 
Append
èè "
(
èè" #
$str
èè# 5
+
èè6 7
fArgs
èè8 =
.
èè= >
errorMessage
èè> J
+
èèK L
$str
èèM P
)
èèP Q
;
èèQ R
}
êê 
logData
ëë 
.
ëë 

AppendLine
ëë "
(
ëë" #
)
ëë# $
;
ëë$ %
logData
ïï 
.
ïï 

AppendLine
ïï "
(
ïï" #
fArgs
ïï# (
.
ïï( )
fState
ïï) /
.
ïï/ 0
ToString
ïï0 8
(
ïï8 9
)
ïï9 :
+
ïï; <
$str
ïï= M
+
ïïN O
fArgs
ïïP U
.
ïïU V

serialPort
ïïV `
+
ïïa b
$str
ïïc n
+
ïïo p
fArgs
ïïq v
.
ïïv w
baud
ïïw {
.
ïï{ |
ToStringïï| Ñ
(ïïÑ Ö
)ïïÖ Ü
+ïïá à
$strïïâ å
)ïïå ç
;ïïç é
logData
ôô 
.
ôô 

AppendLine
ôô "
(
ôô" #
)
ôô# $
;
ôô$ %
m_fLogQueue
öö 
.
öö 
enqueue
öö #
(
öö# $
logData
öö$ +
.
öö+ ,
ToString
öö, 4
(
öö4 5
)
öö5 6
)
öö6 7
;
öö7 8
}
õõ 
catch
úú 
(
úú 
	Exception
úú 
ex
úú 
)
úú  
{
ùù 
FDebug
ûû 
.
ûû 
throwException
ûû %
(
ûû% &
ex
ûû& (
)
ûû( )
;
ûû) *
}
üü 
finally
†† 
{
°° 
logData
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 
}
§§ 	
private
®® 
void
®® #
writeSecs1ErrorRaised
®® *
(
®®* +(
FSecs1ErrorRaisedEventArgs
©© &
fArgs
©©' ,
)
™™ 
{
´´ 	
StringBuilder
¨¨ 
logData
¨¨ !
=
¨¨" #
new
¨¨$ '
StringBuilder
¨¨( 5
(
¨¨5 6
)
¨¨6 7
;
¨¨7 8
try
ÆÆ 
{
ØØ 
logData
∞∞ 
.
∞∞ 

AppendLine
∞∞ "
(
∞∞" #
$str
∞∞# &
+
∞∞' (
DateTime
∞∞) 1
.
∞∞1 2
Now
∞∞2 5
.
∞∞5 6
ToString
∞∞6 >
(
∞∞> ?
$str
∞∞? X
)
∞∞X Y
+
∞∞Z [
$str
∞∞\ _
)
∞∞_ `
;
∞∞` a
logData
¥¥ 
.
¥¥ 
Append
¥¥ 
(
¥¥ 
fArgs
¥¥ $
.
¥¥$ %
fEventId
¥¥% -
.
¥¥- .
ToString
¥¥. 6
(
¥¥6 7
)
¥¥7 8
)
¥¥8 9
;
¥¥9 :
logData
µµ 
.
µµ 
Append
µµ 
(
µµ 
$str
µµ 1
+
µµ2 3
fArgs
µµ4 9
.
µµ9 :
errorMessage
µµ: F
+
µµG H
$str
µµI L
)
µµL M
;
µµM N
logData
∂∂ 
.
∂∂ 

AppendLine
∂∂ "
(
∂∂" #
)
∂∂# $
;
∂∂$ %
logData
∫∫ 
.
∫∫ 

AppendLine
∫∫ "
(
∫∫" #
)
∫∫# $
;
∫∫$ %
m_fLogQueue
ªª 
.
ªª 
enqueue
ªª #
(
ªª# $
logData
ªª$ +
.
ªª+ ,
ToString
ªª, 4
(
ªª4 5
)
ªª5 6
)
ªª6 7
;
ªª7 8
}
ºº 
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ 
ex
ΩΩ 
)
ΩΩ  
{
ææ 
FDebug
øø 
.
øø 
throwException
øø %
(
øø% &
ex
øø& (
)
øø( )
;
øø) *
}
¿¿ 
finally
¡¡ 
{
¬¬ 
logData
√√ 
=
√√ 
null
√√ 
;
√√ 
}
ƒƒ 
}
≈≈ 	
private
…… 
void
…… %
writeSecs1TimeoutRaised
…… ,
(
……, -*
FSecs1TimeoutRaisedEventArgs
   (
fArgs
  ) .
)
ÀÀ 
{
ÃÃ 	
StringBuilder
ÕÕ 
logData
ÕÕ !
=
ÕÕ" #
new
ÕÕ$ '
StringBuilder
ÕÕ( 5
(
ÕÕ5 6
)
ÕÕ6 7
;
ÕÕ7 8
try
œœ 
{
–– 
logData
—— 
.
—— 

AppendLine
—— "
(
——" #
$str
——# &
+
——' (
DateTime
——) 1
.
——1 2
Now
——2 5
.
——5 6
ToString
——6 >
(
——> ?
$str
——? X
)
——X Y
+
——Z [
$str
——\ _
)
——_ `
;
——` a
logData
’’ 
.
’’ 
Append
’’ 
(
’’ 
fArgs
’’ $
.
’’$ %
fEventId
’’% -
.
’’- .
ToString
’’. 6
(
’’6 7
)
’’7 8
)
’’8 9
;
’’9 :
logData
÷÷ 
.
÷÷ 
Append
÷÷ 
(
÷÷ 
$str
÷÷ 1
+
÷÷2 3
fArgs
÷÷4 9
.
÷÷9 :
errorMessage
÷÷: F
+
÷÷G H
$str
÷÷I L
)
÷÷L M
;
÷÷M N
logData
◊◊ 
.
◊◊ 

AppendLine
◊◊ "
(
◊◊" #
)
◊◊# $
;
◊◊$ %
logData
€€ 
.
€€ 

AppendLine
€€ "
(
€€" #
fArgs
€€# (
.
€€( )
fTimeout
€€) 1
.
€€1 2
ToString
€€2 :
(
€€: ;
)
€€; <
)
€€< =
;
€€= >
logData
ﬂﬂ 
.
ﬂﬂ 

AppendLine
ﬂﬂ "
(
ﬂﬂ" #
)
ﬂﬂ# $
;
ﬂﬂ$ %
m_fLogQueue
‡‡ 
.
‡‡ 
enqueue
‡‡ #
(
‡‡# $
logData
‡‡$ +
.
‡‡+ ,
ToString
‡‡, 4
(
‡‡4 5
)
‡‡5 6
)
‡‡6 7
;
‡‡7 8
}
·· 
catch
‚‚ 
(
‚‚ 
	Exception
‚‚ 
ex
‚‚ 
)
‚‚  
{
„„ 
FDebug
‰‰ 
.
‰‰ 
throwException
‰‰ %
(
‰‰% &
ex
‰‰& (
)
‰‰( )
;
‰‰) *
}
ÂÂ 
finally
ÊÊ 
{
ÁÁ 
logData
ËË 
=
ËË 
null
ËË 
;
ËË 
}
ÈÈ 
}
ÍÍ 	
private
ÓÓ 
void
ÓÓ )
writeSecs1HandshakeReceived
ÓÓ 0
(
ÓÓ0 1.
 FSecs1HandshakeReceivedEventArgs
ÔÔ ,
fArgs
ÔÔ- 2
)
 
{
ÒÒ 	
StringBuilder
ÚÚ 
logData
ÚÚ !
=
ÚÚ" #
new
ÚÚ$ '
StringBuilder
ÚÚ( 5
(
ÚÚ5 6
)
ÚÚ6 7
;
ÚÚ7 8
try
ÙÙ 
{
ıı 
logData
ˆˆ 
.
ˆˆ 

AppendLine
ˆˆ "
(
ˆˆ" #
$str
ˆˆ# &
+
ˆˆ' (
DateTime
ˆˆ) 1
.
ˆˆ1 2
Now
ˆˆ2 5
.
ˆˆ5 6
ToString
ˆˆ6 >
(
ˆˆ> ?
$str
ˆˆ? X
)
ˆˆX Y
+
ˆˆZ [
$str
ˆˆ\ _
)
ˆˆ_ `
;
ˆˆ` a
logData
˙˙ 
.
˙˙ 
Append
˙˙ 
(
˙˙ 
fArgs
˙˙ $
.
˙˙$ %
fEventId
˙˙% -
.
˙˙- .
ToString
˙˙. 6
(
˙˙6 7
)
˙˙7 8
)
˙˙8 9
;
˙˙9 :
logData
˚˚ 
.
˚˚ 
Append
˚˚ 
(
˚˚ 
$str
˚˚ +
+
˚˚, -
fArgs
˚˚. 3
.
˚˚3 4
fResult
˚˚4 ;
.
˚˚; <
ToString
˚˚< D
(
˚˚D E
)
˚˚E F
+
˚˚G H
$str
˚˚I L
)
˚˚L M
;
˚˚M N
if
¸¸ 
(
¸¸ 
fArgs
¸¸ 
.
¸¸ 
fResult
¸¸ !
!=
¸¸" $
FResultCode
¸¸% 0
.
¸¸0 1
Success
¸¸1 8
)
¸¸8 9
{
˝˝ 
logData
˛˛ 
.
˛˛ 
Append
˛˛ "
(
˛˛" #
$str
˛˛# 5
+
˛˛6 7
fArgs
˛˛8 =
.
˛˛= >
errorMessage
˛˛> J
+
˛˛K L
$str
˛˛M P
)
˛˛P Q
;
˛˛Q R
}
ˇˇ 
logData
ÄÄ 
.
ÄÄ 

AppendLine
ÄÄ "
(
ÄÄ" #
)
ÄÄ# $
;
ÄÄ$ %
logData
ÑÑ 
.
ÑÑ 

AppendLine
ÑÑ "
(
ÑÑ" #
fArgs
ÑÑ# (
.
ÑÑ( )
fHandshakeCode
ÑÑ) 7
.
ÑÑ7 8
ToString
ÑÑ8 @
(
ÑÑ@ A
)
ÑÑA B
)
ÑÑB C
;
ÑÑC D
foreach
àà 
(
àà 
string
àà 
s
àà  !
in
àà" $
binToString
àà% 0
(
àà0 1
fArgs
àà1 6
.
àà6 7
getBinaryData
àà7 D
(
ààD E
)
ààE F
)
ààF G
)
ààG H
{
ââ 
logData
ää 
.
ää 

AppendLine
ää &
(
ää& '
s
ää' (
)
ää( )
;
ää) *
}
ãã 
logData
èè 
.
èè 

AppendLine
èè "
(
èè" #
)
èè# $
;
èè$ %
m_fLogQueue
êê 
.
êê 
enqueue
êê #
(
êê# $
logData
êê$ +
.
êê+ ,
ToString
êê, 4
(
êê4 5
)
êê5 6
)
êê6 7
;
êê7 8
}
ëë 
catch
íí 
(
íí 
	Exception
íí 
ex
íí 
)
íí  
{
ìì 
FDebug
îî 
.
îî 
throwException
îî %
(
îî% &
ex
îî& (
)
îî( )
;
îî) *
}
ïï 
finally
ññ 
{
óó 
logData
òò 
=
òò 
null
òò 
;
òò 
}
ôô 
}
öö 	
private
ûû 
void
ûû %
writeSecs1HandshakeSent
ûû ,
(
ûû, -*
FSecs1HandshakeSentEventArgs
üü (
fArgs
üü) .
)
†† 
{
°° 	
StringBuilder
¢¢ 
logData
¢¢ !
=
¢¢" #
new
¢¢$ '
StringBuilder
¢¢( 5
(
¢¢5 6
)
¢¢6 7
;
¢¢7 8
try
§§ 
{
•• 
logData
¶¶ 
.
¶¶ 

AppendLine
¶¶ "
(
¶¶" #
$str
¶¶# &
+
¶¶' (
DateTime
¶¶) 1
.
¶¶1 2
Now
¶¶2 5
.
¶¶5 6
ToString
¶¶6 >
(
¶¶> ?
$str
¶¶? X
)
¶¶X Y
+
¶¶Z [
$str
¶¶\ _
)
¶¶_ `
;
¶¶` a
logData
™™ 
.
™™ 
Append
™™ 
(
™™ 
fArgs
™™ $
.
™™$ %
fEventId
™™% -
.
™™- .
ToString
™™. 6
(
™™6 7
)
™™7 8
)
™™8 9
;
™™9 :
logData
´´ 
.
´´ 
Append
´´ 
(
´´ 
$str
´´ +
+
´´, -
fArgs
´´. 3
.
´´3 4
fResult
´´4 ;
.
´´; <
ToString
´´< D
(
´´D E
)
´´E F
+
´´G H
$str
´´I L
)
´´L M
;
´´M N
if
¨¨ 
(
¨¨ 
fArgs
¨¨ 
.
¨¨ 
fResult
¨¨ !
!=
¨¨" $
FResultCode
¨¨% 0
.
¨¨0 1
Success
¨¨1 8
)
¨¨8 9
{
≠≠ 
logData
ÆÆ 
.
ÆÆ 
Append
ÆÆ "
(
ÆÆ" #
$str
ÆÆ# 5
+
ÆÆ6 7
fArgs
ÆÆ8 =
.
ÆÆ= >
errorMessage
ÆÆ> J
+
ÆÆK L
$str
ÆÆM P
)
ÆÆP Q
;
ÆÆQ R
}
ØØ 
logData
∞∞ 
.
∞∞ 

AppendLine
∞∞ "
(
∞∞" #
)
∞∞# $
;
∞∞$ %
logData
¥¥ 
.
¥¥ 

AppendLine
¥¥ "
(
¥¥" #
fArgs
¥¥# (
.
¥¥( )
fHandshakeCode
¥¥) 7
.
¥¥7 8
ToString
¥¥8 @
(
¥¥@ A
)
¥¥A B
)
¥¥B C
;
¥¥C D
foreach
∏∏ 
(
∏∏ 
string
∏∏ 
s
∏∏  !
in
∏∏" $
binToString
∏∏% 0
(
∏∏0 1
fArgs
∏∏1 6
.
∏∏6 7
getBinaryData
∏∏7 D
(
∏∏D E
)
∏∏E F
)
∏∏F G
)
∏∏G H
{
ππ 
logData
∫∫ 
.
∫∫ 

AppendLine
∫∫ &
(
∫∫& '
s
∫∫' (
)
∫∫( )
;
∫∫) *
}
ªª 
logData
øø 
.
øø 

AppendLine
øø "
(
øø" #
)
øø# $
;
øø$ %
m_fLogQueue
¿¿ 
.
¿¿ 
enqueue
¿¿ #
(
¿¿# $
logData
¿¿$ +
.
¿¿+ ,
ToString
¿¿, 4
(
¿¿4 5
)
¿¿5 6
)
¿¿6 7
;
¿¿7 8
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
ex
¬¬ 
)
¬¬  
{
√√ 
FDebug
ƒƒ 
.
ƒƒ 
throwException
ƒƒ %
(
ƒƒ% &
ex
ƒƒ& (
)
ƒƒ( )
;
ƒƒ) *
}
≈≈ 
finally
∆∆ 
{
«« 
logData
»» 
=
»» 
null
»» 
;
»» 
}
…… 
}
   	
private
ŒŒ 
void
ŒŒ %
writeSecs1BlockReceived
ŒŒ ,
(
ŒŒ, -*
FSecs1BlockReceivedEventArgs
œœ (
fArgs
œœ) .
)
–– 
{
—— 	
StringBuilder
““ 
logData
““ !
=
““" #
new
““$ '
StringBuilder
““( 5
(
““5 6
)
““6 7
;
““7 8
try
‘‘ 
{
’’ 
logData
÷÷ 
.
÷÷ 

AppendLine
÷÷ "
(
÷÷" #
$str
÷÷# &
+
÷÷' (
DateTime
÷÷) 1
.
÷÷1 2
Now
÷÷2 5
.
÷÷5 6
ToString
÷÷6 >
(
÷÷> ?
$str
÷÷? X
)
÷÷X Y
+
÷÷Z [
$str
÷÷\ _
)
÷÷_ `
;
÷÷` a
logData
⁄⁄ 
.
⁄⁄ 
Append
⁄⁄ 
(
⁄⁄ 
fArgs
⁄⁄ $
.
⁄⁄$ %
fEventId
⁄⁄% -
.
⁄⁄- .
ToString
⁄⁄. 6
(
⁄⁄6 7
)
⁄⁄7 8
)
⁄⁄8 9
;
⁄⁄9 :
logData
€€ 
.
€€ 
Append
€€ 
(
€€ 
$str
€€ +
+
€€, -
fArgs
€€. 3
.
€€3 4
fResult
€€4 ;
.
€€; <
ToString
€€< D
(
€€D E
)
€€E F
+
€€G H
$str
€€I L
)
€€L M
;
€€M N
if
‹‹ 
(
‹‹ 
fArgs
‹‹ 
.
‹‹ 
fResult
‹‹ !
!=
‹‹" $
FResultCode
‹‹% 0
.
‹‹0 1
Success
‹‹1 8
)
‹‹8 9
{
›› 
logData
ﬁﬁ 
.
ﬁﬁ 
Append
ﬁﬁ "
(
ﬁﬁ" #
$str
ﬁﬁ# 5
+
ﬁﬁ6 7
fArgs
ﬁﬁ8 =
.
ﬁﬁ= >
errorMessage
ﬁﬁ> J
+
ﬁﬁK L
$str
ﬁﬁM P
)
ﬁﬁP Q
;
ﬁﬁQ R
}
ﬂﬂ 
logData
‡‡ 
.
‡‡ 

AppendLine
‡‡ "
(
‡‡" #
)
‡‡# $
;
‡‡$ %
logData
‰‰ 
.
‰‰ 
Append
‰‰ 
(
‰‰ 
$str
‰‰ "
+
‰‰# $
fArgs
‰‰% *
.
‰‰* +

fSecsBlock
‰‰+ 5
.
‰‰5 6
stream
‰‰6 <
.
‰‰< =
ToString
‰‰= E
(
‰‰E F
)
‰‰F G
+
‰‰H I
$str
‰‰J M
+
‰‰N O
fArgs
‰‰P U
.
‰‰U V

fSecsBlock
‰‰V `
.
‰‰` a
function
‰‰a i
.
‰‰i j
ToString
‰‰j r
(
‰‰r s
)
‰‰s t
)
‰‰t u
;
‰‰u v
if
ÂÂ 
(
ÂÂ 
fArgs
ÂÂ 
.
ÂÂ 

fSecsBlock
ÂÂ $
.
ÂÂ$ %
wbit
ÂÂ% )
)
ÂÂ) *
{
ÊÊ 
logData
ÁÁ 
.
ÁÁ 
Append
ÁÁ "
(
ÁÁ" #
$str
ÁÁ# '
)
ÁÁ' (
;
ÁÁ( )
}
ËË 
logData
ÈÈ 
.
ÈÈ 
Append
ÈÈ 
(
ÈÈ 
$str
ÈÈ ,
+
ÈÈ- .
fArgs
ÈÈ/ 4
.
ÈÈ4 5

fSecsBlock
ÈÈ5 ?
.
ÈÈ? @
blockNo
ÈÈ@ G
.
ÈÈG H
ToString
ÈÈH P
(
ÈÈP Q
)
ÈÈQ R
+
ÈÈS T
$str
ÈÈU `
+
ÈÈa b
fArgs
ÈÈc h
.
ÈÈh i

fSecsBlock
ÈÈi s
.
ÈÈs t
ebit
ÈÈt x
.
ÈÈx y
ToStringÈÈy Å
(ÈÈÅ Ç
)ÈÈÇ É
+ÈÈÑ Ö
$strÈÈÜ ò
+ÈÈô ö
fArgsÈÈõ †
.ÈÈ† °

fSecsBlockÈÈ° ´
.ÈÈ´ ¨
systemBytesÈÈ¨ ∑
.ÈÈ∑ ∏
ToStringÈÈ∏ ¿
(ÈÈ¿ ¡
)ÈÈ¡ ¬
+ÈÈ√ ƒ
$strÈÈ≈ “
+ÈÈ” ‘
fArgsÈÈ’ ⁄
.ÈÈ⁄ €

fSecsBlockÈÈ€ Â
.ÈÈÂ Ê
lengthÈÈÊ Ï
.ÈÈÏ Ì
ToStringÈÈÌ ı
(ÈÈı ˆ
)ÈÈˆ ˜
+ÈÈ¯ ˘
$strÈÈ˙ ˝
)ÈÈ˝ ˛
;ÈÈ˛ ˇ
logData
ÍÍ 
.
ÍÍ 
Append
ÍÍ 
(
ÍÍ 
$str
ÍÍ .
+
ÍÍ/ 0
fArgs
ÍÍ1 6
.
ÍÍ6 7

fSecsBlock
ÍÍ7 A
.
ÍÍA B
	sessionId
ÍÍB K
.
ÍÍK L
ToString
ÍÍL T
(
ÍÍT U
)
ÍÍU V
+
ÍÍW X
$str
ÍÍY d
+
ÍÍe f
fArgs
ÍÍg l
.
ÍÍl m

fSecsBlock
ÍÍm w
.
ÍÍw x
rbit
ÍÍx |
.
ÍÍ| }
ToStringÍÍ} Ö
(ÍÍÖ Ü
)ÍÍÜ á
+ÍÍà â
$strÍÍä ô
+ÍÍö õ
fArgsÍÍú °
.ÍÍ° ¢

fSecsBlockÍÍ¢ ¨
.ÍÍ¨ ≠
checkSumÍÍ≠ µ
.ÍÍµ ∂
ToStringÍÍ∂ æ
(ÍÍæ ø
)ÍÍø ¿
+ÍÍ¡ ¬
$strÍÍ√ ∆
)ÍÍ∆ «
;ÍÍ« »
logData
ÎÎ 
.
ÎÎ 

AppendLine
ÎÎ "
(
ÎÎ" #
)
ÎÎ# $
;
ÎÎ$ %
foreach
ÔÔ 
(
ÔÔ 
string
ÔÔ 
s
ÔÔ  !
in
ÔÔ" $
binToString
ÔÔ% 0
(
ÔÔ0 1
fArgs
ÔÔ1 6
.
ÔÔ6 7

fSecsBlock
ÔÔ7 A
.
ÔÔA B
	blockData
ÔÔB K
)
ÔÔK L
)
ÔÔL M
{
 
logData
ÒÒ 
.
ÒÒ 

AppendLine
ÒÒ &
(
ÒÒ& '
s
ÒÒ' (
)
ÒÒ( )
;
ÒÒ) *
}
ÚÚ 
logData
ˆˆ 
.
ˆˆ 

AppendLine
ˆˆ "
(
ˆˆ" #
)
ˆˆ# $
;
ˆˆ$ %
m_fLogQueue
˜˜ 
.
˜˜ 
enqueue
˜˜ #
(
˜˜# $
logData
˜˜$ +
.
˜˜+ ,
ToString
˜˜, 4
(
˜˜4 5
)
˜˜5 6
)
˜˜6 7
;
˜˜7 8
}
¯¯ 
catch
˘˘ 
(
˘˘ 
	Exception
˘˘ 
ex
˘˘ 
)
˘˘  
{
˙˙ 
FDebug
˚˚ 
.
˚˚ 
throwException
˚˚ %
(
˚˚% &
ex
˚˚& (
)
˚˚( )
;
˚˚) *
}
¸¸ 
finally
˝˝ 
{
˛˛ 
logData
ˇˇ 
=
ˇˇ 
null
ˇˇ 
;
ˇˇ 
}
ÄÄ 
}
ÅÅ 	
private
ÖÖ 
void
ÖÖ !
writeSecs1BlockSent
ÖÖ (
(
ÖÖ( )&
FSecs1BlockSentEventArgs
ÜÜ $
fArgs
ÜÜ% *
)
áá 
{
àà 	
StringBuilder
ââ 
logData
ââ !
=
ââ" #
new
ââ$ '
StringBuilder
ââ( 5
(
ââ5 6
)
ââ6 7
;
ââ7 8
try
ãã 
{
åå 
logData
çç 
.
çç 

AppendLine
çç "
(
çç" #
$str
çç# &
+
çç' (
DateTime
çç) 1
.
çç1 2
Now
çç2 5
.
çç5 6
ToString
çç6 >
(
çç> ?
$str
çç? X
)
ççX Y
+
ççZ [
$str
çç\ _
)
çç_ `
;
çç` a
logData
ëë 
.
ëë 
Append
ëë 
(
ëë 
fArgs
ëë $
.
ëë$ %
fEventId
ëë% -
.
ëë- .
ToString
ëë. 6
(
ëë6 7
)
ëë7 8
)
ëë8 9
;
ëë9 :
logData
íí 
.
íí 
Append
íí 
(
íí 
$str
íí +
+
íí, -
fArgs
íí. 3
.
íí3 4
fResult
íí4 ;
.
íí; <
ToString
íí< D
(
ííD E
)
ííE F
+
ííG H
$str
ííI L
)
ííL M
;
ííM N
if
ìì 
(
ìì 
fArgs
ìì 
.
ìì 
fResult
ìì !
!=
ìì" $
FResultCode
ìì% 0
.
ìì0 1
Success
ìì1 8
)
ìì8 9
{
îî 
logData
ïï 
.
ïï 
Append
ïï "
(
ïï" #
$str
ïï# 5
+
ïï6 7
fArgs
ïï8 =
.
ïï= >
errorMessage
ïï> J
+
ïïK L
$str
ïïM P
)
ïïP Q
;
ïïQ R
}
ññ 
logData
óó 
.
óó 

AppendLine
óó "
(
óó" #
)
óó# $
;
óó$ %
logData
õõ 
.
õõ 
Append
õõ 
(
õõ 
$str
õõ "
+
õõ# $
fArgs
õõ% *
.
õõ* +

fSecsBlock
õõ+ 5
.
õõ5 6
stream
õõ6 <
.
õõ< =
ToString
õõ= E
(
õõE F
)
õõF G
+
õõH I
$str
õõJ M
+
õõN O
fArgs
õõP U
.
õõU V

fSecsBlock
õõV `
.
õõ` a
function
õõa i
.
õõi j
ToString
õõj r
(
õõr s
)
õõs t
)
õõt u
;
õõu v
if
úú 
(
úú 
fArgs
úú 
.
úú 

fSecsBlock
úú $
.
úú$ %
wbit
úú% )
)
úú) *
{
ùù 
logData
ûû 
.
ûû 
Append
ûû "
(
ûû" #
$str
ûû# '
)
ûû' (
;
ûû( )
}
üü 
logData
†† 
.
†† 
Append
†† 
(
†† 
$str
†† ,
+
††- .
fArgs
††/ 4
.
††4 5

fSecsBlock
††5 ?
.
††? @
blockNo
††@ G
.
††G H
ToString
††H P
(
††P Q
)
††Q R
+
††S T
$str
††U `
+
††a b
fArgs
††c h
.
††h i

fSecsBlock
††i s
.
††s t
ebit
††t x
.
††x y
ToString††y Å
(††Å Ç
)††Ç É
+††Ñ Ö
$str††Ü ò
+††ô ö
fArgs††õ †
.††† °

fSecsBlock††° ´
.††´ ¨
systemBytes††¨ ∑
.††∑ ∏
ToString††∏ ¿
(††¿ ¡
)††¡ ¬
+††√ ƒ
$str††≈ “
+††” ‘
fArgs††’ ⁄
.††⁄ €

fSecsBlock††€ Â
.††Â Ê
length††Ê Ï
.††Ï Ì
ToString††Ì ı
(††ı ˆ
)††ˆ ˜
+††¯ ˘
$str††˙ ˝
)††˝ ˛
;††˛ ˇ
logData
°° 
.
°° 
Append
°° 
(
°° 
$str
°° .
+
°°/ 0
fArgs
°°1 6
.
°°6 7

fSecsBlock
°°7 A
.
°°A B
	sessionId
°°B K
.
°°K L
ToString
°°L T
(
°°T U
)
°°U V
+
°°W X
$str
°°Y d
+
°°e f
fArgs
°°g l
.
°°l m

fSecsBlock
°°m w
.
°°w x
rbit
°°x |
.
°°| }
ToString°°} Ö
(°°Ö Ü
)°°Ü á
+°°à â
$str°°ä ô
+°°ö õ
fArgs°°ú °
.°°° ¢

fSecsBlock°°¢ ¨
.°°¨ ≠
checkSum°°≠ µ
.°°µ ∂
ToString°°∂ æ
(°°æ ø
)°°ø ¿
+°°¡ ¬
$str°°√ ∆
)°°∆ «
;°°« »
logData
¢¢ 
.
¢¢ 

AppendLine
¢¢ "
(
¢¢" #
)
¢¢# $
;
¢¢$ %
foreach
¶¶ 
(
¶¶ 
string
¶¶ 
s
¶¶  !
in
¶¶" $
binToString
¶¶% 0
(
¶¶0 1
fArgs
¶¶1 6
.
¶¶6 7

fSecsBlock
¶¶7 A
.
¶¶A B
	blockData
¶¶B K
)
¶¶K L
)
¶¶L M
{
ßß 
logData
®® 
.
®® 

AppendLine
®® &
(
®®& '
s
®®' (
)
®®( )
;
®®) *
}
©© 
logData
≠≠ 
.
≠≠ 

AppendLine
≠≠ "
(
≠≠" #
)
≠≠# $
;
≠≠$ %
m_fLogQueue
ÆÆ 
.
ÆÆ 
enqueue
ÆÆ #
(
ÆÆ# $
logData
ÆÆ$ +
.
ÆÆ+ ,
ToString
ÆÆ, 4
(
ÆÆ4 5
)
ÆÆ5 6
)
ÆÆ6 7
;
ÆÆ7 8
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞ 
ex
∞∞ 
)
∞∞  
{
±± 
FDebug
≤≤ 
.
≤≤ 
throwException
≤≤ %
(
≤≤% &
ex
≤≤& (
)
≤≤( )
;
≤≤) *
}
≥≥ 
finally
¥¥ 
{
µµ 
logData
∂∂ 
=
∂∂ 
null
∂∂ 
;
∂∂ 
}
∑∑ 
}
∏∏ 	
private
ºº 
void
ºº .
 writeSecs1DataMessageReceivedSml
ºº 5
(
ºº5 60
"FSecs1DataMessageReceivedEventArgs
ΩΩ .
fArgs
ΩΩ/ 4
)
ææ 
{
øø 	
StringBuilder
¿¿ 
logData
¿¿ !
=
¿¿" #
new
¿¿$ '
StringBuilder
¿¿( 5
(
¿¿5 6
)
¿¿6 7
;
¿¿7 8
try
¬¬ 
{
√√ 
logData
ƒƒ 
.
ƒƒ 

AppendLine
ƒƒ "
(
ƒƒ" #
$str
ƒƒ# &
+
ƒƒ' (
DateTime
ƒƒ) 1
.
ƒƒ1 2
Now
ƒƒ2 5
.
ƒƒ5 6
ToString
ƒƒ6 >
(
ƒƒ> ?
$str
ƒƒ? X
)
ƒƒX Y
+
ƒƒZ [
$str
ƒƒ\ _
)
ƒƒ_ `
;
ƒƒ` a
logData
»» 
.
»» 
Append
»» 
(
»» 
fArgs
»» $
.
»»$ %
fEventId
»»% -
.
»»- .
ToString
»». 6
(
»»6 7
)
»»7 8
+
»»9 :
$str
»»; A
)
»»A B
;
»»B C
logData
…… 
.
…… 
Append
…… 
(
…… 
$str
…… +
+
……, -
fArgs
……. 3
.
……3 4
fResult
……4 ;
.
……; <
ToString
……< D
(
……D E
)
……E F
+
……G H
$str
……I L
)
……L M
;
……M N
if
   
(
   
fArgs
   
.
   
fResult
   !
!=
  " $
FResultCode
  % 0
.
  0 1
Success
  1 8
)
  8 9
{
ÀÀ 
logData
ÃÃ 
.
ÃÃ 
Append
ÃÃ "
(
ÃÃ" #
$str
ÃÃ# 5
+
ÃÃ6 7
fArgs
ÃÃ8 =
.
ÃÃ= >
errorMessage
ÃÃ> J
+
ÃÃK L
$str
ÃÃM P
)
ÃÃP Q
;
ÃÃQ R
}
ÕÕ 
logData
ŒŒ 
.
ŒŒ 

AppendLine
ŒŒ "
(
ŒŒ" #
)
ŒŒ# $
;
ŒŒ$ %
logData
““ 
.
““ 
Append
““ 
(
““ 
$str
““ "
+
““# $
fArgs
““% *
.
““* +
fSecsDataMessage
““+ ;
.
““; <
stream
““< B
.
““B C
ToString
““C K
(
““K L
)
““L M
+
““N O
$str
““P S
+
““T U
fArgs
““V [
.
““[ \
fSecsDataMessage
““\ l
.
““l m
function
““m u
.
““u v
ToString
““v ~
(
““~ 
)““ Ä
)““Ä Å
;““Å Ç
if
”” 
(
”” 
fArgs
”” 
.
”” 
fSecsDataMessage
”” *
.
””* +
wbit
””+ /
)
””/ 0
{
‘‘ 
logData
’’ 
.
’’ 
Append
’’ "
(
’’" #
$str
’’# '
)
’’' (
;
’’( )
}
÷÷ 
logData
◊◊ 
.
◊◊ 
Append
◊◊ 
(
◊◊ 
$str
◊◊ 0
+
◊◊1 2
fArgs
◊◊3 8
.
◊◊8 9
fSecsDataMessage
◊◊9 I
.
◊◊I J
systemBytes
◊◊J U
.
◊◊U V
ToString
◊◊V ^
(
◊◊^ _
)
◊◊_ `
+
◊◊a b
$str
◊◊c p
+
◊◊q r
fArgs
◊◊s x
.
◊◊x y
fSecsDataMessage◊◊y â
.◊◊â ä
length◊◊ä ê
.◊◊ê ë
ToString◊◊ë ô
(◊◊ô ö
)◊◊ö õ
+◊◊ú ù
$str◊◊û Æ
+◊◊Ø ∞
fArgs◊◊± ∂
.◊◊∂ ∑ 
fSecsDataMessage◊◊∑ «
.◊◊« »
	sessionId◊◊» —
.◊◊— “
ToString◊◊“ ⁄
(◊◊⁄ €
)◊◊€ ‹
+◊◊› ﬁ
$str◊◊ﬂ ‚
)◊◊‚ „
;◊◊„ ‰
logData
ÿÿ 
.
ÿÿ 

AppendLine
ÿÿ "
(
ÿÿ" #
)
ÿÿ# $
;
ÿÿ$ %
if
‹‹ 
(
‹‹ 
fArgs
‹‹ 
.
‹‹ 
fSecsDataMessage
‹‹ *
.
‹‹* +
body
‹‹+ /
.
‹‹/ 0
Length
‹‹0 6
>
‹‹7 8
$num
‹‹9 :
)
‹‹: ;
{
›› 
logData
ﬁﬁ 
.
ﬁﬁ 

AppendLine
ﬁﬁ &
(
ﬁﬁ& '
FSecsConverter
ﬁﬁ' 5
.
ﬁﬁ5 6
convertBinToSml
ﬁﬁ6 E
(
ﬁﬁE F
fArgs
ﬁﬁF K
.
ﬁﬁK L
fSecsDataMessage
ﬁﬁL \
.
ﬁﬁ\ ]
body
ﬁﬁ] a
)
ﬁﬁa b
)
ﬁﬁb c
;
ﬁﬁc d
}
ﬂﬂ 
logData
„„ 
.
„„ 

AppendLine
„„ "
(
„„" #
)
„„# $
;
„„$ %
m_fLogQueue
‰‰ 
.
‰‰ 
enqueue
‰‰ #
(
‰‰# $
logData
‰‰$ +
.
‰‰+ ,
ToString
‰‰, 4
(
‰‰4 5
)
‰‰5 6
)
‰‰6 7
;
‰‰7 8
}
ÂÂ 
catch
ÊÊ 
(
ÊÊ 
	Exception
ÊÊ 
ex
ÊÊ 
)
ÊÊ  
{
ÁÁ 
FDebug
ËË 
.
ËË 
throwException
ËË %
(
ËË% &
ex
ËË& (
)
ËË( )
;
ËË) *
}
ÈÈ 
finally
ÍÍ 
{
ÎÎ 
logData
ÏÏ 
=
ÏÏ 
null
ÏÏ 
;
ÏÏ 
}
ÌÌ 
}
ÓÓ 	
private
ÚÚ 
void
ÚÚ *
writeSecs1DataMessageSentSml
ÚÚ 1
(
ÚÚ1 2,
FSecs1DataMessageSentEventArgs
ÛÛ *
fArgs
ÛÛ+ 0
)
ÙÙ 
{
ıı 	
StringBuilder
ˆˆ 
logData
ˆˆ !
=
ˆˆ" #
new
ˆˆ$ '
StringBuilder
ˆˆ( 5
(
ˆˆ5 6
)
ˆˆ6 7
;
ˆˆ7 8
try
¯¯ 
{
˘˘ 
logData
˙˙ 
.
˙˙ 

AppendLine
˙˙ "
(
˙˙" #
$str
˙˙# &
+
˙˙' (
DateTime
˙˙) 1
.
˙˙1 2
Now
˙˙2 5
.
˙˙5 6
ToString
˙˙6 >
(
˙˙> ?
$str
˙˙? X
)
˙˙X Y
+
˙˙Z [
$str
˙˙\ _
)
˙˙_ `
;
˙˙` a
logData
˛˛ 
.
˛˛ 
Append
˛˛ 
(
˛˛ 
fArgs
˛˛ $
.
˛˛$ %
fEventId
˛˛% -
.
˛˛- .
ToString
˛˛. 6
(
˛˛6 7
)
˛˛7 8
+
˛˛9 :
$str
˛˛; A
)
˛˛A B
;
˛˛B C
logData
ˇˇ 
.
ˇˇ 
Append
ˇˇ 
(
ˇˇ 
$str
ˇˇ +
+
ˇˇ, -
fArgs
ˇˇ. 3
.
ˇˇ3 4
fResult
ˇˇ4 ;
.
ˇˇ; <
ToString
ˇˇ< D
(
ˇˇD E
)
ˇˇE F
+
ˇˇG H
$str
ˇˇI L
)
ˇˇL M
;
ˇˇM N
if
ÄÄ 
(
ÄÄ 
fArgs
ÄÄ 
.
ÄÄ 
fResult
ÄÄ !
!=
ÄÄ" $
FResultCode
ÄÄ% 0
.
ÄÄ0 1
Success
ÄÄ1 8
)
ÄÄ8 9
{
ÅÅ 
logData
ÇÇ 
.
ÇÇ 
Append
ÇÇ "
(
ÇÇ" #
$str
ÇÇ# 5
+
ÇÇ6 7
fArgs
ÇÇ8 =
.
ÇÇ= >
errorMessage
ÇÇ> J
+
ÇÇK L
$str
ÇÇM P
)
ÇÇP Q
;
ÇÇQ R
}
ÉÉ 
logData
ÑÑ 
.
ÑÑ 

AppendLine
ÑÑ "
(
ÑÑ" #
)
ÑÑ# $
;
ÑÑ$ %
logData
àà 
.
àà 
Append
àà 
(
àà 
$str
àà "
+
àà# $
fArgs
àà% *
.
àà* +
fSecsDataMessage
àà+ ;
.
àà; <
stream
àà< B
.
ààB C
ToString
ààC K
(
ààK L
)
ààL M
+
ààN O
$str
ààP S
+
ààT U
fArgs
ààV [
.
àà[ \
fSecsDataMessage
àà\ l
.
ààl m
function
ààm u
.
ààu v
ToString
ààv ~
(
àà~ 
)àà Ä
)ààÄ Å
;ààÅ Ç
if
ââ 
(
ââ 
fArgs
ââ 
.
ââ 
fSecsDataMessage
ââ *
.
ââ* +
wbit
ââ+ /
)
ââ/ 0
{
ää 
logData
ãã 
.
ãã 
Append
ãã "
(
ãã" #
$str
ãã# '
)
ãã' (
;
ãã( )
}
åå 
logData
çç 
.
çç 
Append
çç 
(
çç 
$str
çç 0
+
çç1 2
fArgs
çç3 8
.
çç8 9
fSecsDataMessage
çç9 I
.
ççI J
systemBytes
ççJ U
.
ççU V
ToString
ççV ^
(
çç^ _
)
çç_ `
+
çça b
$str
ççc p
+
ççq r
fArgs
ççs x
.
ççx y
fSecsDataMessageççy â
.ççâ ä
lengthççä ê
.ççê ë
ToStringççë ô
(ççô ö
)ççö õ
+ççú ù
$strççû Æ
+ççØ ∞
fArgsçç± ∂
.çç∂ ∑ 
fSecsDataMessageçç∑ «
.çç« »
	sessionIdçç» —
.çç— “
ToStringçç“ ⁄
(çç⁄ €
)çç€ ‹
+çç› ﬁ
$strççﬂ ‚
)çç‚ „
;çç„ ‰
logData
éé 
.
éé 

AppendLine
éé "
(
éé" #
)
éé# $
;
éé$ %
if
íí 
(
íí 
fArgs
íí 
.
íí 
fSecsDataMessage
íí *
.
íí* +
body
íí+ /
.
íí/ 0
Length
íí0 6
>
íí7 8
$num
íí9 :
)
íí: ;
{
ìì 
logData
îî 
.
îî 

AppendLine
îî &
(
îî& '
FSecsConverter
îî' 5
.
îî5 6
convertBinToSml
îî6 E
(
îîE F
fArgs
îîF K
.
îîK L
fSecsDataMessage
îîL \
.
îî\ ]
body
îî] a
)
îîa b
)
îîb c
;
îîc d
}
ïï 
logData
ôô 
.
ôô 

AppendLine
ôô "
(
ôô" #
)
ôô# $
;
ôô$ %
m_fLogQueue
öö 
.
öö 
enqueue
öö #
(
öö# $
logData
öö$ +
.
öö+ ,
ToString
öö, 4
(
öö4 5
)
öö5 6
)
öö6 7
;
öö7 8
}
õõ 
catch
úú 
(
úú 
	Exception
úú 
ex
úú 
)
úú  
{
ùù 
FDebug
ûû 
.
ûû 
throwException
ûû %
(
ûû% &
ex
ûû& (
)
ûû( )
;
ûû) *
}
üü 
finally
†† 
{
°° 
logData
¢¢ 
=
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 
}
§§ 	
private
®® 
void
®® #
writeHsmsStateChanged
®® *
(
®®* +(
FHsmsStateChangedEventArgs
©© &
fArgs
©©' ,
)
™™ 
{
´´ 	
StringBuilder
¨¨ 
logData
¨¨ !
=
¨¨" #
new
¨¨$ '
StringBuilder
¨¨( 5
(
¨¨5 6
)
¨¨6 7
;
¨¨7 8
try
ÆÆ 
{
ØØ 
logData
∞∞ 
.
∞∞ 

AppendLine
∞∞ "
(
∞∞" #
$str
∞∞# &
+
∞∞' (
DateTime
∞∞) 1
.
∞∞1 2
Now
∞∞2 5
.
∞∞5 6
ToString
∞∞6 >
(
∞∞> ?
$str
∞∞? X
)
∞∞X Y
+
∞∞Z [
$str
∞∞\ _
)
∞∞_ `
;
∞∞` a
logData
¥¥ 
.
¥¥ 
Append
¥¥ 
(
¥¥ 
fArgs
¥¥ $
.
¥¥$ %
fEventId
¥¥% -
.
¥¥- .
ToString
¥¥. 6
(
¥¥6 7
)
¥¥7 8
)
¥¥8 9
;
¥¥9 :
logData
µµ 
.
µµ 
Append
µµ 
(
µµ 
$str
µµ +
+
µµ, -
fArgs
µµ. 3
.
µµ3 4
fResult
µµ4 ;
.
µµ; <
ToString
µµ< D
(
µµD E
)
µµE F
+
µµG H
$str
µµI L
)
µµL M
;
µµM N
if
∂∂ 
(
∂∂ 
fArgs
∂∂ 
.
∂∂ 
fResult
∂∂ !
!=
∂∂" $
FResultCode
∂∂% 0
.
∂∂0 1
Success
∂∂1 8
)
∂∂8 9
{
∑∑ 
logData
∏∏ 
.
∏∏ 
Append
∏∏ "
(
∏∏" #
$str
∏∏# 5
+
∏∏6 7
fArgs
∏∏8 =
.
∏∏= >
errorMessage
∏∏> J
+
∏∏K L
$str
∏∏M P
)
∏∏P Q
;
∏∏Q R
}
ππ 
logData
∫∫ 
.
∫∫ 

AppendLine
∫∫ "
(
∫∫" #
)
∫∫# $
;
∫∫$ %
logData
ææ 
.
ææ 

AppendLine
ææ "
(
ææ" #
fArgs
ææ# (
.
ææ( )
fState
ææ) /
.
ææ/ 0
ToString
ææ0 8
(
ææ8 9
)
ææ9 :
+
ææ; <
$str
ææ= N
+
ææO P
fArgs
ææQ V
.
ææV W
fConnectMode
ææW c
+
ææd e
$str
ææf t
+
ææu v
fArgs
ææw |
.
ææ| }
localIpææ} Ñ
+ææÖ Ü
$strææá ó
+ææò ô
fArgsææö ü
.ææü †
	localPortææ† ©
.ææ© ™
ToStringææ™ ≤
(ææ≤ ≥
)ææ≥ ¥
+ææµ ∂
$strææ∑ ∆
+ææ« »
fArgsææ… Œ
.ææŒ œ
remoteIpææœ ◊
+ææÿ Ÿ
$strææ⁄ Î
+ææÏ Ì
fArgsææÓ Û
.ææÛ Ù

remotePortææÙ ˛
.ææ˛ ˇ
ToStringææˇ á
(ææá à
)ææà â
+ææä ã
$strææã é
)ææé è
;ææè ê
logData
¬¬ 
.
¬¬ 

AppendLine
¬¬ "
(
¬¬" #
)
¬¬# $
;
¬¬$ %
m_fLogQueue
√√ 
.
√√ 
enqueue
√√ #
(
√√# $
logData
√√$ +
.
√√+ ,
ToString
√√, 4
(
√√4 5
)
√√5 6
)
√√6 7
;
√√7 8
}
ƒƒ 
catch
≈≈ 
(
≈≈ 
	Exception
≈≈ 
ex
≈≈ 
)
≈≈  
{
∆∆ 
FDebug
«« 
.
«« 
throwException
«« %
(
««% &
ex
««& (
)
««( )
;
««) *
}
»» 
finally
…… 
{
   
logData
ÀÀ 
=
ÀÀ 
null
ÀÀ 
;
ÀÀ 
}
ÃÃ 
}
ÕÕ 	
private
—— 
void
—— "
writeHsmsErrorRaised
—— )
(
——) *'
FHsmsErrorRaisedEventArgs
““ %
fArgs
““& +
)
”” 
{
‘‘ 	
StringBuilder
’’ 
logData
’’ !
=
’’" #
new
’’$ '
StringBuilder
’’( 5
(
’’5 6
)
’’6 7
;
’’7 8
try
◊◊ 
{
ÿÿ 
logData
ŸŸ 
.
ŸŸ 

AppendLine
ŸŸ "
(
ŸŸ" #
$str
ŸŸ# &
+
ŸŸ' (
DateTime
ŸŸ) 1
.
ŸŸ1 2
Now
ŸŸ2 5
.
ŸŸ5 6
ToString
ŸŸ6 >
(
ŸŸ> ?
$str
ŸŸ? X
)
ŸŸX Y
+
ŸŸZ [
$str
ŸŸ\ _
)
ŸŸ_ `
;
ŸŸ` a
logData
›› 
.
›› 
Append
›› 
(
›› 
fArgs
›› $
.
››$ %
fEventId
››% -
.
››- .
ToString
››. 6
(
››6 7
)
››7 8
)
››8 9
;
››9 :
logData
ﬁﬁ 
.
ﬁﬁ 
Append
ﬁﬁ 
(
ﬁﬁ 
$str
ﬁﬁ 1
+
ﬁﬁ2 3
fArgs
ﬁﬁ4 9
.
ﬁﬁ9 :
errorMessage
ﬁﬁ: F
+
ﬁﬁG H
$str
ﬁﬁI L
)
ﬁﬁL M
;
ﬁﬁM N
logData
ﬂﬂ 
.
ﬂﬂ 

AppendLine
ﬂﬂ "
(
ﬂﬂ" #
)
ﬂﬂ# $
;
ﬂﬂ$ %
logData
„„ 
.
„„ 

AppendLine
„„ "
(
„„" #
)
„„# $
;
„„$ %
m_fLogQueue
‰‰ 
.
‰‰ 
enqueue
‰‰ #
(
‰‰# $
logData
‰‰$ +
.
‰‰+ ,
ToString
‰‰, 4
(
‰‰4 5
)
‰‰5 6
)
‰‰6 7
;
‰‰7 8
}
ÂÂ 
catch
ÊÊ 
(
ÊÊ 
	Exception
ÊÊ 
ex
ÊÊ 
)
ÊÊ  
{
ÁÁ 
FDebug
ËË 
.
ËË 
throwException
ËË %
(
ËË% &
ex
ËË& (
)
ËË( )
;
ËË) *
}
ÈÈ 
finally
ÍÍ 
{
ÎÎ 
logData
ÏÏ 
=
ÏÏ 
null
ÏÏ 
;
ÏÏ 
}
ÌÌ 
}
ÓÓ 	
private
ÚÚ 
void
ÚÚ $
writeHsmsTimeoutRaised
ÚÚ +
(
ÚÚ+ ,)
FHsmsTimeoutRaisedEventArgs
ÛÛ '
fArgs
ÛÛ( -
)
ÙÙ 
{
ıı 	
StringBuilder
ˆˆ 
logData
ˆˆ !
=
ˆˆ" #
new
ˆˆ$ '
StringBuilder
ˆˆ( 5
(
ˆˆ5 6
)
ˆˆ6 7
;
ˆˆ7 8
try
¯¯ 
{
˘˘ 
logData
˙˙ 
.
˙˙ 

AppendLine
˙˙ "
(
˙˙" #
$str
˙˙# &
+
˙˙' (
DateTime
˙˙) 1
.
˙˙1 2
Now
˙˙2 5
.
˙˙5 6
ToString
˙˙6 >
(
˙˙> ?
$str
˙˙? X
)
˙˙X Y
+
˙˙Z [
$str
˙˙\ _
)
˙˙_ `
;
˙˙` a
logData
˛˛ 
.
˛˛ 
Append
˛˛ 
(
˛˛ 
fArgs
˛˛ $
.
˛˛$ %
fEventId
˛˛% -
.
˛˛- .
ToString
˛˛. 6
(
˛˛6 7
)
˛˛7 8
)
˛˛8 9
;
˛˛9 :
logData
ˇˇ 
.
ˇˇ 
Append
ˇˇ 
(
ˇˇ 
$str
ˇˇ 1
+
ˇˇ2 3
fArgs
ˇˇ4 9
.
ˇˇ9 :
errorMessage
ˇˇ: F
+
ˇˇG H
$str
ˇˇI L
)
ˇˇL M
;
ˇˇM N
logData
ÄÄ 
.
ÄÄ 

AppendLine
ÄÄ "
(
ÄÄ" #
)
ÄÄ# $
;
ÄÄ$ %
logData
ÑÑ 
.
ÑÑ 

AppendLine
ÑÑ "
(
ÑÑ" #
fArgs
ÑÑ# (
.
ÑÑ( )
fTimeout
ÑÑ) 1
.
ÑÑ1 2
ToString
ÑÑ2 :
(
ÑÑ: ;
)
ÑÑ; <
)
ÑÑ< =
;
ÑÑ= >
logData
àà 
.
àà 

AppendLine
àà "
(
àà" #
)
àà# $
;
àà$ %
m_fLogQueue
ââ 
.
ââ 
enqueue
ââ #
(
ââ# $
logData
ââ$ +
.
ââ+ ,
ToString
ââ, 4
(
ââ4 5
)
ââ5 6
)
ââ6 7
;
ââ7 8
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
FDebug
çç 
.
çç 
throwException
çç %
(
çç% &
ex
çç& (
)
çç( )
;
çç) *
}
éé 
finally
èè 
{
êê 
logData
ëë 
=
ëë 
null
ëë 
;
ëë 
}
íí 
}
ìì 	
private
óó 
void
óó -
writeHsmsControlMessageReceived
óó 4
(
óó4 52
$FHsmsControlMessageReceivedEventArgs
òò 0
fArgs
òò1 6
)
ôô 
{
öö 	
StringBuilder
õõ 
logData
õõ !
=
õõ" #
new
õõ$ '
StringBuilder
õõ( 5
(
õõ5 6
)
õõ6 7
;
õõ7 8
try
ùù 
{
ûû 
logData
üü 
.
üü 

AppendLine
üü "
(
üü" #
$str
üü# &
+
üü' (
DateTime
üü) 1
.
üü1 2
Now
üü2 5
.
üü5 6
ToString
üü6 >
(
üü> ?
$str
üü? X
)
üüX Y
+
üüZ [
$str
üü\ _
)
üü_ `
;
üü` a
logData
££ 
.
££ 
Append
££ 
(
££ 
fArgs
££ $
.
££$ %
fEventId
££% -
.
££- .
ToString
££. 6
(
££6 7
)
££7 8
)
££8 9
;
££9 :
logData
§§ 
.
§§ 
Append
§§ 
(
§§ 
$str
§§ +
+
§§, -
fArgs
§§. 3
.
§§3 4
fResult
§§4 ;
.
§§; <
ToString
§§< D
(
§§D E
)
§§E F
+
§§G H
$str
§§I L
)
§§L M
;
§§M N
if
•• 
(
•• 
fArgs
•• 
.
•• 
fResult
•• !
!=
••" $
FResultCode
••% 0
.
••0 1
Success
••1 8
)
••8 9
{
¶¶ 
logData
ßß 
.
ßß 
Append
ßß "
(
ßß" #
$str
ßß# 5
+
ßß6 7
fArgs
ßß8 =
.
ßß= >
errorMessage
ßß> J
+
ßßK L
$str
ßßM P
)
ßßP Q
;
ßßQ R
}
®® 
logData
©© 
.
©© 

AppendLine
©© "
(
©©" #
)
©©# $
;
©©$ %
logData
≠≠ 
.
≠≠ 
Append
≠≠ 
(
≠≠ 
fArgs
≠≠ $
.
≠≠$ %!
fSecsControlMessage
≠≠% 8
.
≠≠8 9
fType
≠≠9 >
.
≠≠> ?
ToString
≠≠? G
(
≠≠G H
)
≠≠H I
)
≠≠I J
;
≠≠J K
logData
ÆÆ 
.
ÆÆ 
Append
ÆÆ 
(
ÆÆ 
$str
ÆÆ *
+
ÆÆ+ ,
fArgs
ÆÆ- 2
.
ÆÆ2 3!
fSecsControlMessage
ÆÆ3 F
.
ÆÆF G
byte2
ÆÆG L
.
ÆÆL M
ToString
ÆÆM U
(
ÆÆU V
)
ÆÆV W
+
ÆÆX Y
$str
ÆÆZ f
+
ÆÆg h
fArgs
ÆÆi n
.
ÆÆn o"
fSecsControlMessageÆÆo Ç
.ÆÆÇ É
byte3ÆÆÉ à
.ÆÆà â
ToStringÆÆâ ë
(ÆÆë í
)ÆÆí ì
+ÆÆî ï
$strÆÆñ ¢
+ÆÆ£ §
fArgsÆÆ• ™
.ÆÆ™ ´#
fSecsControlMessageÆÆ´ æ
.ÆÆæ ø
ptypeÆÆø ƒ
.ÆÆƒ ≈
ToStringÆÆ≈ Õ
(ÆÆÕ Œ
)ÆÆŒ œ
+ÆÆ– —
$strÆÆ“ ﬁ
+ÆÆﬂ ‡
fArgsÆÆ· Ê
.ÆÆÊ Á#
fSecsControlMessageÆÆÁ ˙
.ÆÆ˙ ˚
stypeÆÆ˚ Ä
.ÆÆÄ Å
ToStringÆÆÅ â
(ÆÆâ ä
)ÆÆä ã
+ÆÆå ç
$strÆÆé †
+ÆÆ° ¢
fArgsÆÆ£ ®
.ÆÆ® ©#
fSecsControlMessageÆÆ© º
.ÆÆº Ω
systemBytesÆÆΩ »
.ÆÆ» …
ToStringÆÆ… —
(ÆÆ— “
)ÆÆ“ ”
+ÆÆ‘ ’
$strÆÆ÷ Ÿ
)ÆÆŸ ⁄
;ÆÆ⁄ €
logData
ØØ 
.
ØØ 
Append
ØØ 
(
ØØ 
$str
ØØ +
+
ØØ, -
fArgs
ØØ. 3
.
ØØ3 4!
fSecsControlMessage
ØØ4 G
.
ØØG H
length
ØØH N
.
ØØN O
ToString
ØØO W
(
ØØW X
)
ØØX Y
+
ØØZ [
$str
ØØ[ k
+
ØØl m
fArgs
ØØn s
.
ØØs t"
fSecsControlMessageØØt á
.ØØá à
	sessionIdØØà ë
.ØØë í
ToStringØØí ö
(ØØö õ
)ØØõ ú
+ØØù û
$strØØü ¢
)ØØ¢ £
;ØØ£ §
if
∞∞ 
(
∞∞ 
fArgs
∞∞ 
.
∞∞ !
fSecsControlMessage
∞∞ -
.
∞∞- .
reason
∞∞. 4
!=
∞∞5 7
string
∞∞8 >
.
∞∞> ?
Empty
∞∞? D
)
∞∞D E
{
±± 
logData
≤≤ 
.
≤≤ 
Append
≤≤ "
(
≤≤" #
$str
≤≤# /
+
≤≤0 1
fArgs
≤≤2 7
.
≤≤7 8!
fSecsControlMessage
≤≤8 K
.
≤≤K L
reason
≤≤L R
+
≤≤S T
$str
≤≤U X
)
≤≤X Y
;
≤≤Y Z
}
≥≥ 
logData
¥¥ 
.
¥¥ 

AppendLine
¥¥ "
(
¥¥" #
)
¥¥# $
;
¥¥$ %
foreach
∏∏ 
(
∏∏ 
string
∏∏ 
s
∏∏  !
in
∏∏" $
binToString
∏∏% 0
(
∏∏0 1
fArgs
∏∏1 6
.
∏∏6 7!
fSecsControlMessage
∏∏7 J
.
∏∏J K
getBinaryData
∏∏K X
(
∏∏X Y
)
∏∏Y Z
)
∏∏Z [
)
∏∏[ \
{
ππ 
logData
∫∫ 
.
∫∫ 

AppendLine
∫∫ &
(
∫∫& '
s
∫∫' (
)
∫∫( )
;
∫∫) *
}
ªª 
logData
øø 
.
øø 

AppendLine
øø "
(
øø" #
)
øø# $
;
øø$ %
m_fLogQueue
¿¿ 
.
¿¿ 
enqueue
¿¿ #
(
¿¿# $
logData
¿¿$ +
.
¿¿+ ,
ToString
¿¿, 4
(
¿¿4 5
)
¿¿5 6
)
¿¿6 7
;
¿¿7 8
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
ex
¬¬ 
)
¬¬  
{
√√ 
FDebug
ƒƒ 
.
ƒƒ 
throwException
ƒƒ %
(
ƒƒ% &
ex
ƒƒ& (
)
ƒƒ( )
;
ƒƒ) *
}
≈≈ 
finally
∆∆ 
{
«« 
logData
»» 
=
»» 
null
»» 
;
»» 
}
…… 
}
   	
private
ŒŒ 
void
ŒŒ )
writeHsmsControlMessageSent
ŒŒ 0
(
ŒŒ0 1.
 FHsmsControlMessageSentEventArgs
œœ ,
fArgs
œœ- 2
)
–– 
{
—— 	
StringBuilder
““ 
logData
““ !
=
““" #
new
““$ '
StringBuilder
““( 5
(
““5 6
)
““6 7
;
““7 8
try
‘‘ 
{
’’ 
logData
÷÷ 
.
÷÷ 

AppendLine
÷÷ "
(
÷÷" #
$str
÷÷# &
+
÷÷' (
DateTime
÷÷) 1
.
÷÷1 2
Now
÷÷2 5
.
÷÷5 6
ToString
÷÷6 >
(
÷÷> ?
$str
÷÷? X
)
÷÷X Y
+
÷÷Z [
$str
÷÷\ _
)
÷÷_ `
;
÷÷` a
logData
⁄⁄ 
.
⁄⁄ 
Append
⁄⁄ 
(
⁄⁄ 
fArgs
⁄⁄ $
.
⁄⁄$ %
fEventId
⁄⁄% -
.
⁄⁄- .
ToString
⁄⁄. 6
(
⁄⁄6 7
)
⁄⁄7 8
)
⁄⁄8 9
;
⁄⁄9 :
logData
€€ 
.
€€ 
Append
€€ 
(
€€ 
$str
€€ +
+
€€, -
fArgs
€€. 3
.
€€3 4
fResult
€€4 ;
.
€€; <
ToString
€€< D
(
€€D E
)
€€E F
+
€€G H
$str
€€I L
)
€€L M
;
€€M N
if
‹‹ 
(
‹‹ 
fArgs
‹‹ 
.
‹‹ 
fResult
‹‹ !
!=
‹‹" $
FResultCode
‹‹% 0
.
‹‹0 1
Success
‹‹1 8
)
‹‹8 9
{
›› 
logData
ﬁﬁ 
.
ﬁﬁ 
Append
ﬁﬁ "
(
ﬁﬁ" #
$str
ﬁﬁ# 5
+
ﬁﬁ6 7
fArgs
ﬁﬁ8 =
.
ﬁﬁ= >
errorMessage
ﬁﬁ> J
+
ﬁﬁK L
$str
ﬁﬁM P
)
ﬁﬁP Q
;
ﬁﬁQ R
}
ﬂﬂ 
logData
‡‡ 
.
‡‡ 

AppendLine
‡‡ "
(
‡‡" #
)
‡‡# $
;
‡‡$ %
logData
‰‰ 
.
‰‰ 
Append
‰‰ 
(
‰‰ 
fArgs
‰‰ $
.
‰‰$ %!
fSecsControlMessage
‰‰% 8
.
‰‰8 9
fType
‰‰9 >
.
‰‰> ?
ToString
‰‰? G
(
‰‰G H
)
‰‰H I
)
‰‰I J
;
‰‰J K
logData
ÂÂ 
.
ÂÂ 
Append
ÂÂ 
(
ÂÂ 
$str
ÂÂ *
+
ÂÂ+ ,
fArgs
ÂÂ- 2
.
ÂÂ2 3!
fSecsControlMessage
ÂÂ3 F
.
ÂÂF G
byte2
ÂÂG L
.
ÂÂL M
ToString
ÂÂM U
(
ÂÂU V
)
ÂÂV W
+
ÂÂX Y
$str
ÂÂZ f
+
ÂÂg h
fArgs
ÂÂi n
.
ÂÂn o"
fSecsControlMessageÂÂo Ç
.ÂÂÇ É
byte3ÂÂÉ à
.ÂÂà â
ToStringÂÂâ ë
(ÂÂë í
)ÂÂí ì
+ÂÂî ï
$strÂÂñ ¢
+ÂÂ£ §
fArgsÂÂ• ™
.ÂÂ™ ´#
fSecsControlMessageÂÂ´ æ
.ÂÂæ ø
ptypeÂÂø ƒ
.ÂÂƒ ≈
ToStringÂÂ≈ Õ
(ÂÂÕ Œ
)ÂÂŒ œ
+ÂÂ– —
$strÂÂ“ ﬁ
+ÂÂﬂ ‡
fArgsÂÂ· Ê
.ÂÂÊ Á#
fSecsControlMessageÂÂÁ ˙
.ÂÂ˙ ˚
stypeÂÂ˚ Ä
.ÂÂÄ Å
ToStringÂÂÅ â
(ÂÂâ ä
)ÂÂä ã
+ÂÂå ç
$strÂÂé †
+ÂÂ° ¢
fArgsÂÂ£ ®
.ÂÂ® ©#
fSecsControlMessageÂÂ© º
.ÂÂº Ω
systemBytesÂÂΩ »
.ÂÂ» …
ToStringÂÂ… —
(ÂÂ— “
)ÂÂ“ ”
+ÂÂ‘ ’
$strÂÂ÷ Ÿ
)ÂÂŸ ⁄
;ÂÂ⁄ €
logData
ÊÊ 
.
ÊÊ 
Append
ÊÊ 
(
ÊÊ 
$str
ÊÊ +
+
ÊÊ, -
fArgs
ÊÊ. 3
.
ÊÊ3 4!
fSecsControlMessage
ÊÊ4 G
.
ÊÊG H
length
ÊÊH N
.
ÊÊN O
ToString
ÊÊO W
(
ÊÊW X
)
ÊÊX Y
+
ÊÊZ [
$str
ÊÊ[ k
+
ÊÊl m
fArgs
ÊÊn s
.
ÊÊs t"
fSecsControlMessageÊÊt á
.ÊÊá à
	sessionIdÊÊà ë
.ÊÊë í
ToStringÊÊí ö
(ÊÊö õ
)ÊÊõ ú
+ÊÊù û
$strÊÊü ¢
)ÊÊ¢ £
;ÊÊ£ §
if
ÁÁ 
(
ÁÁ 
fArgs
ÁÁ 
.
ÁÁ !
fSecsControlMessage
ÁÁ -
.
ÁÁ- .
reason
ÁÁ. 4
!=
ÁÁ5 7
string
ÁÁ8 >
.
ÁÁ> ?
Empty
ÁÁ? D
)
ÁÁD E
{
ËË 
logData
ÈÈ 
.
ÈÈ 
Append
ÈÈ "
(
ÈÈ" #
$str
ÈÈ# /
+
ÈÈ0 1
fArgs
ÈÈ2 7
.
ÈÈ7 8!
fSecsControlMessage
ÈÈ8 K
.
ÈÈK L
reason
ÈÈL R
+
ÈÈS T
$str
ÈÈU X
)
ÈÈX Y
;
ÈÈY Z
}
ÍÍ 
logData
ÎÎ 
.
ÎÎ 

AppendLine
ÎÎ "
(
ÎÎ" #
)
ÎÎ# $
;
ÎÎ$ %
foreach
ÔÔ 
(
ÔÔ 
string
ÔÔ 
s
ÔÔ  !
in
ÔÔ" $
binToString
ÔÔ% 0
(
ÔÔ0 1
fArgs
ÔÔ1 6
.
ÔÔ6 7!
fSecsControlMessage
ÔÔ7 J
.
ÔÔJ K
getBinaryData
ÔÔK X
(
ÔÔX Y
)
ÔÔY Z
)
ÔÔZ [
)
ÔÔ[ \
{
 
logData
ÒÒ 
.
ÒÒ 

AppendLine
ÒÒ &
(
ÒÒ& '
s
ÒÒ' (
)
ÒÒ( )
;
ÒÒ) *
}
ÚÚ 
logData
ˆˆ 
.
ˆˆ 

AppendLine
ˆˆ "
(
ˆˆ" #
)
ˆˆ# $
;
ˆˆ$ %
m_fLogQueue
˜˜ 
.
˜˜ 
enqueue
˜˜ #
(
˜˜# $
logData
˜˜$ +
.
˜˜+ ,
ToString
˜˜, 4
(
˜˜4 5
)
˜˜5 6
)
˜˜6 7
;
˜˜7 8
}
¯¯ 
catch
˘˘ 
(
˘˘ 
	Exception
˘˘ 
ex
˘˘ 
)
˘˘  
{
˙˙ 
FDebug
˚˚ 
.
˚˚ 
throwException
˚˚ %
(
˚˚% &
ex
˚˚& (
)
˚˚( )
;
˚˚) *
}
¸¸ 
finally
˝˝ 
{
˛˛ 
logData
ˇˇ 
=
ˇˇ 
null
ˇˇ 
;
ˇˇ 
}
ÄÄ 
}
ÅÅ 	
private
ÖÖ 
void
ÖÖ *
writeHsmsDataMessageReceived
ÖÖ 1
(
ÖÖ1 2/
!FHsmsDataMessageReceivedEventArgs
ÜÜ -
fArgs
ÜÜ. 3
)
áá 
{
àà 	
StringBuilder
ââ 
logData
ââ !
=
ââ" #
new
ââ$ '
StringBuilder
ââ( 5
(
ââ5 6
)
ââ6 7
;
ââ7 8
try
ãã 
{
åå 
logData
çç 
.
çç 

AppendLine
çç "
(
çç" #
$str
çç# &
+
çç' (
DateTime
çç) 1
.
çç1 2
Now
çç2 5
.
çç5 6
ToString
çç6 >
(
çç> ?
$str
çç? X
)
ççX Y
+
ççZ [
$str
çç\ _
)
çç_ `
;
çç` a
logData
ëë 
.
ëë 
Append
ëë 
(
ëë 
fArgs
ëë $
.
ëë$ %
fEventId
ëë% -
.
ëë- .
ToString
ëë. 6
(
ëë6 7
)
ëë7 8
)
ëë8 9
;
ëë9 :
logData
íí 
.
íí 
Append
íí 
(
íí 
$str
íí +
+
íí, -
fArgs
íí. 3
.
íí3 4
fResult
íí4 ;
.
íí; <
ToString
íí< D
(
ííD E
)
ííE F
+
ííG H
$str
ííI L
)
ííL M
;
ííM N
if
ìì 
(
ìì 
fArgs
ìì 
.
ìì 
fResult
ìì !
!=
ìì" $
FResultCode
ìì% 0
.
ìì0 1
Success
ìì1 8
)
ìì8 9
{
îî 
logData
ïï 
.
ïï 
Append
ïï "
(
ïï" #
$str
ïï# 5
+
ïï6 7
fArgs
ïï8 =
.
ïï= >
errorMessage
ïï> J
+
ïïK L
$str
ïïM P
)
ïïP Q
;
ïïQ R
}
ññ 
logData
óó 
.
óó 

AppendLine
óó "
(
óó" #
)
óó# $
;
óó$ %
logData
õõ 
.
õõ 
Append
õõ 
(
õõ 
$str
õõ "
+
õõ# $
fArgs
õõ% *
.
õõ* +
fSecsDataMessage
õõ+ ;
.
õõ; <
stream
õõ< B
.
õõB C
ToString
õõC K
(
õõK L
)
õõL M
+
õõN O
$str
õõP S
+
õõT U
fArgs
õõV [
.
õõ[ \
fSecsDataMessage
õõ\ l
.
õõl m
function
õõm u
.
õõu v
ToString
õõv ~
(
õõ~ 
)õõ Ä
)õõÄ Å
;õõÅ Ç
if
úú 
(
úú 
fArgs
úú 
.
úú 
fSecsDataMessage
úú *
.
úú* +
wbit
úú+ /
)
úú/ 0
{
ùù 
logData
ûû 
.
ûû 
Append
ûû "
(
ûû" #
$str
ûû# '
)
ûû' (
;
ûû( )
}
üü 
logData
†† 
.
†† 
Append
†† 
(
†† 
$str
†† 0
+
††1 2
fArgs
††3 8
.
††8 9
fSecsDataMessage
††9 I
.
††I J
systemBytes
††J U
.
††U V
ToString
††V ^
(
††^ _
)
††_ `
+
††a b
$str
††c p
+
††q r
fArgs
††s x
.
††x y
fSecsDataMessage††y â
.††â ä
length††ä ê
.††ê ë
ToString††ë ô
(††ô ö
)††ö õ
+††ú ù
$str††û Æ
+††Ø ∞
fArgs††± ∂
.††∂ ∑ 
fSecsDataMessage††∑ «
.††« »
	sessionId††» —
.††— “
ToString††“ ⁄
(††⁄ €
)††€ ‹
+††› ﬁ
$str††ﬂ ‚
)††‚ „
;††„ ‰
logData
°° 
.
°° 

AppendLine
°° "
(
°°" #
)
°°# $
;
°°$ %
foreach
•• 
(
•• 
string
•• 
s
••  !
in
••" $
binToString
••% 0
(
••0 1
fArgs
••1 6
.
••6 7
fSecsDataMessage
••7 G
.
••G H
getHsmsBinaryData
••H Y
(
••Y Z
true
••Z ^
)
••^ _
)
••_ `
)
••` a
{
¶¶ 
logData
ßß 
.
ßß 

AppendLine
ßß &
(
ßß& '
s
ßß' (
)
ßß( )
;
ßß) *
}
®® 
logData
¨¨ 
.
¨¨ 

AppendLine
¨¨ "
(
¨¨" #
)
¨¨# $
;
¨¨$ %
m_fLogQueue
≠≠ 
.
≠≠ 
enqueue
≠≠ #
(
≠≠# $
logData
≠≠$ +
.
≠≠+ ,
ToString
≠≠, 4
(
≠≠4 5
)
≠≠5 6
)
≠≠6 7
;
≠≠7 8
}
ÆÆ 
catch
ØØ 
(
ØØ 
	Exception
ØØ 
ex
ØØ 
)
ØØ  
{
∞∞ 
FDebug
±± 
.
±± 
throwException
±± %
(
±±% &
ex
±±& (
)
±±( )
;
±±) *
}
≤≤ 
finally
≥≥ 
{
¥¥ 
logData
µµ 
=
µµ 
null
µµ 
;
µµ 
}
∂∂ 
}
∑∑ 	
private
ªª 
void
ªª &
writeHsmsDataMessageSent
ªª -
(
ªª- .+
FHsmsDataMessageSentEventArgs
ºº )
fArgs
ºº* /
)
ΩΩ 
{
ææ 	
StringBuilder
øø 
logData
øø !
=
øø" #
new
øø$ '
StringBuilder
øø( 5
(
øø5 6
)
øø6 7
;
øø7 8
try
¡¡ 
{
¬¬ 
logData
√√ 
.
√√ 

AppendLine
√√ "
(
√√" #
$str
√√# &
+
√√' (
DateTime
√√) 1
.
√√1 2
Now
√√2 5
.
√√5 6
ToString
√√6 >
(
√√> ?
$str
√√? X
)
√√X Y
+
√√Z [
$str
√√\ _
)
√√_ `
;
√√` a
logData
«« 
.
«« 
Append
«« 
(
«« 
fArgs
«« $
.
««$ %
fEventId
««% -
.
««- .
ToString
««. 6
(
««6 7
)
««7 8
)
««8 9
;
««9 :
logData
»» 
.
»» 
Append
»» 
(
»» 
$str
»» +
+
»», -
fArgs
»». 3
.
»»3 4
fResult
»»4 ;
.
»»; <
ToString
»»< D
(
»»D E
)
»»E F
+
»»G H
$str
»»I L
)
»»L M
;
»»M N
if
…… 
(
…… 
fArgs
…… 
.
…… 
fResult
…… !
!=
……" $
FResultCode
……% 0
.
……0 1
Success
……1 8
)
……8 9
{
   
logData
ÀÀ 
.
ÀÀ 
Append
ÀÀ "
(
ÀÀ" #
$str
ÀÀ# 5
+
ÀÀ6 7
fArgs
ÀÀ8 =
.
ÀÀ= >
errorMessage
ÀÀ> J
+
ÀÀK L
$str
ÀÀM P
)
ÀÀP Q
;
ÀÀQ R
}
ÃÃ 
logData
ÕÕ 
.
ÕÕ 

AppendLine
ÕÕ "
(
ÕÕ" #
)
ÕÕ# $
;
ÕÕ$ %
logData
—— 
.
—— 
Append
—— 
(
—— 
$str
—— "
+
——# $
fArgs
——% *
.
——* +
fSecsDataMessage
——+ ;
.
——; <
stream
——< B
.
——B C
ToString
——C K
(
——K L
)
——L M
+
——N O
$str
——P S
+
——T U
fArgs
——V [
.
——[ \
fSecsDataMessage
——\ l
.
——l m
function
——m u
.
——u v
ToString
——v ~
(
——~ 
)—— Ä
)——Ä Å
;——Å Ç
if
““ 
(
““ 
fArgs
““ 
.
““ 
fSecsDataMessage
““ *
.
““* +
wbit
““+ /
)
““/ 0
{
”” 
logData
‘‘ 
.
‘‘ 
Append
‘‘ "
(
‘‘" #
$str
‘‘# '
)
‘‘' (
;
‘‘( )
}
’’ 
logData
÷÷ 
.
÷÷ 
Append
÷÷ 
(
÷÷ 
$str
÷÷ 0
+
÷÷1 2
fArgs
÷÷3 8
.
÷÷8 9
fSecsDataMessage
÷÷9 I
.
÷÷I J
systemBytes
÷÷J U
.
÷÷U V
ToString
÷÷V ^
(
÷÷^ _
)
÷÷_ `
+
÷÷a b
$str
÷÷c o
+
÷÷p q
fArgs
÷÷r w
.
÷÷w x
fSecsDataMessage÷÷x à
.÷÷à â
length÷÷â è
.÷÷è ê
ToString÷÷ê ò
(÷÷ò ô
)÷÷ô ö
+÷÷õ ú
$str÷÷ù ≠
+÷÷Æ Ø
fArgs÷÷∞ µ
.÷÷µ ∂ 
fSecsDataMessage÷÷∂ ∆
.÷÷∆ «
	sessionId÷÷« –
.÷÷– —
ToString÷÷— Ÿ
(÷÷Ÿ ⁄
)÷÷⁄ €
+÷÷‹ ›
$str÷÷ﬁ ·
)÷÷· ‚
;÷÷‚ „
logData
◊◊ 
.
◊◊ 

AppendLine
◊◊ "
(
◊◊" #
)
◊◊# $
;
◊◊$ %
foreach
€€ 
(
€€ 
string
€€ 
s
€€  !
in
€€" $
binToString
€€% 0
(
€€0 1
fArgs
€€1 6
.
€€6 7
fSecsDataMessage
€€7 G
.
€€G H
getHsmsBinaryData
€€H Y
(
€€Y Z
true
€€Z ^
)
€€^ _
)
€€_ `
)
€€` a
{
‹‹ 
logData
›› 
.
›› 

AppendLine
›› &
(
››& '
s
››' (
)
››( )
;
››) *
}
ﬁﬁ 
logData
‚‚ 
.
‚‚ 

AppendLine
‚‚ "
(
‚‚" #
)
‚‚# $
;
‚‚$ %
m_fLogQueue
„„ 
.
„„ 
enqueue
„„ #
(
„„# $
logData
„„$ +
.
„„+ ,
ToString
„„, 4
(
„„4 5
)
„„5 6
)
„„6 7
;
„„7 8
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ 
ex
ÂÂ 
)
ÂÂ  
{
ÊÊ 
FDebug
ÁÁ 
.
ÁÁ 
throwException
ÁÁ %
(
ÁÁ% &
ex
ÁÁ& (
)
ÁÁ( )
;
ÁÁ) *
}
ËË 
finally
ÈÈ 
{
ÍÍ 
logData
ÎÎ 
=
ÎÎ 
null
ÎÎ 
;
ÎÎ 
}
ÏÏ 
}
ÌÌ 	
private
ÒÒ 
void
ÒÒ -
writeHsmsDataMessageReceivedSml
ÒÒ 4
(
ÒÒ4 5/
!FHsmsDataMessageReceivedEventArgs
ÚÚ -
fArgs
ÚÚ. 3
)
ÛÛ 
{
ÙÙ 	
StringBuilder
ıı 
logData
ıı !
=
ıı" #
new
ıı$ '
StringBuilder
ıı( 5
(
ıı5 6
)
ıı6 7
;
ıı7 8
try
˜˜ 
{
¯¯ 
logData
˘˘ 
.
˘˘ 

AppendLine
˘˘ "
(
˘˘" #
$str
˘˘# &
+
˘˘' (
DateTime
˘˘) 1
.
˘˘1 2
Now
˘˘2 5
.
˘˘5 6
ToString
˘˘6 >
(
˘˘> ?
$str
˘˘? X
)
˘˘X Y
+
˘˘Z [
$str
˘˘\ _
)
˘˘_ `
;
˘˘` a
logData
˝˝ 
.
˝˝ 
Append
˝˝ 
(
˝˝ 
fArgs
˝˝ $
.
˝˝$ %
fEventId
˝˝% -
.
˝˝- .
ToString
˝˝. 6
(
˝˝6 7
)
˝˝7 8
+
˝˝9 :
$str
˝˝; A
)
˝˝A B
;
˝˝B C
logData
˛˛ 
.
˛˛ 
Append
˛˛ 
(
˛˛ 
$str
˛˛ +
+
˛˛, -
fArgs
˛˛. 3
.
˛˛3 4
fResult
˛˛4 ;
.
˛˛; <
ToString
˛˛< D
(
˛˛D E
)
˛˛E F
+
˛˛G H
$str
˛˛I L
)
˛˛L M
;
˛˛M N
if
ˇˇ 
(
ˇˇ 
fArgs
ˇˇ 
.
ˇˇ 
fResult
ˇˇ !
!=
ˇˇ" $
FResultCode
ˇˇ% 0
.
ˇˇ0 1
Success
ˇˇ1 8
)
ˇˇ8 9
{
Ä	Ä	 
logData
Å	Å	 
.
Å	Å	 
Append
Å	Å	 "
(
Å	Å	" #
$str
Å	Å	# 5
+
Å	Å	6 7
fArgs
Å	Å	8 =
.
Å	Å	= >
errorMessage
Å	Å	> J
+
Å	Å	K L
$str
Å	Å	M P
)
Å	Å	P Q
;
Å	Å	Q R
}
Ç	Ç	 
logData
É	É	 
.
É	É	 

AppendLine
É	É	 "
(
É	É	" #
)
É	É	# $
;
É	É	$ %
logData
á	á	 
.
á	á	 
Append
á	á	 
(
á	á	 
$str
á	á	 "
+
á	á	# $
fArgs
á	á	% *
.
á	á	* +
fSecsDataMessage
á	á	+ ;
.
á	á	; <
stream
á	á	< B
.
á	á	B C
ToString
á	á	C K
(
á	á	K L
)
á	á	L M
+
á	á	N O
$str
á	á	P S
+
á	á	T U
fArgs
á	á	V [
.
á	á	[ \
fSecsDataMessage
á	á	\ l
.
á	á	l m
function
á	á	m u
.
á	á	u v
ToString
á	á	v ~
(
á	á	~ 
)á	á	 Ä
)á	á	Ä Å
;á	á	Å Ç
if
à	à	 
(
à	à	 
fArgs
à	à	 
.
à	à	 
fSecsDataMessage
à	à	 *
.
à	à	* +
wbit
à	à	+ /
)
à	à	/ 0
{
â	â	 
logData
ä	ä	 
.
ä	ä	 
Append
ä	ä	 "
(
ä	ä	" #
$str
ä	ä	# '
)
ä	ä	' (
;
ä	ä	( )
}
ã	ã	 
logData
å	å	 
.
å	å	 
Append
å	å	 
(
å	å	 
$str
å	å	 0
+
å	å	1 2
fArgs
å	å	3 8
.
å	å	8 9
fSecsDataMessage
å	å	9 I
.
å	å	I J
systemBytes
å	å	J U
.
å	å	U V
ToString
å	å	V ^
(
å	å	^ _
)
å	å	_ `
+
å	å	a b
$str
å	å	c p
+
å	å	q r
fArgs
å	å	s x
.
å	å	x y
fSecsDataMessageå	å	y â
.å	å	â ä
lengthå	å	ä ê
.å	å	ê ë
ToStringå	å	ë ô
(å	å	ô ö
)å	å	ö õ
+å	å	ú ù
$strå	å	û Æ
+å	å	Ø ∞
fArgså	å	± ∂
.å	å	∂ ∑ 
fSecsDataMessageå	å	∑ «
.å	å	« »
	sessionIdå	å	» —
.å	å	— “
ToStringå	å	“ ⁄
(å	å	⁄ €
)å	å	€ ‹
+å	å	› ﬁ
$strå	å	ﬂ ‚
)å	å	‚ „
;å	å	„ ‰
logData
ç	ç	 
.
ç	ç	 

AppendLine
ç	ç	 "
(
ç	ç	" #
)
ç	ç	# $
;
ç	ç	$ %
if
ë	ë	 
(
ë	ë	 
fArgs
ë	ë	 
.
ë	ë	 
fSecsDataMessage
ë	ë	 *
.
ë	ë	* +
body
ë	ë	+ /
.
ë	ë	/ 0
Length
ë	ë	0 6
>
ë	ë	7 8
$num
ë	ë	9 :
)
ë	ë	: ;
{
í	í	 
logData
ì	ì	 
.
ì	ì	 

AppendLine
ì	ì	 &
(
ì	ì	& '
FSecsConverter
ì	ì	' 5
.
ì	ì	5 6
convertBinToSml
ì	ì	6 E
(
ì	ì	E F
fArgs
ì	ì	F K
.
ì	ì	K L
fSecsDataMessage
ì	ì	L \
.
ì	ì	\ ]
body
ì	ì	] a
)
ì	ì	a b
)
ì	ì	b c
;
ì	ì	c d
}
î	î	 
logData
ò	ò	 
.
ò	ò	 

AppendLine
ò	ò	 "
(
ò	ò	" #
)
ò	ò	# $
;
ò	ò	$ %
m_fLogQueue
ô	ô	 
.
ô	ô	 
enqueue
ô	ô	 #
(
ô	ô	# $
logData
ô	ô	$ +
.
ô	ô	+ ,
ToString
ô	ô	, 4
(
ô	ô	4 5
)
ô	ô	5 6
)
ô	ô	6 7
;
ô	ô	7 8
}
ö	ö	 
catch
õ	õ	 
(
õ	õ	 
	Exception
õ	õ	 
ex
õ	õ	 
)
õ	õ	  
{
ú	ú	 
FDebug
ù	ù	 
.
ù	ù	 
throwException
ù	ù	 %
(
ù	ù	% &
ex
ù	ù	& (
)
ù	ù	( )
;
ù	ù	) *
}
û	û	 
finally
ü	ü	 
{
†	†	 
logData
°	°	 
=
°	°	 
null
°	°	 
;
°	°	 
}
¢	¢	 
}
£	£	 	
private
ß	ß	 
void
ß	ß	 )
writeHsmsDataMessageSentSml
ß	ß	 0
(
ß	ß	0 1+
FHsmsDataMessageSentEventArgs
®	®	 )
fArgs
®	®	* /
)
©	©	 
{
™	™	 	
StringBuilder
´	´	 
logData
´	´	 !
=
´	´	" #
new
´	´	$ '
StringBuilder
´	´	( 5
(
´	´	5 6
)
´	´	6 7
;
´	´	7 8
try
≠	≠	 
{
Æ	Æ	 
logData
Ø	Ø	 
.
Ø	Ø	 

AppendLine
Ø	Ø	 "
(
Ø	Ø	" #
$str
Ø	Ø	# &
+
Ø	Ø	' (
DateTime
Ø	Ø	) 1
.
Ø	Ø	1 2
Now
Ø	Ø	2 5
.
Ø	Ø	5 6
ToString
Ø	Ø	6 >
(
Ø	Ø	> ?
$str
Ø	Ø	? X
)
Ø	Ø	X Y
+
Ø	Ø	Z [
$str
Ø	Ø	\ _
)
Ø	Ø	_ `
;
Ø	Ø	` a
logData
≥	≥	 
.
≥	≥	 
Append
≥	≥	 
(
≥	≥	 
fArgs
≥	≥	 $
.
≥	≥	$ %
fEventId
≥	≥	% -
.
≥	≥	- .
ToString
≥	≥	. 6
(
≥	≥	6 7
)
≥	≥	7 8
+
≥	≥	9 :
$str
≥	≥	; A
)
≥	≥	A B
;
≥	≥	B C
logData
¥	¥	 
.
¥	¥	 
Append
¥	¥	 
(
¥	¥	 
$str
¥	¥	 +
+
¥	¥	, -
fArgs
¥	¥	. 3
.
¥	¥	3 4
fResult
¥	¥	4 ;
.
¥	¥	; <
ToString
¥	¥	< D
(
¥	¥	D E
)
¥	¥	E F
+
¥	¥	G H
$str
¥	¥	I L
)
¥	¥	L M
;
¥	¥	M N
if
µ	µ	 
(
µ	µ	 
fArgs
µ	µ	 
.
µ	µ	 
fResult
µ	µ	 !
!=
µ	µ	" $
FResultCode
µ	µ	% 0
.
µ	µ	0 1
Success
µ	µ	1 8
)
µ	µ	8 9
{
∂	∂	 
logData
∑	∑	 
.
∑	∑	 
Append
∑	∑	 "
(
∑	∑	" #
$str
∑	∑	# 5
+
∑	∑	6 7
fArgs
∑	∑	8 =
.
∑	∑	= >
errorMessage
∑	∑	> J
+
∑	∑	K L
$str
∑	∑	M P
)
∑	∑	P Q
;
∑	∑	Q R
}
∏	∏	 
logData
π	π	 
.
π	π	 

AppendLine
π	π	 "
(
π	π	" #
)
π	π	# $
;
π	π	$ %
logData
Ω	Ω	 
.
Ω	Ω	 
Append
Ω	Ω	 
(
Ω	Ω	 
$str
Ω	Ω	 "
+
Ω	Ω	# $
fArgs
Ω	Ω	% *
.
Ω	Ω	* +
fSecsDataMessage
Ω	Ω	+ ;
.
Ω	Ω	; <
stream
Ω	Ω	< B
.
Ω	Ω	B C
ToString
Ω	Ω	C K
(
Ω	Ω	K L
)
Ω	Ω	L M
+
Ω	Ω	N O
$str
Ω	Ω	P S
+
Ω	Ω	T U
fArgs
Ω	Ω	V [
.
Ω	Ω	[ \
fSecsDataMessage
Ω	Ω	\ l
.
Ω	Ω	l m
function
Ω	Ω	m u
.
Ω	Ω	u v
ToString
Ω	Ω	v ~
(
Ω	Ω	~ 
)Ω	Ω	 Ä
)Ω	Ω	Ä Å
;Ω	Ω	Å Ç
if
æ	æ	 
(
æ	æ	 
fArgs
æ	æ	 
.
æ	æ	 
fSecsDataMessage
æ	æ	 *
.
æ	æ	* +
wbit
æ	æ	+ /
)
æ	æ	/ 0
{
ø	ø	 
logData
¿	¿	 
.
¿	¿	 
Append
¿	¿	 "
(
¿	¿	" #
$str
¿	¿	# '
)
¿	¿	' (
;
¿	¿	( )
}
¡	¡	 
logData
¬	¬	 
.
¬	¬	 
Append
¬	¬	 
(
¬	¬	 
$str
¬	¬	 0
+
¬	¬	1 2
fArgs
¬	¬	3 8
.
¬	¬	8 9
fSecsDataMessage
¬	¬	9 I
.
¬	¬	I J
systemBytes
¬	¬	J U
.
¬	¬	U V
ToString
¬	¬	V ^
(
¬	¬	^ _
)
¬	¬	_ `
+
¬	¬	a b
$str
¬	¬	c p
+
¬	¬	q r
fArgs
¬	¬	s x
.
¬	¬	x y
fSecsDataMessage¬	¬	y â
.¬	¬	â ä
length¬	¬	ä ê
.¬	¬	ê ë
ToString¬	¬	ë ô
(¬	¬	ô ö
)¬	¬	ö õ
+¬	¬	ú ù
$str¬	¬	û Æ
+¬	¬	Ø ∞
fArgs¬	¬	± ∂
.¬	¬	∂ ∑ 
fSecsDataMessage¬	¬	∑ «
.¬	¬	« »
	sessionId¬	¬	» —
.¬	¬	— “
ToString¬	¬	“ ⁄
(¬	¬	⁄ €
)¬	¬	€ ‹
+¬	¬	› ﬁ
$str¬	¬	ﬂ ‚
)¬	¬	‚ „
;¬	¬	„ ‰
logData
√	√	 
.
√	√	 

AppendLine
√	√	 "
(
√	√	" #
)
√	√	# $
;
√	√	$ %
if
«	«	 
(
«	«	 
fArgs
«	«	 
.
«	«	 
fSecsDataMessage
«	«	 *
.
«	«	* +
body
«	«	+ /
.
«	«	/ 0
Length
«	«	0 6
>
«	«	7 8
$num
«	«	9 :
)
«	«	: ;
{
»	»	 
logData
…	…	 
.
…	…	 

AppendLine
…	…	 &
(
…	…	& '
FSecsConverter
…	…	' 5
.
…	…	5 6
convertBinToSml
…	…	6 E
(
…	…	E F
fArgs
…	…	F K
.
…	…	K L
fSecsDataMessage
…	…	L \
.
…	…	\ ]
body
…	…	] a
)
…	…	a b
)
…	…	b c
;
…	…	c d
}
 	 	 
logData
Œ	Œ	 
.
Œ	Œ	 

AppendLine
Œ	Œ	 "
(
Œ	Œ	" #
)
Œ	Œ	# $
;
Œ	Œ	$ %
m_fLogQueue
œ	œ	 
.
œ	œ	 
enqueue
œ	œ	 #
(
œ	œ	# $
logData
œ	œ	$ +
.
œ	œ	+ ,
ToString
œ	œ	, 4
(
œ	œ	4 5
)
œ	œ	5 6
)
œ	œ	6 7
;
œ	œ	7 8
}
–	–	 
catch
—	—	 
(
—	—	 
	Exception
—	—	 
ex
—	—	 
)
—	—	  
{
“	“	 
FDebug
”	”	 
.
”	”	 
throwException
”	”	 %
(
”	”	% &
ex
”	”	& (
)
”	”	( )
;
”	”	) *
}
‘	‘	 
finally
’	’	 
{
÷	÷	 
logData
◊	◊	 
=
◊	◊	 
null
◊	◊	 
;
◊	◊	 
}
ÿ	ÿ	 
}
Ÿ	Ÿ	 	
public
›	›	 
void
›	›	 
write
›	›	 
(
›	›	 
FEventArgsBase
ﬁ	ﬁ	 
fArgs
ﬁ	ﬁ	  
)
ﬂ	ﬂ	 
{
‡	‡	 	
try
·	·	 
{
‚	‚	 
if
„	„	 
(
„	„	 
fArgs
„	„	 
.
„	„	 
fEventId
„	„	 "
==
„	„	# %
FEventId
„	„	& .
.
„	„	. /
LogMonitoring
„	„	/ <
)
„	„	< =
{
‰	‰	 
return
Â	Â	 
;
Â	Â	 
}
Ê	Ê	 
if
Í	Í	 
(
Í	Í	 
fArgs
Í	Í	 
.
Í	Í	 
fEventId
Í	Í	 "
==
Í	Í	# %
FEventId
Í	Í	& .
.
Í	Í	. /
Secs1StateChanged
Í	Í	/ @
)
Í	Í	@ A
{
Î	Î	 $
writeSecs1StateChanged
Ï	Ï	 *
(
Ï	Ï	* +
(
Ï	Ï	+ ,)
FSecs1StateChangedEventArgs
Ï	Ï	, G
)
Ï	Ï	G H
fArgs
Ï	Ï	H M
)
Ï	Ï	M N
;
Ï	Ï	N O
}
Ì	Ì	 
else
Ó	Ó	 
if
Ó	Ó	 
(
Ó	Ó	 
fArgs
Ó	Ó	 
.
Ó	Ó	 
fEventId
Ó	Ó	 '
==
Ó	Ó	( *
FEventId
Ó	Ó	+ 3
.
Ó	Ó	3 4
Secs1ErrorRaised
Ó	Ó	4 D
)
Ó	Ó	D E
{
Ô	Ô	 #
writeSecs1ErrorRaised
		 )
(
		) *
(
		* +(
FSecs1ErrorRaisedEventArgs
		+ E
)
		E F
fArgs
		F K
)
		K L
;
		L M
}
Ò	Ò	 
else
Ú	Ú	 
if
Ú	Ú	 
(
Ú	Ú	 
fArgs
Ú	Ú	 
.
Ú	Ú	 
fEventId
Ú	Ú	 '
==
Ú	Ú	( *
FEventId
Ú	Ú	+ 3
.
Ú	Ú	3 4 
Secs1TimeoutRaised
Ú	Ú	4 F
)
Ú	Ú	F G
{
Û	Û	 %
writeSecs1TimeoutRaised
Ù	Ù	 +
(
Ù	Ù	+ ,
(
Ù	Ù	, -*
FSecs1TimeoutRaisedEventArgs
Ù	Ù	- I
)
Ù	Ù	I J
fArgs
Ù	Ù	J O
)
Ù	Ù	O P
;
Ù	Ù	P Q
}
ı	ı	 
else
ˆ	ˆ	 
if
ˆ	ˆ	 
(
ˆ	ˆ	 
fArgs
ˆ	ˆ	 
.
ˆ	ˆ	 
fEventId
ˆ	ˆ	 '
==
ˆ	ˆ	( *
FEventId
ˆ	ˆ	+ 3
.
ˆ	ˆ	3 4$
Secs1HandshakeReceived
ˆ	ˆ	4 J
)
ˆ	ˆ	J K
{
˜	˜	 )
writeSecs1HandshakeReceived
¯	¯	 /
(
¯	¯	/ 0
(
¯	¯	0 1.
 FSecs1HandshakeReceivedEventArgs
¯	¯	1 Q
)
¯	¯	Q R
fArgs
¯	¯	R W
)
¯	¯	W X
;
¯	¯	X Y
}
˘	˘	 
else
˙	˙	 
if
˙	˙	 
(
˙	˙	 
fArgs
˙	˙	 
.
˙	˙	 
fEventId
˙	˙	 '
==
˙	˙	( *
FEventId
˙	˙	+ 3
.
˙	˙	3 4 
Secs1HandshakeSent
˙	˙	4 F
)
˙	˙	F G
{
˚	˚	 %
writeSecs1HandshakeSent
¸	¸	 +
(
¸	¸	+ ,
(
¸	¸	, -*
FSecs1HandshakeSentEventArgs
¸	¸	- I
)
¸	¸	I J
fArgs
¸	¸	J O
)
¸	¸	O P
;
¸	¸	P Q
}
˝	˝	 
else
˛	˛	 
if
˛	˛	 
(
˛	˛	 
fArgs
˛	˛	 
.
˛	˛	 
fEventId
˛	˛	 '
==
˛	˛	( *
FEventId
˛	˛	+ 3
.
˛	˛	3 4 
Secs1BlockReceived
˛	˛	4 F
)
˛	˛	F G
{
ˇ	ˇ	 %
writeSecs1BlockReceived
Ä
Ä
 +
(
Ä
Ä
+ ,
(
Ä
Ä
, -*
FSecs1BlockReceivedEventArgs
Ä
Ä
- I
)
Ä
Ä
I J
fArgs
Ä
Ä
J O
)
Ä
Ä
O P
;
Ä
Ä
P Q
}
Å
Å
 
else
Ç
Ç
 
if
Ç
Ç
 
(
Ç
Ç
 
fArgs
Ç
Ç
 
.
Ç
Ç
 
fEventId
Ç
Ç
 '
==
Ç
Ç
( *
FEventId
Ç
Ç
+ 3
.
Ç
Ç
3 4
Secs1BlockSent
Ç
Ç
4 B
)
Ç
Ç
B C
{
É
É
 !
writeSecs1BlockSent
Ñ
Ñ
 '
(
Ñ
Ñ
' (
(
Ñ
Ñ
( )&
FSecs1BlockSentEventArgs
Ñ
Ñ
) A
)
Ñ
Ñ
A B
fArgs
Ñ
Ñ
B G
)
Ñ
Ñ
G H
;
Ñ
Ñ
H I
}
Ö
Ö
 
else
Ü
Ü
 
if
Ü
Ü
 
(
Ü
Ü
 
fArgs
Ü
Ü
 
.
Ü
Ü
 
fEventId
Ü
Ü
 '
==
Ü
Ü
( *
FEventId
Ü
Ü
+ 3
.
Ü
Ü
3 4&
Secs1DataMessageReceived
Ü
Ü
4 L
)
Ü
Ü
L M
{
á
á
 .
 writeSecs1DataMessageReceivedSml
à
à
 4
(
à
à
4 5
(
à
à
5 60
"FSecs1DataMessageReceivedEventArgs
à
à
6 X
)
à
à
X Y
fArgs
à
à
Y ^
)
à
à
^ _
;
à
à
_ `
}
â
â
 
else
ä
ä
 
if
ä
ä
 
(
ä
ä
 
fArgs
ä
ä
 
.
ä
ä
 
fEventId
ä
ä
 '
==
ä
ä
( *
FEventId
ä
ä
+ 3
.
ä
ä
3 4"
Secs1DataMessageSent
ä
ä
4 H
)
ä
ä
H I
{
ã
ã
 *
writeSecs1DataMessageSentSml
å
å
 0
(
å
å
0 1
(
å
å
1 2,
FSecs1DataMessageSentEventArgs
å
å
2 P
)
å
å
P Q
fArgs
å
å
Q V
)
å
å
V W
;
å
å
W X
}
ç
ç
 
else
è
è
 
if
è
è
 
(
è
è
 
fArgs
è
è
 
.
è
è
 
fEventId
è
è
 '
==
è
è
( *
FEventId
è
è
+ 3
.
è
è
3 4
HsmsStateChanged
è
è
4 D
)
è
è
D E
{
ê
ê
 #
writeHsmsStateChanged
ë
ë
 )
(
ë
ë
) *
(
ë
ë
* +(
FHsmsStateChangedEventArgs
ë
ë
+ E
)
ë
ë
E F
fArgs
ë
ë
F K
)
ë
ë
K L
;
ë
ë
L M
}
í
í
 
else
ì
ì
 
if
ì
ì
 
(
ì
ì
 
fArgs
ì
ì
 
.
ì
ì
 
fEventId
ì
ì
 '
==
ì
ì
( *
FEventId
ì
ì
+ 3
.
ì
ì
3 4
HsmsErrorRaised
ì
ì
4 C
)
ì
ì
C D
{
î
î
 "
writeHsmsErrorRaised
ï
ï
 (
(
ï
ï
( )
(
ï
ï
) *'
FHsmsErrorRaisedEventArgs
ï
ï
* C
)
ï
ï
C D
fArgs
ï
ï
D I
)
ï
ï
I J
;
ï
ï
J K
}
ñ
ñ
 
else
ó
ó
 
if
ó
ó
 
(
ó
ó
 
fArgs
ó
ó
 
.
ó
ó
 
fEventId
ó
ó
 '
==
ó
ó
( *
FEventId
ó
ó
+ 3
.
ó
ó
3 4
HsmsTimeoutRaised
ó
ó
4 E
)
ó
ó
E F
{
ò
ò
 $
writeHsmsTimeoutRaised
ô
ô
 *
(
ô
ô
* +
(
ô
ô
+ ,)
FHsmsTimeoutRaisedEventArgs
ô
ô
, G
)
ô
ô
G H
fArgs
ô
ô
H M
)
ô
ô
M N
;
ô
ô
N O
}
ö
ö
 
else
õ
õ
 
if
õ
õ
 
(
õ
õ
 
fArgs
õ
õ
 
.
õ
õ
 
fEventId
õ
õ
 '
==
õ
õ
( *
FEventId
õ
õ
+ 3
.
õ
õ
3 4(
HsmsControlMessageReceived
õ
õ
4 N
)
õ
õ
N O
{
ú
ú
 -
writeHsmsControlMessageReceived
ù
ù
 3
(
ù
ù
3 4
(
ù
ù
4 52
$FHsmsControlMessageReceivedEventArgs
ù
ù
5 Y
)
ù
ù
Y Z
fArgs
ù
ù
Z _
)
ù
ù
_ `
;
ù
ù
` a
}
û
û
 
else
ü
ü
 
if
ü
ü
 
(
ü
ü
 
fArgs
ü
ü
 
.
ü
ü
 
fEventId
ü
ü
 '
==
ü
ü
( *
FEventId
ü
ü
+ 3
.
ü
ü
3 4$
HsmsControlMessageSent
ü
ü
4 J
)
ü
ü
J K
{
†
†
 )
writeHsmsControlMessageSent
°
°
 /
(
°
°
/ 0
(
°
°
0 1.
 FHsmsControlMessageSentEventArgs
°
°
1 Q
)
°
°
Q R
fArgs
°
°
R W
)
°
°
W X
;
°
°
X Y
}
¢
¢
 
else
£
£
 
if
£
£
 
(
£
£
 
fArgs
£
£
 
.
£
£
 
fEventId
£
£
 '
==
£
£
( *
FEventId
£
£
+ 3
.
£
£
3 4%
HsmsDataMessageReceived
£
£
4 K
)
£
£
K L
{
§
§
 *
writeHsmsDataMessageReceived
•
•
 0
(
•
•
0 1
(
•
•
1 2/
!FHsmsDataMessageReceivedEventArgs
•
•
2 S
)
•
•
S T
fArgs
•
•
T Y
)
•
•
Y Z
;
•
•
Z [-
writeHsmsDataMessageReceivedSml
¶
¶
 3
(
¶
¶
3 4
(
¶
¶
4 5/
!FHsmsDataMessageReceivedEventArgs
¶
¶
5 V
)
¶
¶
V W
fArgs
¶
¶
W \
)
¶
¶
\ ]
;
¶
¶
] ^
}
ß
ß
 
else
®
®
 
if
®
®
 
(
®
®
 
fArgs
®
®
 
.
®
®
 
fEventId
®
®
 '
==
®
®
( *
FEventId
®
®
+ 3
.
®
®
3 4!
HsmsDataMessageSent
®
®
4 G
)
®
®
G H
{
©
©
 &
writeHsmsDataMessageSent
™
™
 ,
(
™
™
, -
(
™
™
- .+
FHsmsDataMessageSentEventArgs
™
™
. K
)
™
™
K L
fArgs
™
™
L Q
)
™
™
Q R
;
™
™
R S)
writeHsmsDataMessageSentSml
´
´
 /
(
´
´
/ 0
(
´
´
0 1+
FHsmsDataMessageSentEventArgs
´
´
1 N
)
´
´
N O
fArgs
´
´
O T
)
´
´
T U
;
´
´
U V
}
¨
¨
 
}
≠
≠
 
catch
Æ
Æ
 
(
Æ
Æ
 
	Exception
Æ
Æ
 
ex
Æ
Æ
 
)
Æ
Æ
  
{
Ø
Ø
 
FDebug
∞
∞
 
.
∞
∞
 
writeLog
∞
∞
 
(
∞
∞
  
ex
∞
∞
  "
)
∞
∞
" #
;
∞
∞
# $
}
±
±
 
finally
≤
≤
 
{
≥
≥
 
}
µ
µ
 
}
∂
∂
 	
public
∫
∫
 
void
∫
∫
 
write
∫
∫
 
(
∫
∫
 
string
ª
ª
 
log
ª
ª
 
)
º
º
 
{
Ω
Ω
 	
StringBuilder
æ
æ
 
logData
æ
æ
 !
=
æ
æ
" #
new
æ
æ
$ '
StringBuilder
æ
æ
( 5
(
æ
æ
5 6
)
æ
æ
6 7
;
æ
æ
7 8
try
¿
¿
 
{
¡
¡
 
logData
¬
¬
 
.
¬
¬
 

AppendLine
¬
¬
 "
(
¬
¬
" #
$str
¬
¬
# &
+
¬
¬
' (
DateTime
¬
¬
) 1
.
¬
¬
1 2
Now
¬
¬
2 5
.
¬
¬
5 6
ToString
¬
¬
6 >
(
¬
¬
> ?
$str
¬
¬
? X
)
¬
¬
X Y
+
¬
¬
Z [
$str
¬
¬
\ _
)
¬
¬
_ `
;
¬
¬
` a
logData
√
√
 
.
√
√
 
Append
√
√
 
(
√
√
 
log
√
√
 "
)
√
√
" #
;
√
√
# $
m_fLogQueue
ƒ
ƒ
 
.
ƒ
ƒ
 
enqueue
ƒ
ƒ
 #
(
ƒ
ƒ
# $
logData
ƒ
ƒ
$ +
.
ƒ
ƒ
+ ,
ToString
ƒ
ƒ
, 4
(
ƒ
ƒ
4 5
)
ƒ
ƒ
5 6
)
ƒ
ƒ
6 7
;
ƒ
ƒ
7 8
}
≈
≈
 
catch
∆
∆
 
(
∆
∆
 
	Exception
∆
∆
 
ex
∆
∆
 
)
∆
∆
  
{
«
«
 
FDebug
»
»
 
.
»
»
 
throwException
»
»
 %
(
»
»
% &
ex
»
»
& (
)
»
»
( )
;
»
»
) *
}
…
…
 
finally
 
 
 
{
À
À
 
logData
Ã
Ã
 
=
Ã
Ã
 
null
Ã
Ã
 
;
Ã
Ã
 
}
Õ
Õ
 
}
Œ
Œ
 	
private
÷
÷
 
void
÷
÷
 (
m_fThdMain_ThreadJobCalled
÷
÷
 /
(
÷
÷
/ 0
object
◊
◊
 
sender
◊
◊
 
,
◊
◊
 
FThreadEventArgs
ÿ
ÿ
 
e
ÿ
ÿ
 
)
Ÿ
Ÿ
 
{
⁄
⁄
 	
try
€
€
 
{
‹
‹
 
if
›
›
 
(
›
›
 
m_fLogQueue
›
›
 
.
›
›
  
count
›
›
  %
==
›
›
& (
$num
›
›
) *
)
›
›
* +
{
ﬁ
ﬁ
 
e
ﬂ
ﬂ
 
.
ﬂ
ﬂ
 
sleepThread
ﬂ
ﬂ
 !
(
ﬂ
ﬂ
! "
$num
ﬂ
ﬂ
" #
)
ﬂ
ﬂ
# $
;
ﬂ
ﬂ
$ %
return
‡
‡
 
;
‡
‡
 
}
·
·
 
writeLog
‚
‚
 
(
‚
‚
 
)
‚
‚
 
;
‚
‚
 
}
„
„
 
catch
‰
‰
 
(
‰
‰
 
	Exception
‰
‰
 
ex
‰
‰
 
)
‰
‰
  
{
Â
Â
 
FDebug
Ê
Ê
 
.
Ê
Ê
 
writeLog
Ê
Ê
 
(
Ê
Ê
  
ex
Ê
Ê
  "
)
Ê
Ê
" #
;
Ê
Ê
# $
e
Á
Á
 
.
Á
Á
 
sleepThread
Á
Á
 
(
Á
Á
 
$num
Á
Á
 
)
Á
Á
  
;
Á
Á
  !
}
Ë
Ë
 
finally
È
È
 
{
Í
Í
 
}
Ï
Ï
 
}
Ì
Ì
 	
}
Û
Û
 
}Ù
Ù
 ß8
åD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\HSMS\c_FHsmsControlMessageTransaction.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class *
FHsmsControlMessageTransaction 1
:2 3
IDisposable4 ?
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
FStaticTimer 
m_fTimer %
=& '
null( ,
;, -
private 
UInt16 
m_sessionId "
=# $
$num% &
;& '
private 
UInt32 
m_systemBytes $
=% &
$num' (
;( )
public%% *
FHsmsControlMessageTransaction%% -
(%%- .
FSecs1ToHsms&& 
fSecs1ToHsms&& %
)'' 
{(( 	
m_fSecs1ToHsms)) 
=)) 
fSecs1ToHsms)) )
;))) *
m_fTimer** 
=** 
new** 
FStaticTimer** '
(**' (
)**( )
;**) *
}++ 	
~// 	*
FHsmsControlMessageTransaction//	 '
(//' (
)00 
{11 	
	myDispose22 
(22 
false22 
)22 
;22 
}33 	
	protected77 
void77 
	myDispose77  
(77  !
bool88 
	disposing88 
)99 
{:: 	
if;; 
(;; 
!;; 

m_disposed;; 
);; 
{<< 
if== 
(== 
	disposing== 
)== 
{>> 
if?? 
(?? 
m_fTimer??  
!=??! #
null??$ (
)??( )
{@@ 
m_fTimerAA  
.AA  !
DisposeAA! (
(AA( )
)AA) *
;AA* +
m_fTimerBB  
=BB! "
nullBB# '
;BB' (
}CC 
m_fSecs1ToHsmsDD "
=DD# $
nullDD% )
;DD) *
}EE 

m_disposedFF 
=FF 
trueFF !
;FF! "
}GG 
}HH 	
publicPP 
voidPP 
DisposePP 
(PP 
)QQ 
{RR 	
	myDisposeSS 
(SS 
trueSS 
)SS 
;SS 
GCTT 
.TT 
SuppressFinalizeTT 
(TT  
thisTT  $
)TT$ %
;TT% &
}UU 	
public]] 
bool]] 
enabled]] 
{^^ 	
get__ 
{`` 
tryaa 
{bb 
returncc 
m_fTimercc #
.cc# $
enabledcc$ +
;cc+ ,
}dd 
catchee 
(ee 
	Exceptionee  
exee! #
)ee# $
{ff 
FDebuggg 
.gg 
throwExceptiongg )
(gg) *
exgg* ,
)gg, -
;gg- .
}hh 
finallyii 
{jj 
}ll 
returnmm 
falsemm 
;mm 
}nn 
}oo 	
publicss 
UInt16ss 
	sessionIdss 
{tt 	
getuu 
{vv 
tryww 
{xx 
returnyy 
m_sessionIdyy &
;yy& '
}zz 
catch{{ 
({{ 
	Exception{{  
ex{{! #
){{# $
{|| 
FDebug}} 
.}} 
throwException}} )
(}}) *
ex}}* ,
)}}, -
;}}- .
}~~ 
finally 
{
ÄÄ 
}
ÇÇ 
return
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
public
ââ 
UInt32
ââ 
systemBytes
ââ !
{
ää 	
get
ãã 
{
åå 
try
çç 
{
éé 
return
èè 
m_systemBytes
èè (
;
èè( )
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë  
ex
ëë! #
)
ëë# $
{
íí 
FDebug
ìì 
.
ìì 
throwException
ìì )
(
ìì) *
ex
ìì* ,
)
ìì, -
;
ìì- .
}
îî 
finally
ïï 
{
ññ 
}
òò 
return
ôô 
$num
ôô 
;
ôô 
}
öö 
}
õõ 	
public
££ 
void
££ 
set
££ 
(
££ 
UInt16
§§ 
	sessionId
§§ 
,
§§ 
UInt32
•• 
systemBytes
•• 
)
¶¶ 
{
ßß 	
try
®® 
{
©© 
m_fTimer
™™ 
.
™™ 
start
™™ 
(
™™ 
m_fSecs1ToHsms
™™ -
.
™™- .
fHsmsConfig
™™. 9
.
™™9 :
	t6Timeout
™™: C
*
™™D E
$num
™™F J
)
™™J K
;
™™K L
m_sessionId
´´ 
=
´´ 
	sessionId
´´ '
;
´´' (
m_systemBytes
¨¨ 
=
¨¨ 
systemBytes
¨¨  +
;
¨¨+ ,
}
≠≠ 
catch
ÆÆ 
(
ÆÆ 
	Exception
ÆÆ 
ex
ÆÆ 
)
ÆÆ  
{
ØØ 
FDebug
∞∞ 
.
∞∞ 
throwException
∞∞ %
(
∞∞% &
ex
∞∞& (
)
∞∞( )
;
∞∞) *
}
±± 
finally
≤≤ 
{
≥≥ 
}
µµ 
}
∂∂ 	
public
∫∫ 
void
∫∫ 
reset
∫∫ 
(
∫∫ 
)
ªª 
{
ºº 	
try
ΩΩ 
{
ææ 
m_fTimer
øø 
.
øø 
stop
øø 
(
øø 
)
øø 
;
øø  
m_systemBytes
¿¿ 
=
¿¿ 
$num
¿¿  !
;
¿¿! "
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
ex
¬¬ 
)
¬¬  
{
√√ 
FDebug
ƒƒ 
.
ƒƒ 
throwException
ƒƒ %
(
ƒƒ% &
ex
ƒƒ& (
)
ƒƒ( )
;
ƒƒ) *
}
≈≈ 
finally
∆∆ 
{
«« 
}
…… 
}
   	
public
ŒŒ 
bool
ŒŒ 
timeout
ŒŒ 
(
ŒŒ 
)
œœ 
{
–– 	
try
—— 
{
““ 
return
”” 
m_fTimer
”” 
.
””  
elasped
””  '
(
””' (
false
””( -
)
””- .
;
””. /
}
‘‘ 
catch
’’ 
(
’’ 
	Exception
’’ 
ex
’’ 
)
’’  
{
÷÷ 
FDebug
◊◊ 
.
◊◊ 
throwException
◊◊ %
(
◊◊% &
ex
◊◊& (
)
◊◊( )
;
◊◊) *
}
ÿÿ 
finally
ŸŸ 
{
⁄⁄ 
}
‹‹ 
return
›› 
false
›› 
;
›› 
}
ﬁﬁ 	
}
‰‰ 
}ÂÂ ®µ
zD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\HSMS\c_FHsmsPassive.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FHsmsPassive 
:  !
	FBaseHsms" +
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FHsmsRecvBuffer 

m_fRecvBuf  *
=+ ,
null- 1
;1 2
private 
FTcpListener 
m_fTcpListener +
=, -
null. 2
;2 3
private 

FTcpClient 
m_fTcpClient '
=( )
null* .
;. /
private 
	FCodeLock 
m_fMainSync %
=& '
null( ,
;, -
private   
FThread   

m_fThdMain   "
=  # $
null  % )
;  ) *
private!! 
FStaticTimer!! 
m_fTmrLinktest!! +
=!!, -
null!!. 2
;!!2 3
private"" 
FStaticTimer"" 
m_fTmrT7"" %
=""& '
null""( ,
;"", -
private## 
FStaticTimer## 
m_fTmrT8## %
=##& '
null##( ,
;##, -
private$$ *
FHsmsControlMessageTransaction$$ .
m_fTranLinktestReq$$/ A
=$$B C
null$$D H
;$$H I
private&& 
FStaticTimer&& %
m_fTmrHsmsPassive2Cleanup&& 6
=&&7 8
null&&9 =
;&&= >
private'' 
List'' 
<'' 
FHsmsPassive2'' "
>''" #
m_fHsmsPassive2List''$ 7
=''8 9
null'': >
;''> ?
public-- 
FHsmsPassive-- 
(-- 
FSecs1ToHsms.. 
fSecs1ToHsms.. %
)// 
:00 
base00 
(00 
fSecs1ToHsms00 
)00  
{11 	
init22 
(22 
)22 
;22 
}33 	
~77 	
FHsmsPassive77	 
(77 
)88 
{99 	
	myDispose:: 
(:: 
false:: 
):: 
;:: 
};; 	
	protected?? 
override?? 
void?? 
	myDispose??  )
(??) *
bool@@ 
	disposing@@ 
)AA 
{BB 	
ifCC 
(CC 
!CC 

m_disposedCC 
)CC 
{DD 
ifEE 
(EE 
	disposingEE 
)EE 
{FF 
termGG 
(GG 
)GG 
;GG 
}HH 

m_disposedII 
=II 
trueII !
;II! "
baseMM 
.MM 
	myDisposeMM 
(MM 
	disposingMM (
)MM( )
;MM) *
}NN 
}OO 	
publicWW 
voidWW 
DisposeWW 
(WW 
)XX 
{YY 	
	myDisposeZZ 
(ZZ 
trueZZ 
)ZZ 
;ZZ 
GC[[ 
.[[ 
SuppressFinalize[[ 
([[  
this[[  $
)[[$ %
;[[% &
}\\ 	
privatell 
voidll 
initll 
(ll 
)mm 
{nn 	
tryoo 
{pp 
m_fTmrLinktestqq 
=qq  
newqq! $
FStaticTimerqq% 1
(qq1 2
)qq2 3
;qq3 4
m_fTmrT7rr 
=rr 
newrr 
FStaticTimerrr +
(rr+ ,
)rr, -
;rr- .
m_fTmrT8ss 
=ss 
newss 
FStaticTimerss +
(ss+ ,
)ss, -
;ss- .
m_fTranLinktestReqtt "
=tt# $
newtt% (*
FHsmsControlMessageTransactiontt) G
(ttG H
thisttH L
.ttL M
fSecs1ToHsmsttM Y
)ttY Z
;ttZ [

m_fRecvBufuu 
=uu 
newuu  
FHsmsRecvBufferuu! 0
(uu0 1
)uu1 2
;uu2 3%
m_fTmrHsmsPassive2Cleanupyy )
=yy* +
newyy, /
FStaticTimeryy0 <
(yy< =
)yy= >
;yy> ?%
m_fTmrHsmsPassive2Cleanupzz )
.zz) *
startzz* /
(zz/ 0
$numzz0 4
*zz5 6
$numzz7 9
)zz9 :
;zz: ;
m_fHsmsPassive2List|| #
=||$ %
new||& )
List||* .
<||. /
FHsmsPassive2||/ <
>||< =
(||= >
)||> ?
;||? @
m_fMainSync
ÅÅ 
=
ÅÅ 
new
ÅÅ !
	FCodeLock
ÅÅ" +
(
ÅÅ+ ,
)
ÅÅ, -
;
ÅÅ- .

m_fThdMain
ÇÇ 
=
ÇÇ 
new
ÇÇ  
FThread
ÇÇ! (
(
ÇÇ( )
$str
ÇÇ) A
)
ÇÇA B
;
ÇÇB C

m_fThdMain
ÉÉ 
.
ÉÉ 
ThreadJobCalled
ÉÉ *
+=
ÉÉ+ -
new
ÉÉ. 1*
FThreadJobCalledEventHandler
ÉÉ2 N
(
ÉÉN O(
m_fThdMain_ThreadJobCalled
ÉÉO i
)
ÉÉi j
;
ÉÉj k

m_fThdMain
ÑÑ 
.
ÑÑ 
start
ÑÑ  
(
ÑÑ  !
)
ÑÑ! "
;
ÑÑ" #
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
ex
ÜÜ 
)
ÜÜ  
{
áá 
FDebug
àà 
.
àà 
throwException
àà %
(
àà% &
ex
àà& (
)
àà( )
;
àà) *
}
ââ 
finally
ää 
{
ãã 
}
çç 
}
éé 	
private
íí 
void
íí 
term
íí 
(
íí 
)
ìì 
{
îî 	
try
ïï 
{
ññ 
if
óó 
(
óó 

m_fThdMain
óó 
!=
óó !
null
óó" &
)
óó& '
{
òò 

m_fThdMain
ôô 
.
ôô 
stop
ôô #
(
ôô# $
)
ôô$ %
;
ôô% &

m_fThdMain
öö 
.
öö 
Dispose
öö &
(
öö& '
)
öö' (
;
öö( )

m_fThdMain
õõ 
.
õõ 
ThreadJobCalled
õõ .
-=
õõ/ 1
new
õõ2 5*
FThreadJobCalledEventHandler
õõ6 R
(
õõR S(
m_fThdMain_ThreadJobCalled
õõS m
)
õõm n
;
õõn o

m_fThdMain
úú 
=
úú  
null
úú! %
;
úú% &
}
ùù 
if
üü 
(
üü 
m_fTcpListener
üü "
!=
üü# %
null
üü& *
)
üü* +
{
†† 
m_fTcpListener
°° "
.
°°" #
stop
°°# '
(
°°' (
)
°°( )
;
°°) *
m_fTcpListener
¢¢ "
.
¢¢" #
Dispose
¢¢# *
(
¢¢* +
)
¢¢+ ,
;
¢¢, -
m_fTcpListener
§§ "
.
§§" #(
TcpListenerAcceptCompleted
§§# =
-=
§§> @
new
§§A D5
'FTcpListenerAcceptCompletedEventHandler
§§E l
(
§§l m8
)m_fTcpListener_TcpListenerAcceptCompleted§§m ñ
)§§ñ ó
;§§ó ò
m_fTcpListener
•• "
.
••" #$
TcpListenerErrorRaised
••# 9
-=
••: <
new
••= @1
#FTcpListenerErrorRaisedEventHandler
••A d
(
••d e4
%m_fTcpListener_TcpListenerErrorRaised••e ä
)••ä ã
;••ã å
m_fTcpListener
ßß "
=
ßß# $
null
ßß% )
;
ßß) *
}
®® 
if
™™ 
(
™™ 
m_fTcpClient
™™  
!=
™™! #
null
™™$ (
)
™™( )
{
´´ 
m_fTcpClient
¨¨  
.
¨¨  !
close
¨¨! &
(
¨¨& '
)
¨¨' (
;
¨¨( )
m_fTcpClient
≠≠  
.
≠≠  !
Dispose
≠≠! (
(
≠≠( )
)
≠≠) *
;
≠≠* +
m_fTcpClient
ØØ  
.
ØØ  !#
TcpClientStateChanged
ØØ! 6
-=
ØØ7 9
new
ØØ: =0
"FTcpClientStateChangedEventHandler
ØØ> `
(
ØØ` a1
"m_fTcpClient_TcpClientStateChangedØØa É
)ØØÉ Ñ
;ØØÑ Ö
m_fTcpClient
∞∞  
.
∞∞  !#
TcpClientDataReceived
∞∞! 6
-=
∞∞7 9
new
∞∞: =0
"FTcpClientDataReceivedEventHandler
∞∞> `
(
∞∞` a1
"m_fTcpClient_TcpClientDataReceived∞∞a É
)∞∞É Ñ
;∞∞Ñ Ö
m_fTcpClient
±±  
.
±±  !
TcpClientDataSent
±±! 2
-=
±±3 5
new
±±6 9,
FTcpClientDataSentEventHandler
±±: X
(
±±X Y,
m_fTcpClient_TcpClientDataSent
±±Y w
)
±±w x
;
±±x y
m_fTcpClient
≤≤  
.
≤≤  !%
TcpClientDataSendFailed
≤≤! 8
-=
≤≤9 ;
new
≤≤< ?2
$FTcpClientDataSendFailedEventHandler
≤≤@ d
(
≤≤d e3
$m_fTcpClient_TcpClientDataSendFailed≤≤e â
)≤≤â ä
;≤≤ä ã
m_fTcpClient
≥≥  
.
≥≥  !"
TcpClientErrorRaised
≥≥! 5
-=
≥≥6 8
new
≥≥9 </
!FTcpClientErrorRaisedEventHandler
≥≥= ^
(
≥≥^ _0
!m_fTcpClient_TcpClientErrorRaised≥≥_ Ä
)≥≥Ä Å
;≥≥Å Ç
m_fTcpClient
µµ  
=
µµ! "
null
µµ# '
;
µµ' (
}
∂∂ "
closeAllHsmsPassvie2
∫∫ $
(
∫∫$ %
)
∫∫% &
;
∫∫& '
if
ºº 
(
ºº '
m_fTmrHsmsPassive2Cleanup
ºº -
!=
ºº. 0
null
ºº1 5
)
ºº5 6
{
ΩΩ '
m_fTmrHsmsPassive2Cleanup
ææ -
.
ææ- .
Dispose
ææ. 5
(
ææ5 6
)
ææ6 7
;
ææ7 8'
m_fTmrHsmsPassive2Cleanup
øø -
=
øø. /
null
øø0 4
;
øø4 5!
m_fHsmsPassive2List
¡¡ '
=
¡¡( )
null
¡¡* .
;
¡¡. /
}
¬¬ 
if
∆∆ 
(
∆∆ 
m_fTmrLinktest
∆∆ "
!=
∆∆# %
null
∆∆& *
)
∆∆* +
{
«« 
m_fTmrLinktest
»» "
.
»»" #
Dispose
»»# *
(
»»* +
)
»»+ ,
;
»», -
m_fTmrLinktest
…… "
=
……# $
null
……% )
;
……) *
}
   
if
ÃÃ 
(
ÃÃ 
m_fTmrT7
ÃÃ 
!=
ÃÃ 
null
ÃÃ  $
)
ÃÃ$ %
{
ÕÕ 
m_fTmrT7
ŒŒ 
.
ŒŒ 
Dispose
ŒŒ $
(
ŒŒ$ %
)
ŒŒ% &
;
ŒŒ& '
m_fTmrT7
œœ 
=
œœ 
null
œœ #
;
œœ# $
}
–– 
if
““ 
(
““ 
m_fTmrT8
““ 
!=
““ 
null
““  $
)
““$ %
{
”” 
m_fTmrT8
‘‘ 
.
‘‘ 
Dispose
‘‘ $
(
‘‘$ %
)
‘‘% &
;
‘‘& '
m_fTmrT8
’’ 
=
’’ 
null
’’ #
;
’’# $
}
÷÷ 
if
ÿÿ 
(
ÿÿ  
m_fTranLinktestReq
ÿÿ &
!=
ÿÿ' )
null
ÿÿ* .
)
ÿÿ. /
{
ŸŸ  
m_fTranLinktestReq
⁄⁄ &
.
⁄⁄& '
Dispose
⁄⁄' .
(
⁄⁄. /
)
⁄⁄/ 0
;
⁄⁄0 1 
m_fTranLinktestReq
€€ &
=
€€' (
null
€€) -
;
€€- .
}
‹‹ 
if
ﬁﬁ 
(
ﬁﬁ 

m_fRecvBuf
ﬁﬁ 
!=
ﬁﬁ !
null
ﬁﬁ" &
)
ﬁﬁ& '
{
ﬂﬂ 

m_fRecvBuf
‡‡ 
.
‡‡ 
Dispose
‡‡ &
(
‡‡& '
)
‡‡' (
;
‡‡( )

m_fRecvBuf
·· 
=
··  
null
··! %
;
··% &
}
‚‚ 
if
‰‰ 
(
‰‰ 
m_fMainSync
‰‰ 
!=
‰‰  "
null
‰‰# '
)
‰‰' (
{
ÂÂ 
m_fMainSync
ÊÊ 
.
ÊÊ  
Dispose
ÊÊ  '
(
ÊÊ' (
)
ÊÊ( )
;
ÊÊ) *
m_fMainSync
ÁÁ 
=
ÁÁ  !
null
ÁÁ" &
;
ÁÁ& '
}
ËË 
}
ÈÈ 
catch
ÍÍ 
(
ÍÍ 
	Exception
ÍÍ 
ex
ÍÍ 
)
ÍÍ  
{
ÎÎ 
FDebug
ÏÏ 
.
ÏÏ 
throwException
ÏÏ %
(
ÏÏ% &
ex
ÏÏ& (
)
ÏÏ( )
;
ÏÏ) *
}
ÌÌ 
finally
ÓÓ 
{
ÔÔ 
}
ÒÒ 
}
ÚÚ 	
public
ˆˆ 
override
ˆˆ 
void
ˆˆ 
open
ˆˆ !
(
ˆˆ! "
)
˜˜ 
{
¯¯ 	
try
˘˘ 
{
˙˙ 
m_fTcpListener
˚˚ 
=
˚˚  
new
˚˚! $
FTcpListener
˚˚% 1
(
˚˚1 2
this
˚˚2 6
.
˚˚6 7
fSecs1ToHsms
˚˚7 C
.
˚˚C D
fHsmsConfig
˚˚D O
.
˚˚O P
localIp
˚˚P W
,
˚˚W X
this
˚˚Y ]
.
˚˚] ^
fSecs1ToHsms
˚˚^ j
.
˚˚j k
fHsmsConfig
˚˚k v
.
˚˚v w
	localPort˚˚w Ä
,˚˚Ä Å
$num˚˚Ç É
)˚˚É Ñ
;˚˚Ñ Ö
m_fTcpListener
˝˝ 
.
˝˝ (
TcpListenerAcceptCompleted
˝˝ 9
+=
˝˝: <
new
˝˝= @5
'FTcpListenerAcceptCompletedEventHandler
˝˝A h
(
˝˝h i8
)m_fTcpListener_TcpListenerAcceptCompleted˝˝i í
)˝˝í ì
;˝˝ì î
m_fTcpListener
˛˛ 
.
˛˛ $
TcpListenerErrorRaised
˛˛ 5
+=
˛˛6 8
new
˛˛9 <1
#FTcpListenerErrorRaisedEventHandler
˛˛= `
(
˛˛` a4
%m_fTcpListener_TcpListenerErrorRaised˛˛a Ü
)˛˛Ü á
;˛˛á à
m_fTcpListener
ÄÄ 
.
ÄÄ 
start
ÄÄ $
(
ÄÄ$ %
)
ÄÄ% &
;
ÄÄ& '
this
ÑÑ 
.
ÑÑ 
fSecs1ToHsms
ÑÑ !
.
ÑÑ! "
changeHsmsState
ÑÑ" 1
(
ÑÑ1 2
FConnectMode
ÑÑ2 >
.
ÑÑ> ?
Passive
ÑÑ? F
,
ÑÑF G
this
ÑÑH L
.
ÑÑL M
localIp
ÑÑM T
,
ÑÑT U
this
ÑÑV Z
.
ÑÑZ [
	localPort
ÑÑ[ d
,
ÑÑd e
this
ÑÑf j
.
ÑÑj k
remoteIp
ÑÑk s
,
ÑÑs t
this
ÑÑu y
.
ÑÑy z

remotePortÑÑz Ñ
,ÑÑÑ Ö#
FCommunicationStateÑÑÜ ô
.ÑÑô ö
OpenedÑÑö †
)ÑÑ† °
;ÑÑ° ¢
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
ex
ÜÜ 
)
ÜÜ  
{
áá 
FDebug
àà 
.
àà 
throwException
àà %
(
àà% &
ex
àà& (
)
àà( )
;
àà) *
}
ââ 
finally
ää 
{
ãã 
}
çç 
}
éé 	
public
íí 
override
íí 
void
íí 
close
íí "
(
íí" #
)
ìì 
{
îî 	
try
ïï 
{
ññ 
m_fTcpListener
óó 
.
óó 
stop
óó #
(
óó# $
)
óó$ %
;
óó% &
m_fTcpListener
òò 
.
òò 
Dispose
òò &
(
òò& '
)
òò' (
;
òò( )
m_fTcpListener
öö 
.
öö (
TcpListenerAcceptCompleted
öö 9
-=
öö: <
new
öö= @5
'FTcpListenerAcceptCompletedEventHandler
ööA h
(
ööh i8
)m_fTcpListener_TcpListenerAcceptCompletedööi í
)ööí ì
;ööì î
m_fTcpListener
õõ 
.
õõ $
TcpListenerErrorRaised
õõ 5
-=
õõ6 8
new
õõ9 <1
#FTcpListenerErrorRaisedEventHandler
õõ= `
(
õõ` a4
%m_fTcpListener_TcpListenerErrorRaisedõõa Ü
)õõÜ á
;õõá à
m_fTcpListener
ùù 
=
ùù  
null
ùù! %
;
ùù% &
closeTcpClient
°° 
(
°° 
)
°°  
;
°°  !
resetResource
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢  
this
¶¶ 
.
¶¶ 
fSecs1ToHsms
¶¶ !
.
¶¶! "
changeHsmsState
¶¶" 1
(
¶¶1 2
FConnectMode
¶¶2 >
.
¶¶> ?
Passive
¶¶? F
,
¶¶F G
this
¶¶H L
.
¶¶L M
localIp
¶¶M T
,
¶¶T U
this
¶¶V Z
.
¶¶Z [
	localPort
¶¶[ d
,
¶¶d e
this
¶¶f j
.
¶¶j k
remoteIp
¶¶k s
,
¶¶s t
this
¶¶u y
.
¶¶y z

remotePort¶¶z Ñ
,¶¶Ñ Ö#
FCommunicationState¶¶Ü ô
.¶¶ô ö
Closed¶¶ö †
)¶¶† °
;¶¶° ¢
}
ßß 
catch
®® 
(
®® 
	Exception
®® 
ex
®® 
)
®®  
{
©© 
FDebug
™™ 
.
™™ 
throwException
™™ %
(
™™% &
ex
™™& (
)
™™( )
;
™™) *
}
´´ 
finally
¨¨ 
{
≠≠ 
}
ØØ 
}
∞∞ 	
public
¥¥ 
override
¥¥ 
void
¥¥ 
send
¥¥ !
(
¥¥! "
FSecsDataMessage
µµ 
fSecsDataMessage
µµ -
)
∂∂ 
{
∑∑ 	
try
∏∏ 
{
ππ 
sendDataMessage
∫∫ 
(
∫∫  
fSecsDataMessage
∫∫  0
)
∫∫0 1
;
∫∫1 2
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº 
ex
ºº 
)
ºº  
{
ΩΩ 
FDebug
ææ 
.
ææ 
throwException
ææ %
(
ææ% &
ex
ææ& (
)
ææ( )
;
ææ) *
}
øø 
finally
¿¿ 
{
¡¡ 
}
√√ 
}
ƒƒ 	
private
»» 
void
»» "
closeAllHsmsPassvie2
»» )
(
»») *
)
…… 
{
   	
try
ÀÀ 
{
ÃÃ 
foreach
ÕÕ 
(
ÕÕ 
FHsmsPassive2
ÕÕ &
hp
ÕÕ' )
in
ÕÕ* ,!
m_fHsmsPassive2List
ÕÕ- @
)
ÕÕ@ A
{
ŒŒ 
hp
œœ 
.
œœ 
Dispose
œœ 
(
œœ 
)
œœ  
;
œœ  !
}
–– !
m_fHsmsPassive2List
—— #
.
——# $
Clear
——$ )
(
——) *
)
——* +
;
——+ ,
}
““ 
catch
”” 
(
”” 
	Exception
”” 
ex
”” 
)
””  
{
‘‘ 
FDebug
’’ 
.
’’ 
throwException
’’ %
(
’’% &
ex
’’& (
)
’’( )
;
’’) *
}
÷÷ 
finally
◊◊ 
{
ÿÿ 
}
⁄⁄ 
}
€€ 	
private
ﬂﬂ 
void
ﬂﬂ !
cleanUpHsmsPassive2
ﬂﬂ (
(
ﬂﬂ( )
)
‡‡ 
{
·· 	
List
‚‚ 
<
‚‚ 
int
‚‚ 
>
‚‚ 
	indexList
‚‚ 
=
‚‚  !
null
‚‚" &
;
‚‚& '
try
‰‰ 
{
ÂÂ 
if
ÊÊ 
(
ÊÊ !
m_fHsmsPassive2List
ÊÊ '
.
ÊÊ' (
Count
ÊÊ( -
==
ÊÊ. 0
$num
ÊÊ1 2
)
ÊÊ2 3
{
ÁÁ 
return
ËË 
;
ËË 
}
ÈÈ 
	indexList
ÌÌ 
=
ÌÌ 
new
ÌÌ 
List
ÌÌ  $
<
ÌÌ$ %
int
ÌÌ% (
>
ÌÌ( )
(
ÌÌ) *
)
ÌÌ* +
;
ÌÌ+ ,
for
ÔÔ 
(
ÔÔ 
int
ÔÔ 
i
ÔÔ 
=
ÔÔ !
m_fHsmsPassive2List
ÔÔ 0
.
ÔÔ0 1
Count
ÔÔ1 6
-
ÔÔ7 8
$num
ÔÔ9 :
;
ÔÔ: ;
i
ÔÔ< =
>=
ÔÔ> @
$num
ÔÔA B
;
ÔÔB C
i
ÔÔD E
--
ÔÔE G
)
ÔÔG H
{
 
if
ÒÒ 
(
ÒÒ !
m_fHsmsPassive2List
ÒÒ +
[
ÒÒ+ ,
i
ÒÒ, -
]
ÒÒ- .
.
ÒÒ. /
fState
ÒÒ/ 5
==
ÒÒ6 8!
FCommunicationState
ÒÒ9 L
.
ÒÒL M
Closed
ÒÒM S
)
ÒÒS T
{
ÚÚ 
	indexList
ÛÛ !
.
ÛÛ! "
Add
ÛÛ" %
(
ÛÛ% &
i
ÛÛ& '
)
ÛÛ' (
;
ÛÛ( )
}
ÙÙ 
}
ıı 
foreach
˘˘ 
(
˘˘ 
int
˘˘ 
index
˘˘ "
in
˘˘# %
	indexList
˘˘& /
)
˘˘/ 0
{
˙˙ !
m_fHsmsPassive2List
˚˚ '
[
˚˚' (
index
˚˚( -
]
˚˚- .
.
˚˚. /
Dispose
˚˚/ 6
(
˚˚6 7
)
˚˚7 8
;
˚˚8 9!
m_fHsmsPassive2List
¸¸ '
.
¸¸' (
RemoveAt
¸¸( 0
(
¸¸0 1
index
¸¸1 6
)
¸¸6 7
;
¸¸7 8
}
˝˝ 
}
˛˛ 
catch
ˇˇ 
(
ˇˇ 
	Exception
ˇˇ 
ex
ˇˇ 
)
ˇˇ  
{
ÄÄ 
FDebug
ÅÅ 
.
ÅÅ 
throwException
ÅÅ %
(
ÅÅ% &
ex
ÅÅ& (
)
ÅÅ( )
;
ÅÅ) *
}
ÇÇ 
finally
ÉÉ 
{
ÑÑ 
	indexList
ÖÖ 
=
ÖÖ 
null
ÖÖ  
;
ÖÖ  !
}
ÜÜ 
}
áá 	
private
ãã 
void
ãã 
resetResource
ãã "
(
ãã" #
)
åå 
{
çç 	
try
éé 
{
èè 
m_fTmrLinktest
ìì 
.
ìì 
stop
ìì #
(
ìì# $
)
ìì$ %
;
ìì% &
m_fTmrT7
îî 
.
îî 
stop
îî 
(
îî 
)
îî 
;
îî  
m_fTmrT8
ïï 
.
ïï 
stop
ïï 
(
ïï 
)
ïï 
;
ïï   
m_fTranLinktestReq
ññ "
.
ññ" #
reset
ññ# (
(
ññ( )
)
ññ) *
;
ññ* +

m_fRecvBuf
óó 
.
óó 
clear
óó  
(
óó  !
)
óó! "
;
óó" #
}
òò 
catch
ôô 
(
ôô 
	Exception
ôô 
ex
ôô 
)
ôô  
{
öö 
FDebug
õõ 
.
õõ 
throwException
õõ %
(
õõ% &
ex
õõ& (
)
õõ( )
;
õõ) *
}
úú 
finally
ùù 
{
ûû 
}
†† 
}
°° 	
private
•• 
void
•• 
closeTcpClient
•• #
(
••# $
)
¶¶ 
{
ßß 	
try
®® 
{
©© 
if
™™ 
(
™™ 
m_fTcpClient
™™  
==
™™! #
null
™™$ (
)
™™( )
{
´´ 
return
¨¨ 
;
¨¨ 
}
≠≠ 
if
±± 
(
±± 
m_fTcpClient
±±  
.
±±  !
fState
±±! '
==
±±( *
FTcpClientState
±±+ :
.
±±: ;
	Connected
±±; D
)
±±D E
{
≤≤ 
if
≥≥ 
(
≥≥ 
this
≥≥ 
.
≥≥ 
fSecs1ToHsms
≥≥ )
.
≥≥) *

fHsmsState
≥≥* 4
==
≥≥5 7!
FCommunicationState
≥≥8 K
.
≥≥K L
Selected
≥≥L T
)
≥≥T U
{
¥¥ 
while
µµ 
(
µµ 
this
µµ #
.
µµ# $
fSecs1ToHsms
µµ$ 0
.
µµ0 1
fEventPusher
µµ1 =
.
µµ= >
hsmsEventCount
µµ> L
>
µµM N
$num
µµO P
||
µµQ S
!
µµT U
m_fTcpClient
µµU a
.
µµa b
sendCompleted
µµb o
)
µµo p
{
∂∂ 
if
∑∑ 
(
∑∑  
System
∑∑  &
.
∑∑& '
Windows
∑∑' .
.
∑∑. /
Forms
∑∑/ 4
.
∑∑4 5
Application
∑∑5 @
.
∑∑@ A
MessageLoop
∑∑A L
)
∑∑L M
{
∏∏ 
System
ππ  &
.
ππ& '
Windows
ππ' .
.
ππ. /
Forms
ππ/ 4
.
ππ4 5
Application
ππ5 @
.
ππ@ A
DoEvents
ππA I
(
ππI J
)
ππJ K
;
ππK L
}
∫∫ 
System
ªª "
.
ªª" #
	Threading
ªª# ,
.
ªª, -
Thread
ªª- 3
.
ªª3 4
Sleep
ªª4 9
(
ªª9 :
$num
ªª: ;
)
ªª; <
;
ªª< =
}
ºº 
}
ΩΩ 
sendSeparateReq
øø #
(
øø# $
)
øø$ %
;
øø% &
}
¿¿ 
m_fTcpClient
ƒƒ 
.
ƒƒ 
close
ƒƒ "
(
ƒƒ" #
)
ƒƒ# $
;
ƒƒ$ %
m_fTcpClient
≈≈ 
.
≈≈ 
Dispose
≈≈ $
(
≈≈$ %
)
≈≈% &
;
≈≈& '
m_fTcpClient
«« 
.
«« #
TcpClientStateChanged
«« 2
-=
««3 5
new
««6 90
"FTcpClientStateChangedEventHandler
««: \
(
««\ ]0
"m_fTcpClient_TcpClientStateChanged
««] 
)«« Ä
;««Ä Å
m_fTcpClient
»» 
.
»» #
TcpClientDataReceived
»» 2
-=
»»3 5
new
»»6 90
"FTcpClientDataReceivedEventHandler
»»: \
(
»»\ ]0
"m_fTcpClient_TcpClientDataReceived
»»] 
)»» Ä
;»»Ä Å
m_fTcpClient
…… 
.
…… 
TcpClientDataSent
…… .
-=
……/ 1
new
……2 5,
FTcpClientDataSentEventHandler
……6 T
(
……T U,
m_fTcpClient_TcpClientDataSent
……U s
)
……s t
;
……t u
m_fTcpClient
   
.
   %
TcpClientDataSendFailed
   4
-=
  5 7
new
  8 ;2
$FTcpClientDataSendFailedEventHandler
  < `
(
  ` a3
$m_fTcpClient_TcpClientDataSendFailed  a Ö
)  Ö Ü
;  Ü á
m_fTcpClient
ÀÀ 
.
ÀÀ "
TcpClientErrorRaised
ÀÀ 1
-=
ÀÀ2 4
new
ÀÀ5 8/
!FTcpClientErrorRaisedEventHandler
ÀÀ9 Z
(
ÀÀZ [/
!m_fTcpClient_TcpClientErrorRaised
ÀÀ[ |
)
ÀÀ| }
;
ÀÀ} ~
m_fTcpClient
ÕÕ 
=
ÕÕ 
null
ÕÕ #
;
ÕÕ# $
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ 
ex
œœ 
)
œœ  
{
–– 
FDebug
—— 
.
—— 
throwException
—— %
(
——% &
ex
——& (
)
——( )
;
——) *
}
““ 
finally
”” 
{
‘‘ 
}
÷÷ 
}
◊◊ 	
private
€€ 
void
€€ 
sendSelectRsp
€€ "
(
€€" #
UInt16
‹‹ 
	sessionId
‹‹ 
,
‹‹ 
byte
›› 
status
›› 
,
›› 
UInt32
ﬁﬁ 
systemBytes
ﬁﬁ 
)
ﬂﬂ 
{
‡‡ 	
FHsmsSendBuffer
·· 
fBuf
··  
=
··! "
null
··# '
;
··' (!
FSecsControlMessage
‚‚ !
fSecsControlMessage
‚‚  3
=
‚‚4 5
null
‚‚6 :
;
‚‚: ;
try
‰‰ 
{
ÂÂ 
fBuf
ÊÊ 
=
ÊÊ 
new
ÊÊ 
FHsmsSendBuffer
ÊÊ *
(
ÊÊ* +
)
ÊÊ+ ,
;
ÊÊ, -
fBuf
ÁÁ 
.
ÁÁ 
genSelectRsp
ÁÁ !
(
ÁÁ! "
	sessionId
ÁÁ" +
,
ÁÁ+ ,
status
ÁÁ- 3
,
ÁÁ3 4
systemBytes
ÁÁ5 @
)
ÁÁ@ A
;
ÁÁA B!
fSecsControlMessage
ÈÈ #
=
ÈÈ$ %
new
ÈÈ& )!
FSecsControlMessage
ÈÈ* =
(
ÈÈ= >
this
ÍÍ 
.
ÍÍ 
fSecs1ToHsms
ÍÍ %
,
ÍÍ% &%
FHsmsControlMessageType
ÎÎ +
.
ÎÎ+ ,
	SelectRsp
ÎÎ, 5
,
ÎÎ5 6
fBuf
ÏÏ 
.
ÏÏ 
	sessionId
ÏÏ "
,
ÏÏ" #
fBuf
ÌÌ 
.
ÌÌ 
byte2
ÌÌ 
,
ÌÌ 
fBuf
ÓÓ 
.
ÓÓ 
byte3
ÓÓ 
,
ÓÓ 
fBuf
ÔÔ 
.
ÔÔ 
ptype
ÔÔ 
,
ÔÔ 
fBuf
 
.
 
stype
 
,
 
fBuf
ÒÒ 
.
ÒÒ 
systemBytes
ÒÒ $
,
ÒÒ$ %
string
ÚÚ 
.
ÚÚ 
Empty
ÚÚ  
)
ÛÛ 
;
ÛÛ 
m_fTcpClient
ıı 
.
ıı 
send
ıı !
(
ıı! "
new
ıı" %
FSocketSendData
ıı& 5
(
ıı5 6
fBuf
ıı6 :
.
ıı: ;
getBinaryData
ıı; H
(
ııH I
)
ııI J
,
ııJ K!
fSecsControlMessage
ııL _
)
ıı_ `
)
ıı` a
;
ııa b
}
ˆˆ 
catch
˜˜ 
(
˜˜ 
	Exception
˜˜ 
ex
˜˜ 
)
˜˜  
{
¯¯ !
procHsmsErrorRaised
˘˘ #
(
˘˘# $
ex
˘˘$ &
)
˘˘& '
;
˘˘' (
}
˙˙ 
finally
˚˚ 
{
¸¸ 
fBuf
˝˝ 
=
˝˝ 
null
˝˝ 
;
˝˝ !
fSecsControlMessage
˛˛ #
=
˛˛$ %
null
˛˛& *
;
˛˛* +
}
ˇˇ 
}
ÄÄ 	
private
ÑÑ 
void
ÑÑ 
sendDeselectRsp
ÑÑ $
(
ÑÑ$ %
UInt16
ÖÖ 
	sessionId
ÖÖ 
,
ÖÖ 
UInt32
ÜÜ 
systemBytes
ÜÜ 
)
áá 
{
àà 	
FHsmsSendBuffer
ââ 
fBuf
ââ  
=
ââ! "
null
ââ# '
;
ââ' (!
FSecsControlMessage
ää !
fSecsControlMessage
ää  3
=
ää4 5
null
ää6 :
;
ää: ;
try
åå 
{
çç 
fBuf
éé 
=
éé 
new
éé 
FHsmsSendBuffer
éé *
(
éé* +
)
éé+ ,
;
éé, -
fBuf
èè 
.
èè 
genDeselectRsp
èè #
(
èè# $
	sessionId
èè$ -
,
èè- .
systemBytes
èè/ :
)
èè: ;
;
èè; <!
fSecsControlMessage
ëë #
=
ëë$ %
new
ëë& )!
FSecsControlMessage
ëë* =
(
ëë= >
this
íí 
.
íí 
fSecs1ToHsms
íí %
,
íí% &%
FHsmsControlMessageType
ìì +
.
ìì+ ,
DeselectRsp
ìì, 7
,
ìì7 8
fBuf
îî 
.
îî 
	sessionId
îî "
,
îî" #
fBuf
ïï 
.
ïï 
byte2
ïï 
,
ïï 
fBuf
ññ 
.
ññ 
byte3
ññ 
,
ññ 
fBuf
óó 
.
óó 
ptype
óó 
,
óó 
fBuf
òò 
.
òò 
stype
òò 
,
òò 
fBuf
ôô 
.
ôô 
systemBytes
ôô $
,
ôô$ %
string
öö 
.
öö 
Empty
öö  
)
õõ 
;
õõ 
m_fTcpClient
ùù 
.
ùù 
send
ùù !
(
ùù! "
new
ùù" %
FSocketSendData
ùù& 5
(
ùù5 6
fBuf
ùù6 :
.
ùù: ;
getBinaryData
ùù; H
(
ùùH I
)
ùùI J
,
ùùJ K!
fSecsControlMessage
ùùL _
)
ùù_ `
)
ùù` a
;
ùùa b
}
ûû 
catch
üü 
(
üü 
	Exception
üü 
ex
üü 
)
üü  
{
†† !
procHsmsErrorRaised
°° #
(
°°# $
ex
°°$ &
)
°°& '
;
°°' (
}
¢¢ 
finally
££ 
{
§§ 
fBuf
•• 
=
•• 
null
•• 
;
•• !
fSecsControlMessage
¶¶ #
=
¶¶$ %
null
¶¶& *
;
¶¶* +
}
ßß 
}
®® 	
private
¨¨ 
void
¨¨ 
sendLinktestReq
¨¨ $
(
¨¨$ %
)
≠≠ 
{
ÆÆ 	
FHsmsSendBuffer
ØØ 
fBuf
ØØ  
=
ØØ! "
null
ØØ# '
;
ØØ' (!
FSecsControlMessage
∞∞ !
fSecsControlMessage
∞∞  3
=
∞∞4 5
null
∞∞6 :
;
∞∞: ;
try
≤≤ 
{
≥≥ 
fBuf
¥¥ 
=
¥¥ 
new
¥¥ 
FHsmsSendBuffer
¥¥ *
(
¥¥* +
)
¥¥+ ,
;
¥¥, -
fBuf
µµ 
.
µµ 
genLinktestReq
µµ #
(
µµ# $
this
µµ$ (
.
µµ( )!
fSystemBytesPointer
µµ) <
.
µµ< =
uniqueId
µµ= E
)
µµE F
;
µµF G!
fSecsControlMessage
∑∑ #
=
∑∑$ %
new
∑∑& )!
FSecsControlMessage
∑∑* =
(
∑∑= >
this
∏∏ 
.
∏∏ 
fSecs1ToHsms
∏∏ %
,
∏∏% &%
FHsmsControlMessageType
ππ +
.
ππ+ ,
LinktestReq
ππ, 7
,
ππ7 8
fBuf
∫∫ 
.
∫∫ 
	sessionId
∫∫ "
,
∫∫" #
fBuf
ªª 
.
ªª 
byte2
ªª 
,
ªª 
fBuf
ºº 
.
ºº 
byte3
ºº 
,
ºº 
fBuf
ΩΩ 
.
ΩΩ 
ptype
ΩΩ 
,
ΩΩ 
fBuf
ææ 
.
ææ 
stype
ææ 
,
ææ 
fBuf
øø 
.
øø 
systemBytes
øø $
,
øø$ %
string
¿¿ 
.
¿¿ 
Empty
¿¿  
)
¡¡ 
;
¡¡ 
m_fTcpClient
√√ 
.
√√ 
send
√√ !
(
√√! "
new
√√" %
FSocketSendData
√√& 5
(
√√5 6
fBuf
√√6 :
.
√√: ;
getBinaryData
√√; H
(
√√H I
)
√√I J
,
√√J K!
fSecsControlMessage
√√L _
)
√√_ `
)
√√` a
;
√√a b 
m_fTranLinktestReq
   "
.
  " #
set
  # &
(
  & '
fBuf
  ' +
.
  + ,
	sessionId
  , 5
,
  5 6
fBuf
  7 ;
.
  ; <
systemBytes
  < G
)
  G H
;
  H I
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ 
ex
ÃÃ 
)
ÃÃ  
{
ÕÕ !
procHsmsErrorRaised
ŒŒ #
(
ŒŒ# $
ex
ŒŒ$ &
)
ŒŒ& '
;
ŒŒ' (
}
œœ 
finally
–– 
{
—— 
fBuf
““ 
=
““ 
null
““ 
;
““ !
fSecsControlMessage
”” #
=
””$ %
null
””& *
;
””* +
}
‘‘ 
}
’’ 	
private
ŸŸ 
void
ŸŸ 
sendLinktestRsp
ŸŸ $
(
ŸŸ$ %
UInt16
⁄⁄ 
	sessionId
⁄⁄ 
,
⁄⁄ 
UInt32
€€ 
systemBytes
€€ 
)
‹‹ 
{
›› 	
FHsmsSendBuffer
ﬁﬁ 
fBuf
ﬁﬁ  
=
ﬁﬁ! "
null
ﬁﬁ# '
;
ﬁﬁ' (!
FSecsControlMessage
ﬂﬂ !
fSecsControlMessage
ﬂﬂ  3
=
ﬂﬂ4 5
null
ﬂﬂ6 :
;
ﬂﬂ: ;
try
·· 
{
‚‚ 
fBuf
„„ 
=
„„ 
new
„„ 
FHsmsSendBuffer
„„ *
(
„„* +
)
„„+ ,
;
„„, -
fBuf
‰‰ 
.
‰‰ 
genLinktestRsp
‰‰ #
(
‰‰# $
	sessionId
‰‰$ -
,
‰‰- .
systemBytes
‰‰/ :
)
‰‰: ;
;
‰‰; <!
fSecsControlMessage
ÊÊ #
=
ÊÊ$ %
new
ÊÊ& )!
FSecsControlMessage
ÊÊ* =
(
ÊÊ= >
this
ÁÁ 
.
ÁÁ 
fSecs1ToHsms
ÁÁ %
,
ÁÁ% &%
FHsmsControlMessageType
ËË +
.
ËË+ ,
LinktestRsp
ËË, 7
,
ËË7 8
fBuf
ÈÈ 
.
ÈÈ 
	sessionId
ÈÈ "
,
ÈÈ" #
fBuf
ÍÍ 
.
ÍÍ 
byte2
ÍÍ 
,
ÍÍ 
fBuf
ÎÎ 
.
ÎÎ 
byte3
ÎÎ 
,
ÎÎ 
fBuf
ÏÏ 
.
ÏÏ 
ptype
ÏÏ 
,
ÏÏ 
fBuf
ÌÌ 
.
ÌÌ 
stype
ÌÌ 
,
ÌÌ 
fBuf
ÓÓ 
.
ÓÓ 
systemBytes
ÓÓ $
,
ÓÓ$ %
string
ÔÔ 
.
ÔÔ 
Empty
ÔÔ  
)
 
;
 
m_fTcpClient
ÚÚ 
.
ÚÚ 
send
ÚÚ !
(
ÚÚ! "
new
ÚÚ" %
FSocketSendData
ÚÚ& 5
(
ÚÚ5 6
fBuf
ÚÚ6 :
.
ÚÚ: ;
getBinaryData
ÚÚ; H
(
ÚÚH I
)
ÚÚI J
,
ÚÚJ K!
fSecsControlMessage
ÚÚL _
)
ÚÚ_ `
)
ÚÚ` a
;
ÚÚa b
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı !
procHsmsErrorRaised
ˆˆ #
(
ˆˆ# $
ex
ˆˆ$ &
)
ˆˆ& '
;
ˆˆ' (
}
˜˜ 
finally
¯¯ 
{
˘˘ 
fBuf
˙˙ 
=
˙˙ 
null
˙˙ 
;
˙˙ !
fSecsControlMessage
˚˚ #
=
˚˚$ %
null
˚˚& *
;
˚˚* +
}
¸¸ 
}
˝˝ 	
private
ÅÅ 
void
ÅÅ 
sendRejectReq
ÅÅ "
(
ÅÅ" #
UInt16
ÇÇ 
	sessionId
ÇÇ 
,
ÇÇ 
byte
ÉÉ 
stype
ÉÉ 
,
ÉÉ 
byte
ÑÑ 

reasonCode
ÑÑ 
,
ÑÑ 
UInt32
ÖÖ 
systemBytes
ÖÖ 
)
ÜÜ 
{
áá 	
FHsmsSendBuffer
àà 
fBuf
àà  
=
àà! "
null
àà# '
;
àà' (!
FSecsControlMessage
ââ !
fSecsControlMessage
ââ  3
=
ââ4 5
null
ââ6 :
;
ââ: ;
try
ãã 
{
åå 
fBuf
çç 
=
çç 
new
çç 
FHsmsSendBuffer
çç *
(
çç* +
)
çç+ ,
;
çç, -
fBuf
éé 
.
éé 
genRejectReq
éé !
(
éé! "
	sessionId
éé" +
,
éé+ ,
stype
éé- 2
,
éé2 3

reasonCode
éé4 >
,
éé> ?
systemBytes
éé@ K
)
ééK L
;
ééL M!
fSecsControlMessage
êê #
=
êê$ %
new
êê& )!
FSecsControlMessage
êê* =
(
êê= >
this
ëë 
.
ëë 
fSecs1ToHsms
ëë %
,
ëë% &%
FHsmsControlMessageType
íí +
.
íí+ ,
	RejectReq
íí, 5
,
íí5 6
fBuf
ìì 
.
ìì 
	sessionId
ìì "
,
ìì" #
fBuf
îî 
.
îî 
byte2
îî 
,
îî 
fBuf
ïï 
.
ïï 
byte3
ïï 
,
ïï 
fBuf
ññ 
.
ññ 
ptype
ññ 
,
ññ 
fBuf
óó 
.
óó 
stype
óó 
,
óó 
fBuf
òò 
.
òò 
systemBytes
òò $
,
òò$ %
string
ôô 
.
ôô 
Empty
ôô  
)
öö 
;
öö 
m_fTcpClient
úú 
.
úú 
send
úú !
(
úú! "
new
úú" %
FSocketSendData
úú& 5
(
úú5 6
fBuf
úú6 :
.
úú: ;
getBinaryData
úú; H
(
úúH I
)
úúI J
,
úúJ K!
fSecsControlMessage
úúL _
)
úú_ `
)
úú` a
;
úúa b
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû 
ex
ûû 
)
ûû  
{
üü !
procHsmsErrorRaised
†† #
(
††# $
ex
††$ &
)
††& '
;
††' (
}
°° 
finally
¢¢ 
{
££ 
fBuf
§§ 
=
§§ 
null
§§ 
;
§§ !
fSecsControlMessage
•• #
=
••$ %
null
••& *
;
••* +
}
¶¶ 
}
ßß 	
private
´´ 
void
´´ 
sendSeparateReq
´´ $
(
´´$ %
)
¨¨ 
{
≠≠ 	
FHsmsSendBuffer
ÆÆ 
fBuf
ÆÆ  
=
ÆÆ! "
null
ÆÆ# '
;
ÆÆ' (!
FSecsControlMessage
ØØ !
fSecsControlMessage
ØØ  3
=
ØØ4 5
null
ØØ6 :
;
ØØ: ;
try
±± 
{
≤≤ 
fBuf
≥≥ 
=
≥≥ 
new
≥≥ 
FHsmsSendBuffer
≥≥ *
(
≥≥* +
)
≥≥+ ,
;
≥≥, -
fBuf
¥¥ 
.
¥¥ 
genSeparateReq
¥¥ #
(
¥¥# $
this
¥¥$ (
.
¥¥( )!
fSystemBytesPointer
¥¥) <
.
¥¥< =
uniqueId
¥¥= E
)
¥¥E F
;
¥¥F G!
fSecsControlMessage
∂∂ #
=
∂∂$ %
new
∂∂& )!
FSecsControlMessage
∂∂* =
(
∂∂= >
this
∑∑ 
.
∑∑ 
fSecs1ToHsms
∑∑ %
,
∑∑% &%
FHsmsControlMessageType
∏∏ +
.
∏∏+ ,
SeparateReq
∏∏, 7
,
∏∏7 8
fBuf
ππ 
.
ππ 
	sessionId
ππ "
,
ππ" #
fBuf
∫∫ 
.
∫∫ 
byte2
∫∫ 
,
∫∫ 
fBuf
ªª 
.
ªª 
byte3
ªª 
,
ªª 
fBuf
ºº 
.
ºº 
ptype
ºº 
,
ºº 
fBuf
ΩΩ 
.
ΩΩ 
stype
ΩΩ 
,
ΩΩ 
fBuf
ææ 
.
ææ 
systemBytes
ææ $
,
ææ$ %
string
øø 
.
øø 
Empty
øø  
)
¿¿ 
;
¿¿ 
m_fTcpClient
¬¬ 
.
¬¬ 
send
¬¬ !
(
¬¬! "
new
¬¬" %
FSocketSendData
¬¬& 5
(
¬¬5 6
fBuf
¬¬6 :
.
¬¬: ;
getBinaryData
¬¬; H
(
¬¬H I
)
¬¬I J
,
¬¬J K!
fSecsControlMessage
¬¬L _
)
¬¬_ `
)
¬¬` a
;
¬¬a b
}
√√ 
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ 
ex
ƒƒ 
)
ƒƒ  
{
≈≈ !
procHsmsErrorRaised
∆∆ #
(
∆∆# $
ex
∆∆$ &
)
∆∆& '
;
∆∆' (
}
«« 
finally
»» 
{
…… 
fBuf
   
=
   
null
   
;
   !
fSecsControlMessage
ÀÀ #
=
ÀÀ$ %
null
ÀÀ& *
;
ÀÀ* +
}
ÃÃ 
}
ÕÕ 	
private
—— 
void
—— 
sendDataMessage
—— $
(
——$ %
FSecsDataMessage
““ 
fSecsDataMessage
““ -
)
”” 
{
‘‘ 	
try
’’ 
{
÷÷ 
m_fTcpClient
◊◊ 
.
◊◊ 
send
◊◊ !
(
◊◊! "
new
◊◊" %
FSocketSendData
◊◊& 5
(
◊◊5 6
fSecsDataMessage
◊◊6 F
.
◊◊F G
getHsmsBinaryData
◊◊G X
(
◊◊X Y
true
◊◊Y ]
)
◊◊] ^
,
◊◊^ _
fSecsDataMessage
◊◊` p
)
◊◊p q
)
◊◊q r
;
◊◊r s
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ 
	Exception
ŸŸ 
ex
ŸŸ 
)
ŸŸ  
{
⁄⁄ !
procHsmsErrorRaised
€€ #
(
€€# $
ex
€€$ &
)
€€& '
;
€€' (
}
‹‹ 
finally
›› 
{
ﬁﬁ 
}
‡‡ 
}
·· 	
private
ÂÂ 
void
ÂÂ 
recvSelectReq
ÂÂ "
(
ÂÂ" #
)
ÊÊ 
{
ÁÁ 	
FResultCode
ËË 
fResult
ËË 
=
ËË  !
FResultCode
ËË" -
.
ËË- .
Success
ËË. 5
;
ËË5 6
string
ÈÈ 
errorMessage
ÈÈ 
=
ÈÈ  !
string
ÈÈ" (
.
ÈÈ( )
Empty
ÈÈ) .
;
ÈÈ. /
byte
ÍÍ 
status
ÍÍ 
=
ÍÍ 
$num
ÍÍ 
;
ÍÍ !
FSecsControlMessage
ÎÎ !
fSecsControlMessage
ÎÎ  3
=
ÎÎ4 5
null
ÎÎ6 :
;
ÎÎ: ;
try
ÌÌ 
{
ÓÓ 
if
ÔÔ 
(
ÔÔ 
this
ÔÔ 
.
ÔÔ 
fSecs1ToHsms
ÔÔ %
.
ÔÔ% &

fHsmsState
ÔÔ& 0
==
ÔÔ1 3!
FCommunicationState
ÔÔ4 G
.
ÔÔG H
Selected
ÔÔH P
)
ÔÔP Q
{
 
fResult
ÒÒ 
=
ÒÒ 
FResultCode
ÒÒ )
.
ÒÒ) *
Warninig
ÒÒ* 2
;
ÒÒ2 3
status
ÚÚ 
=
ÚÚ 
$num
ÚÚ 
;
ÚÚ 
}
ÛÛ 
else
ÙÙ 
{
ıı 
m_fTmrT7
˘˘ 
.
˘˘ 
stop
˘˘ !
(
˘˘! "
)
˘˘" #
;
˘˘# $
}
˙˙ 
errorMessage
˛˛ 
=
˛˛ $
getSelectStatusMessage
˛˛ 5
(
˛˛5 6
status
˛˛6 <
)
˛˛< =
;
˛˛= >!
fSecsControlMessage
ÇÇ #
=
ÇÇ$ %
new
ÇÇ& )!
FSecsControlMessage
ÇÇ* =
(
ÇÇ= >
this
ÉÉ 
.
ÉÉ 
fSecs1ToHsms
ÉÉ %
,
ÉÉ% &%
FHsmsControlMessageType
ÑÑ +
.
ÑÑ+ ,
	SelectReq
ÑÑ, 5
,
ÑÑ5 6

m_fRecvBuf
ÖÖ 
.
ÖÖ 
	sessionId
ÖÖ (
,
ÖÖ( )

m_fRecvBuf
ÜÜ 
.
ÜÜ 
byte2
ÜÜ $
,
ÜÜ$ %

m_fRecvBuf
áá 
.
áá 
byte3
áá $
,
áá$ %

m_fRecvBuf
àà 
.
àà 
ptype
àà $
,
àà$ %

m_fRecvBuf
ââ 
.
ââ 
stype
ââ $
,
ââ$ %

m_fRecvBuf
ää 
.
ää 
systemBytes
ää *
,
ää* +
errorMessage
ãã  
)
åå 
;
åå 
this
éé 
.
éé 
fSecs1ToHsms
éé !
.
éé! "
fEventPusher
éé" .
.
éé. /
pushHsmsEvent
éé/ <
(
éé< =
new
èè 2
$FHsmsControlMessageReceivedEventArgs
èè <
(
èè< =
this
èè= A
.
èèA B
fSecs1ToHsms
èèB N
,
èèN O
FEventId
èèP X
.
èèX Y(
HsmsControlMessageReceived
èèY s
,
èès t
fResult
èèu |
,
èè| }
errorMessageèè~ ä
,èèä ã#
fSecsControlMessageèèå ü
)èèü †
)
êê 
;
êê 
sendSelectRsp
îî 
(
îî 

m_fRecvBuf
îî (
.
îî( )
	sessionId
îî) 2
,
îî2 3
status
îî4 :
,
îî: ;

m_fRecvBuf
îî< F
.
îîF G
systemBytes
îîG R
)
îîR S
;
îîS T
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
ex
ññ 
)
ññ  
{
óó !
procHsmsErrorRaised
òò #
(
òò# $
ex
òò$ &
)
òò& '
;
òò' (
}
ôô 
finally
öö 
{
õõ !
fSecsControlMessage
úú #
=
úú$ %
null
úú& *
;
úú* +
}
ùù 
}
ûû 	
private
¢¢ 
void
¢¢ 
recvDeselectReq
¢¢ $
(
¢¢$ %
)
££ 
{
§§ 	!
FSecsControlMessage
•• !
fSecsControlMessage
••  3
=
••4 5
null
••6 :
;
••: ;
try
ßß 
{
®® !
fSecsControlMessage
©© #
=
©©$ %
new
©©& )!
FSecsControlMessage
©©* =
(
©©= >
this
™™ 
.
™™ 
fSecs1ToHsms
™™ %
,
™™% &%
FHsmsControlMessageType
´´ +
.
´´+ ,
DeselectReq
´´, 7
,
´´7 8

m_fRecvBuf
¨¨ 
.
¨¨ 
	sessionId
¨¨ (
,
¨¨( )

m_fRecvBuf
≠≠ 
.
≠≠ 
byte2
≠≠ $
,
≠≠$ %

m_fRecvBuf
ÆÆ 
.
ÆÆ 
byte3
ÆÆ $
,
ÆÆ$ %

m_fRecvBuf
ØØ 
.
ØØ 
ptype
ØØ $
,
ØØ$ %

m_fRecvBuf
∞∞ 
.
∞∞ 
stype
∞∞ $
,
∞∞$ %

m_fRecvBuf
±± 
.
±± 
systemBytes
±± *
,
±±* +
string
≤≤ 
.
≤≤ 
Empty
≤≤  
)
≥≥ 
;
≥≥ 
this
µµ 
.
µµ 
fSecs1ToHsms
µµ !
.
µµ! "
fEventPusher
µµ" .
.
µµ. /
pushHsmsEvent
µµ/ <
(
µµ< =
new
∂∂ 2
$FHsmsControlMessageReceivedEventArgs
∂∂ <
(
∂∂< =
this
∂∂= A
.
∂∂A B
fSecs1ToHsms
∂∂B N
,
∂∂N O
FEventId
∂∂P X
.
∂∂X Y(
HsmsControlMessageReceived
∂∂Y s
,
∂∂s t
FResultCode∂∂u Ä
.∂∂Ä Å
Success∂∂Å à
,∂∂à â
string∂∂ä ê
.∂∂ê ë
Empty∂∂ë ñ
,∂∂ñ ó#
fSecsControlMessage∂∂ò ´
)∂∂´ ¨
)
∑∑ 
;
∑∑ 
sendDeselectRsp
ªª 
(
ªª  

m_fRecvBuf
ªª  *
.
ªª* +
	sessionId
ªª+ 4
,
ªª4 5

m_fRecvBuf
ªª6 @
.
ªª@ A
systemBytes
ªªA L
)
ªªL M
;
ªªM N
m_fTcpClient
¬¬ 
.
¬¬ 
close
¬¬ "
(
¬¬" #
)
¬¬# $
;
¬¬$ %
}
√√ 
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ 
ex
ƒƒ 
)
ƒƒ  
{
≈≈ !
procHsmsErrorRaised
∆∆ #
(
∆∆# $
ex
∆∆$ &
)
∆∆& '
;
∆∆' (
}
«« 
finally
»» 
{
…… !
fSecsControlMessage
   #
=
  $ %
null
  & *
;
  * +
}
ÀÀ 
}
ÃÃ 	
private
–– 
void
–– 
recvSelectRsp
–– "
(
––" #
)
—— 
{
““ 	!
FSecsControlMessage
”” !
fSecsControlMessage
””  3
=
””4 5
null
””6 :
;
””: ;
string
‘‘ 
errorMessage
‘‘ 
=
‘‘  !
string
‘‘" (
.
‘‘( )
Empty
‘‘) .
;
‘‘. /
try
÷÷ 
{
◊◊ 
errorMessage
ÿÿ 
=
ÿÿ $
getRejectReasonMessage
ÿÿ 5
(
ÿÿ5 6
$num
ÿÿ6 7
)
ÿÿ7 8
;
ÿÿ8 9!
fSecsControlMessage
‹‹ #
=
‹‹$ %
new
‹‹& )!
FSecsControlMessage
‹‹* =
(
‹‹= >
this
›› 
.
›› 
fSecs1ToHsms
›› %
,
››% &%
FHsmsControlMessageType
ﬁﬁ +
.
ﬁﬁ+ ,
	SelectRsp
ﬁﬁ, 5
,
ﬁﬁ5 6

m_fRecvBuf
ﬂﬂ 
.
ﬂﬂ 
	sessionId
ﬂﬂ (
,
ﬂﬂ( )

m_fRecvBuf
‡‡ 
.
‡‡ 
byte2
‡‡ $
,
‡‡$ %

m_fRecvBuf
·· 
.
·· 
byte3
·· $
,
··$ %

m_fRecvBuf
‚‚ 
.
‚‚ 
ptype
‚‚ $
,
‚‚$ %

m_fRecvBuf
„„ 
.
„„ 
stype
„„ $
,
„„$ %

m_fRecvBuf
‰‰ 
.
‰‰ 
systemBytes
‰‰ *
,
‰‰* +
errorMessage
ÂÂ  
)
ÊÊ 
;
ÊÊ 
this
ËË 
.
ËË 
fSecs1ToHsms
ËË !
.
ËË! "
fEventPusher
ËË" .
.
ËË. /
pushHsmsEvent
ËË/ <
(
ËË< =
new
ÈÈ 2
$FHsmsControlMessageReceivedEventArgs
ÈÈ <
(
ÈÈ< =
this
ÈÈ= A
.
ÈÈA B
fSecs1ToHsms
ÈÈB N
,
ÈÈN O
FEventId
ÈÈP X
.
ÈÈX Y(
HsmsControlMessageReceived
ÈÈY s
,
ÈÈs t
FResultCodeÈÈu Ä
.ÈÈÄ Å
WarninigÈÈÅ â
,ÈÈâ ä
errorMessageÈÈã ó
,ÈÈó ò#
fSecsControlMessageÈÈô ¨
)ÈÈ¨ ≠
)
ÍÍ 
;
ÍÍ 
sendRejectReq
ÓÓ 
(
ÓÓ 

m_fRecvBuf
ÓÓ (
.
ÓÓ( )
	sessionId
ÓÓ) 2
,
ÓÓ2 3

m_fRecvBuf
ÓÓ4 >
.
ÓÓ> ?
stype
ÓÓ? D
,
ÓÓD E
$num
ÓÓF G
,
ÓÓG H

m_fRecvBuf
ÓÓI S
.
ÓÓS T
systemBytes
ÓÓT _
)
ÓÓ_ `
;
ÓÓ` a
}
ÔÔ 
catch
 
(
 
	Exception
 
ex
 
)
  
{
ÒÒ !
procHsmsErrorRaised
ÚÚ #
(
ÚÚ# $
ex
ÚÚ$ &
)
ÚÚ& '
;
ÚÚ' (
}
ÛÛ 
finally
ÙÙ 
{
ıı !
fSecsControlMessage
ˆˆ #
=
ˆˆ$ %
null
ˆˆ& *
;
ˆˆ* +
}
˜˜ 
}
¯¯ 	
private
¸¸ 
void
¸¸ 
recvDeselectRsp
¸¸ $
(
¸¸$ %
)
˝˝ 
{
˛˛ 	!
FSecsControlMessage
ˇˇ !
fSecsControlMessage
ˇˇ  3
=
ˇˇ4 5
null
ˇˇ6 :
;
ˇˇ: ;
string
ÄÄ 
errorMessage
ÄÄ 
=
ÄÄ  !
string
ÄÄ" (
.
ÄÄ( )
Empty
ÄÄ) .
;
ÄÄ. /
try
ÇÇ 
{
ÉÉ 
errorMessage
ÑÑ 
=
ÑÑ $
getRejectReasonMessage
ÑÑ 5
(
ÑÑ5 6
$num
ÑÑ6 7
)
ÑÑ7 8
;
ÑÑ8 9!
fSecsControlMessage
àà #
=
àà$ %
new
àà& )!
FSecsControlMessage
àà* =
(
àà= >
this
ââ 
.
ââ 
fSecs1ToHsms
ââ %
,
ââ% &%
FHsmsControlMessageType
ää +
.
ää+ ,
DeselectRsp
ää, 7
,
ää7 8

m_fRecvBuf
ãã 
.
ãã 
	sessionId
ãã (
,
ãã( )

m_fRecvBuf
åå 
.
åå 
byte2
åå $
,
åå$ %

m_fRecvBuf
çç 
.
çç 
byte3
çç $
,
çç$ %

m_fRecvBuf
éé 
.
éé 
ptype
éé $
,
éé$ %

m_fRecvBuf
èè 
.
èè 
stype
èè $
,
èè$ %

m_fRecvBuf
êê 
.
êê 
systemBytes
êê *
,
êê* +
errorMessage
ëë  
)
íí 
;
íí 
this
îî 
.
îî 
fSecs1ToHsms
îî !
.
îî! "
fEventPusher
îî" .
.
îî. /
pushHsmsEvent
îî/ <
(
îî< =
new
ïï 2
$FHsmsControlMessageReceivedEventArgs
ïï <
(
ïï< =
this
ïï= A
.
ïïA B
fSecs1ToHsms
ïïB N
,
ïïN O
FEventId
ïïP X
.
ïïX Y(
HsmsControlMessageReceived
ïïY s
,
ïïs t
FResultCodeïïu Ä
.ïïÄ Å
WarninigïïÅ â
,ïïâ ä
errorMessageïïã ó
,ïïó ò#
fSecsControlMessageïïô ¨
)ïï¨ ≠
)
ññ 
;
ññ 
sendRejectReq
öö 
(
öö 

m_fRecvBuf
öö (
.
öö( )
	sessionId
öö) 2
,
öö2 3

m_fRecvBuf
öö4 >
.
öö> ?
stype
öö? D
,
ööD E
$num
ööF G
,
ööG H

m_fRecvBuf
ööI S
.
ööS T
systemBytes
ööT _
)
öö_ `
;
öö` a
}
õõ 
catch
úú 
(
úú 
	Exception
úú 
ex
úú 
)
úú  
{
ùù !
procHsmsErrorRaised
ûû #
(
ûû# $
ex
ûû$ &
)
ûû& '
;
ûû' (
}
üü 
finally
†† 
{
°° !
fSecsControlMessage
¢¢ #
=
¢¢$ %
null
¢¢& *
;
¢¢* +
}
££ 
}
§§ 	
private
®® 
void
®® 
recvLinktestReq
®® $
(
®®$ %
)
©© 
{
™™ 	!
FSecsControlMessage
´´ !
fSecsControlMessage
´´  3
=
´´4 5
null
´´6 :
;
´´: ;
try
≠≠ 
{
ÆÆ !
fSecsControlMessage
ØØ #
=
ØØ$ %
new
ØØ& )!
FSecsControlMessage
ØØ* =
(
ØØ= >
this
∞∞ 
.
∞∞ 
fSecs1ToHsms
∞∞ %
,
∞∞% &%
FHsmsControlMessageType
±± +
.
±±+ ,
LinktestReq
±±, 7
,
±±7 8

m_fRecvBuf
≤≤ 
.
≤≤ 
	sessionId
≤≤ (
,
≤≤( )

m_fRecvBuf
≥≥ 
.
≥≥ 
byte2
≥≥ $
,
≥≥$ %

m_fRecvBuf
¥¥ 
.
¥¥ 
byte3
¥¥ $
,
¥¥$ %

m_fRecvBuf
µµ 
.
µµ 
ptype
µµ $
,
µµ$ %

m_fRecvBuf
∂∂ 
.
∂∂ 
stype
∂∂ $
,
∂∂$ %

m_fRecvBuf
∑∑ 
.
∑∑ 
systemBytes
∑∑ *
,
∑∑* +
string
∏∏ 
.
∏∏ 
Empty
∏∏  
)
ππ 
;
ππ 
this
ªª 
.
ªª 
fSecs1ToHsms
ªª !
.
ªª! "
fEventPusher
ªª" .
.
ªª. /
pushHsmsEvent
ªª/ <
(
ªª< =
new
ºº 2
$FHsmsControlMessageReceivedEventArgs
ºº <
(
ºº< =
this
ºº= A
.
ººA B
fSecs1ToHsms
ººB N
,
ººN O
FEventId
ººP X
.
ººX Y(
HsmsControlMessageReceived
ººY s
,
ººs t
FResultCodeººu Ä
.ººÄ Å
SuccessººÅ à
,ººà â
stringººä ê
.ººê ë
Emptyººë ñ
,ººñ ó#
fSecsControlMessageººò ´
)ºº´ ¨
)
ΩΩ 
;
ΩΩ 
sendLinktestRsp
¡¡ 
(
¡¡  

m_fRecvBuf
¡¡  *
.
¡¡* +
	sessionId
¡¡+ 4
,
¡¡4 5

m_fRecvBuf
¡¡6 @
.
¡¡@ A
systemBytes
¡¡A L
)
¡¡L M
;
¡¡M N
}
¬¬ 
catch
√√ 
(
√√ 
	Exception
√√ 
ex
√√ 
)
√√  
{
ƒƒ !
procHsmsErrorRaised
≈≈ #
(
≈≈# $
ex
≈≈$ &
)
≈≈& '
;
≈≈' (
}
∆∆ 
finally
«« 
{
»» !
fSecsControlMessage
…… #
=
……$ %
null
……& *
;
……* +
}
   
}
ÀÀ 	
private
œœ 
void
œœ 
recvLinktestRsp
œœ $
(
œœ$ %
)
–– 
{
—— 	!
FSecsControlMessage
““ !
fSecsControlMessage
““  3
=
““4 5
null
““6 :
;
““: ;
FResultCode
”” 
fResult
”” 
=
””  !
FResultCode
””" -
.
””- .
Success
””. 5
;
””5 6
string
‘‘ 
errorMessage
‘‘ 
=
‘‘  !
string
‘‘" (
.
‘‘( )
Empty
‘‘) .
;
‘‘. /
try
÷÷ 
{
◊◊ 
if
ÿÿ 
(
ÿÿ 
!
ÿÿ  
m_fTranLinktestReq
ÿÿ '
.
ÿÿ' (
enabled
ÿÿ( /
)
ÿÿ/ 0
{
ŸŸ 
fResult
⁄⁄ 
=
⁄⁄ 
FResultCode
⁄⁄ )
.
⁄⁄) *
Warninig
⁄⁄* 2
;
⁄⁄2 3
errorMessage
€€  
=
€€! "$
getRejectReasonMessage
€€# 9
(
€€9 :
$num
€€: ;
)
€€; <
;
€€< =
sendRejectReq
›› !
(
››! "

m_fRecvBuf
››" ,
.
››, -
	sessionId
››- 6
,
››6 7

m_fRecvBuf
››8 B
.
››B C
stype
››C H
,
››H I
$num
››J K
,
››K L

m_fRecvBuf
››M W
.
››W X
systemBytes
››X c
)
››c d
;
››d e
}
ﬁﬁ 
else
ﬂﬂ 
if
ﬂﬂ 
(
ﬂﬂ  
m_fTranLinktestReq
ﬂﬂ +
.
ﬂﬂ+ ,
	sessionId
ﬂﬂ, 5
!=
ﬂﬂ6 8

m_fRecvBuf
ﬂﬂ9 C
.
ﬂﬂC D
	sessionId
ﬂﬂD M
)
ﬂﬂM N
{
‡‡ 
fResult
·· 
=
·· 
FResultCode
·· )
.
··) *
Warninig
··* 2
;
··2 3
errorMessage
‚‚  
=
‚‚! "
string
‚‚# )
.
‚‚) *
Format
‚‚* 0
(
‚‚0 1

FConstants
‚‚1 ;
.
‚‚; <

err_m_0015
‚‚< F
,
‚‚F G
$str
‚‚H g
)
‚‚g h
;
‚‚h i
}
„„ 
else
‰‰ 
if
‰‰ 
(
‰‰  
m_fTranLinktestReq
‰‰ +
.
‰‰+ ,
systemBytes
‰‰, 7
!=
‰‰8 :

m_fRecvBuf
‰‰; E
.
‰‰E F
systemBytes
‰‰F Q
)
‰‰Q R
{
ÂÂ 
fResult
ÊÊ 
=
ÊÊ 
FResultCode
ÊÊ )
.
ÊÊ) *
Warninig
ÊÊ* 2
;
ÊÊ2 3
errorMessage
ÁÁ  
=
ÁÁ! "
string
ÁÁ# )
.
ÁÁ) *
Format
ÁÁ* 0
(
ÁÁ0 1

FConstants
ÁÁ1 ;
.
ÁÁ; <

err_m_0015
ÁÁ< F
,
ÁÁF G
$str
ÁÁH j
)
ÁÁj k
;
ÁÁk l
}
ËË 
else
ÈÈ 
if
ÈÈ 
(
ÈÈ 

m_fRecvBuf
ÈÈ #
.
ÈÈ# $
byte3
ÈÈ$ )
!=
ÈÈ* ,
$num
ÈÈ- .
)
ÈÈ. /
{
ÍÍ 
fResult
ÎÎ 
=
ÎÎ 
FResultCode
ÎÎ )
.
ÎÎ) *
Warninig
ÎÎ* 2
;
ÎÎ2 3
errorMessage
ÏÏ  
=
ÏÏ! "
this
ÏÏ# '
.
ÏÏ' ($
getSelectStatusMessage
ÏÏ( >
(
ÏÏ> ?

m_fRecvBuf
ÏÏ? I
.
ÏÏI J
byte3
ÏÏJ O
)
ÏÏO P
;
ÏÏP Q
}
ÌÌ 
else
ÓÓ 
{
ÔÔ  
m_fTranLinktestReq
ÛÛ &
.
ÛÛ& '
reset
ÛÛ' ,
(
ÛÛ, -
)
ÛÛ- .
;
ÛÛ. /
}
ÙÙ !
fSecsControlMessage
¯¯ #
=
¯¯$ %
new
¯¯& )!
FSecsControlMessage
¯¯* =
(
¯¯= >
this
˘˘ 
.
˘˘ 
fSecs1ToHsms
˘˘ %
,
˘˘% &%
FHsmsControlMessageType
˙˙ +
.
˙˙+ ,
LinktestRsp
˙˙, 7
,
˙˙7 8

m_fRecvBuf
˚˚ 
.
˚˚ 
	sessionId
˚˚ (
,
˚˚( )

m_fRecvBuf
¸¸ 
.
¸¸ 
byte2
¸¸ $
,
¸¸$ %

m_fRecvBuf
˝˝ 
.
˝˝ 
byte3
˝˝ $
,
˝˝$ %

m_fRecvBuf
˛˛ 
.
˛˛ 
ptype
˛˛ $
,
˛˛$ %

m_fRecvBuf
ˇˇ 
.
ˇˇ 
stype
ˇˇ $
,
ˇˇ$ %

m_fRecvBuf
ÄÄ 
.
ÄÄ 
systemBytes
ÄÄ *
,
ÄÄ* +
errorMessage
ÅÅ  
)
ÇÇ 
;
ÇÇ 
this
ÑÑ 
.
ÑÑ 
fSecs1ToHsms
ÑÑ !
.
ÑÑ! "
fEventPusher
ÑÑ" .
.
ÑÑ. /
pushHsmsEvent
ÑÑ/ <
(
ÑÑ< =
new
ÖÖ 2
$FHsmsControlMessageReceivedEventArgs
ÖÖ <
(
ÖÖ< =
this
ÖÖ= A
.
ÖÖA B
fSecs1ToHsms
ÖÖB N
,
ÖÖN O
FEventId
ÖÖP X
.
ÖÖX Y(
HsmsControlMessageReceived
ÖÖY s
,
ÖÖs t
fResult
ÖÖu |
,
ÖÖ| }
errorMessageÖÖ~ ä
,ÖÖä ã#
fSecsControlMessageÖÖå ü
)ÖÖü †
)
ÜÜ 
;
ÜÜ 
}
áá 
catch
àà 
(
àà 
	Exception
àà 
ex
àà 
)
àà  
{
ââ !
procHsmsErrorRaised
ää #
(
ää# $
ex
ää$ &
)
ää& '
;
ää' (
}
ãã 
finally
åå 
{
çç !
fSecsControlMessage
éé #
=
éé$ %
null
éé& *
;
éé* +
}
èè 
}
êê 	
private
îî 
void
îî 
recvRejectReq
îî "
(
îî" #
)
ïï 
{
ññ 	!
FSecsControlMessage
óó !
fSecsControlMessage
óó  3
=
óó4 5
null
óó6 :
;
óó: ;
string
òò 
errorMessage
òò 
=
òò  !
string
òò" (
.
òò( )
Empty
òò) .
;
òò. /
try
öö 
{
õõ 
errorMessage
úú 
=
úú $
getRejectReasonMessage
úú 5
(
úú5 6

m_fRecvBuf
úú6 @
.
úú@ A
byte3
úúA F
)
úúF G
;
úúG H!
fSecsControlMessage
†† #
=
††$ %
new
††& )!
FSecsControlMessage
††* =
(
††= >
this
°° 
.
°° 
fSecs1ToHsms
°° %
,
°°% &%
FHsmsControlMessageType
¢¢ +
.
¢¢+ ,
DeselectRsp
¢¢, 7
,
¢¢7 8

m_fRecvBuf
££ 
.
££ 
	sessionId
££ (
,
££( )

m_fRecvBuf
§§ 
.
§§ 
byte2
§§ $
,
§§$ %

m_fRecvBuf
•• 
.
•• 
byte3
•• $
,
••$ %

m_fRecvBuf
¶¶ 
.
¶¶ 
ptype
¶¶ $
,
¶¶$ %

m_fRecvBuf
ßß 
.
ßß 
stype
ßß $
,
ßß$ %

m_fRecvBuf
®® 
.
®® 
systemBytes
®® *
,
®®* +
errorMessage
©©  
)
™™ 
;
™™ 
this
¨¨ 
.
¨¨ 
fSecs1ToHsms
¨¨ !
.
¨¨! "
fEventPusher
¨¨" .
.
¨¨. /
pushHsmsEvent
¨¨/ <
(
¨¨< =
new
≠≠ 2
$FHsmsControlMessageReceivedEventArgs
≠≠ <
(
≠≠< =
this
≠≠= A
.
≠≠A B
fSecs1ToHsms
≠≠B N
,
≠≠N O
FEventId
≠≠P X
.
≠≠X Y(
HsmsControlMessageReceived
≠≠Y s
,
≠≠s t
FResultCode≠≠u Ä
.≠≠Ä Å
Warninig≠≠Å â
,≠≠â ä
errorMessage≠≠ã ó
,≠≠ó ò#
fSecsControlMessage≠≠ô ¨
)≠≠¨ ≠
)
ÆÆ 
;
ÆÆ 
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞ 
ex
∞∞ 
)
∞∞  
{
±± !
procHsmsErrorRaised
≤≤ #
(
≤≤# $
ex
≤≤$ &
)
≤≤& '
;
≤≤' (
}
≥≥ 
finally
¥¥ 
{
µµ !
fSecsControlMessage
∂∂ #
=
∂∂$ %
null
∂∂& *
;
∂∂* +
}
∑∑ 
}
∏∏ 	
private
ºº 
void
ºº 
recvSeparateReq
ºº $
(
ºº$ %
)
ΩΩ 
{
ææ 	!
FSecsControlMessage
øø !
fSecsControlMessage
øø  3
=
øø4 5
null
øø6 :
;
øø: ;
try
¡¡ 
{
¬¬ !
fSecsControlMessage
√√ #
=
√√$ %
new
√√& )!
FSecsControlMessage
√√* =
(
√√= >
this
ƒƒ 
.
ƒƒ 
fSecs1ToHsms
ƒƒ %
,
ƒƒ% &%
FHsmsControlMessageType
≈≈ +
.
≈≈+ ,
SeparateReq
≈≈, 7
,
≈≈7 8

m_fRecvBuf
∆∆ 
.
∆∆ 
	sessionId
∆∆ (
,
∆∆( )

m_fRecvBuf
«« 
.
«« 
byte2
«« $
,
««$ %

m_fRecvBuf
»» 
.
»» 
byte3
»» $
,
»»$ %

m_fRecvBuf
…… 
.
…… 
ptype
…… $
,
……$ %

m_fRecvBuf
   
.
   
stype
   $
,
  $ %

m_fRecvBuf
ÀÀ 
.
ÀÀ 
systemBytes
ÀÀ *
,
ÀÀ* +
string
ÃÃ 
.
ÃÃ 
Empty
ÃÃ  
)
ÕÕ 
;
ÕÕ 
this
œœ 
.
œœ 
fSecs1ToHsms
œœ !
.
œœ! "
fEventPusher
œœ" .
.
œœ. /
pushHsmsEvent
œœ/ <
(
œœ< =
new
–– 2
$FHsmsControlMessageReceivedEventArgs
–– <
(
––< =
this
––= A
.
––A B
fSecs1ToHsms
––B N
,
––N O
FEventId
––P X
.
––X Y(
HsmsControlMessageReceived
––Y s
,
––s t
FResultCode––u Ä
.––Ä Å
Success––Å à
,––à â
string––ä ê
.––ê ë
Empty––ë ñ
,––ñ ó#
fSecsControlMessage––ò ´
)––´ ¨
)
—— 
;
—— 
m_fTcpClient
ÿÿ 
.
ÿÿ 
close
ÿÿ "
(
ÿÿ" #
)
ÿÿ# $
;
ÿÿ$ %
}
ŸŸ 
catch
⁄⁄ 
(
⁄⁄ 
	Exception
⁄⁄ 
ex
⁄⁄ 
)
⁄⁄  
{
€€ !
procHsmsErrorRaised
‹‹ #
(
‹‹# $
ex
‹‹$ &
)
‹‹& '
;
‹‹' (
}
›› 
finally
ﬁﬁ 
{
ﬂﬂ !
fSecsControlMessage
‡‡ #
=
‡‡$ %
null
‡‡& *
;
‡‡* +
}
·· 
}
‚‚ 	
private
ÊÊ 
void
ÊÊ 
recvDataMessage
ÊÊ $
(
ÊÊ$ %
)
ÁÁ 
{
ËË 	
FResultCode
ÈÈ 
fResult
ÈÈ 
=
ÈÈ  !
FResultCode
ÈÈ" -
.
ÈÈ- .
Success
ÈÈ. 5
;
ÈÈ5 6
string
ÍÍ 
errorMessage
ÍÍ 
=
ÍÍ  !
string
ÍÍ" (
.
ÍÍ( )
Empty
ÍÍ) .
;
ÍÍ. /
FSecsDataMessage
ÎÎ 
fSecsDataMessage
ÎÎ -
=
ÎÎ. /
null
ÎÎ0 4
;
ÎÎ4 5
try
ÌÌ 
{
ÓÓ 
if
ÔÔ 
(
ÔÔ 
this
ÔÔ 
.
ÔÔ 
fSecs1ToHsms
ÔÔ %
.
ÔÔ% &

fHsmsState
ÔÔ& 0
!=
ÔÔ1 3!
FCommunicationState
ÔÔ4 G
.
ÔÔG H
Selected
ÔÔH P
)
ÔÔP Q
{
 
fResult
ÒÒ 
=
ÒÒ 
FResultCode
ÒÒ )
.
ÒÒ) *
Warninig
ÒÒ* 2
;
ÒÒ2 3
errorMessage
ÚÚ  
=
ÚÚ! "$
getRejectReasonMessage
ÚÚ# 9
(
ÚÚ9 :
$num
ÚÚ: ;
)
ÚÚ; <
;
ÚÚ< =
sendRejectReq
ÙÙ !
(
ÙÙ! "

m_fRecvBuf
ÙÙ" ,
.
ÙÙ, -
	sessionId
ÙÙ- 6
,
ÙÙ6 7

m_fRecvBuf
ÙÙ8 B
.
ÙÙB C
stype
ÙÙC H
,
ÙÙH I
$num
ÙÙJ K
,
ÙÙK L

m_fRecvBuf
ÙÙM W
.
ÙÙW X
systemBytes
ÙÙX c
)
ÙÙc d
;
ÙÙd e
}
ıı 
fSecsDataMessage
˘˘  
=
˘˘! "
new
˘˘# &
FSecsDataMessage
˘˘' 7
(
˘˘7 8
this
˙˙ 
.
˙˙ 
fSecs1ToHsms
˙˙ %
,
˙˙% &

m_fRecvBuf
˚˚ 
.
˚˚ 
	sessionId
˚˚ (
,
˚˚( )

m_fRecvBuf
¸¸ 
.
¸¸ 
wbit
¸¸ #
,
¸¸# $

m_fRecvBuf
˝˝ 
.
˝˝ 
stream
˝˝ %
,
˝˝% &

m_fRecvBuf
˛˛ 
.
˛˛ 
function
˛˛ '
,
˛˛' (

m_fRecvBuf
ˇˇ 
.
ˇˇ 
systemBytes
ˇˇ *
,
ˇˇ* +

m_fRecvBuf
Ä	Ä	 
.
Ä	Ä	 
body
Ä	Ä	 #
.
Ä	Ä	# $
ToArray
Ä	Ä	$ +
(
Ä	Ä	+ ,
)
Ä	Ä	, -
)
Å	Å	 
;
Å	Å	 
this
É	É	 
.
É	É	 
fSecs1ToHsms
É	É	 !
.
É	É	! "
fEventPusher
É	É	" .
.
É	É	. /
pushHsmsEvent
É	É	/ <
(
É	É	< =
new
Ñ	Ñ	 /
!FHsmsDataMessageReceivedEventArgs
Ñ	Ñ	 9
(
Ñ	Ñ	9 :
this
Ñ	Ñ	: >
.
Ñ	Ñ	> ?
fSecs1ToHsms
Ñ	Ñ	? K
,
Ñ	Ñ	K L
FEventId
Ñ	Ñ	M U
.
Ñ	Ñ	U V%
HsmsDataMessageReceived
Ñ	Ñ	V m
,
Ñ	Ñ	m n
fResult
Ñ	Ñ	o v
,
Ñ	Ñ	v w
errorMessageÑ	Ñ	x Ñ
,Ñ	Ñ	Ñ Ö 
fSecsDataMessageÑ	Ñ	Ü ñ
)Ñ	Ñ	ñ ó
)
Ö	Ö	 
;
Ö	Ö	 
if
â	â	 
(
â	â	 
fResult
â	â	 
==
â	â	 
FResultCode
â	â	 *
.
â	â	* +
Success
â	â	+ 2
)
â	â	2 3
{
ä	ä	 
if
ã	ã	 
(
ã	ã	 
this
ã	ã	 
.
ã	ã	 
fSecs1ToHsms
ã	ã	 )
.
ã	ã	) *+
isHsmsInterceptingDataMessage
ã	ã	* G
(
ã	ã	G H
fSecsDataMessage
ã	ã	H X
.
ã	ã	X Y
stream
ã	ã	Y _
,
ã	ã	_ `
fSecsDataMessage
ã	ã	a q
.
ã	ã	q r
function
ã	ã	r z
)
ã	ã	z {
)
ã	ã	{ |
{
å	å	 
this
ç	ç	 
.
ç	ç	 
fSecs1ToHsms
ç	ç	 )
.
ç	ç	) *
fEventPusher
ç	ç	* 6
.
ç	ç	6 7
pushHsmsEvent
ç	ç	7 D
(
ç	ç	D E
new
é	é	 ;
-FHsmsInterceptingDataMessageReceivedEventArgs
é	é	  M
(
é	é	M N
this
è	è	  $
.
è	è	$ %
fSecs1ToHsms
è	è	% 1
,
è	è	1 2
FEventId
ê	ê	  (
.
ê	ê	( )1
#HsmsInterceptingDataMessageReceived
ê	ê	) L
,
ê	ê	L M
fResult
ë	ë	  '
,
ë	ë	' (
errorMessage
í	í	  ,
,
í	í	, -
fSecsDataMessage
ì	ì	  0
)
î	î	  !
)
ï	ï	 
;
ï	ï	 
}
ñ	ñ	 
}
ó	ó	 
}
ò	ò	 
catch
ô	ô	 
(
ô	ô	 
	Exception
ô	ô	 
ex
ô	ô	 
)
ô	ô	  
{
ö	ö	 !
procHsmsErrorRaised
õ	õ	 #
(
õ	õ	# $
ex
õ	õ	$ &
)
õ	õ	& '
;
õ	õ	' (
}
ú	ú	 
finally
ù	ù	 
{
û	û	 
fSecsDataMessage
ü	ü	  
=
ü	ü	! "
null
ü	ü	# '
;
ü	ü	' (
}
†	†	 
}
°	°	 	
private
•	•	 
void
•	•	 !
procHsmsErrorRaised
•	•	 (
(
•	•	( )
	Exception
¶	¶	 
inEx
¶	¶	 
)
ß	ß	 
{
®	®	 	
try
©	©	 
{
™	™	 
FDebug
´	´	 
.
´	´	 
writeLog
´	´	 
(
´	´	  
inEx
´	´	  $
)
´	´	$ %
;
´	´	% &
this
≠	≠	 
.
≠	≠	 
fSecs1ToHsms
≠	≠	 !
.
≠	≠	! "
fEventPusher
≠	≠	" .
.
≠	≠	. /
pushHsmsEvent
≠	≠	/ <
(
≠	≠	< =
new
Æ	Æ	 '
FHsmsErrorRaisedEventArgs
Æ	Æ	 1
(
Æ	Æ	1 2
this
Æ	Æ	2 6
.
Æ	Æ	6 7
fSecs1ToHsms
Æ	Æ	7 C
,
Æ	Æ	C D
FEventId
Æ	Æ	E M
.
Æ	Æ	M N
HsmsErrorRaised
Æ	Æ	N ]
,
Æ	Æ	] ^
inEx
Æ	Æ	_ c
.
Æ	Æ	c d
Message
Æ	Æ	d k
)
Æ	Æ	k l
)
Ø	Ø	 
;
Ø	Ø	 
}
∞	∞	 
catch
±	±	 
(
±	±	 
	Exception
±	±	 
ex
±	±	 
)
±	±	  
{
≤	≤	 
FDebug
≥	≥	 
.
≥	≥	 
writeLog
≥	≥	 
(
≥	≥	  
ex
≥	≥	  "
)
≥	≥	" #
;
≥	≥	# $
}
¥	¥	 
finally
µ	µ	 
{
∂	∂	 
}
∏	∏	 
}
π	π	 	
private
Ω	Ω	 
void
Ω	Ω	 
procT7Timeout
Ω	Ω	 "
(
Ω	Ω	" #
)
æ	æ	 
{
ø	ø	 	
try
¿	¿	 
{
¡	¡	 
this
¬	¬	 
.
¬	¬	 
fSecs1ToHsms
¬	¬	 !
.
¬	¬	! "
fEventPusher
¬	¬	" .
.
¬	¬	. /
pushHsmsEvent
¬	¬	/ <
(
¬	¬	< =
new
√	√	 )
FHsmsTimeoutRaisedEventArgs
√	√	 3
(
√	√	3 4
this
√	√	4 8
.
√	√	8 9
fSecs1ToHsms
√	√	9 E
,
√	√	E F
FEventId
√	√	G O
.
√	√	O P
HsmsTimeoutRaised
√	√	P a
,
√	√	a b
FSecsTimeout
√	√	c o
.
√	√	o p
T7
√	√	p r
,
√	√	r s 
getTimeoutMessage√	√	t Ö
(√	√	Ö Ü
FSecsTimeout√	√	Ü í
.√	√	í ì
T7√	√	ì ï
)√	√	ï ñ
)√	√	ñ ó
)
ƒ	ƒ	 
;
ƒ	ƒ	 
sendSeparateReq
∆	∆	 
(
∆	∆	  
)
∆	∆	  !
;
∆	∆	! "
m_fTcpClient
Õ	Õ	 
.
Õ	Õ	 
close
Õ	Õ	 "
(
Õ	Õ	" #
)
Õ	Õ	# $
;
Õ	Õ	$ %
}
Œ	Œ	 
catch
œ	œ	 
(
œ	œ	 
	Exception
œ	œ	 
ex
œ	œ	 
)
œ	œ	  
{
–	–	 
FDebug
—	—	 
.
—	—	 
throwException
—	—	 %
(
—	—	% &
ex
—	—	& (
)
—	—	( )
;
—	—	) *
}
“	“	 
finally
”	”	 
{
‘	‘	 
}
÷	÷	 
}
◊	◊	 	
private
€	€	 
void
€	€	 
procT8Timeout
€	€	 "
(
€	€	" #
)
‹	‹	 
{
›	›	 	
try
ﬁ	ﬁ	 
{
ﬂ	ﬂ	 
this
‡	‡	 
.
‡	‡	 
fSecs1ToHsms
‡	‡	 !
.
‡	‡	! "
fEventPusher
‡	‡	" .
.
‡	‡	. /
pushHsmsEvent
‡	‡	/ <
(
‡	‡	< =
new
·	·	 )
FHsmsTimeoutRaisedEventArgs
·	·	 3
(
·	·	3 4
this
·	·	4 8
.
·	·	8 9
fSecs1ToHsms
·	·	9 E
,
·	·	E F
FEventId
·	·	G O
.
·	·	O P
HsmsTimeoutRaised
·	·	P a
,
·	·	a b
FSecsTimeout
·	·	c o
.
·	·	o p
T8
·	·	p r
,
·	·	r s 
getTimeoutMessage·	·	t Ö
(·	·	Ö Ü
FSecsTimeout·	·	Ü í
.·	·	í ì
T8·	·	ì ï
)·	·	ï ñ
)·	·	ñ ó
)
‚	‚	 
;
‚	‚	 
sendSeparateReq
‰	‰	 
(
‰	‰	  
)
‰	‰	  !
;
‰	‰	! "
m_fTcpClient
Î	Î	 
.
Î	Î	 
close
Î	Î	 "
(
Î	Î	" #
)
Î	Î	# $
;
Î	Î	$ %
}
Ï	Ï	 
catch
Ì	Ì	 
(
Ì	Ì	 
	Exception
Ì	Ì	 
ex
Ì	Ì	 
)
Ì	Ì	  
{
Ó	Ó	 
FDebug
Ô	Ô	 
.
Ô	Ô	 
throwException
Ô	Ô	 %
(
Ô	Ô	% &
ex
Ô	Ô	& (
)
Ô	Ô	( )
;
Ô	Ô	) *
}
		 
finally
Ò	Ò	 
{
Ú	Ú	 
}
Ù	Ù	 
}
ı	ı	 	
private
˘	˘	 
void
˘	˘	 !
procLinktestTimeout
˘	˘	 (
(
˘	˘	( )
)
˙	˙	 
{
˚	˚	 	
try
¸	¸	 
{
˝	˝	 
this
˛	˛	 
.
˛	˛	 
fSecs1ToHsms
˛	˛	 !
.
˛	˛	! "
fEventPusher
˛	˛	" .
.
˛	˛	. /
pushHsmsEvent
˛	˛	/ <
(
˛	˛	< =
new
ˇ	ˇ	 )
FHsmsTimeoutRaisedEventArgs
ˇ	ˇ	 3
(
ˇ	ˇ	3 4
this
ˇ	ˇ	4 8
.
ˇ	ˇ	8 9
fSecs1ToHsms
ˇ	ˇ	9 E
,
ˇ	ˇ	E F
FEventId
ˇ	ˇ	G O
.
ˇ	ˇ	O P
HsmsTimeoutRaised
ˇ	ˇ	P a
,
ˇ	ˇ	a b
FSecsTimeout
ˇ	ˇ	c o
.
ˇ	ˇ	o p
T6
ˇ	ˇ	p r
,
ˇ	ˇ	r s 
getTimeoutMessageˇ	ˇ	t Ö
(ˇ	ˇ	Ö Ü
FSecsTimeoutˇ	ˇ	Ü í
.ˇ	ˇ	í ì
T6ˇ	ˇ	ì ï
)ˇ	ˇ	ï ñ
)ˇ	ˇ	ñ ó
)
Ä
Ä
 
;
Ä
Ä
 
sendSeparateReq
Ç
Ç
 
(
Ç
Ç
  
)
Ç
Ç
  !
;
Ç
Ç
! "
m_fTcpClient
â
â
 
.
â
â
 
close
â
â
 "
(
â
â
" #
)
â
â
# $
;
â
â
$ %
}
ä
ä
 
catch
ã
ã
 
(
ã
ã
 
	Exception
ã
ã
 
ex
ã
ã
 
)
ã
ã
  
{
å
å
 
FDebug
ç
ç
 
.
ç
ç
 
throwException
ç
ç
 %
(
ç
ç
% &
ex
ç
ç
& (
)
ç
ç
( )
;
ç
ç
) *
}
é
é
 
finally
è
è
 
{
ê
ê
 
}
í
í
 
}
ì
ì
 	
private
õ
õ
 
void
õ
õ
 (
m_fThdMain_ThreadJobCalled
õ
õ
 /
(
õ
õ
/ 0
object
ú
ú
 
sender
ú
ú
 
,
ú
ú
 
FThreadEventArgs
ù
ù
 
e
ù
ù
 
)
û
û
 
{
ü
ü
 	
bool
†
†
 
waited
†
†
 
=
†
†
 
false
†
†
 
;
†
†
  
try
¢
¢
 
{
£
£
 
waited
§
§
 
=
§
§
 
m_fMainSync
§
§
 $
.
§
§
$ %
tryWait
§
§
% ,
(
§
§
, -
$num
§
§
- .
)
§
§
. /
;
§
§
/ 0
if
•
•
 
(
•
•
 
!
•
•
 
waited
•
•
 
)
•
•
 
{
¶
¶
 
return
ß
ß
 
;
ß
ß
 
}
®
®
 
if
Ø
Ø
 
(
Ø
Ø
 '
m_fTmrHsmsPassive2Cleanup
Ø
Ø
 -
.
Ø
Ø
- .
elasped
Ø
Ø
. 5
(
Ø
Ø
5 6
true
Ø
Ø
6 :
)
Ø
Ø
: ;
)
Ø
Ø
; <
{
∞
∞
 !
cleanUpHsmsPassive2
±
±
 '
(
±
±
' (
)
±
±
( )
;
±
±
) *
}
≤
≤
 
if
∂
∂
 
(
∂
∂
 
m_fTcpClient
∂
∂
  
==
∂
∂
! #
null
∂
∂
$ (
||
∂
∂
) +
m_fTcpClient
∂
∂
, 8
.
∂
∂
8 9
fState
∂
∂
9 ?
!=
∂
∂
@ B
FTcpClientState
∂
∂
C R
.
∂
∂
R S
	Connected
∂
∂
S \
)
∂
∂
\ ]
{
∑
∑
 
e
∏
∏
 
.
∏
∏
 
sleepThread
∏
∏
 !
(
∏
∏
! "
$num
∏
∏
" #
)
∏
∏
# $
;
∏
∏
$ %
return
π
π
 
;
π
π
 
}
∫
∫
 
if
º
º
 
(
º
º
 
this
º
º
 
.
º
º
 
fSecs1ToHsms
º
º
 %
.
º
º
% &

fHsmsState
º
º
& 0
!=
º
º
1 3!
FCommunicationState
º
º
4 G
.
º
º
G H
	Connected
º
º
H Q
&&
º
º
R T
this
º
º
U Y
.
º
º
Y Z
fSecs1ToHsms
º
º
Z f
.
º
º
f g

fHsmsState
º
º
g q
!=
º
º
r t"
FCommunicationStateº
º
u à
.º
º
à â
Selectedº
º
â ë
)º
º
ë í
{
Ω
Ω
 
e
æ
æ
 
.
æ
æ
 
sleepThread
æ
æ
 !
(
æ
æ
! "
$num
æ
æ
" #
)
æ
æ
# $
;
æ
æ
$ %
return
ø
ø
 
;
ø
ø
 
}
¿
¿
 
if
«
«
 
(
«
«
 
m_fTmrT7
«
«
 
.
«
«
 
elasped
«
«
 $
(
«
«
$ %
false
«
«
% *
)
«
«
* +
)
«
«
+ ,
{
»
»
 
procT7Timeout
…
…
 !
(
…
…
! "
)
…
…
" #
;
…
…
# $
return
 
 
 
;
 
 
 
}
À
À
 
if
“
“
 
(
“
“
  
m_fTranLinktestReq
“
“
 &
.
“
“
& '
timeout
“
“
' .
(
“
“
. /
)
“
“
/ 0
)
“
“
0 1
{
”
”
 !
procLinktestTimeout
‘
‘
 '
(
‘
‘
' (
)
‘
‘
( )
;
‘
‘
) *
return
’
’
 
;
’
’
 
}
÷
÷
 
if
›
›
 
(
›
›
 
m_fTmrT8
›
›
 
.
›
›
 
elasped
›
›
 $
(
›
›
$ %
false
›
›
% *
)
›
›
* +
)
›
›
+ ,
{
ﬁ
ﬁ
 
procT8Timeout
ﬂ
ﬂ
 !
(
ﬂ
ﬂ
! "
)
ﬂ
ﬂ
" #
;
ﬂ
ﬂ
# $
return
‡
‡
 
;
‡
‡
 
}
·
·
 
if
Ë
Ë
 
(
Ë
Ë
 
m_fTmrLinktest
Ë
Ë
 "
.
Ë
Ë
" #
elasped
Ë
Ë
# *
(
Ë
Ë
* +
true
Ë
Ë
+ /
)
Ë
Ë
/ 0
)
Ë
Ë
0 1
{
È
È
 
if
Í
Í
 
(
Í
Í
 
!
Í
Í
  
m_fTranLinktestReq
Í
Í
 +
.
Í
Í
+ ,
enabled
Í
Í
, 3
)
Í
Í
3 4
{
Î
Î
 
sendLinktestReq
Ï
Ï
 '
(
Ï
Ï
' (
)
Ï
Ï
( )
;
Ï
Ï
) *
}
Ì
Ì
 
}
Ó
Ó
 
e
Ú
Ú
 
.
Ú
Ú
 
sleepThread
Ú
Ú
 
(
Ú
Ú
 
$num
Ú
Ú
 
)
Ú
Ú
  
;
Ú
Ú
  !
}
Û
Û
 
catch
Ù
Ù
 
(
Ù
Ù
 
	Exception
Ù
Ù
 
ex
Ù
Ù
 
)
Ù
Ù
  
{
ı
ı
 !
procHsmsErrorRaised
ˆ
ˆ
 #
(
ˆ
ˆ
# $
ex
ˆ
ˆ
$ &
)
ˆ
ˆ
& '
;
ˆ
ˆ
' (
}
˜
˜
 
finally
¯
¯
 
{
˘
˘
 
if
˙
˙
 
(
˙
˙
 
waited
˙
˙
 
)
˙
˙
 
{
˚
˚
 
m_fMainSync
¸
¸
 
.
¸
¸
  
set
¸
¸
  #
(
¸
¸
# $
)
¸
¸
$ %
;
¸
¸
% &
}
˝
˝
 
}
˛
˛
 
}
ˇ
ˇ
 	
private
áá 
void
áá 7
)m_fTcpListener_TcpListenerAcceptCompleted
áá >
(
áá> ?
object
àà 
sender
àà 
,
àà 2
$FTcpListenerAcceptCompletedEventArgs
ââ 0
e
ââ1 2
)
ää 
{
ãã 	
try
åå 
{
çç 
m_fMainSync
éé 
.
éé 
wait
éé  
(
éé  !
)
éé! "
;
éé" #
if
íí 
(
íí 
this
íí 
.
íí 
fSecs1ToHsms
íí %
.
íí% &

fHsmsState
íí& 0
!=
íí1 3!
FCommunicationState
íí4 G
.
ííG H
Opened
ííH N
)
ííN O
{
ìì !
m_fHsmsPassive2List
îî '
.
îî' (
Add
îî( +
(
îî+ ,
new
îî, /
FHsmsPassive2
îî0 =
(
îî= >
this
îî> B
.
îîB C
fSecs1ToHsms
îîC O
,
îîO P
e
îîQ R
.
îîR S

fTcpClient
îîS ]
)
îî] ^
)
îî^ _
;
îî_ `
return
ïï 
;
ïï 
}
ññ 
closeTcpClient
öö 
(
öö 
)
öö  
;
öö  !
this
ûû 
.
ûû 
localIp
ûû 
=
ûû 
e
ûû  
.
ûû  !

fTcpClient
ûû! +
.
ûû+ ,
localIp
ûû, 3
;
ûû3 4
this
üü 
.
üü 
	localPort
üü 
=
üü  
e
üü! "
.
üü" #

fTcpClient
üü# -
.
üü- .
	localPort
üü. 7
;
üü7 8
this
†† 
.
†† 
remoteIp
†† 
=
†† 
e
††  !
.
††! "

fTcpClient
††" ,
.
††, -
remoteIp
††- 5
;
††5 6
this
°° 
.
°° 

remotePort
°° 
=
°°  !
e
°°" #
.
°°# $

fTcpClient
°°$ .
.
°°. /

remotePort
°°/ 9
;
°°9 :
m_fTcpClient
•• 
=
•• 
e
••  
.
••  !

fTcpClient
••! +
;
••+ ,
m_fTcpClient
ßß 
.
ßß #
TcpClientStateChanged
ßß 2
+=
ßß3 5
new
ßß6 90
"FTcpClientStateChangedEventHandler
ßß: \
(
ßß\ ]0
"m_fTcpClient_TcpClientStateChanged
ßß] 
)ßß Ä
;ßßÄ Å
m_fTcpClient
®® 
.
®® #
TcpClientDataReceived
®® 2
+=
®®3 5
new
®®6 90
"FTcpClientDataReceivedEventHandler
®®: \
(
®®\ ]0
"m_fTcpClient_TcpClientDataReceived
®®] 
)®® Ä
;®®Ä Å
m_fTcpClient
©© 
.
©© 
TcpClientDataSent
©© .
+=
©©/ 1
new
©©2 5,
FTcpClientDataSentEventHandler
©©6 T
(
©©T U,
m_fTcpClient_TcpClientDataSent
©©U s
)
©©s t
;
©©t u
m_fTcpClient
™™ 
.
™™ %
TcpClientDataSendFailed
™™ 4
+=
™™5 7
new
™™8 ;2
$FTcpClientDataSendFailedEventHandler
™™< `
(
™™` a3
$m_fTcpClient_TcpClientDataSendFailed™™a Ö
)™™Ö Ü
;™™Ü á
m_fTcpClient
´´ 
.
´´ "
TcpClientErrorRaised
´´ 1
+=
´´2 4
new
´´5 8/
!FTcpClientErrorRaisedEventHandler
´´9 Z
(
´´Z [/
!m_fTcpClient_TcpClientErrorRaised
´´[ |
)
´´| }
;
´´} ~
m_fTcpClient
≠≠ 
.
≠≠ 
resumeEvent
≠≠ (
(
≠≠( )
)
≠≠) *
;
≠≠* +
this
±± 
.
±± 
fSecs1ToHsms
±± !
.
±±! "
changeHsmsState
±±" 1
(
±±1 2
FConnectMode
±±2 >
.
±±> ?
Passive
±±? F
,
±±F G
this
±±H L
.
±±L M
localIp
±±M T
,
±±T U
this
±±V Z
.
±±Z [
	localPort
±±[ d
,
±±d e
this
±±f j
.
±±j k
remoteIp
±±k s
,
±±s t
this
±±u y
.
±±y z

remotePort±±z Ñ
,±±Ñ Ö#
FCommunicationState±±Ü ô
.±±ô ö
	Connected±±ö £
)±±£ §
;±±§ •
m_fTmrT7
∏∏ 
.
∏∏ 
start
∏∏ 
(
∏∏ 
this
∏∏ #
.
∏∏# $
fSecs1ToHsms
∏∏$ 0
.
∏∏0 1
fHsmsConfig
∏∏1 <
.
∏∏< =
	t8Timeout
∏∏= F
*
∏∏G H
$num
∏∏I M
)
∏∏M N
;
∏∏N O
}
ππ 
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
ex
∫∫ 
)
∫∫  
{
ªª 
FDebug
ºº 
.
ºº 
writeLog
ºº 
(
ºº  
ex
ºº  "
)
ºº" #
;
ºº# $
}
ΩΩ 
finally
ææ 
{
øø 
m_fMainSync
¿¿ 
.
¿¿ 
set
¿¿ 
(
¿¿  
)
¿¿  !
;
¿¿! "
}
¡¡ 
}
¬¬ 	
private
∆∆ 
void
∆∆ 3
%m_fTcpListener_TcpListenerErrorRaised
∆∆ :
(
∆∆: ;
object
«« 
sender
«« 
,
«« .
 FTcpListenerErrorRaisedEventArgs
»» ,
e
»»- .
)
…… 
{
   	
try
ÀÀ 
{
ÃÃ !
procHsmsErrorRaised
ÕÕ #
(
ÕÕ# $
e
ÕÕ$ %
.
ÕÕ% &
	exception
ÕÕ& /
)
ÕÕ/ 0
;
ÕÕ0 1
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ 
ex
œœ 
)
œœ  
{
–– 
FDebug
—— 
.
—— 
writeLog
—— 
(
——  
ex
——  "
)
——" #
;
——# $
}
““ 
finally
”” 
{
‘‘ 
}
÷÷ 
}
◊◊ 	
private
ﬂﬂ 
void
ﬂﬂ 0
"m_fTcpClient_TcpClientStateChanged
ﬂﬂ 7
(
ﬂﬂ7 8
object
‡‡ 
sender
‡‡ 
,
‡‡ -
FTcpClientStateChangedEventArgs
·· +
e
··, -
)
‚‚ 
{
„„ 	
try
‰‰ 
{
ÂÂ 
m_fMainSync
ÊÊ 
.
ÊÊ 
wait
ÊÊ  
(
ÊÊ  !
)
ÊÊ! "
;
ÊÊ" #
if
ÍÍ 
(
ÍÍ 
m_fTcpListener
ÍÍ "
!=
ÍÍ# %
null
ÍÍ& *
&&
ÍÍ+ -
e
ÍÍ. /
.
ÍÍ/ 0
fState
ÍÍ0 6
==
ÍÍ7 9
FTcpClientState
ÍÍ: I
.
ÍÍI J
Closed
ÍÍJ P
)
ÍÍP Q
{
ÎÎ 
this
ÏÏ 
.
ÏÏ 
fSecs1ToHsms
ÏÏ %
.
ÏÏ% &
changeHsmsState
ÏÏ& 5
(
ÏÏ5 6
FConnectMode
ÏÏ6 B
.
ÏÏB C
Passive
ÏÏC J
,
ÏÏJ K
this
ÏÏL P
.
ÏÏP Q
localIp
ÏÏQ X
,
ÏÏX Y
this
ÏÏZ ^
.
ÏÏ^ _
	localPort
ÏÏ_ h
,
ÏÏh i
this
ÏÏj n
.
ÏÏn o
remoteIp
ÏÏo w
,
ÏÏw x
this
ÏÏy }
.
ÏÏ} ~

remotePortÏÏ~ à
,ÏÏà â#
FCommunicationStateÏÏä ù
.ÏÏù û
OpenedÏÏû §
)ÏÏ§ •
;ÏÏ• ¶
resetResource
ÓÓ !
(
ÓÓ! "
)
ÓÓ" #
;
ÓÓ# $
}
ÔÔ 
}
 
catch
ÒÒ 
(
ÒÒ 
	Exception
ÒÒ 
ex
ÒÒ 
)
ÒÒ  
{
ÚÚ !
procHsmsErrorRaised
ÛÛ #
(
ÛÛ# $
ex
ÛÛ$ &
)
ÛÛ& '
;
ÛÛ' (
}
ÙÙ 
finally
ıı 
{
ˆˆ 
m_fMainSync
˜˜ 
.
˜˜ 
set
˜˜ 
(
˜˜  
)
˜˜  !
;
˜˜! "
}
¯¯ 
}
˘˘ 	
private
˝˝ 
void
˝˝ 0
"m_fTcpClient_TcpClientDataReceived
˝˝ 7
(
˝˝7 8
object
˛˛ 
sender
˛˛ 
,
˛˛ -
FTcpClientDataReceivedEventArgs
ˇˇ +
e
ˇˇ, -
)
ÄÄ 
{
ÅÅ 	
try
ÇÇ 
{
ÉÉ 
m_fMainSync
ÑÑ 
.
ÑÑ 
wait
ÑÑ  
(
ÑÑ  !
)
ÑÑ! "
;
ÑÑ" #
m_fTmrT8
ãã 
.
ãã 
stop
ãã 
(
ãã 
)
ãã 
;
ãã  
if
íí 
(
íí 
m_fTmrLinktest
íí "
.
íí" #
enabled
íí# *
)
íí* +
{
ìì 
m_fTmrLinktest
îî "
.
îî" #
restart
îî# *
(
îî* +
this
îî+ /
.
îî/ 0
fSecs1ToHsms
îî0 <
.
îî< =
fHsmsConfig
îî= H
.
îîH I
linkTestPeriod
îîI W
*
îîX Y
$num
îîZ ^
)
îî^ _
;
îî_ `
}
ïï 

m_fRecvBuf
ôô 
.
ôô 
input
ôô  
(
ôô  !
e
ôô! "
.
ôô" #
data
ôô# '
)
ôô' (
;
ôô( )
while
õõ 
(
õõ 

m_fRecvBuf
õõ !
.
õõ! "
parse
õõ" '
(
õõ' (
)
õõ( )
)
õõ) *
{
úú 
if
ùù 
(
ùù 

m_fRecvBuf
ùù "
.
ùù" #
stype
ùù# (
==
ùù) +
$num
ùù, -
)
ùù- .
{
ûû 
recvDataMessage
üü '
(
üü' (
)
üü( )
;
üü) *
}
†† 
else
°° 
if
°° 
(
°° 

m_fRecvBuf
°° '
.
°°' (
stype
°°( -
==
°°. 0
$num
°°1 2
)
°°2 3
{
¢¢ 
recvSelectReq
££ %
(
££% &
)
££& '
;
££' (
}
§§ 
else
•• 
if
•• 
(
•• 

m_fRecvBuf
•• '
.
••' (
stype
••( -
==
••. 0
$num
••1 2
)
••2 3
{
¶¶ 
recvSelectRsp
ßß %
(
ßß% &
)
ßß& '
;
ßß' (
}
®® 
else
©© 
if
©© 
(
©© 

m_fRecvBuf
©© '
.
©©' (
stype
©©( -
==
©©. 0
$num
©©1 2
)
©©2 3
{
™™ 
recvDeselectReq
´´ '
(
´´' (
)
´´( )
;
´´) *
}
¨¨ 
else
≠≠ 
if
≠≠ 
(
≠≠ 

m_fRecvBuf
≠≠ '
.
≠≠' (
stype
≠≠( -
==
≠≠. 0
$num
≠≠1 2
)
≠≠2 3
{
ÆÆ 
recvDeselectRsp
ØØ '
(
ØØ' (
)
ØØ( )
;
ØØ) *
}
∞∞ 
else
±± 
if
±± 
(
±± 

m_fRecvBuf
±± '
.
±±' (
stype
±±( -
==
±±. 0
$num
±±1 2
)
±±2 3
{
≤≤ 
recvLinktestReq
≥≥ '
(
≥≥' (
)
≥≥( )
;
≥≥) *
}
¥¥ 
else
µµ 
if
µµ 
(
µµ 

m_fRecvBuf
µµ '
.
µµ' (
stype
µµ( -
==
µµ. 0
$num
µµ1 2
)
µµ2 3
{
∂∂ 
recvLinktestRsp
∑∑ '
(
∑∑' (
)
∑∑( )
;
∑∑) *
}
∏∏ 
else
ππ 
if
ππ 
(
ππ 

m_fRecvBuf
ππ '
.
ππ' (
stype
ππ( -
==
ππ. 0
$num
ππ1 2
)
ππ2 3
{
∫∫ 
recvRejectReq
ªª %
(
ªª% &
)
ªª& '
;
ªª' (
}
ºº 
else
ΩΩ 
if
ΩΩ 
(
ΩΩ 

m_fRecvBuf
ΩΩ '
.
ΩΩ' (
stype
ΩΩ( -
==
ΩΩ. 0
$num
ΩΩ1 2
)
ΩΩ2 3
{
ææ 
recvSeparateReq
øø '
(
øø' (
)
øø( )
;
øø) *
}
¿¿ 
else
¡¡ 
{
¬¬ 
sendRejectReq
«« %
(
««% &

m_fRecvBuf
««& 0
.
««0 1
	sessionId
««1 :
,
««: ;

m_fRecvBuf
««< F
.
««F G
stype
««G L
,
««L M
$num
««N O
,
««O P

m_fRecvBuf
««Q [
.
««[ \
systemBytes
««\ g
)
««g h
;
««h i
}
»» 

m_fRecvBuf
ÃÃ 
.
ÃÃ 
init
ÃÃ #
(
ÃÃ# $
)
ÃÃ$ %
;
ÃÃ% &
}
ÕÕ 
if
‘‘ 
(
‘‘ 
!
‘‘ 

m_fRecvBuf
‘‘ 
.
‘‘  
isCompleted
‘‘  +
)
‘‘+ ,
{
’’ 
m_fTmrT8
÷÷ 
.
÷÷ 
start
÷÷ "
(
÷÷" #
this
÷÷# '
.
÷÷' (
fSecs1ToHsms
÷÷( 4
.
÷÷4 5
fHsmsConfig
÷÷5 @
.
÷÷@ A
	t8Timeout
÷÷A J
*
÷÷K L
$num
÷÷M Q
)
÷÷Q R
;
÷÷R S
}
◊◊ 
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ 
	Exception
ŸŸ 
ex
ŸŸ 
)
ŸŸ  
{
⁄⁄ !
procHsmsErrorRaised
€€ #
(
€€# $
ex
€€$ &
)
€€& '
;
€€' (
}
‹‹ 
finally
›› 
{
ﬁﬁ 
m_fMainSync
ﬂﬂ 
.
ﬂﬂ 
set
ﬂﬂ 
(
ﬂﬂ  
)
ﬂﬂ  !
;
ﬂﬂ! "
}
‡‡ 
}
·· 	
private
ÂÂ 
void
ÂÂ ,
m_fTcpClient_TcpClientDataSent
ÂÂ 3
(
ÂÂ3 4
object
ÊÊ 
sender
ÊÊ 
,
ÊÊ )
FTcpClientDataSentEventArgs
ÁÁ '
e
ÁÁ( )
)
ËË 
{
ÈÈ 	!
FSecsControlMessage
ÍÍ !
fSecsControlMessage
ÍÍ  3
=
ÍÍ4 5
null
ÍÍ6 :
;
ÍÍ: ;
FSecsDataMessage
ÎÎ 
fSecsDataMessage
ÎÎ -
=
ÎÎ. /
null
ÎÎ0 4
;
ÎÎ4 5
try
ÌÌ 
{
ÓÓ 
m_fMainSync
ÔÔ 
.
ÔÔ 
wait
ÔÔ  
(
ÔÔ  !
)
ÔÔ! "
;
ÔÔ" #
if
ÛÛ 
(
ÛÛ 
e
ÛÛ 
.
ÛÛ 
fData
ÛÛ 
.
ÛÛ 
state
ÛÛ !
is
ÛÛ" $!
FSecsControlMessage
ÛÛ% 8
)
ÛÛ8 9
{
ÙÙ !
fSecsControlMessage
ıı '
=
ıı( )
(
ıı* +!
FSecsControlMessage
ıı+ >
)
ıı> ?
e
ıı? @
.
ıı@ A
fData
ııA F
.
ııF G
state
ııG L
;
ııL M
this
ˆˆ 
.
ˆˆ 
fSecs1ToHsms
ˆˆ %
.
ˆˆ% &
fEventPusher
ˆˆ& 2
.
ˆˆ2 3
pushHsmsEvent
ˆˆ3 @
(
ˆˆ@ A
new
˜˜ .
 FHsmsControlMessageSentEventArgs
˜˜ <
(
˜˜< =
this
˜˜= A
.
˜˜A B
fSecs1ToHsms
˜˜B N
,
˜˜N O
FEventId
˜˜P X
.
˜˜X Y$
HsmsControlMessageSent
˜˜Y o
,
˜˜o p
FResultCode
˜˜q |
.
˜˜| }
Success˜˜} Ñ
,˜˜Ñ Ö
string˜˜Ü å
.˜˜å ç
Empty˜˜ç í
,˜˜í ì#
fSecsControlMessage˜˜î ß
)˜˜ß ®
)
¯¯ 
;
¯¯ 
if
¸¸ 
(
¸¸ !
fSecsControlMessage
˝˝ +
.
˝˝+ ,
fType
˝˝, 1
==
˝˝2 4%
FHsmsControlMessageType
˝˝5 L
.
˝˝L M
	SelectRsp
˝˝M V
&&
˝˝W Y!
fSecsControlMessage
˛˛ +
.
˛˛+ ,
byte3
˛˛, 1
==
˛˛2 4
$num
˛˛5 6
)
ˇˇ 
{
ÄÄ 
this
ÅÅ 
.
ÅÅ 
fSecs1ToHsms
ÅÅ )
.
ÅÅ) *
changeHsmsState
ÅÅ* 9
(
ÅÅ9 :
FConnectMode
ÅÅ: F
.
ÅÅF G
Passive
ÅÅG N
,
ÅÅN O
this
ÅÅP T
.
ÅÅT U
localIp
ÅÅU \
,
ÅÅ\ ]
this
ÅÅ^ b
.
ÅÅb c
	localPort
ÅÅc l
,
ÅÅl m
this
ÅÅn r
.
ÅÅr s
remoteIp
ÅÅs {
,
ÅÅ{ |
thisÅÅ} Å
.ÅÅÅ Ç

remotePortÅÅÇ å
,ÅÅå ç#
FCommunicationStateÅÅé °
.ÅÅ° ¢
SelectedÅÅ¢ ™
)ÅÅ™ ´
;ÅÅ´ ¨
if
àà 
(
àà 
this
àà  
.
àà  !
fSecs1ToHsms
àà! -
.
àà- .
fHsmsConfig
àà. 9
.
àà9 :
linkTestPeriod
àà: H
>
ààI J
$num
ààK L
)
ààL M
{
ââ 
m_fTmrLinktest
ää *
.
ää* +
start
ää+ 0
(
ää0 1
this
ää1 5
.
ää5 6
fSecs1ToHsms
ää6 B
.
ääB C
fHsmsConfig
ääC N
.
ääN O
linkTestPeriod
ääO ]
*
ää^ _
$num
ää` d
)
ääd e
;
ääe f
}
ãã 
}
åå 
}
çç 
else
éé 
if
éé 
(
éé 
e
éé 
.
éé 
fData
éé  
.
éé  !
state
éé! &
is
éé' )
FSecsDataMessage
éé* :
)
éé: ;
{
èè 
fSecsDataMessage
êê $
=
êê% &
(
êê' (
FSecsDataMessage
êê( 8
)
êê8 9
e
êê9 :
.
êê: ;
fData
êê; @
.
êê@ A
state
êêA F
;
êêF G
this
ëë 
.
ëë 
fSecs1ToHsms
ëë %
.
ëë% &
fEventPusher
ëë& 2
.
ëë2 3
pushHsmsEvent
ëë3 @
(
ëë@ A
new
íí +
FHsmsDataMessageSentEventArgs
íí 9
(
íí9 :
this
íí: >
.
íí> ?
fSecs1ToHsms
íí? K
,
ííK L
FEventId
ííM U
.
ííU V!
HsmsDataMessageSent
ííV i
,
ííi j
FResultCode
íík v
.
íív w
Success
ííw ~
,
íí~ 
stringííÄ Ü
.ííÜ á
Emptyííá å
,ííå ç 
fSecsDataMessageííé û
)ííû ü
)
ìì 
;
ìì 
}
îî 
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
ex
ññ 
)
ññ  
{
óó !
procHsmsErrorRaised
òò #
(
òò# $
ex
òò$ &
)
òò& '
;
òò' (
}
ôô 
finally
öö 
{
õõ !
fSecsControlMessage
úú #
=
úú$ %
null
úú& *
;
úú* +
fSecsDataMessage
ùù  
=
ùù! "
null
ùù# '
;
ùù' (
m_fMainSync
üü 
.
üü 
set
üü 
(
üü  
)
üü  !
;
üü! "
}
†† 
}
°° 	
private
•• 
void
•• 2
$m_fTcpClient_TcpClientDataSendFailed
•• 9
(
••9 :
object
¶¶ 
sender
¶¶ 
,
¶¶ /
!FTcpClientDataSendFailedEventArgs
ßß -
e
ßß. /
)
®® 
{
©© 	!
FSecsControlMessage
™™ !
fSecsControlMessage
™™  3
=
™™4 5
null
™™6 :
;
™™: ;
FSecsDataMessage
´´ 
fSecsDataMessage
´´ -
=
´´. /
null
´´0 4
;
´´4 5
try
≠≠ 
{
ÆÆ 
m_fMainSync
ØØ 
.
ØØ 
wait
ØØ  
(
ØØ  !
)
ØØ! "
;
ØØ" #
if
≥≥ 
(
≥≥ 
e
≥≥ 
.
≥≥ 
fData
≥≥ 
.
≥≥ 
state
≥≥ !
is
≥≥" $!
FSecsControlMessage
≥≥% 8
)
≥≥8 9
{
¥¥ !
fSecsControlMessage
µµ '
=
µµ( )
(
µµ* +!
FSecsControlMessage
µµ+ >
)
µµ> ?
e
µµ? @
.
µµ@ A
fData
µµA F
.
µµF G
state
µµG L
;
µµL M
this
∂∂ 
.
∂∂ 
fSecs1ToHsms
∂∂ %
.
∂∂% &
fEventPusher
∂∂& 2
.
∂∂2 3
pushHsmsEvent
∂∂3 @
(
∂∂@ A
new
∑∑ .
 FHsmsControlMessageSentEventArgs
∑∑ <
(
∑∑< =
this
∑∑= A
.
∑∑A B
fSecs1ToHsms
∑∑B N
,
∑∑N O
FEventId
∑∑P X
.
∑∑X Y$
HsmsControlMessageSent
∑∑Y o
,
∑∑o p
FResultCode
∑∑q |
.
∑∑| }
Error∑∑} Ç
,∑∑Ç É
e∑∑Ñ Ö
.∑∑Ö Ü
message∑∑Ü ç
,∑∑ç é#
fSecsControlMessage∑∑è ¢
)∑∑¢ £
)
∏∏ 
;
∏∏ 
}
ππ 
else
∫∫ 
if
∫∫ 
(
∫∫ 
e
∫∫ 
.
∫∫ 
fData
∫∫  
.
∫∫  !
state
∫∫! &
is
∫∫' )
FSecsDataMessage
∫∫* :
)
∫∫: ;
{
ªª 
fSecsDataMessage
ºº $
=
ºº% &
(
ºº' (
FSecsDataMessage
ºº( 8
)
ºº8 9
e
ºº9 :
.
ºº: ;
fData
ºº; @
.
ºº@ A
state
ººA F
;
ººF G
this
ΩΩ 
.
ΩΩ 
fSecs1ToHsms
ΩΩ %
.
ΩΩ% &
fEventPusher
ΩΩ& 2
.
ΩΩ2 3
pushHsmsEvent
ΩΩ3 @
(
ΩΩ@ A
new
ææ +
FHsmsDataMessageSentEventArgs
ææ 9
(
ææ9 :
this
ææ: >
.
ææ> ?
fSecs1ToHsms
ææ? K
,
ææK L
FEventId
ææM U
.
ææU V!
HsmsDataMessageSent
ææV i
,
ææi j
FResultCode
ææk v
.
ææv w
Error
ææw |
,
ææ| }
e
ææ~ 
.ææ Ä
messageææÄ á
,ææá à 
fSecsDataMessageææâ ô
)ææô ö
)
øø 
;
øø 
}
¿¿ 
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
ex
¬¬ 
)
¬¬  
{
√√ !
procHsmsErrorRaised
ƒƒ #
(
ƒƒ# $
ex
ƒƒ$ &
)
ƒƒ& '
;
ƒƒ' (
}
≈≈ 
finally
∆∆ 
{
«« !
fSecsControlMessage
»» #
=
»»$ %
null
»»& *
;
»»* +
fSecsDataMessage
……  
=
……! "
null
……# '
;
……' (
m_fMainSync
   
.
   
set
   
(
    
)
    !
;
  ! "
}
ÀÀ 
}
ÃÃ 	
private
–– 
void
–– /
!m_fTcpClient_TcpClientErrorRaised
–– 6
(
––6 7
object
—— 
sender
—— 
,
—— ,
FTcpClientErrorRaisedEventArgs
““ *
e
““+ ,
)
”” 
{
‘‘ 	
try
’’ 
{
÷÷ !
procHsmsErrorRaised
◊◊ #
(
◊◊# $
e
◊◊$ %
.
◊◊% &
	exception
◊◊& /
)
◊◊/ 0
;
◊◊0 1
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ 
	Exception
ŸŸ 
ex
ŸŸ 
)
ŸŸ  
{
⁄⁄ !
procHsmsErrorRaised
€€ #
(
€€# $
ex
€€$ &
)
€€& '
;
€€' (
}
‹‹ 
finally
›› 
{
ﬁﬁ 
}
‡‡ 
}
·· 	
}
ÁÁ 
}ËË úß
wD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\HSMS\c_FBaseHsms.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
abstract 
class 
	FBaseHsms %
:& '
IDisposable( 3
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
FIDPointer32 !
m_fSystemBytesPointer 2
=3 4
null5 9
;9 :
private 
string 
	m_localIp  
=! "
string# )
.) *
Empty* /
;/ 0
private 
int 
m_localPort 
=  !
$num" #
;# $
private   
string   

m_remoteIp   !
=  " #
string  $ *
.  * +
Empty  + 0
;  0 1
private!! 
int!! 
m_remotePort!!  
=!!! "
$num!!# $
;!!$ %
public'' 
	FBaseHsms'' 
('' 
FSecs1ToHsms(( 
fSecs1ToHsms(( %
))) 
{** 	
m_fSecs1ToHsms++ 
=++ 
fSecs1ToHsms++ )
;++) *!
m_fSystemBytesPointer,, !
=,," #
new,,$ '
FIDPointer32,,( 4
(,,4 5
),,5 6
;,,6 7
	m_localIp.. 
=.. 
m_fSecs1ToHsms.. &
...& '
fHsmsConfig..' 2
...2 3
localIp..3 :
;..: ;
m_localPort// 
=// 
m_fSecs1ToHsms// (
.//( )
fHsmsConfig//) 4
.//4 5
	localPort//5 >
;//> ?

m_remoteIp00 
=00 
m_fSecs1ToHsms00 '
.00' (
fHsmsConfig00( 3
.003 4
remoteIp004 <
;00< =
m_remotePort11 
=11 
m_fSecs1ToHsms11 )
.11) *
fHsmsConfig11* 5
.115 6

remotePort116 @
;11@ A
}22 	
~66 	
	FBaseHsms66	 
(66 
)77 
{88 	
	myDispose99 
(99 
false99 
)99 
;99 
}:: 	
	protected>> 
virtual>> 
void>> 
	myDispose>> (
(>>( )
bool?? 
	disposing?? 
)@@ 
{AA 	
ifBB 
(BB 
!BB 

m_disposedBB 
)BB 
{CC 
ifDD 
(DD 
	disposingDD 
)DD 
{EE 
ifFF 
(FF !
m_fSystemBytesPointerFF -
!=FF. 0
nullFF1 5
)FF5 6
{GG !
m_fSystemBytesPointerHH -
.HH- .
DisposeHH. 5
(HH5 6
)HH6 7
;HH7 8!
m_fSystemBytesPointerII -
=II. /
nullII0 4
;II4 5
}JJ 
m_fSecs1ToHsmsKK "
=KK# $
nullKK% )
;KK) *
}LL 

m_disposedNN 
=NN 
trueNN !
;NN! "
}OO 
}PP 	
publicXX 
voidXX 
DisposeXX 
(XX 
)YY 
{ZZ 	
	myDispose[[ 
([[ 
true[[ 
)[[ 
;[[ 
GC\\ 
.\\ 
SuppressFinalize\\ 
(\\  
this\\  $
)\\$ %
;\\% &
}]] 	
publicee 
FSecs1ToHsmsee 
fSecs1ToHsmsee (
{ff 	
getgg 
{hh 
tryii 
{jj 
returnkk 
m_fSecs1ToHsmskk )
;kk) *
}ll 
catchmm 
(mm 
	Exceptionmm  
exmm! #
)mm# $
{nn 
FDebugoo 
.oo 
throwExceptionoo )
(oo) *
exoo* ,
)oo, -
;oo- .
}pp 
finallyqq 
{rr 
}tt 
returnuu 
nulluu 
;uu 
}vv 
}ww 	
public{{ 
FIDPointer32{{ 
fSystemBytesPointer{{ /
{|| 	
get}} 
{~~ 
try 
{
ÄÄ 
return
ÅÅ #
m_fSystemBytesPointer
ÅÅ 0
;
ÅÅ0 1
}
ÇÇ 
catch
ÉÉ 
(
ÉÉ 
	Exception
ÉÉ  
ex
ÉÉ! #
)
ÉÉ# $
{
ÑÑ 
FDebug
ÖÖ 
.
ÖÖ 
throwException
ÖÖ )
(
ÖÖ) *
ex
ÖÖ* ,
)
ÖÖ, -
;
ÖÖ- .
}
ÜÜ 
finally
áá 
{
àà 
}
ää 
return
ãã 
null
ãã 
;
ãã 
}
åå 
}
çç 	
public
ëë 
string
ëë 
localIp
ëë 
{
íí 	
get
ìì 
{
îî 
try
ïï 
{
ññ 
return
óó 
	m_localIp
óó $
;
óó$ %
}
òò 
catch
ôô 
(
ôô 
	Exception
ôô  
ex
ôô! #
)
ôô# $
{
öö 
FDebug
õõ 
.
õõ 
throwException
õõ )
(
õõ) *
ex
õõ* ,
)
õõ, -
;
õõ- .
}
úú 
finally
ùù 
{
ûû 
}
†† 
return
°° 
string
°° 
.
°° 
Empty
°° #
;
°°# $
}
¢¢ 
set
§§ 
{
•• 
try
¶¶ 
{
ßß 
	m_localIp
®® 
=
®® 
value
®®  %
;
®®% &
}
©© 
catch
™™ 
(
™™ 
	Exception
™™  
ex
™™! #
)
™™# $
{
´´ 
FDebug
¨¨ 
.
¨¨ 
throwException
¨¨ )
(
¨¨) *
ex
¨¨* ,
)
¨¨, -
;
¨¨- .
}
≠≠ 
finally
ÆÆ 
{
ØØ 
}
±± 
}
≤≤ 
}
≥≥ 	
public
∑∑ 
int
∑∑ 
	localPort
∑∑ 
{
∏∏ 	
get
ππ 
{
∫∫ 
try
ªª 
{
ºº 
return
ΩΩ 
m_localPort
ΩΩ &
;
ΩΩ& '
}
ææ 
catch
øø 
(
øø 
	Exception
øø  
ex
øø! #
)
øø# $
{
¿¿ 
FDebug
¡¡ 
.
¡¡ 
throwException
¡¡ )
(
¡¡) *
ex
¡¡* ,
)
¡¡, -
;
¡¡- .
}
¬¬ 
finally
√√ 
{
ƒƒ 
}
∆∆ 
return
«« 
$num
«« 
;
«« 
}
»» 
set
   
{
ÀÀ 
try
ÃÃ 
{
ÕÕ 
m_localPort
ŒŒ 
=
ŒŒ  !
value
ŒŒ" '
;
ŒŒ' (
}
œœ 
catch
–– 
(
–– 
	Exception
––  
ex
––! #
)
––# $
{
—— 
FDebug
““ 
.
““ 
throwException
““ )
(
““) *
ex
““* ,
)
““, -
;
““- .
}
”” 
finally
‘‘ 
{
’’ 
}
◊◊ 
}
ÿÿ 
}
ŸŸ 	
public
›› 
string
›› 
remoteIp
›› 
{
ﬁﬁ 	
get
ﬂﬂ 
{
‡‡ 
try
·· 
{
‚‚ 
return
„„ 

m_remoteIp
„„ %
;
„„% &
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ  
ex
ÂÂ! #
)
ÂÂ# $
{
ÊÊ 
FDebug
ÁÁ 
.
ÁÁ 
throwException
ÁÁ )
(
ÁÁ) *
ex
ÁÁ* ,
)
ÁÁ, -
;
ÁÁ- .
}
ËË 
finally
ÈÈ 
{
ÍÍ 
}
ÏÏ 
return
ÌÌ 
string
ÌÌ 
.
ÌÌ 
Empty
ÌÌ #
;
ÌÌ# $
}
ÓÓ 
set
 
{
ÒÒ 
try
ÚÚ 
{
ÛÛ 

m_remoteIp
ÙÙ 
=
ÙÙ  
value
ÙÙ! &
;
ÙÙ& '
}
ıı 
catch
ˆˆ 
(
ˆˆ 
	Exception
ˆˆ  
ex
ˆˆ! #
)
ˆˆ# $
{
˜˜ 
FDebug
¯¯ 
.
¯¯ 
throwException
¯¯ )
(
¯¯) *
ex
¯¯* ,
)
¯¯, -
;
¯¯- .
}
˘˘ 
finally
˙˙ 
{
˚˚ 
}
˝˝ 
}
˛˛ 
}
ˇˇ 	
public
ÉÉ 
int
ÉÉ 

remotePort
ÉÉ 
{
ÑÑ 	
get
ÖÖ 
{
ÜÜ 
try
áá 
{
àà 
return
ââ 
m_remotePort
ââ '
;
ââ' (
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã  
ex
ãã! #
)
ãã# $
{
åå 
FDebug
çç 
.
çç 
throwException
çç )
(
çç) *
ex
çç* ,
)
çç, -
;
çç- .
}
éé 
finally
èè 
{
êê 
}
íí 
return
ìì 
$num
ìì 
;
ìì 
}
îî 
set
ññ 
{
óó 
try
òò 
{
ôô 
m_remotePort
öö  
=
öö! "
value
öö# (
;
öö( )
}
õõ 
catch
úú 
(
úú 
	Exception
úú  
ex
úú! #
)
úú# $
{
ùù 
FDebug
ûû 
.
ûû 
throwException
ûû )
(
ûû) *
ex
ûû* ,
)
ûû, -
;
ûû- .
}
üü 
finally
†† 
{
°° 
}
££ 
}
§§ 
}
•• 	
public
≠≠ 
abstract
≠≠ 
void
≠≠ 
open
≠≠ !
(
≠≠! "
)
ÆÆ 
;
ÆÆ 
public
≤≤ 
abstract
≤≤ 
void
≤≤ 
close
≤≤ "
(
≤≤" #
)
≥≥ 
;
≥≥ 
public
∑∑ 
abstract
∑∑ 
void
∑∑ 
send
∑∑ !
(
∑∑! "
FSecsDataMessage
∏∏ 
fSecsDataMessage
∏∏ -
)
ππ 
;
ππ 
public
ΩΩ 
string
ΩΩ $
getSelectStatusMessage
ΩΩ ,
(
ΩΩ, -
byte
ææ 
status
ææ 
)
øø 
{
¿¿ 	
try
¡¡ 
{
¬¬ 
if
√√ 
(
√√ 
status
√√ 
==
√√ 
$num
√√ 
)
√√  
{
ƒƒ 
return
≈≈ 
string
≈≈ !
.
≈≈! "
Empty
≈≈" '
;
≈≈' (
}
∆∆ 
else
«« 
if
«« 
(
«« 
status
«« 
==
««  "
$num
««# $
)
««$ %
{
»» 
return
…… 

FConstants
…… %
.
……% &
err_m_12001
……& 1
;
……1 2
}
   
else
ÀÀ 
if
ÀÀ 
(
ÀÀ 
status
ÀÀ 
==
ÀÀ  "
$num
ÀÀ# $
)
ÀÀ$ %
{
ÃÃ 
return
ÕÕ 

FConstants
ÕÕ %
.
ÕÕ% &
err_m_12002
ÕÕ& 1
;
ÕÕ1 2
}
ŒŒ 
else
œœ 
if
œœ 
(
œœ 
status
œœ 
==
œœ  "
$num
œœ# $
)
œœ$ %
{
–– 
return
—— 

FConstants
—— %
.
——% &
err_m_12003
——& 1
;
——1 2
}
““ 
else
”” 
if
”” 
(
”” 
status
”” 
<
””  !
$num
””" %
)
””% &
{
‘‘ 
return
’’ 

FConstants
’’ %
.
’’% &
err_m_12004
’’& 1
;
’’1 2
}
÷÷ 
return
◊◊ 

FConstants
◊◊ !
.
◊◊! "
err_m_12128
◊◊" -
;
◊◊- .
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ 
	Exception
ŸŸ 
ex
ŸŸ 
)
ŸŸ  
{
⁄⁄ 
FDebug
€€ 
.
€€ 
throwException
€€ %
(
€€% &
ex
€€& (
)
€€( )
;
€€) *
}
‹‹ 
finally
›› 
{
ﬁﬁ 
}
‡‡ 
return
·· 
string
·· 
.
·· 
Empty
·· 
;
··  
}
‚‚ 	
public
ÊÊ 
string
ÊÊ &
getDeselectStatusMessage
ÊÊ .
(
ÊÊ. /
int
ÁÁ 
status
ÁÁ 
)
ËË 
{
ÈÈ 	
try
ÍÍ 
{
ÎÎ 
if
ÏÏ 
(
ÏÏ 
status
ÏÏ 
==
ÏÏ 
$num
ÏÏ 
)
ÏÏ  
{
ÌÌ 
return
ÓÓ 
string
ÓÓ !
.
ÓÓ! "
Empty
ÓÓ" '
;
ÓÓ' (
}
ÔÔ 
else
 
if
 
(
 
status
 
==
  "
$num
# $
)
$ %
{
ÒÒ 
return
ÚÚ 

FConstants
ÚÚ %
.
ÚÚ% &
err_m_14001
ÚÚ& 1
;
ÚÚ1 2
}
ÛÛ 
else
ÙÙ 
if
ÙÙ 
(
ÙÙ 
status
ÙÙ 
==
ÙÙ  "
$num
ÙÙ# $
)
ÙÙ$ %
{
ıı 
return
ˆˆ 

FConstants
ˆˆ %
.
ˆˆ% &
err_m_14002
ˆˆ& 1
;
ˆˆ1 2
}
˜˜ 
else
¯¯ 
if
¯¯ 
(
¯¯ 
status
¯¯ 
<
¯¯  !
$num
¯¯" %
)
¯¯% &
{
˘˘ 
return
˙˙ 

FConstants
˙˙ %
.
˙˙% &
err_m_14003
˙˙& 1
;
˙˙1 2
}
˚˚ 
return
¸¸ 

FConstants
¸¸ !
.
¸¸! "
err_m_14128
¸¸" -
;
¸¸- .
}
˝˝ 
catch
˛˛ 
(
˛˛ 
	Exception
˛˛ 
ex
˛˛ 
)
˛˛  
{
ˇˇ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ %
(
ÄÄ% &
ex
ÄÄ& (
)
ÄÄ( )
;
ÄÄ) *
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
return
ÜÜ 
string
ÜÜ 
.
ÜÜ 
Empty
ÜÜ 
;
ÜÜ  
}
áá 	
public
ãã 
string
ãã $
getRejectReasonMessage
ãã ,
(
ãã, -
int
åå 

reasonCode
åå 
)
çç 
{
éé 	
try
èè 
{
êê 
if
ëë 
(
ëë 

reasonCode
ëë 
==
ëë !
$num
ëë" #
)
ëë# $
{
íí 
return
ìì 
string
ìì !
.
ìì! "
Empty
ìì" '
;
ìì' (
}
îî 
else
ïï 
if
ïï 
(
ïï 

reasonCode
ïï #
==
ïï$ &
$num
ïï' (
)
ïï( )
{
ññ 
return
óó 

FConstants
óó %
.
óó% &
err_m_17001
óó& 1
;
óó1 2
}
òò 
else
ôô 
if
ôô 
(
ôô 

reasonCode
ôô #
==
ôô$ &
$num
ôô' (
)
ôô( )
{
öö 
return
õõ 

FConstants
õõ %
.
õõ% &
err_m_17002
õõ& 1
;
õõ1 2
}
úú 
else
ùù 
if
ùù 
(
ùù 

reasonCode
ùù #
==
ùù$ &
$num
ùù' (
)
ùù( )
{
ûû 
return
üü 

FConstants
üü %
.
üü% &
err_m_17003
üü& 1
;
üü1 2
}
†† 
else
°° 
if
°° 
(
°° 

reasonCode
°° #
==
°°$ &
$num
°°' (
)
°°( )
{
¢¢ 
return
££ 

FConstants
££ %
.
££% &
err_m_17004
££& 1
;
££1 2
}
§§ 
else
•• 
if
•• 
(
•• 

reasonCode
•• #
<
••$ %
$num
••& )
)
••) *
{
¶¶ 
return
ßß 

FConstants
ßß %
.
ßß% &
err_m_17128
ßß& 1
;
ßß1 2
}
®® 
return
©© 

FConstants
©© !
.
©©! "
err_m_14128
©©" -
;
©©- .
}
™™ 
catch
´´ 
(
´´ 
	Exception
´´ 
ex
´´ 
)
´´  
{
¨¨ 
FDebug
≠≠ 
.
≠≠ 
throwException
≠≠ %
(
≠≠% &
ex
≠≠& (
)
≠≠( )
;
≠≠) *
}
ÆÆ 
finally
ØØ 
{
∞∞ 
}
≤≤ 
return
≥≥ 
string
≥≥ 
.
≥≥ 
Empty
≥≥ 
;
≥≥  
}
¥¥ 	
public
∏∏ 
string
∏∏ 
getTimeoutMessage
∏∏ '
(
∏∏' (
FSecsTimeout
ππ 
fTimeout
ππ !
)
∫∫ 
{
ªª 	
try
ºº 
{
ΩΩ 
if
ææ 
(
ææ 
fTimeout
ææ 
==
ææ 
FSecsTimeout
ææ  ,
.
ææ, -
T3
ææ- /
)
ææ/ 0
{
øø 
return
¿¿ 

FConstants
¿¿ %
.
¿¿% &
err_m_20003
¿¿& 1
;
¿¿1 2
}
¡¡ 
else
¬¬ 
if
¬¬ 
(
¬¬ 
fTimeout
¬¬ !
==
¬¬" $
FSecsTimeout
¬¬% 1
.
¬¬1 2
T5
¬¬2 4
)
¬¬4 5
{
√√ 
return
ƒƒ 

FConstants
ƒƒ %
.
ƒƒ% &
err_m_20005
ƒƒ& 1
;
ƒƒ1 2
}
≈≈ 
else
∆∆ 
if
∆∆ 
(
∆∆ 
fTimeout
∆∆ !
==
∆∆" $
FSecsTimeout
∆∆% 1
.
∆∆1 2
T6
∆∆2 4
)
∆∆4 5
{
«« 
return
»» 

FConstants
»» %
.
»»% &
err_m_20006
»»& 1
;
»»1 2
}
…… 
else
   
if
   
(
   
fTimeout
   !
==
  " $
FSecsTimeout
  % 1
.
  1 2
T7
  2 4
)
  4 5
{
ÀÀ 
return
ÃÃ 

FConstants
ÃÃ %
.
ÃÃ% &
err_m_20007
ÃÃ& 1
;
ÃÃ1 2
}
ÕÕ 
else
ŒŒ 
if
ŒŒ 
(
ŒŒ 
fTimeout
ŒŒ !
==
ŒŒ" $
FSecsTimeout
ŒŒ% 1
.
ŒŒ1 2
T8
ŒŒ2 4
)
ŒŒ4 5
{
œœ 
return
–– 

FConstants
–– %
.
––% &
err_m_20008
––& 1
;
––1 2
}
—— 
return
““ 
string
““ 
.
““ 
Empty
““ #
;
““# $
}
”” 
catch
‘‘ 
(
‘‘ 
	Exception
‘‘ 
ex
‘‘ 
)
‘‘  
{
’’ 
FDebug
÷÷ 
.
÷÷ 
throwException
÷÷ %
(
÷÷% &
ex
÷÷& (
)
÷÷( )
;
÷÷) *
}
◊◊ 
finally
ÿÿ 
{
ŸŸ 
}
€€ 
return
‹‹ 
string
‹‹ 
.
‹‹ 
Empty
‹‹ 
;
‹‹  
}
›› 	
public
·· 
string
·· #
getTimeoutDescription
·· +
(
··+ ,
FSecsTimeout
‚‚ 
fTimeout
‚‚ !
)
„„ 
{
‰‰ 	
try
ÂÂ 
{
ÊÊ 
if
ÁÁ 
(
ÁÁ 
fTimeout
ÁÁ 
==
ÁÁ 
FSecsTimeout
ÁÁ  ,
.
ÁÁ, -
T3
ÁÁ- /
)
ÁÁ/ 0
{
ËË 
return
ÈÈ 

FConstants
ÈÈ %
.
ÈÈ% &
err_m_21003
ÈÈ& 1
;
ÈÈ1 2
}
ÍÍ 
else
ÎÎ 
if
ÎÎ 
(
ÎÎ 
fTimeout
ÎÎ !
==
ÎÎ" $
FSecsTimeout
ÎÎ% 1
.
ÎÎ1 2
T5
ÎÎ2 4
)
ÎÎ4 5
{
ÏÏ 
return
ÌÌ 

FConstants
ÌÌ %
.
ÌÌ% &
err_m_21005
ÌÌ& 1
;
ÌÌ1 2
}
ÓÓ 
else
ÔÔ 
if
ÔÔ 
(
ÔÔ 
fTimeout
ÔÔ !
==
ÔÔ" $
FSecsTimeout
ÔÔ% 1
.
ÔÔ1 2
T6
ÔÔ2 4
)
ÔÔ4 5
{
 
return
ÒÒ 

FConstants
ÒÒ %
.
ÒÒ% &
err_m_21006
ÒÒ& 1
;
ÒÒ1 2
}
ÚÚ 
else
ÛÛ 
if
ÛÛ 
(
ÛÛ 
fTimeout
ÛÛ !
==
ÛÛ" $
FSecsTimeout
ÛÛ% 1
.
ÛÛ1 2
T7
ÛÛ2 4
)
ÛÛ4 5
{
ÙÙ 
return
ıı 

FConstants
ıı %
.
ıı% &
err_m_21007
ıı& 1
;
ıı1 2
}
ˆˆ 
else
˜˜ 
if
˜˜ 
(
˜˜ 
fTimeout
˜˜ !
==
˜˜" $
FSecsTimeout
˜˜% 1
.
˜˜1 2
T8
˜˜2 4
)
˜˜4 5
{
¯¯ 
return
˘˘ 

FConstants
˘˘ %
.
˘˘% &
err_m_21008
˘˘& 1
;
˘˘1 2
}
˙˙ 
return
˚˚ 
string
˚˚ 
.
˚˚ 
Empty
˚˚ #
;
˚˚# $
}
¸¸ 
catch
˝˝ 
(
˝˝ 
	Exception
˝˝ 
ex
˝˝ 
)
˝˝  
{
˛˛ 
FDebug
ˇˇ 
.
ˇˇ 
throwException
ˇˇ %
(
ˇˇ% &
ex
ˇˇ& (
)
ˇˇ( )
;
ˇˇ) *
}
ÄÄ 
finally
ÅÅ 
{
ÇÇ 
}
ÑÑ 
return
ÖÖ 
string
ÖÖ 
.
ÖÖ 
Empty
ÖÖ 
;
ÖÖ  
}
ÜÜ 	
}
åå 
}çç ﬁû
}D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\HSMS\c_FHsmsRecvBuffer.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FHsmsRecvBuffer "
:# $
IDisposable% 0
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
List 
< 
byte 
> 
m_data !
=" #
null$ (
;( )
private 
bool 
m_isLengthComp #
=$ %
false& +
;+ ,
private 
bool 
m_isHeaderComp #
=$ %
false& +
;+ ,
private   
bool   
m_isBodyComp   !
=  " #
false  $ )
;  ) *
private!! 
bool!! 
m_isCompleted!! "
=!!# $
true!!% )
;!!) *
private## 
UInt32## 
m_length## 
=##  !
$num##" #
;### $
private$$ 
UInt16$$ 
m_sessionId$$ "
=$$# $
$num$$% &
;$$& '
private%% 
byte%% 
m_byte2%% 
=%% 
$num%%  
;%%  !
private&& 
byte&& 
m_byte3&& 
=&& 
$num&&  
;&&  !
private'' 
byte'' 
m_ptype'' 
='' 
$num''  
;''  !
private(( 
byte(( 
m_stype(( 
=(( 
$num((  
;((  !
private)) 
UInt32)) 
m_systemBytes)) $
=))% &
$num))' (
;))( )
private** 
List** 
<** 
byte** 
>** 
m_body** !
=**" #
null**$ (
;**( )
public00 
FHsmsRecvBuffer00 
(00 
)11 
{22 	
m_data33 
=33 
new33 
List33 
<33 
byte33 "
>33" #
(33# $
)33$ %
;33% &
}44 	
~88 	
FHsmsRecvBuffer88	 
(88 
)99 
{:: 	
	myDispose;; 
(;; 
false;; 
);; 
;;; 
}<< 	
	protected@@ 
void@@ 
	myDispose@@  
(@@  !
boolAA 
	disposingAA 
)BB 
{CC 	
ifDD 
(DD 
!DD 

m_disposedDD 
)DD 
{EE 
ifFF 
(FF 
	disposingFF 
)FF 
{GG 
m_dataHH 
=HH 
nullHH !
;HH! "
m_bodyII 
=II 
nullII !
;II! "
}JJ 

m_disposedKK 
=KK 
trueKK !
;KK! "
}LL 
}MM 	
publicUU 
voidUU 
DisposeUU 
(UU 
)VV 
{WW 	
	myDisposeXX 
(XX 
trueXX 
)XX 
;XX 
GCYY 
.YY 
SuppressFinalizeYY 
(YY  
thisYY  $
)YY$ %
;YY% &
}ZZ 	
publicbb 
boolbb 
isCompletedbb 
{cc 	
getdd 
{ee 
tryff 
{gg 
returnhh 
m_isCompletedhh (
;hh( )
}ii 
catchjj 
(jj 
	Exceptionjj  
exjj! #
)jj# $
{kk 
FDebugll 
.ll 
throwExceptionll )
(ll) *
exll* ,
)ll, -
;ll- .
}mm 
finallynn 
{oo 
}qq 
returnrr 
falserr 
;rr 
}ss 
}tt 	
publicxx 
UInt32xx 
lengthxx 
{yy 	
getzz 
{{{ 
try|| 
{}} 
return~~ 
m_length~~ #
;~~# $
} 
catch
ÄÄ 
(
ÄÄ 
	Exception
ÄÄ  
ex
ÄÄ! #
)
ÄÄ# $
{
ÅÅ 
FDebug
ÇÇ 
.
ÇÇ 
throwException
ÇÇ )
(
ÇÇ) *
ex
ÇÇ* ,
)
ÇÇ, -
;
ÇÇ- .
}
ÉÉ 
finally
ÑÑ 
{
ÖÖ 
}
áá 
return
àà 
$num
àà 
;
àà 
}
ââ 
}
ää 	
public
éé 
UInt16
éé 
	sessionId
éé 
{
èè 	
get
êê 
{
ëë 
try
íí 
{
ìì 
return
îî 
m_sessionId
îî &
;
îî& '
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ  
ex
ññ! #
)
ññ# $
{
óó 
FDebug
òò 
.
òò 
throwException
òò )
(
òò) *
ex
òò* ,
)
òò, -
;
òò- .
}
ôô 
finally
öö 
{
õõ 
}
ùù 
return
ûû 
$num
ûû 
;
ûû 
}
üü 
}
†† 	
public
§§ 
byte
§§ 
byte2
§§ 
{
•• 	
get
¶¶ 
{
ßß 
try
®® 
{
©© 
return
™™ 
m_byte2
™™ "
;
™™" #
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨  
ex
¨¨! #
)
¨¨# $
{
≠≠ 
FDebug
ÆÆ 
.
ÆÆ 
throwException
ÆÆ )
(
ÆÆ) *
ex
ÆÆ* ,
)
ÆÆ, -
;
ÆÆ- .
}
ØØ 
finally
∞∞ 
{
±± 
}
≥≥ 
return
¥¥ 
$num
¥¥ 
;
¥¥ 
}
µµ 
}
∂∂ 	
public
∫∫ 
byte
∫∫ 
byte3
∫∫ 
{
ªª 	
get
ºº 
{
ΩΩ 
try
ææ 
{
øø 
return
¿¿ 
m_byte3
¿¿ "
;
¿¿" #
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬  
ex
¬¬! #
)
¬¬# $
{
√√ 
FDebug
ƒƒ 
.
ƒƒ 
throwException
ƒƒ )
(
ƒƒ) *
ex
ƒƒ* ,
)
ƒƒ, -
;
ƒƒ- .
}
≈≈ 
finally
∆∆ 
{
«« 
}
…… 
return
   
$num
   
;
   
}
ÀÀ 
}
ÃÃ 	
public
–– 
byte
–– 
ptype
–– 
{
—— 	
get
““ 
{
”” 
try
‘‘ 
{
’’ 
return
÷÷ 
m_ptype
÷÷ "
;
÷÷" #
}
◊◊ 
catch
ÿÿ 
(
ÿÿ 
	Exception
ÿÿ  
ex
ÿÿ! #
)
ÿÿ# $
{
ŸŸ 
FDebug
⁄⁄ 
.
⁄⁄ 
throwException
⁄⁄ )
(
⁄⁄) *
ex
⁄⁄* ,
)
⁄⁄, -
;
⁄⁄- .
}
€€ 
finally
‹‹ 
{
›› 
}
ﬂﬂ 
return
‡‡ 
$num
‡‡ 
;
‡‡ 
}
·· 
}
‚‚ 	
public
ÊÊ 
byte
ÊÊ 
stype
ÊÊ 
{
ÁÁ 	
get
ËË 
{
ÈÈ 
try
ÍÍ 
{
ÎÎ 
return
ÏÏ 
m_stype
ÏÏ "
;
ÏÏ" #
}
ÌÌ 
catch
ÓÓ 
(
ÓÓ 
	Exception
ÓÓ  
ex
ÓÓ! #
)
ÓÓ# $
{
ÔÔ 
FDebug
 
.
 
throwException
 )
(
) *
ex
* ,
)
, -
;
- .
}
ÒÒ 
finally
ÚÚ 
{
ÛÛ 
}
ıı 
return
ˆˆ 
$num
ˆˆ 
;
ˆˆ 
}
˜˜ 
}
¯¯ 	
public
¸¸ 
UInt32
¸¸ 
systemBytes
¸¸ !
{
˝˝ 	
get
˛˛ 
{
ˇˇ 
try
ÄÄ 
{
ÅÅ 
return
ÇÇ 
m_systemBytes
ÇÇ (
;
ÇÇ( )
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ  
ex
ÑÑ! #
)
ÑÑ# $
{
ÖÖ 
FDebug
ÜÜ 
.
ÜÜ 
throwException
ÜÜ )
(
ÜÜ) *
ex
ÜÜ* ,
)
ÜÜ, -
;
ÜÜ- .
}
áá 
finally
àà 
{
ââ 
}
ãã 
return
åå 
$num
åå 
;
åå 
}
çç 
}
éé 	
public
íí 
byte
íí 
[
íí 
]
íí 
body
íí 
{
ìì 	
get
îî 
{
ïï 
try
ññ 
{
óó 
return
òò 
m_body
òò !
.
òò! "
ToArray
òò" )
(
òò) *
)
òò* +
;
òò+ ,
}
ôô 
catch
öö 
(
öö 
	Exception
öö  
ex
öö! #
)
öö# $
{
õõ 
FDebug
úú 
.
úú 
throwException
úú )
(
úú) *
ex
úú* ,
)
úú, -
;
úú- .
}
ùù 
finally
ûû 
{
üü 
}
°° 
return
¢¢ 
null
¢¢ 
;
¢¢ 
}
££ 
}
§§ 	
public
®® 
byte
®® 
stream
®® 
{
©© 	
get
™™ 
{
´´ 
try
¨¨ 
{
≠≠ 
return
ÆÆ 
(
ÆÆ 
byte
ÆÆ  
)
ÆÆ  !
(
ÆÆ! "
m_byte2
ÆÆ" )
&
ÆÆ* +
$num
ÆÆ, 0
)
ÆÆ0 1
;
ÆÆ1 2
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞  
ex
∞∞! #
)
∞∞# $
{
±± 
FDebug
≤≤ 
.
≤≤ 
throwException
≤≤ )
(
≤≤) *
ex
≤≤* ,
)
≤≤, -
;
≤≤- .
}
≥≥ 
finally
¥¥ 
{
µµ 
}
∑∑ 
return
∏∏ 
$num
∏∏ 
;
∏∏ 
}
ππ 
}
∫∫ 	
public
ææ 
byte
ææ 
function
ææ 
{
øø 	
get
¿¿ 
{
¡¡ 
try
¬¬ 
{
√√ 
return
ƒƒ 
m_byte3
ƒƒ "
;
ƒƒ" #
}
≈≈ 
catch
∆∆ 
(
∆∆ 
	Exception
∆∆  
ex
∆∆! #
)
∆∆# $
{
«« 
FDebug
»» 
.
»» 
throwException
»» )
(
»») *
ex
»»* ,
)
»», -
;
»»- .
}
…… 
finally
   
{
ÀÀ 
}
ÕÕ 
return
ŒŒ 
$num
ŒŒ 
;
ŒŒ 
}
œœ 
}
–– 	
public
‘‘ 
bool
‘‘ 
wbit
‘‘ 
{
’’ 	
get
÷÷ 
{
◊◊ 
try
ÿÿ 
{
ŸŸ 
return
⁄⁄ 
(
⁄⁄ 
m_byte2
⁄⁄ #
&
⁄⁄$ %
$num
⁄⁄& *
)
⁄⁄* +
==
⁄⁄, .
$num
⁄⁄/ 3
?
⁄⁄4 5
false
⁄⁄6 ;
:
⁄⁄< =
true
⁄⁄> B
;
⁄⁄B C
}
€€ 
catch
‹‹ 
(
‹‹ 
	Exception
‹‹  
ex
‹‹! #
)
‹‹# $
{
›› 
FDebug
ﬁﬁ 
.
ﬁﬁ 
throwException
ﬁﬁ )
(
ﬁﬁ) *
ex
ﬁﬁ* ,
)
ﬁﬁ, -
;
ﬁﬁ- .
}
ﬂﬂ 
finally
‡‡ 
{
·· 
}
„„ 
return
‰‰ 
false
‰‰ 
;
‰‰ 
}
ÂÂ 
}
ÊÊ 	
public
ÓÓ 
void
ÓÓ 
init
ÓÓ 
(
ÓÓ 
)
ÔÔ 
{
 	
try
ÒÒ 
{
ÚÚ 
m_isLengthComp
ÛÛ 
=
ÛÛ  
false
ÛÛ! &
;
ÛÛ& '
m_isHeaderComp
ÙÙ 
=
ÙÙ  
false
ÙÙ! &
;
ÙÙ& '
m_isBodyComp
ıı 
=
ıı 
false
ıı $
;
ıı$ %
m_length
˜˜ 
=
˜˜ 
$num
˜˜ 
;
˜˜ 
m_sessionId
¯¯ 
=
¯¯ 
$num
¯¯ 
;
¯¯  
m_byte2
˘˘ 
=
˘˘ 
$num
˘˘ 
;
˘˘ 
m_byte3
˙˙ 
=
˙˙ 
$num
˙˙ 
;
˙˙ 
m_ptype
˚˚ 
=
˚˚ 
$num
˚˚ 
;
˚˚ 
m_stype
¸¸ 
=
¸¸ 
$num
¸¸ 
;
¸¸ 
m_systemBytes
˝˝ 
=
˝˝ 
$num
˝˝  !
;
˝˝! "
m_body
˛˛ 
=
˛˛ 
new
˛˛ 
List
˛˛ !
<
˛˛! "
byte
˛˛" &
>
˛˛& '
(
˛˛' (
)
˛˛( )
;
˛˛) *
}
ˇˇ 
catch
ÄÄ 
(
ÄÄ 
	Exception
ÄÄ 
ex
ÄÄ 
)
ÄÄ  
{
ÅÅ 
FDebug
ÇÇ 
.
ÇÇ 
throwException
ÇÇ %
(
ÇÇ% &
ex
ÇÇ& (
)
ÇÇ( )
;
ÇÇ) *
}
ÉÉ 
finally
ÑÑ 
{
ÖÖ 
}
áá 
}
àà 	
public
åå 
void
åå 
clear
åå 
(
åå 
)
çç 
{
éé 	
try
èè 
{
êê 
init
ëë 
(
ëë 
)
ëë 
;
ëë 
m_data
íí 
.
íí 
Clear
íí 
(
íí 
)
íí 
;
íí 
}
ìì 
catch
îî 
(
îî 
	Exception
îî 
ex
îî 
)
îî  
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ %
(
ññ% &
ex
ññ& (
)
ññ( )
;
ññ) *
}
óó 
finally
òò 
{
ôô 
}
õõ 
}
úú 	
public
†† 
void
†† 
input
†† 
(
†† 
byte
°° 
[
°° 
]
°° 
data
°° 
)
¢¢ 
{
££ 	
try
§§ 
{
•• 
m_data
¶¶ 
.
¶¶ 
AddRange
¶¶ 
(
¶¶  
data
¶¶  $
)
¶¶$ %
;
¶¶% &
}
ßß 
catch
®® 
(
®® 
	Exception
®® 
ex
®® 
)
®®  
{
©© 
FDebug
™™ 
.
™™ 
throwException
™™ %
(
™™% &
ex
™™& (
)
™™( )
;
™™) *
}
´´ 
finally
¨¨ 
{
≠≠ 
}
ØØ 
}
∞∞ 	
public
¥¥ 
bool
¥¥ 
parse
¥¥ 
(
¥¥ 
)
µµ 
{
∂∂ 	
try
∑∑ 
{
∏∏ 
while
ππ 
(
ππ 
m_data
ππ 
.
ππ 
Count
ππ #
>
ππ$ %
$num
ππ& '
)
ππ' (
{
∫∫ 
if
ªª 
(
ªª 
!
ªª 
m_isLengthComp
ªª '
)
ªª' (
{
ºº 
m_isCompleted
ΩΩ %
=
ΩΩ& '
false
ΩΩ( -
;
ΩΩ- .
if
ææ 
(
ææ 
m_data
ææ "
.
ææ" #
Count
ææ# (
<
ææ) *
$num
ææ+ ,
)
ææ, -
{
øø 
break
¿¿ !
;
¿¿! "
}
¡¡ 
m_length
√√  
=
√√! "
FByteConverter
√√# 1
.
√√1 2
toUInt32
√√2 :
(
√√: ;
m_data
√√; A
.
√√A B
GetRange
√√B J
(
√√J K
$num
√√K L
,
√√L M
$num
√√N O
)
√√O P
.
√√P Q
ToArray
√√Q X
(
√√X Y
)
√√Y Z
,
√√Z [
true
√√\ `
)
√√` a
;
√√a b
m_data
≈≈ 
.
≈≈ 
RemoveRange
≈≈ *
(
≈≈* +
$num
≈≈+ ,
,
≈≈, -
$num
≈≈. /
)
≈≈/ 0
;
≈≈0 1
m_isLengthComp
∆∆ &
=
∆∆' (
true
∆∆) -
;
∆∆- .
}
«« 
else
»» 
if
»» 
(
»» 
!
»» 
m_isHeaderComp
»» ,
)
»», -
{
…… 
if
   
(
   
m_data
   "
.
  " #
Count
  # (
<
  ) *
$num
  + -
)
  - .
{
ÀÀ 
break
ÃÃ !
;
ÃÃ! "
}
ÕÕ 
m_sessionId
œœ #
=
œœ$ %
FByteConverter
œœ& 4
.
œœ4 5
toUInt16
œœ5 =
(
œœ= >
m_data
œœ> D
.
œœD E
GetRange
œœE M
(
œœM N
$num
œœN O
,
œœO P
$num
œœQ R
)
œœR S
.
œœS T
ToArray
œœT [
(
œœ[ \
)
œœ\ ]
,
œœ] ^
true
œœ_ c
)
œœc d
;
œœd e
m_byte2
–– 
=
––  !
m_data
––" (
[
––( )
$num
––) *
]
––* +
;
––+ ,
m_byte3
—— 
=
——  !
m_data
——" (
[
——( )
$num
——) *
]
——* +
;
——+ ,
m_ptype
““ 
=
““  !
m_data
““" (
[
““( )
$num
““) *
]
““* +
;
““+ ,
m_stype
”” 
=
””  !
m_data
””" (
[
””( )
$num
””) *
]
””* +
;
””+ ,
m_systemBytes
‘‘ %
=
‘‘& '
FByteConverter
‘‘( 6
.
‘‘6 7
toUInt32
‘‘7 ?
(
‘‘? @
m_data
‘‘@ F
.
‘‘F G
GetRange
‘‘G O
(
‘‘O P
$num
‘‘P Q
,
‘‘Q R
$num
‘‘S T
)
‘‘T U
.
‘‘U V
ToArray
‘‘V ]
(
‘‘] ^
)
‘‘^ _
,
‘‘_ `
true
‘‘a e
)
‘‘e f
;
‘‘f g
m_data
÷÷ 
.
÷÷ 
RemoveRange
÷÷ *
(
÷÷* +
$num
÷÷+ ,
,
÷÷, -
$num
÷÷. 0
)
÷÷0 1
;
÷÷1 2
m_isHeaderComp
◊◊ &
=
◊◊' (
true
◊◊) -
;
◊◊- .
if
‹‹ 
(
‹‹ 
m_length
‹‹ $
==
‹‹% '
$num
‹‹( *
)
‹‹* +
{
›› 
m_isBodyComp
ﬁﬁ (
=
ﬁﬁ) *
true
ﬁﬁ+ /
;
ﬁﬁ/ 0
m_isCompleted
ﬂﬂ )
=
ﬂﬂ* +
true
ﬂﬂ, 0
;
ﬂﬂ0 1
return
‡‡ "
true
‡‡# '
;
‡‡' (
}
·· 
}
‚‚ 
else
„„ 
if
„„ 
(
„„ 
!
„„ 
m_isBodyComp
„„ *
)
„„* +
{
‰‰ 
if
ÂÂ 
(
ÂÂ 
m_data
ÂÂ "
.
ÂÂ" #
Count
ÂÂ# (
<
ÂÂ) *
m_length
ÂÂ+ 3
-
ÂÂ4 5
$num
ÂÂ6 8
)
ÂÂ8 9
{
ÊÊ 
break
ÁÁ !
;
ÁÁ! "
}
ËË 
m_body
ÍÍ 
.
ÍÍ 
AddRange
ÍÍ '
(
ÍÍ' (
m_data
ÍÍ( .
.
ÍÍ. /
GetRange
ÍÍ/ 7
(
ÍÍ7 8
$num
ÍÍ8 9
,
ÍÍ9 :
(
ÍÍ; <
int
ÍÍ< ?
)
ÍÍ? @
(
ÍÍ@ A
m_length
ÍÍA I
-
ÍÍJ K
$num
ÍÍL N
)
ÍÍN O
)
ÍÍO P
.
ÍÍP Q
ToArray
ÍÍQ X
(
ÍÍX Y
)
ÍÍY Z
)
ÍÍZ [
;
ÍÍ[ \
m_data
ÏÏ 
.
ÏÏ 
RemoveRange
ÏÏ *
(
ÏÏ* +
$num
ÏÏ+ ,
,
ÏÏ, -
(
ÏÏ. /
int
ÏÏ/ 2
)
ÏÏ2 3
(
ÏÏ3 4
m_length
ÏÏ4 <
-
ÏÏ= >
$num
ÏÏ? A
)
ÏÏA B
)
ÏÏB C
;
ÏÏC D
m_isBodyComp
ÌÌ $
=
ÌÌ% &
true
ÌÌ' +
;
ÌÌ+ ,
m_isCompleted
ÓÓ %
=
ÓÓ& '
true
ÓÓ( ,
;
ÓÓ, -
return
ÔÔ 
true
ÔÔ #
;
ÔÔ# $
}
 
}
ÒÒ 
return
ÚÚ 
false
ÚÚ 
;
ÚÚ 
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı 
FDebug
ˆˆ 
.
ˆˆ 
throwException
ˆˆ %
(
ˆˆ% &
ex
ˆˆ& (
)
ˆˆ( )
;
ˆˆ) *
}
˜˜ 
finally
¯¯ 
{
˘˘ 
}
˚˚ 
return
¸¸ 
false
¸¸ 
;
¸¸ 
}
˝˝ 	
}
ÉÉ 
}ÑÑ ≤Î
}D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\HSMS\c_FHsmsSendBuffer.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FHsmsSendBuffer "
:# $
IDisposable% 0
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
UInt16 
m_sessionId "
=# $
$num% &
;& '
private 
byte 
m_byte2 
= 
$num  
;  !
private 
byte 
m_byte3 
= 
$num  
;  !
private   
byte   
m_ptype   
=   
$num    
;    !
private!! 
byte!! 
m_stype!! 
=!! 
$num!!  
;!!  !
private"" 
UInt32"" 
m_systemBytes"" $
=""% &
$num""' (
;""( )
private## 
List## 
<## 
byte## 
>## 
m_body## !
=##" #
null##$ (
;##( )
public)) 
FHsmsSendBuffer)) 
()) 
)** 
{++ 	
}-- 	
~11 	
FHsmsSendBuffer11	 
(11 
)22 
{33 	
	myDispose44 
(44 
false44 
)44 
;44 
}55 	
	protected99 
void99 
	myDispose99  
(99  !
bool:: 
	disposing:: 
);; 
{<< 	
if== 
(== 
!== 

m_disposed== 
)== 
{>> 
if?? 
(?? 
	disposing?? 
)?? 
{@@ 
}BB 

m_disposedCC 
=CC 
trueCC !
;CC! "
}DD 
}EE 	
publicMM 
voidMM 
DisposeMM 
(MM 
)NN 
{OO 	
	myDisposePP 
(PP 
truePP 
)PP 
;PP 
GCQQ 
.QQ 
SuppressFinalizeQQ 
(QQ  
thisQQ  $
)QQ$ %
;QQ% &
}RR 	
publicZZ 
UInt32ZZ 
lengthZZ 
{[[ 	
get\\ 
{]] 
try^^ 
{__ 
return`` 
(`` 
UInt32`` "
)``" #
(``# $
$num``$ &
+``' (
m_body``) /
.``/ 0
Count``0 5
)``5 6
;``6 7
}aa 
catchbb 
(bb 
	Exceptionbb  
exbb! #
)bb# $
{cc 
FDebugdd 
.dd 
throwExceptiondd )
(dd) *
exdd* ,
)dd, -
;dd- .
}ee 
finallyff 
{gg 
}ii 
returnjj 
$numjj 
;jj 
}kk 
}ll 	
publicpp 
UInt16pp 
	sessionIdpp 
{qq 	
getrr 
{ss 
trytt 
{uu 
returnvv 
m_sessionIdvv &
;vv& '
}ww 
catchxx 
(xx 
	Exceptionxx  
exxx! #
)xx# $
{yy 
FDebugzz 
.zz 
throwExceptionzz )
(zz) *
exzz* ,
)zz, -
;zz- .
}{{ 
finally|| 
{}} 
} 
return
ÄÄ 
$num
ÄÄ 
;
ÄÄ 
}
ÅÅ 
set
ÉÉ 
{
ÑÑ 
try
ÖÖ 
{
ÜÜ 
m_sessionId
áá 
=
áá  !
value
áá" '
;
áá' (
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ  
ex
ââ! #
)
ââ# $
{
ää 
FDebug
ãã 
.
ãã 
throwException
ãã )
(
ãã) *
ex
ãã* ,
)
ãã, -
;
ãã- .
}
åå 
finally
çç 
{
éé 
}
êê 
}
ëë 
}
íí 	
public
ññ 
byte
ññ 
byte2
ññ 
{
óó 	
get
òò 
{
ôô 
try
öö 
{
õõ 
return
úú 
m_byte2
úú "
;
úú" #
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû  
ex
ûû! #
)
ûû# $
{
üü 
FDebug
†† 
.
†† 
throwException
†† )
(
††) *
ex
††* ,
)
††, -
;
††- .
}
°° 
finally
¢¢ 
{
££ 
}
•• 
return
¶¶ 
$num
¶¶ 
;
¶¶ 
}
ßß 
set
©© 
{
™™ 
try
´´ 
{
¨¨ 
m_byte2
≠≠ 
=
≠≠ 
value
≠≠ #
;
≠≠# $
}
ÆÆ 
catch
ØØ 
(
ØØ 
	Exception
ØØ  
ex
ØØ! #
)
ØØ# $
{
∞∞ 
FDebug
±± 
.
±± 
throwException
±± )
(
±±) *
ex
±±* ,
)
±±, -
;
±±- .
}
≤≤ 
finally
≥≥ 
{
¥¥ 
}
∂∂ 
}
∑∑ 
}
∏∏ 	
public
ºº 
byte
ºº 
byte3
ºº 
{
ΩΩ 	
get
ææ 
{
øø 
try
¿¿ 
{
¡¡ 
return
¬¬ 
m_byte3
¬¬ "
;
¬¬" #
}
√√ 
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ  
ex
ƒƒ! #
)
ƒƒ# $
{
≈≈ 
FDebug
∆∆ 
.
∆∆ 
throwException
∆∆ )
(
∆∆) *
ex
∆∆* ,
)
∆∆, -
;
∆∆- .
}
«« 
finally
»» 
{
…… 
}
ÀÀ 
return
ÃÃ 
$num
ÃÃ 
;
ÃÃ 
}
ÕÕ 
set
œœ 
{
–– 
try
—— 
{
““ 
m_byte3
”” 
=
”” 
value
”” #
;
””# $
}
‘‘ 
catch
’’ 
(
’’ 
	Exception
’’  
ex
’’! #
)
’’# $
{
÷÷ 
FDebug
◊◊ 
.
◊◊ 
throwException
◊◊ )
(
◊◊) *
ex
◊◊* ,
)
◊◊, -
;
◊◊- .
}
ÿÿ 
finally
ŸŸ 
{
⁄⁄ 
}
‹‹ 
}
›› 
}
ﬁﬁ 	
public
‚‚ 
byte
‚‚ 
ptype
‚‚ 
{
„„ 	
get
‰‰ 
{
ÂÂ 
try
ÊÊ 
{
ÁÁ 
return
ËË 
m_ptype
ËË "
;
ËË" #
}
ÈÈ 
catch
ÍÍ 
(
ÍÍ 
	Exception
ÍÍ  
ex
ÍÍ! #
)
ÍÍ# $
{
ÎÎ 
FDebug
ÏÏ 
.
ÏÏ 
throwException
ÏÏ )
(
ÏÏ) *
ex
ÏÏ* ,
)
ÏÏ, -
;
ÏÏ- .
}
ÌÌ 
finally
ÓÓ 
{
ÔÔ 
}
ÒÒ 
return
ÚÚ 
$num
ÚÚ 
;
ÚÚ 
}
ÛÛ 
set
ıı 
{
ˆˆ 
try
˜˜ 
{
¯¯ 
m_ptype
˘˘ 
=
˘˘ 
value
˘˘ #
;
˘˘# $
}
˙˙ 
catch
˚˚ 
(
˚˚ 
	Exception
˚˚  
ex
˚˚! #
)
˚˚# $
{
¸¸ 
FDebug
˝˝ 
.
˝˝ 
throwException
˝˝ )
(
˝˝) *
ex
˝˝* ,
)
˝˝, -
;
˝˝- .
}
˛˛ 
finally
ˇˇ 
{
ÄÄ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
public
àà 
byte
àà 
stype
àà 
{
ââ 	
get
ää 
{
ãã 
try
åå 
{
çç 
return
éé 
m_stype
éé "
;
éé" #
}
èè 
catch
êê 
(
êê 
	Exception
êê  
ex
êê! #
)
êê# $
{
ëë 
FDebug
íí 
.
íí 
throwException
íí )
(
íí) *
ex
íí* ,
)
íí, -
;
íí- .
}
ìì 
finally
îî 
{
ïï 
}
óó 
return
òò 
$num
òò 
;
òò 
}
ôô 
set
õõ 
{
úú 
try
ùù 
{
ûû 
m_stype
üü 
=
üü 
value
üü #
;
üü# $
}
†† 
catch
°° 
(
°° 
	Exception
°°  
ex
°°! #
)
°°# $
{
¢¢ 
FDebug
££ 
.
££ 
throwException
££ )
(
££) *
ex
££* ,
)
££, -
;
££- .
}
§§ 
finally
•• 
{
¶¶ 
}
®® 
}
©© 
}
™™ 	
public
ÆÆ 
UInt32
ÆÆ 
systemBytes
ÆÆ !
{
ØØ 	
get
∞∞ 
{
±± 
try
≤≤ 
{
≥≥ 
return
¥¥ 
m_systemBytes
¥¥ (
;
¥¥( )
}
µµ 
catch
∂∂ 
(
∂∂ 
	Exception
∂∂  
ex
∂∂! #
)
∂∂# $
{
∑∑ 
FDebug
∏∏ 
.
∏∏ 
throwException
∏∏ )
(
∏∏) *
ex
∏∏* ,
)
∏∏, -
;
∏∏- .
}
ππ 
finally
∫∫ 
{
ªª 
}
ΩΩ 
return
ææ 
$num
ææ 
;
ææ 
}
øø 
set
¡¡ 
{
¬¬ 
try
√√ 
{
ƒƒ 
m_systemBytes
≈≈ !
=
≈≈" #
value
≈≈$ )
;
≈≈) *
}
∆∆ 
catch
«« 
(
«« 
	Exception
««  
ex
««! #
)
««# $
{
»» 
FDebug
…… 
.
…… 
throwException
…… )
(
……) *
ex
……* ,
)
……, -
;
……- .
}
   
finally
ÀÀ 
{
ÃÃ 
}
ŒŒ 
}
œœ 
}
–– 	
public
‘‘ 
byte
‘‘ 
[
‘‘ 
]
‘‘ 
body
‘‘ 
{
’’ 	
get
÷÷ 
{
◊◊ 
try
ÿÿ 
{
ŸŸ 
return
⁄⁄ 
m_body
⁄⁄ !
.
⁄⁄! "
ToArray
⁄⁄" )
(
⁄⁄) *
)
⁄⁄* +
;
⁄⁄+ ,
}
€€ 
catch
‹‹ 
(
‹‹ 
	Exception
‹‹  
ex
‹‹! #
)
‹‹# $
{
›› 
FDebug
ﬁﬁ 
.
ﬁﬁ 
throwException
ﬁﬁ )
(
ﬁﬁ) *
ex
ﬁﬁ* ,
)
ﬁﬁ, -
;
ﬁﬁ- .
}
ﬂﬂ 
finally
‡‡ 
{
·· 
}
„„ 
return
‰‰ 
null
‰‰ 
;
‰‰ 
}
ÂÂ 
set
ÁÁ 
{
ËË 
try
ÈÈ 
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
value
ÎÎ 
==
ÎÎ  
null
ÎÎ! %
)
ÎÎ% &
{
ÏÏ 
m_body
ÌÌ 
.
ÌÌ 
Clear
ÌÌ $
(
ÌÌ$ %
)
ÌÌ% &
;
ÌÌ& '
}
ÓÓ 
else
ÔÔ 
{
 
m_body
ÒÒ 
=
ÒÒ  
new
ÒÒ! $
List
ÒÒ% )
<
ÒÒ) *
byte
ÒÒ* .
>
ÒÒ. /
(
ÒÒ/ 0
value
ÒÒ0 5
)
ÒÒ5 6
;
ÒÒ6 7
}
ÚÚ 
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ  
ex
ÙÙ! #
)
ÙÙ# $
{
ıı 
FDebug
ˆˆ 
.
ˆˆ 
throwException
ˆˆ )
(
ˆˆ) *
ex
ˆˆ* ,
)
ˆˆ, -
;
ˆˆ- .
}
˜˜ 
finally
¯¯ 
{
˘˘ 
}
˚˚ 
}
¸¸ 
}
˝˝ 	
public
ÅÅ 
int
ÅÅ 
stream
ÅÅ 
{
ÇÇ 	
get
ÉÉ 
{
ÑÑ 
try
ÖÖ 
{
ÜÜ 
return
áá 
m_byte2
áá "
&
áá# $
$num
áá% )
;
áá) *
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ  
ex
ââ! #
)
ââ# $
{
ää 
FDebug
ãã 
.
ãã 
throwException
ãã )
(
ãã) *
ex
ãã* ,
)
ãã, -
;
ãã- .
}
åå 
finally
çç 
{
éé 
}
êê 
return
ëë 
$num
ëë 
;
ëë 
}
íí 
}
ìì 	
public
óó 
int
óó 
function
óó 
{
òò 	
get
ôô 
{
öö 
try
õõ 
{
úú 
return
ùù 
m_byte3
ùù "
;
ùù" #
}
ûû 
catch
üü 
(
üü 
	Exception
üü  
ex
üü! #
)
üü# $
{
†† 
FDebug
°° 
.
°° 
throwException
°° )
(
°°) *
ex
°°* ,
)
°°, -
;
°°- .
}
¢¢ 
finally
££ 
{
§§ 
}
¶¶ 
return
ßß 
$num
ßß 
;
ßß 
}
®® 
}
©© 	
public
≠≠ 
bool
≠≠ 
wbit
≠≠ 
{
ÆÆ 	
get
ØØ 
{
∞∞ 
try
±± 
{
≤≤ 
return
≥≥ 
(
≥≥ 
m_byte2
≥≥ #
&
≥≥$ %
$num
≥≥& *
)
≥≥* +
==
≥≥, .
$num
≥≥/ 3
?
≥≥4 5
false
≥≥6 ;
:
≥≥< =
true
≥≥> B
;
≥≥B C
}
¥¥ 
catch
µµ 
(
µµ 
	Exception
µµ  
ex
µµ! #
)
µµ# $
{
∂∂ 
FDebug
∑∑ 
.
∑∑ 
throwException
∑∑ )
(
∑∑) *
ex
∑∑* ,
)
∑∑, -
;
∑∑- .
}
∏∏ 
finally
ππ 
{
∫∫ 
}
ºº 
return
ΩΩ 
false
ΩΩ 
;
ΩΩ 
}
ææ 
}
øø 	
public
«« 
void
«« 
init
«« 
(
«« 
)
»» 
{
…… 	
try
   
{
ÀÀ 
m_sessionId
ÃÃ 
=
ÃÃ 
$num
ÃÃ 
;
ÃÃ  
m_byte2
ÕÕ 
=
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
m_byte3
ŒŒ 
=
ŒŒ 
$num
ŒŒ 
;
ŒŒ 
m_ptype
œœ 
=
œœ 
$num
œœ 
;
œœ 
m_stype
–– 
=
–– 
$num
–– 
;
–– 
m_systemBytes
—— 
=
—— 
$num
——  !
;
——! "
m_body
““ 
=
““ 
new
““ 
List
““ !
<
““! "
byte
““" &
>
““& '
(
““' (
)
““( )
;
““) *
}
”” 
catch
‘‘ 
(
‘‘ 
	Exception
‘‘ 
ex
‘‘ 
)
‘‘  
{
’’ 
FDebug
÷÷ 
.
÷÷ 
throwException
÷÷ %
(
÷÷% &
ex
÷÷& (
)
÷÷( )
;
÷÷) *
}
◊◊ 
finally
ÿÿ 
{
ŸŸ 
}
€€ 
}
‹‹ 	
public
‡‡ 
void
‡‡ 
genDataMessage
‡‡ "
(
‡‡" #
UInt16
·· 
	sessionId
·· 
,
·· 
byte
‚‚ 
stream
‚‚ 
,
‚‚ 
byte
„„ 
function
„„ 
,
„„ 
bool
‰‰ 
wbit
‰‰ 
,
‰‰ 
UInt32
ÂÂ 
systemBytes
ÂÂ 
,
ÂÂ 
byte
ÊÊ 
[
ÊÊ 
]
ÊÊ 
body
ÊÊ 
)
ÁÁ 
{
ËË 	
try
ÈÈ 
{
ÍÍ 
m_sessionId
ÎÎ 
=
ÎÎ 
	sessionId
ÎÎ '
;
ÎÎ' (
m_byte2
ÏÏ 
=
ÏÏ 
(
ÏÏ 
byte
ÏÏ 
)
ÏÏ  
(
ÏÏ  !
stream
ÏÏ! '
|
ÏÏ( )
(
ÏÏ* +
wbit
ÏÏ+ /
?
ÏÏ0 1
$num
ÏÏ2 6
:
ÏÏ7 8
$num
ÏÏ9 =
)
ÏÏ= >
)
ÏÏ> ?
;
ÏÏ? @
m_byte3
ÌÌ 
=
ÌÌ 
function
ÌÌ "
;
ÌÌ" #
m_ptype
ÓÓ 
=
ÓÓ 
$num
ÓÓ 
;
ÓÓ 
m_stype
ÔÔ 
=
ÔÔ 
$num
ÔÔ 
;
ÔÔ 
m_systemBytes
 
=
 
systemBytes
  +
;
+ ,
if
ÚÚ 
(
ÚÚ 
body
ÚÚ 
==
ÚÚ 
null
ÚÚ  
)
ÚÚ  !
{
ÛÛ 
m_body
ÙÙ 
=
ÙÙ 
new
ÙÙ  
List
ÙÙ! %
<
ÙÙ% &
byte
ÙÙ& *
>
ÙÙ* +
(
ÙÙ+ ,
)
ÙÙ, -
;
ÙÙ- .
}
ıı 
else
ˆˆ 
{
˜˜ 
m_body
¯¯ 
=
¯¯ 
new
¯¯  
List
¯¯! %
<
¯¯% &
byte
¯¯& *
>
¯¯* +
(
¯¯+ ,
body
¯¯, 0
)
¯¯0 1
;
¯¯1 2
}
˘˘ 
}
˙˙ 
catch
˚˚ 
(
˚˚ 
	Exception
˚˚ 
ex
˚˚ 
)
˚˚  
{
¸¸ 
FDebug
˝˝ 
.
˝˝ 
throwException
˝˝ %
(
˝˝% &
ex
˝˝& (
)
˝˝( )
;
˝˝) *
}
˛˛ 
finally
ˇˇ 
{
ÄÄ 
}
ÇÇ 
}
ÉÉ 	
public
áá 
void
áá 
genSelectReq
áá  
(
áá  !
UInt32
àà 
systemBytes
àà 
)
ââ 
{
ää 	
try
ãã 
{
åå 
m_sessionId
çç 
=
çç 
$num
çç $
;
çç$ %
m_byte2
éé 
=
éé 
$num
éé 
;
éé 
m_byte3
èè 
=
èè 
$num
èè 
;
èè 
m_ptype
êê 
=
êê 
$num
êê 
;
êê 
m_stype
ëë 
=
ëë 
$num
ëë 
;
ëë 
m_systemBytes
íí 
=
íí 
systemBytes
íí  +
;
íí+ ,
m_body
ìì 
=
ìì 
new
ìì 
List
ìì !
<
ìì! "
byte
ìì" &
>
ìì& '
(
ìì' (
)
ìì( )
;
ìì) *
}
îî 
catch
ïï 
(
ïï 
	Exception
ïï 
ex
ïï 
)
ïï  
{
ññ 
FDebug
óó 
.
óó 
throwException
óó %
(
óó% &
ex
óó& (
)
óó( )
;
óó) *
}
òò 
finally
ôô 
{
öö 
}
úú 
}
ùù 	
public
°° 
void
°° 
genSelectRsp
°°  
(
°°  !
UInt16
¢¢ 
	sessionId
¢¢ 
,
¢¢ 
byte
££ 
status
££ 
,
££ 
UInt32
§§ 
systemBytes
§§ 
)
•• 
{
¶¶ 	
try
ßß 
{
®® 
m_sessionId
©© 
=
©© 
	sessionId
©© '
;
©©' (
m_byte2
™™ 
=
™™ 
$num
™™ 
;
™™ 
m_byte3
´´ 
=
´´ 
status
´´  
;
´´  !
m_ptype
¨¨ 
=
¨¨ 
$num
¨¨ 
;
¨¨ 
m_stype
≠≠ 
=
≠≠ 
$num
≠≠ 
;
≠≠ 
m_systemBytes
ÆÆ 
=
ÆÆ 
systemBytes
ÆÆ  +
;
ÆÆ+ ,
m_body
ØØ 
=
ØØ 
new
ØØ 
List
ØØ !
<
ØØ! "
byte
ØØ" &
>
ØØ& '
(
ØØ' (
)
ØØ( )
;
ØØ) *
}
∞∞ 
catch
±± 
(
±± 
	Exception
±± 
ex
±± 
)
±±  
{
≤≤ 
FDebug
≥≥ 
.
≥≥ 
throwException
≥≥ %
(
≥≥% &
ex
≥≥& (
)
≥≥( )
;
≥≥) *
}
¥¥ 
finally
µµ 
{
∂∂ 
}
∏∏ 
}
ππ 	
public
ΩΩ 
void
ΩΩ 
genDeselectRsp
ΩΩ "
(
ΩΩ" #
UInt16
ææ 
	sessionId
ææ 
,
ææ 
UInt32
øø 
systemBytes
øø 
)
¿¿ 
{
¡¡ 	
try
¬¬ 
{
√√ 
m_sessionId
ƒƒ 
=
ƒƒ 
	sessionId
ƒƒ '
;
ƒƒ' (
m_byte2
≈≈ 
=
≈≈ 
$num
≈≈ 
;
≈≈ 
m_byte3
∆∆ 
=
∆∆ 
$num
∆∆ 
;
∆∆ 
m_ptype
«« 
=
«« 
$num
«« 
;
«« 
m_stype
»» 
=
»» 
$num
»» 
;
»» 
m_systemBytes
…… 
=
…… 
systemBytes
……  +
;
……+ ,
m_body
   
=
   
new
   
List
   !
<
  ! "
byte
  " &
>
  & '
(
  ' (
)
  ( )
;
  ) *
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ 
ex
ÃÃ 
)
ÃÃ  
{
ÕÕ 
FDebug
ŒŒ 
.
ŒŒ 
throwException
ŒŒ %
(
ŒŒ% &
ex
ŒŒ& (
)
ŒŒ( )
;
ŒŒ) *
}
œœ 
finally
–– 
{
—— 
}
”” 
}
‘‘ 	
public
ÿÿ 
void
ÿÿ 
genLinktestReq
ÿÿ "
(
ÿÿ" #
UInt32
ŸŸ 
systemBytes
ŸŸ 
)
⁄⁄ 
{
€€ 	
try
‹‹ 
{
›› 
m_sessionId
ﬁﬁ 
=
ﬁﬁ 
$num
ﬁﬁ $
;
ﬁﬁ$ %
m_byte2
ﬂﬂ 
=
ﬂﬂ 
$num
ﬂﬂ 
;
ﬂﬂ 
m_byte3
‡‡ 
=
‡‡ 
$num
‡‡ 
;
‡‡ 
m_ptype
·· 
=
·· 
$num
·· 
;
·· 
m_stype
‚‚ 
=
‚‚ 
$num
‚‚ 
;
‚‚ 
m_systemBytes
„„ 
=
„„ 
systemBytes
„„  +
;
„„+ ,
m_body
‰‰ 
=
‰‰ 
new
‰‰ 
List
‰‰ !
<
‰‰! "
byte
‰‰" &
>
‰‰& '
(
‰‰' (
)
‰‰( )
;
‰‰) *
}
ÂÂ 
catch
ÊÊ 
(
ÊÊ 
	Exception
ÊÊ 
ex
ÊÊ 
)
ÊÊ  
{
ÁÁ 
FDebug
ËË 
.
ËË 
throwException
ËË %
(
ËË% &
ex
ËË& (
)
ËË( )
;
ËË) *
}
ÈÈ 
finally
ÍÍ 
{
ÎÎ 
}
ÌÌ 
}
ÓÓ 	
public
ÚÚ 
void
ÚÚ 
genLinktestRsp
ÚÚ "
(
ÚÚ" #
UInt16
ÛÛ 
	sessionId
ÛÛ 
,
ÛÛ 
UInt32
ÙÙ 
systemBytes
ÙÙ 
)
ıı 
{
ˆˆ 	
try
˜˜ 
{
¯¯ 
m_sessionId
˘˘ 
=
˘˘ 
	sessionId
˘˘ '
;
˘˘' (
m_byte2
˙˙ 
=
˙˙ 
$num
˙˙ 
;
˙˙ 
m_byte3
˚˚ 
=
˚˚ 
$num
˚˚ 
;
˚˚ 
m_ptype
¸¸ 
=
¸¸ 
$num
¸¸ 
;
¸¸ 
m_stype
˝˝ 
=
˝˝ 
$num
˝˝ 
;
˝˝ 
m_systemBytes
˛˛ 
=
˛˛ 
systemBytes
˛˛  +
;
˛˛+ ,
m_body
ˇˇ 
=
ˇˇ 
new
ˇˇ 
List
ˇˇ !
<
ˇˇ! "
byte
ˇˇ" &
>
ˇˇ& '
(
ˇˇ' (
)
ˇˇ( )
;
ˇˇ) *
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
	Exception
ÅÅ 
ex
ÅÅ 
)
ÅÅ  
{
ÇÇ 
FDebug
ÉÉ 
.
ÉÉ 
throwException
ÉÉ %
(
ÉÉ% &
ex
ÉÉ& (
)
ÉÉ( )
;
ÉÉ) *
}
ÑÑ 
finally
ÖÖ 
{
ÜÜ 
}
àà 
}
ââ 	
public
çç 
void
çç 
genRejectReq
çç  
(
çç  !
UInt16
éé 
	sessionId
éé 
,
éé 
byte
èè 
stype
èè 
,
èè 
byte
êê 

reasonCode
êê 
,
êê 
UInt32
ëë 
systemBytes
ëë 
)
íí 
{
ìì 	
try
îî 
{
ïï 
m_sessionId
ññ 
=
ññ 
$num
ññ $
;
ññ$ %
m_byte2
óó 
=
óó 
stype
óó 
;
óó  
m_byte3
òò 
=
òò 

reasonCode
òò $
;
òò$ %
m_ptype
ôô 
=
ôô 
$num
ôô 
;
ôô 
m_stype
öö 
=
öö 
$num
öö 
;
öö 
m_systemBytes
õõ 
=
õõ 
systemBytes
õõ  +
;
õõ+ ,
m_body
úú 
=
úú 
new
úú 
List
úú !
<
úú! "
byte
úú" &
>
úú& '
(
úú' (
)
úú( )
;
úú) *
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû 
ex
ûû 
)
ûû  
{
üü 
FDebug
†† 
.
†† 
throwException
†† %
(
††% &
ex
††& (
)
††( )
;
††) *
}
°° 
finally
¢¢ 
{
££ 
}
•• 
}
¶¶ 	
public
™™ 
void
™™ 
genSeparateReq
™™ "
(
™™" #
UInt32
´´ 
systemBytes
´´ 
)
¨¨ 
{
≠≠ 	
try
ÆÆ 
{
ØØ 
m_sessionId
∞∞ 
=
∞∞ 
$num
∞∞ $
;
∞∞$ %
m_byte2
±± 
=
±± 
$num
±± 
;
±± 
m_byte3
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤ 
m_ptype
≥≥ 
=
≥≥ 
$num
≥≥ 
;
≥≥ 
m_stype
¥¥ 
=
¥¥ 
$num
¥¥ 
;
¥¥ 
m_systemBytes
µµ 
=
µµ 
systemBytes
µµ  +
;
µµ+ ,
m_body
∂∂ 
=
∂∂ 
new
∂∂ 
List
∂∂ !
<
∂∂! "
byte
∂∂" &
>
∂∂& '
(
∂∂' (
)
∂∂( )
;
∂∂) *
}
∑∑ 
catch
∏∏ 
(
∏∏ 
	Exception
∏∏ 
ex
∏∏ 
)
∏∏  
{
ππ 
FDebug
∫∫ 
.
∫∫ 
throwException
∫∫ %
(
∫∫% &
ex
∫∫& (
)
∫∫( )
;
∫∫) *
}
ªª 
finally
ºº 
{
ΩΩ 
}
øø 
}
¿¿ 	
public
ƒƒ 
byte
ƒƒ 
[
ƒƒ 
]
ƒƒ 
getBinaryData
ƒƒ #
(
ƒƒ# $
)
≈≈ 
{
∆∆ 	
UInt32
«« 
length
«« 
=
«« 
$num
«« 
;
«« 
byte
»» 
[
»» 
]
»» 
data
»» 
=
»» 
null
»» 
;
»» 
try
   
{
ÀÀ 
length
ÃÃ 
=
ÃÃ 
this
ÃÃ 
.
ÃÃ 
length
ÃÃ $
;
ÃÃ$ %
data
ÕÕ 
=
ÕÕ 
new
ÕÕ 
byte
ÕÕ 
[
ÕÕ  
length
ÕÕ  &
+
ÕÕ' (
$num
ÕÕ) *
]
ÕÕ* +
;
ÕÕ+ ,
Buffer
‘‘ 
.
‘‘ 
	BlockCopy
‘‘  
(
‘‘  !
FByteConverter
‘‘! /
.
‘‘/ 0
getBytes
‘‘0 8
(
‘‘8 9
length
‘‘9 ?
,
‘‘? @
true
‘‘A E
)
‘‘E F
,
‘‘F G
$num
‘‘H I
,
‘‘I J
data
‘‘K O
,
‘‘O P
$num
‘‘Q R
,
‘‘R S
$num
‘‘T U
)
‘‘U V
;
‘‘V W
Buffer
€€ 
.
€€ 
	BlockCopy
€€  
(
€€  !
FByteConverter
€€! /
.
€€/ 0
getBytes
€€0 8
(
€€8 9
m_sessionId
€€9 D
,
€€D E
true
€€F J
)
€€J K
,
€€K L
$num
€€M N
,
€€N O
data
€€P T
,
€€T U
$num
€€V W
,
€€W X
$num
€€Y Z
)
€€Z [
;
€€[ \
data
‹‹ 
[
‹‹ 
$num
‹‹ 
]
‹‹ 
=
‹‹ 
m_byte2
‹‹ !
;
‹‹! "
data
›› 
[
›› 
$num
›› 
]
›› 
=
›› 
m_byte3
›› !
;
››! "
data
ﬁﬁ 
[
ﬁﬁ 
$num
ﬁﬁ 
]
ﬁﬁ 
=
ﬁﬁ 
m_ptype
ﬁﬁ !
;
ﬁﬁ! "
data
ﬂﬂ 
[
ﬂﬂ 
$num
ﬂﬂ 
]
ﬂﬂ 
=
ﬂﬂ 
m_stype
ﬂﬂ !
;
ﬂﬂ! "
Buffer
‡‡ 
.
‡‡ 
	BlockCopy
‡‡  
(
‡‡  !
FByteConverter
‡‡! /
.
‡‡/ 0
getBytes
‡‡0 8
(
‡‡8 9
m_systemBytes
‡‡9 F
,
‡‡F G
true
‡‡H L
)
‡‡L M
,
‡‡M N
$num
‡‡O P
,
‡‡P Q
data
‡‡R V
,
‡‡V W
$num
‡‡X Z
,
‡‡Z [
$num
‡‡\ ]
)
‡‡] ^
;
‡‡^ _
if
ÁÁ 
(
ÁÁ 
m_body
ÁÁ 
.
ÁÁ 
Count
ÁÁ  
>
ÁÁ! "
$num
ÁÁ# $
)
ÁÁ$ %
{
ËË 
Buffer
ÈÈ 
.
ÈÈ 
	BlockCopy
ÈÈ $
(
ÈÈ$ %
m_body
ÈÈ% +
.
ÈÈ+ ,
ToArray
ÈÈ, 3
(
ÈÈ3 4
)
ÈÈ4 5
,
ÈÈ5 6
$num
ÈÈ7 8
,
ÈÈ8 9
data
ÈÈ: >
,
ÈÈ> ?
$num
ÈÈ@ B
,
ÈÈB C
m_body
ÈÈD J
.
ÈÈJ K
Count
ÈÈK P
)
ÈÈP Q
;
ÈÈQ R
}
ÍÍ 
return
ÓÓ 
data
ÓÓ 
;
ÓÓ 
}
ÔÔ 
catch
 
(
 
	Exception
 
ex
 
)
  
{
ÒÒ 
FDebug
ÚÚ 
.
ÚÚ 
throwException
ÚÚ %
(
ÚÚ% &
ex
ÚÚ& (
)
ÚÚ( )
;
ÚÚ) *
}
ÛÛ 
finally
ÙÙ 
{
ıı 
data
ˆˆ 
=
ˆˆ 
null
ˆˆ 
;
ˆˆ 
}
˜˜ 
return
¯¯ 
null
¯¯ 
;
¯¯ 
}
˘˘ 	
}
ˇˇ 
}ÄÄ ®ñ
{D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\HSMS\c_FHsmsPassive2.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FHsmsPassive2  
:  !
	FBaseHsms" +
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 

FTcpClient 
m_fTcpClient '
=( )
null* .
;. /
private 
FHsmsRecvBuffer 

m_fRecvBuf  *
=+ ,
null- 1
;1 2
private 
	FCodeLock 
m_fMainSync %
=& '
null( ,
;, -
private 
FThread 

m_fThdMain "
=# $
null% )
;) *
private   
FStaticTimer   
m_fTmrT7   %
=  & '
null  ( ,
;  , -
private!! 
FStaticTimer!! 
m_fTmrT8!! %
=!!& '
null!!( ,
;!!, -
private"" 
FCommunicationState"" #
m_fState""$ ,
=""- .
FCommunicationState""/ B
.""B C
Closed""C I
;""I J
public(( 
FHsmsPassive2(( 
((( 
FSecs1ToHsms)) 
fSecsToHsms)) $
,))$ %

FTcpClient** 

fTcpClient** !
)++ 
:,, 
base,, 
(,, 
fSecsToHsms,, 
),, 
{-- 	
m_fTcpClient.. 
=.. 

fTcpClient.. %
;..% &
init00 
(00 
)00 
;00 
}11 	
~55 	
FHsmsPassive255	 
(55 
)66 
{77 	
	myDispose88 
(88 
false88 
)88 
;88 
}99 	
	protected== 
override== 
void== 
	myDispose==  )
(==) *
bool>> 
	disposing>> 
)?? 
{@@ 	
ifAA 
(AA 
!AA 

m_disposedAA 
)AA 
{BB 
ifCC 
(CC 
	disposingCC 
)CC 
{DD 
termEE 
(EE 
)EE 
;EE 
}FF 

m_disposedHH 
=HH 
trueHH !
;HH! "
}II 
}JJ 	
publicRR 
voidRR 
DisposeRR 
(RR 
)SS 
{TT 	
	myDisposeUU 
(UU 
trueUU 
)UU 
;UU 
GCVV 
.VV 
SuppressFinalizeVV 
(VV  
thisVV  $
)VV$ %
;VV% &
}WW 	
public__ 
FCommunicationState__ "
fState__# )
{`` 	
getaa 
{bb 
trycc 
{dd 
returnee 
m_fStateee #
;ee# $
}ff 
catchgg 
(gg 
	Exceptiongg  
exgg! #
)gg# $
{hh 
FDebugii 
.ii 
throwExceptionii )
(ii) *
exii* ,
)ii, -
;ii- .
}jj 
finallykk 
{ll 
}nn 
returnoo 
FCommunicationStateoo *
.oo* +
Closedoo+ 1
;oo1 2
}pp 
}qq 	
privateyy 
voidyy 
inityy 
(yy 
)zz 
{{{ 	
try|| 
{}} 
m_fTmrT7~~ 
=~~ 
new~~ 
FStaticTimer~~ +
(~~+ ,
)~~, -
;~~- .
m_fTmrT8 
= 
new 
FStaticTimer +
(+ ,
), -
;- .

m_fRecvBuf
ÄÄ 
=
ÄÄ 
new
ÄÄ  
FHsmsRecvBuffer
ÄÄ! 0
(
ÄÄ0 1
)
ÄÄ1 2
;
ÄÄ2 3
m_fMainSync
ÑÑ 
=
ÑÑ 
new
ÑÑ !
	FCodeLock
ÑÑ" +
(
ÑÑ+ ,
)
ÑÑ, -
;
ÑÑ- .

m_fThdMain
ÖÖ 
=
ÖÖ 
new
ÖÖ  
FThread
ÖÖ! (
(
ÖÖ( )
$str
ÖÖ) B
)
ÖÖB C
;
ÖÖC D

m_fThdMain
ÜÜ 
.
ÜÜ 
ThreadJobCalled
ÜÜ *
+=
ÜÜ+ -
new
ÜÜ. 1*
FThreadJobCalledEventHandler
ÜÜ2 N
(
ÜÜN O(
m_fThdMain_ThreadJobCalled
ÜÜO i
)
ÜÜi j
;
ÜÜj k

m_fThdMain
áá 
.
áá 
start
áá  
(
áá  !
)
áá! "
;
áá" #
this
ãã 
.
ãã 
localIp
ãã 
=
ãã 
m_fTcpClient
ãã +
.
ãã+ ,
localIp
ãã, 3
;
ãã3 4
this
åå 
.
åå 
	localPort
åå 
=
åå  
m_fTcpClient
åå! -
.
åå- .
	localPort
åå. 7
;
åå7 8
this
çç 
.
çç 
remoteIp
çç 
=
çç 
m_fTcpClient
çç  ,
.
çç, -
remoteIp
çç- 5
;
çç5 6
this
éé 
.
éé 

remotePort
éé 
=
éé  !
m_fTcpClient
éé" .
.
éé. /

remotePort
éé/ 9
;
éé9 :
m_fState
íí 
=
íí !
FCommunicationState
íí .
.
íí. /
	Connected
íí/ 8
;
íí8 9
m_fTmrT7
ôô 
.
ôô 
start
ôô 
(
ôô 
this
ôô #
.
ôô# $
fSecs1ToHsms
ôô$ 0
.
ôô0 1
fHsmsConfig
ôô1 <
.
ôô< =
	t7Timeout
ôô= F
*
ôôG H
$num
ôôI M
)
ôôM N
;
ôôN O
m_fTcpClient
ùù 
.
ùù #
TcpClientStateChanged
ùù 2
+=
ùù3 5
new
ùù6 90
"FTcpClientStateChangedEventHandler
ùù: \
(
ùù\ ]0
"m_fTcpClient_TcpClientStateChanged
ùù] 
)ùù Ä
;ùùÄ Å
m_fTcpClient
ûû 
.
ûû #
TcpClientDataReceived
ûû 2
+=
ûû3 5
new
ûû6 90
"FTcpClientDataReceivedEventHandler
ûû: \
(
ûû\ ]0
"m_fTcpClient_TcpClientDataReceived
ûû] 
)ûû Ä
;ûûÄ Å
m_fTcpClient
üü 
.
üü 
TcpClientDataSent
üü .
+=
üü/ 1
new
üü2 5,
FTcpClientDataSentEventHandler
üü6 T
(
üüT U,
m_fTcpClient_TcpClientDataSent
üüU s
)
üüs t
;
üüt u
m_fTcpClient
†† 
.
†† %
TcpClientDataSendFailed
†† 4
+=
††5 7
new
††8 ;2
$FTcpClientDataSendFailedEventHandler
††< `
(
††` a3
$m_fTcpClient_TcpClientDataSendFailed††a Ö
)††Ö Ü
;††Ü á
m_fTcpClient
°° 
.
°° "
TcpClientErrorRaised
°° 1
+=
°°2 4
new
°°5 8/
!FTcpClientErrorRaisedEventHandler
°°9 Z
(
°°Z [/
!m_fTcpClient_TcpClientErrorRaised
°°[ |
)
°°| }
;
°°} ~
m_fTcpClient
££ 
.
££ 
resumeEvent
££ (
(
££( )
)
££) *
;
££* +
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶ 
FDebug
ßß 
.
ßß 
throwException
ßß %
(
ßß% &
ex
ßß& (
)
ßß( )
;
ßß) *
}
®® 
finally
©© 
{
™™ 
}
¨¨ 
}
≠≠ 	
private
±± 
void
±± 
term
±± 
(
±± 
)
≤≤ 
{
≥≥ 	
try
¥¥ 
{
µµ 
if
∂∂ 
(
∂∂ 

m_fThdMain
∂∂ 
!=
∂∂ !
null
∂∂" &
)
∂∂& '
{
∑∑ 

m_fThdMain
∏∏ 
.
∏∏ 
stop
∏∏ #
(
∏∏# $
)
∏∏$ %
;
∏∏% &

m_fThdMain
ππ 
.
ππ 
Dispose
ππ &
(
ππ& '
)
ππ' (
;
ππ( )

m_fThdMain
∫∫ 
.
∫∫ 
ThreadJobCalled
∫∫ .
-=
∫∫/ 1
new
∫∫2 5*
FThreadJobCalledEventHandler
∫∫6 R
(
∫∫R S(
m_fThdMain_ThreadJobCalled
∫∫S m
)
∫∫m n
;
∫∫n o

m_fThdMain
ªª 
=
ªª  
null
ªª! %
;
ªª% &
}
ºº 
close
√√ 
(
√√ 
)
√√ 
;
√√ 
if
«« 
(
«« 
m_fTmrT7
«« 
!=
«« 
null
««  $
)
««$ %
{
»» 
m_fTmrT7
…… 
.
…… 
Dispose
…… $
(
……$ %
)
……% &
;
……& '
m_fTmrT7
   
=
   
null
   #
;
  # $
}
ÀÀ 
if
ÕÕ 
(
ÕÕ 
m_fTmrT8
ÕÕ 
!=
ÕÕ 
null
ÕÕ  $
)
ÕÕ$ %
{
ŒŒ 
m_fTmrT8
œœ 
.
œœ 
Dispose
œœ $
(
œœ$ %
)
œœ% &
;
œœ& '
m_fTmrT8
–– 
=
–– 
null
–– #
;
––# $
}
—— 
if
’’ 
(
’’ 

m_fRecvBuf
’’ 
!=
’’ !
null
’’" &
)
’’& '
{
÷÷ 

m_fRecvBuf
◊◊ 
.
◊◊ 
Dispose
◊◊ &
(
◊◊& '
)
◊◊' (
;
◊◊( )

m_fRecvBuf
ÿÿ 
=
ÿÿ  
null
ÿÿ! %
;
ÿÿ% &
}
ŸŸ 
if
€€ 
(
€€ 
m_fMainSync
€€ 
!=
€€  "
null
€€# '
)
€€' (
{
‹‹ 
m_fMainSync
›› 
.
››  
Dispose
››  '
(
››' (
)
››( )
;
››) *
m_fMainSync
ﬁﬁ 
=
ﬁﬁ  !
null
ﬁﬁ" &
;
ﬁﬁ& '
}
ﬂﬂ 
}
‡‡ 
catch
·· 
(
·· 
	Exception
·· 
ex
·· 
)
··  
{
‚‚ 
FDebug
„„ 
.
„„ 
throwException
„„ %
(
„„% &
ex
„„& (
)
„„( )
;
„„) *
}
‰‰ 
finally
ÂÂ 
{
ÊÊ 
}
ËË 
}
ÈÈ 	
public
ÌÌ 
override
ÌÌ 
void
ÌÌ 
open
ÌÌ !
(
ÌÌ! "
)
ÓÓ 
{
ÔÔ 	
try
 
{
ÒÒ 
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı 
FDebug
ˆˆ 
.
ˆˆ 
throwException
ˆˆ %
(
ˆˆ% &
ex
ˆˆ& (
)
ˆˆ( )
;
ˆˆ) *
}
˜˜ 
finally
¯¯ 
{
˘˘ 
}
˚˚ 
}
¸¸ 	
public
ÄÄ 
override
ÄÄ 
void
ÄÄ 
close
ÄÄ "
(
ÄÄ" #
)
ÅÅ 
{
ÇÇ 	
try
ÉÉ 
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
m_fTcpClient
ÖÖ  
==
ÖÖ! #
null
ÖÖ$ (
)
ÖÖ( )
{
ÜÜ 
return
áá 
;
áá 
}
àà 
if
åå 
(
åå 
m_fTcpClient
åå  
.
åå  !
fState
åå! '
==
åå( *
FTcpClientState
åå+ :
.
åå: ;
	Connected
åå; D
)
ååD E
{
çç 
sendSeparateReq
éé #
(
éé# $
)
éé$ %
;
éé% &
}
èè 
m_fTcpClient
ìì 
.
ìì 
close
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
m_fTcpClient
îî 
.
îî 
Dispose
îî $
(
îî$ %
)
îî% &
;
îî& '
m_fTcpClient
ññ 
.
ññ #
TcpClientStateChanged
ññ 2
-=
ññ3 5
new
ññ6 90
"FTcpClientStateChangedEventHandler
ññ: \
(
ññ\ ]0
"m_fTcpClient_TcpClientStateChanged
ññ] 
)ññ Ä
;ññÄ Å
m_fTcpClient
óó 
.
óó #
TcpClientDataReceived
óó 2
-=
óó3 5
new
óó6 90
"FTcpClientDataReceivedEventHandler
óó: \
(
óó\ ]0
"m_fTcpClient_TcpClientDataReceived
óó] 
)óó Ä
;óóÄ Å
m_fTcpClient
òò 
.
òò 
TcpClientDataSent
òò .
-=
òò/ 1
new
òò2 5,
FTcpClientDataSentEventHandler
òò6 T
(
òòT U,
m_fTcpClient_TcpClientDataSent
òòU s
)
òòs t
;
òòt u
m_fTcpClient
ôô 
.
ôô %
TcpClientDataSendFailed
ôô 4
-=
ôô5 7
new
ôô8 ;2
$FTcpClientDataSendFailedEventHandler
ôô< `
(
ôô` a3
$m_fTcpClient_TcpClientDataSendFailedôôa Ö
)ôôÖ Ü
;ôôÜ á
m_fTcpClient
öö 
.
öö "
TcpClientErrorRaised
öö 1
-=
öö2 4
new
öö5 8/
!FTcpClientErrorRaisedEventHandler
öö9 Z
(
ööZ [/
!m_fTcpClient_TcpClientErrorRaised
öö[ |
)
öö| }
;
öö} ~
m_fTcpClient
úú 
=
úú 
null
úú #
;
úú# $
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû 
ex
ûû 
)
ûû  
{
üü 
FDebug
†† 
.
†† 
throwException
†† %
(
††% &
ex
††& (
)
††( )
;
††) *
}
°° 
finally
¢¢ 
{
££ 
}
•• 
}
¶¶ 	
public
™™ 
override
™™ 
void
™™ 
send
™™ !
(
™™! "
FSecsDataMessage
´´ 
fSecsDataMessage
´´ -
)
¨¨ 
{
≠≠ 	
}
ØØ 	
private
≥≥ 
void
≥≥ 
resetResource
≥≥ "
(
≥≥" #
)
¥¥ 
{
µµ 	
try
∂∂ 
{
∑∑ 
m_fTmrT7
ªª 
.
ªª 
stop
ªª 
(
ªª 
)
ªª 
;
ªª  
m_fTmrT8
ºº 
.
ºº 
stop
ºº 
(
ºº 
)
ºº 
;
ºº  

m_fRecvBuf
ΩΩ 
.
ΩΩ 
clear
ΩΩ  
(
ΩΩ  !
)
ΩΩ! "
;
ΩΩ" #
}
ææ 
catch
øø 
(
øø 
	Exception
øø 
ex
øø 
)
øø  
{
¿¿ 
FDebug
¡¡ 
.
¡¡ 
throwException
¡¡ %
(
¡¡% &
ex
¡¡& (
)
¡¡( )
;
¡¡) *
}
¬¬ 
finally
√√ 
{
ƒƒ 
}
∆∆ 
}
«« 	
private
ÀÀ 
void
ÀÀ !
procHsmsErrorRaised
ÀÀ (
(
ÀÀ( )
	Exception
ÃÃ 
inEx
ÃÃ 
)
ÕÕ 
{
ŒŒ 	
try
œœ 
{
–– 
FDebug
—— 
.
—— 
writeLog
—— 
(
——  
inEx
——  $
)
——$ %
;
——% &
this
”” 
.
”” 
fSecs1ToHsms
”” !
.
””! "
fEventPusher
””" .
.
””. /
pushHsmsEvent
””/ <
(
””< =
new
‘‘ '
FHsmsErrorRaisedEventArgs
‘‘ 1
(
‘‘1 2
this
‘‘2 6
.
‘‘6 7
fSecs1ToHsms
‘‘7 C
,
‘‘C D
FEventId
‘‘E M
.
‘‘M N
HsmsErrorRaised
‘‘N ]
,
‘‘] ^
inEx
‘‘_ c
.
‘‘c d
Message
‘‘d k
)
‘‘k l
)
’’ 
;
’’ 
}
÷÷ 
catch
◊◊ 
(
◊◊ 
	Exception
◊◊ 
ex
◊◊ 
)
◊◊  
{
ÿÿ 
FDebug
ŸŸ 
.
ŸŸ 
writeLog
ŸŸ 
(
ŸŸ  
ex
ŸŸ  "
)
ŸŸ" #
;
ŸŸ# $
}
⁄⁄ 
finally
€€ 
{
‹‹ 
}
ﬁﬁ 
}
ﬂﬂ 	
private
„„ 
void
„„ 
recvSelectReq
„„ "
(
„„" #
)
‰‰ 
{
ÂÂ 	
string
ÊÊ 
errorMessage
ÊÊ 
=
ÊÊ  !
string
ÊÊ" (
.
ÊÊ( )
Empty
ÊÊ) .
;
ÊÊ. /!
FSecsControlMessage
ÁÁ !
fSecsControlMessage
ÁÁ  3
=
ÁÁ4 5
null
ÁÁ6 :
;
ÁÁ: ;
try
ÈÈ 
{
ÍÍ 
errorMessage
ÎÎ 
=
ÎÎ $
getSelectStatusMessage
ÎÎ 5
(
ÎÎ5 6
$num
ÎÎ6 7
)
ÎÎ7 8
;
ÎÎ8 9!
fSecsControlMessage
ÔÔ #
=
ÔÔ$ %
new
ÔÔ& )!
FSecsControlMessage
ÔÔ* =
(
ÔÔ= >
this
 
.
 
fSecs1ToHsms
 %
,
% &%
FHsmsControlMessageType
ÒÒ +
.
ÒÒ+ ,
	SelectReq
ÒÒ, 5
,
ÒÒ5 6

m_fRecvBuf
ÚÚ 
.
ÚÚ 
	sessionId
ÚÚ (
,
ÚÚ( )

m_fRecvBuf
ÛÛ 
.
ÛÛ 
byte2
ÛÛ $
,
ÛÛ$ %

m_fRecvBuf
ÙÙ 
.
ÙÙ 
byte3
ÙÙ $
,
ÙÙ$ %

m_fRecvBuf
ıı 
.
ıı 
ptype
ıı $
,
ıı$ %

m_fRecvBuf
ˆˆ 
.
ˆˆ 
stype
ˆˆ $
,
ˆˆ$ %

m_fRecvBuf
˜˜ 
.
˜˜ 
systemBytes
˜˜ *
,
˜˜* +
errorMessage
¯¯  
)
˘˘ 
;
˘˘ 
this
˚˚ 
.
˚˚ 
fSecs1ToHsms
˚˚ !
.
˚˚! "
fEventPusher
˚˚" .
.
˚˚. /
pushHsmsEvent
˚˚/ <
(
˚˚< =
new
¸¸ 2
$FHsmsControlMessageReceivedEventArgs
¸¸ <
(
¸¸< =
this
¸¸= A
.
¸¸A B
fSecs1ToHsms
¸¸B N
,
¸¸N O
FEventId
¸¸P X
.
¸¸X Y(
HsmsControlMessageReceived
¸¸Y s
,
¸¸s t
FResultCode¸¸u Ä
.¸¸Ä Å
Warninig¸¸Å â
,¸¸â ä
errorMessage¸¸ã ó
,¸¸ó ò#
fSecsControlMessage¸¸ô ¨
)¸¸¨ ≠
)
˝˝ 
;
˝˝ 
sendSelectRsp
ÅÅ 
(
ÅÅ 

m_fRecvBuf
ÅÅ (
.
ÅÅ( )
	sessionId
ÅÅ) 2
,
ÅÅ2 3
$num
ÅÅ4 5
,
ÅÅ5 6

m_fRecvBuf
ÅÅ7 A
.
ÅÅA B
systemBytes
ÅÅB M
)
ÅÅM N
;
ÅÅN O
}
ÇÇ 
catch
ÉÉ 
(
ÉÉ 
	Exception
ÉÉ 
ex
ÉÉ 
)
ÉÉ  
{
ÑÑ !
procHsmsErrorRaised
ÖÖ #
(
ÖÖ# $
ex
ÖÖ$ &
)
ÖÖ& '
;
ÖÖ' (
}
ÜÜ 
finally
áá 
{
àà !
fSecsControlMessage
ââ #
=
ââ$ %
null
ââ& *
;
ââ* +
}
ää 
}
ãã 	
private
èè 
void
èè 
recvSelectRsp
èè "
(
èè" #
)
êê 
{
ëë 	!
FSecsControlMessage
íí !
fSecsControlMessage
íí  3
=
íí4 5
null
íí6 :
;
íí: ;
string
ìì 
errorMessage
ìì 
=
ìì  !
string
ìì" (
.
ìì( )
Empty
ìì) .
;
ìì. /
try
ïï 
{
ññ 
errorMessage
óó 
=
óó $
getRejectReasonMessage
óó 5
(
óó5 6
$num
óó6 7
)
óó7 8
;
óó8 9!
fSecsControlMessage
õõ #
=
õõ$ %
new
õõ& )!
FSecsControlMessage
õõ* =
(
õõ= >
this
úú 
.
úú 
fSecs1ToHsms
úú %
,
úú% &%
FHsmsControlMessageType
ùù +
.
ùù+ ,
	SelectRsp
ùù, 5
,
ùù5 6

m_fRecvBuf
ûû 
.
ûû 
	sessionId
ûû (
,
ûû( )

m_fRecvBuf
üü 
.
üü 
byte2
üü $
,
üü$ %

m_fRecvBuf
†† 
.
†† 
byte3
†† $
,
††$ %

m_fRecvBuf
°° 
.
°° 
ptype
°° $
,
°°$ %

m_fRecvBuf
¢¢ 
.
¢¢ 
stype
¢¢ $
,
¢¢$ %

m_fRecvBuf
££ 
.
££ 
systemBytes
££ *
,
££* +
errorMessage
§§  
)
•• 
;
•• 
this
ßß 
.
ßß 
fSecs1ToHsms
ßß !
.
ßß! "
fEventPusher
ßß" .
.
ßß. /
pushHsmsEvent
ßß/ <
(
ßß< =
new
®® 2
$FHsmsControlMessageReceivedEventArgs
®® <
(
®®< =
this
®®= A
.
®®A B
fSecs1ToHsms
®®B N
,
®®N O
FEventId
®®P X
.
®®X Y(
HsmsControlMessageReceived
®®Y s
,
®®s t
FResultCode®®u Ä
.®®Ä Å
Warninig®®Å â
,®®â ä
errorMessage®®ã ó
,®®ó ò#
fSecsControlMessage®®ô ¨
)®®¨ ≠
)
©© 
;
©© 
sendRejectReq
≠≠ 
(
≠≠ 

m_fRecvBuf
≠≠ (
.
≠≠( )
	sessionId
≠≠) 2
,
≠≠2 3

m_fRecvBuf
≠≠4 >
.
≠≠> ?
stype
≠≠? D
,
≠≠D E
$num
≠≠F G
,
≠≠G H

m_fRecvBuf
≠≠I S
.
≠≠S T
systemBytes
≠≠T _
)
≠≠_ `
;
≠≠` a
}
ÆÆ 
catch
ØØ 
(
ØØ 
	Exception
ØØ 
ex
ØØ 
)
ØØ  
{
∞∞ !
procHsmsErrorRaised
±± #
(
±±# $
ex
±±$ &
)
±±& '
;
±±' (
}
≤≤ 
finally
≥≥ 
{
¥¥ !
fSecsControlMessage
µµ #
=
µµ$ %
null
µµ& *
;
µµ* +
}
∂∂ 
}
∑∑ 	
private
ªª 
void
ªª 
recvDeselectReq
ªª $
(
ªª$ %
)
ºº 
{
ΩΩ 	!
FSecsControlMessage
ææ !
fSecsControlMessage
ææ  3
=
ææ4 5
null
ææ6 :
;
ææ: ;
try
¿¿ 
{
¡¡ !
fSecsControlMessage
¬¬ #
=
¬¬$ %
new
¬¬& )!
FSecsControlMessage
¬¬* =
(
¬¬= >
this
√√ 
.
√√ 
fSecs1ToHsms
√√ %
,
√√% &%
FHsmsControlMessageType
ƒƒ +
.
ƒƒ+ ,
DeselectReq
ƒƒ, 7
,
ƒƒ7 8

m_fRecvBuf
≈≈ 
.
≈≈ 
	sessionId
≈≈ (
,
≈≈( )

m_fRecvBuf
∆∆ 
.
∆∆ 
byte2
∆∆ $
,
∆∆$ %

m_fRecvBuf
«« 
.
«« 
byte3
«« $
,
««$ %

m_fRecvBuf
»» 
.
»» 
ptype
»» $
,
»»$ %

m_fRecvBuf
…… 
.
…… 
stype
…… $
,
……$ %

m_fRecvBuf
   
.
   
systemBytes
   *
,
  * +
string
ÀÀ 
.
ÀÀ 
Empty
ÀÀ  
)
ÃÃ 
;
ÃÃ 
this
ŒŒ 
.
ŒŒ 
fSecs1ToHsms
ŒŒ !
.
ŒŒ! "
fEventPusher
ŒŒ" .
.
ŒŒ. /
pushHsmsEvent
ŒŒ/ <
(
ŒŒ< =
new
œœ 2
$FHsmsControlMessageReceivedEventArgs
œœ <
(
œœ< =
this
œœ= A
.
œœA B
fSecs1ToHsms
œœB N
,
œœN O
FEventId
œœP X
.
œœX Y(
HsmsControlMessageReceived
œœY s
,
œœs t
FResultCodeœœu Ä
.œœÄ Å
SuccessœœÅ à
,œœà â
stringœœä ê
.œœê ë
Emptyœœë ñ
,œœñ ó#
fSecsControlMessageœœò ´
)œœ´ ¨
)
–– 
;
–– 
sendDeselectRsp
‘‘ 
(
‘‘  

m_fRecvBuf
‘‘  *
.
‘‘* +
	sessionId
‘‘+ 4
,
‘‘4 5

m_fRecvBuf
‘‘6 @
.
‘‘@ A
systemBytes
‘‘A L
)
‘‘L M
;
‘‘M N
m_fTcpClient
€€ 
.
€€ 
close
€€ "
(
€€" #
)
€€# $
;
€€$ %
}
‹‹ 
catch
›› 
(
›› 
	Exception
›› 
ex
›› 
)
››  
{
ﬁﬁ !
procHsmsErrorRaised
ﬂﬂ #
(
ﬂﬂ# $
ex
ﬂﬂ$ &
)
ﬂﬂ& '
;
ﬂﬂ' (
}
‡‡ 
finally
·· 
{
‚‚ !
fSecsControlMessage
„„ #
=
„„$ %
null
„„& *
;
„„* +
}
‰‰ 
}
ÂÂ 	
private
ÈÈ 
void
ÈÈ 
recvDeselectRsp
ÈÈ $
(
ÈÈ$ %
)
ÍÍ 
{
ÎÎ 	!
FSecsControlMessage
ÏÏ !
fSecsControlMessage
ÏÏ  3
=
ÏÏ4 5
null
ÏÏ6 :
;
ÏÏ: ;
string
ÌÌ 
errorMessage
ÌÌ 
=
ÌÌ  !
string
ÌÌ" (
.
ÌÌ( )
Empty
ÌÌ) .
;
ÌÌ. /
try
ÔÔ 
{
 
errorMessage
ÒÒ 
=
ÒÒ $
getRejectReasonMessage
ÒÒ 5
(
ÒÒ5 6
$num
ÒÒ6 7
)
ÒÒ7 8
;
ÒÒ8 9!
fSecsControlMessage
ıı #
=
ıı$ %
new
ıı& )!
FSecsControlMessage
ıı* =
(
ıı= >
this
ˆˆ 
.
ˆˆ 
fSecs1ToHsms
ˆˆ %
,
ˆˆ% &%
FHsmsControlMessageType
˜˜ +
.
˜˜+ ,
DeselectRsp
˜˜, 7
,
˜˜7 8

m_fRecvBuf
¯¯ 
.
¯¯ 
	sessionId
¯¯ (
,
¯¯( )

m_fRecvBuf
˘˘ 
.
˘˘ 
byte2
˘˘ $
,
˘˘$ %

m_fRecvBuf
˙˙ 
.
˙˙ 
byte3
˙˙ $
,
˙˙$ %

m_fRecvBuf
˚˚ 
.
˚˚ 
ptype
˚˚ $
,
˚˚$ %

m_fRecvBuf
¸¸ 
.
¸¸ 
stype
¸¸ $
,
¸¸$ %

m_fRecvBuf
˝˝ 
.
˝˝ 
systemBytes
˝˝ *
,
˝˝* +
errorMessage
˛˛  
)
ˇˇ 
;
ˇˇ 
this
ÅÅ 
.
ÅÅ 
fSecs1ToHsms
ÅÅ !
.
ÅÅ! "
fEventPusher
ÅÅ" .
.
ÅÅ. /
pushHsmsEvent
ÅÅ/ <
(
ÅÅ< =
new
ÇÇ 2
$FHsmsControlMessageReceivedEventArgs
ÇÇ <
(
ÇÇ< =
this
ÇÇ= A
.
ÇÇA B
fSecs1ToHsms
ÇÇB N
,
ÇÇN O
FEventId
ÇÇP X
.
ÇÇX Y(
HsmsControlMessageReceived
ÇÇY s
,
ÇÇs t
FResultCodeÇÇu Ä
.ÇÇÄ Å
WarninigÇÇÅ â
,ÇÇâ ä
errorMessageÇÇã ó
,ÇÇó ò#
fSecsControlMessageÇÇô ¨
)ÇÇ¨ ≠
)
ÉÉ 
;
ÉÉ 
sendRejectReq
áá 
(
áá 

m_fRecvBuf
áá (
.
áá( )
	sessionId
áá) 2
,
áá2 3

m_fRecvBuf
áá4 >
.
áá> ?
stype
áá? D
,
ááD E
$num
ááF G
,
ááG H

m_fRecvBuf
ááI S
.
ááS T
systemBytes
ááT _
)
áá_ `
;
áá` a
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ 
ex
ââ 
)
ââ  
{
ää !
procHsmsErrorRaised
ãã #
(
ãã# $
ex
ãã$ &
)
ãã& '
;
ãã' (
}
åå 
finally
çç 
{
éé !
fSecsControlMessage
èè #
=
èè$ %
null
èè& *
;
èè* +
}
êê 
}
ëë 	
private
ïï 
void
ïï 
recvLinktestReq
ïï $
(
ïï$ %
)
ññ 
{
óó 	!
FSecsControlMessage
òò !
fSecsControlMessage
òò  3
=
òò4 5
null
òò6 :
;
òò: ;
try
öö 
{
õõ !
fSecsControlMessage
úú #
=
úú$ %
new
úú& )!
FSecsControlMessage
úú* =
(
úú= >
this
ùù 
.
ùù 
fSecs1ToHsms
ùù %
,
ùù% &%
FHsmsControlMessageType
ûû +
.
ûû+ ,
LinktestReq
ûû, 7
,
ûû7 8

m_fRecvBuf
üü 
.
üü 
	sessionId
üü (
,
üü( )

m_fRecvBuf
†† 
.
†† 
byte2
†† $
,
††$ %

m_fRecvBuf
°° 
.
°° 
byte3
°° $
,
°°$ %

m_fRecvBuf
¢¢ 
.
¢¢ 
ptype
¢¢ $
,
¢¢$ %

m_fRecvBuf
££ 
.
££ 
stype
££ $
,
££$ %

m_fRecvBuf
§§ 
.
§§ 
systemBytes
§§ *
,
§§* +
string
•• 
.
•• 
Empty
••  
)
¶¶ 
;
¶¶ 
this
®® 
.
®® 
fSecs1ToHsms
®® !
.
®®! "
fEventPusher
®®" .
.
®®. /
pushHsmsEvent
®®/ <
(
®®< =
new
©© 2
$FHsmsControlMessageReceivedEventArgs
©© <
(
©©< =
this
©©= A
.
©©A B
fSecs1ToHsms
©©B N
,
©©N O
FEventId
©©P X
.
©©X Y(
HsmsControlMessageReceived
©©Y s
,
©©s t
FResultCode©©u Ä
.©©Ä Å
Success©©Å à
,©©à â
string©©ä ê
.©©ê ë
Empty©©ë ñ
,©©ñ ó#
fSecsControlMessage©©ò ´
)©©´ ¨
)
™™ 
;
™™ 
sendLinktestRsp
ÆÆ 
(
ÆÆ  

m_fRecvBuf
ÆÆ  *
.
ÆÆ* +
	sessionId
ÆÆ+ 4
,
ÆÆ4 5

m_fRecvBuf
ÆÆ6 @
.
ÆÆ@ A
systemBytes
ÆÆA L
)
ÆÆL M
;
ÆÆM N
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞ 
ex
∞∞ 
)
∞∞  
{
±± !
procHsmsErrorRaised
≤≤ #
(
≤≤# $
ex
≤≤$ &
)
≤≤& '
;
≤≤' (
}
≥≥ 
finally
¥¥ 
{
µµ !
fSecsControlMessage
∂∂ #
=
∂∂$ %
null
∂∂& *
;
∂∂* +
}
∑∑ 
}
∏∏ 	
private
ºº 
void
ºº 
recvLinktestRsp
ºº $
(
ºº$ %
)
ΩΩ 
{
ææ 	!
FSecsControlMessage
øø !
fSecsControlMessage
øø  3
=
øø4 5
null
øø6 :
;
øø: ;
string
¿¿ 
errorMessage
¿¿ 
=
¿¿  !
string
¿¿" (
.
¿¿( )
Empty
¿¿) .
;
¿¿. /
try
¬¬ 
{
√√ 
errorMessage
ƒƒ 
=
ƒƒ 
this
ƒƒ #
.
ƒƒ# $$
getRejectReasonMessage
ƒƒ$ :
(
ƒƒ: ;
$num
ƒƒ; <
)
ƒƒ< =
;
ƒƒ= >!
fSecsControlMessage
»» #
=
»»$ %
new
»»& )!
FSecsControlMessage
»»* =
(
»»= >
this
…… 
.
…… 
fSecs1ToHsms
…… %
,
……% &%
FHsmsControlMessageType
   +
.
  + ,
LinktestRsp
  , 7
,
  7 8

m_fRecvBuf
ÀÀ 
.
ÀÀ 
	sessionId
ÀÀ (
,
ÀÀ( )

m_fRecvBuf
ÃÃ 
.
ÃÃ 
byte2
ÃÃ $
,
ÃÃ$ %

m_fRecvBuf
ÕÕ 
.
ÕÕ 
byte3
ÕÕ $
,
ÕÕ$ %

m_fRecvBuf
ŒŒ 
.
ŒŒ 
ptype
ŒŒ $
,
ŒŒ$ %

m_fRecvBuf
œœ 
.
œœ 
stype
œœ $
,
œœ$ %

m_fRecvBuf
–– 
.
–– 
systemBytes
–– *
,
––* +
errorMessage
——  
)
““ 
;
““ 
this
‘‘ 
.
‘‘ 
fSecs1ToHsms
‘‘ !
.
‘‘! "
fEventPusher
‘‘" .
.
‘‘. /
pushHsmsEvent
‘‘/ <
(
‘‘< =
new
’’ 2
$FHsmsControlMessageReceivedEventArgs
’’ <
(
’’< =
this
’’= A
.
’’A B
fSecs1ToHsms
’’B N
,
’’N O
FEventId
’’P X
.
’’X Y(
HsmsControlMessageReceived
’’Y s
,
’’s t
FResultCode’’u Ä
.’’Ä Å
Warninig’’Å â
,’’â ä
errorMessage’’ã ó
,’’ó ò#
fSecsControlMessage’’ô ¨
)’’¨ ≠
)
÷÷ 
;
÷÷ 
sendRejectReq
⁄⁄ 
(
⁄⁄ 

m_fRecvBuf
⁄⁄ (
.
⁄⁄( )
	sessionId
⁄⁄) 2
,
⁄⁄2 3

m_fRecvBuf
⁄⁄4 >
.
⁄⁄> ?
stype
⁄⁄? D
,
⁄⁄D E
$num
⁄⁄F G
,
⁄⁄G H

m_fRecvBuf
⁄⁄I S
.
⁄⁄S T
systemBytes
⁄⁄T _
)
⁄⁄_ `
;
⁄⁄` a
}
€€ 
catch
‹‹ 
(
‹‹ 
	Exception
‹‹ 
ex
‹‹ 
)
‹‹  
{
›› !
procHsmsErrorRaised
ﬁﬁ #
(
ﬁﬁ# $
ex
ﬁﬁ$ &
)
ﬁﬁ& '
;
ﬁﬁ' (
}
ﬂﬂ 
finally
‡‡ 
{
·· !
fSecsControlMessage
‚‚ #
=
‚‚$ %
null
‚‚& *
;
‚‚* +
}
„„ 
}
‰‰ 	
private
ËË 
void
ËË 
recvRejectReq
ËË "
(
ËË" #
)
ÈÈ 
{
ÍÍ 	!
FSecsControlMessage
ÎÎ !
fSecsControlMessage
ÎÎ  3
=
ÎÎ4 5
null
ÎÎ6 :
;
ÎÎ: ;
string
ÏÏ 
errorMessage
ÏÏ 
=
ÏÏ  !
string
ÏÏ" (
.
ÏÏ( )
Empty
ÏÏ) .
;
ÏÏ. /
try
ÓÓ 
{
ÔÔ 
errorMessage
 
=
 $
getRejectReasonMessage
 5
(
5 6

m_fRecvBuf
6 @
.
@ A
byte3
A F
)
F G
;
G H!
fSecsControlMessage
ÙÙ #
=
ÙÙ$ %
new
ÙÙ& )!
FSecsControlMessage
ÙÙ* =
(
ÙÙ= >
this
ıı 
.
ıı 
fSecs1ToHsms
ıı %
,
ıı% &%
FHsmsControlMessageType
ˆˆ +
.
ˆˆ+ ,
DeselectRsp
ˆˆ, 7
,
ˆˆ7 8

m_fRecvBuf
˜˜ 
.
˜˜ 
	sessionId
˜˜ (
,
˜˜( )

m_fRecvBuf
¯¯ 
.
¯¯ 
byte2
¯¯ $
,
¯¯$ %

m_fRecvBuf
˘˘ 
.
˘˘ 
byte3
˘˘ $
,
˘˘$ %

m_fRecvBuf
˙˙ 
.
˙˙ 
ptype
˙˙ $
,
˙˙$ %

m_fRecvBuf
˚˚ 
.
˚˚ 
stype
˚˚ $
,
˚˚$ %

m_fRecvBuf
¸¸ 
.
¸¸ 
systemBytes
¸¸ *
,
¸¸* +
errorMessage
˝˝  
)
˛˛ 
;
˛˛ 
this
ÄÄ 
.
ÄÄ 
fSecs1ToHsms
ÄÄ !
.
ÄÄ! "
fEventPusher
ÄÄ" .
.
ÄÄ. /
pushHsmsEvent
ÄÄ/ <
(
ÄÄ< =
new
ÅÅ 2
$FHsmsControlMessageReceivedEventArgs
ÅÅ <
(
ÅÅ< =
this
ÅÅ= A
.
ÅÅA B
fSecs1ToHsms
ÅÅB N
,
ÅÅN O
FEventId
ÅÅP X
.
ÅÅX Y(
HsmsControlMessageReceived
ÅÅY s
,
ÅÅs t
FResultCodeÅÅu Ä
.ÅÅÄ Å
WarninigÅÅÅ â
,ÅÅâ ä
errorMessageÅÅã ó
,ÅÅó ò#
fSecsControlMessageÅÅô ¨
)ÅÅ¨ ≠
)
ÇÇ 
;
ÇÇ 
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ 
ex
ÑÑ 
)
ÑÑ  
{
ÖÖ !
procHsmsErrorRaised
ÜÜ #
(
ÜÜ# $
ex
ÜÜ$ &
)
ÜÜ& '
;
ÜÜ' (
}
áá 
finally
àà 
{
ââ !
fSecsControlMessage
ää #
=
ää$ %
null
ää& *
;
ää* +
}
ãã 
}
åå 	
private
êê 
void
êê 
recvSeparateReq
êê $
(
êê$ %
)
ëë 
{
íí 	!
FSecsControlMessage
ìì !
fSecsControlMessage
ìì  3
=
ìì4 5
null
ìì6 :
;
ìì: ;
try
ïï 
{
ññ !
fSecsControlMessage
óó #
=
óó$ %
new
óó& )!
FSecsControlMessage
óó* =
(
óó= >
this
òò 
.
òò 
fSecs1ToHsms
òò %
,
òò% &%
FHsmsControlMessageType
ôô +
.
ôô+ ,
SeparateReq
ôô, 7
,
ôô7 8

m_fRecvBuf
öö 
.
öö 
	sessionId
öö (
,
öö( )

m_fRecvBuf
õõ 
.
õõ 
byte2
õõ $
,
õõ$ %

m_fRecvBuf
úú 
.
úú 
byte3
úú $
,
úú$ %

m_fRecvBuf
ùù 
.
ùù 
ptype
ùù $
,
ùù$ %

m_fRecvBuf
ûû 
.
ûû 
stype
ûû $
,
ûû$ %

m_fRecvBuf
üü 
.
üü 
systemBytes
üü *
,
üü* +
string
†† 
.
†† 
Empty
††  
)
°° 
;
°° 
this
££ 
.
££ 
fSecs1ToHsms
££ !
.
££! "
fEventPusher
££" .
.
££. /
pushHsmsEvent
££/ <
(
££< =
new
§§ 2
$FHsmsControlMessageReceivedEventArgs
§§ <
(
§§< =
this
§§= A
.
§§A B
fSecs1ToHsms
§§B N
,
§§N O
FEventId
§§P X
.
§§X Y(
HsmsControlMessageReceived
§§Y s
,
§§s t
FResultCode§§u Ä
.§§Ä Å
Success§§Å à
,§§à â
string§§ä ê
.§§ê ë
Empty§§ë ñ
,§§ñ ó#
fSecsControlMessage§§ò ´
)§§´ ¨
)
•• 
;
•• 
m_fTcpClient
¨¨ 
.
¨¨ 
close
¨¨ "
(
¨¨" #
)
¨¨# $
;
¨¨$ %
}
≠≠ 
catch
ÆÆ 
(
ÆÆ 
	Exception
ÆÆ 
ex
ÆÆ 
)
ÆÆ  
{
ØØ !
procHsmsErrorRaised
∞∞ #
(
∞∞# $
ex
∞∞$ &
)
∞∞& '
;
∞∞' (
}
±± 
finally
≤≤ 
{
≥≥ !
fSecsControlMessage
¥¥ #
=
¥¥$ %
null
¥¥& *
;
¥¥* +
}
µµ 
}
∂∂ 	
private
∫∫ 
void
∫∫ 
sendSelectRsp
∫∫ "
(
∫∫" #
UInt16
ªª 
	sessionId
ªª 
,
ªª 
byte
ºº 
status
ºº 
,
ºº 
UInt32
ΩΩ 
systemBytes
ΩΩ 
)
ææ 
{
øø 	
FHsmsSendBuffer
¿¿ 
fBuf
¿¿  
=
¿¿! "
null
¿¿# '
;
¿¿' (!
FSecsControlMessage
¡¡ !
fSecsControlMessage
¡¡  3
=
¡¡4 5
null
¡¡6 :
;
¡¡: ;
try
√√ 
{
ƒƒ 
fBuf
≈≈ 
=
≈≈ 
new
≈≈ 
FHsmsSendBuffer
≈≈ *
(
≈≈* +
)
≈≈+ ,
;
≈≈, -
fBuf
∆∆ 
.
∆∆ 
genSelectRsp
∆∆ !
(
∆∆! "
	sessionId
∆∆" +
,
∆∆+ ,
status
∆∆- 3
,
∆∆3 4
systemBytes
∆∆5 @
)
∆∆@ A
;
∆∆A B!
fSecsControlMessage
»» #
=
»»$ %
new
»»& )!
FSecsControlMessage
»»* =
(
»»= >
this
…… 
.
…… 
fSecs1ToHsms
…… %
,
……% &%
FHsmsControlMessageType
   +
.
  + ,
	SelectRsp
  , 5
,
  5 6
fBuf
ÀÀ 
.
ÀÀ 
	sessionId
ÀÀ "
,
ÀÀ" #
fBuf
ÃÃ 
.
ÃÃ 
byte2
ÃÃ 
,
ÃÃ 
fBuf
ÕÕ 
.
ÕÕ 
byte3
ÕÕ 
,
ÕÕ 
fBuf
ŒŒ 
.
ŒŒ 
ptype
ŒŒ 
,
ŒŒ 
fBuf
œœ 
.
œœ 
stype
œœ 
,
œœ 
fBuf
–– 
.
–– 
systemBytes
–– $
,
––$ %
string
—— 
.
—— 
Empty
——  
)
““ 
;
““ 
m_fTcpClient
‘‘ 
.
‘‘ 
send
‘‘ !
(
‘‘! "
new
‘‘" %
FSocketSendData
‘‘& 5
(
‘‘5 6
fBuf
‘‘6 :
.
‘‘: ;
getBinaryData
‘‘; H
(
‘‘H I
)
‘‘I J
,
‘‘J K!
fSecsControlMessage
‘‘L _
)
‘‘_ `
)
‘‘` a
;
‘‘a b
}
’’ 
catch
÷÷ 
(
÷÷ 
	Exception
÷÷ 
ex
÷÷ 
)
÷÷  
{
◊◊ !
procHsmsErrorRaised
ÿÿ #
(
ÿÿ# $
ex
ÿÿ$ &
)
ÿÿ& '
;
ÿÿ' (
}
ŸŸ 
finally
⁄⁄ 
{
€€ 
fBuf
‹‹ 
=
‹‹ 
null
‹‹ 
;
‹‹ !
fSecsControlMessage
›› #
=
››$ %
null
››& *
;
››* +
}
ﬁﬁ 
}
ﬂﬂ 	
private
„„ 
void
„„ 
sendDeselectRsp
„„ $
(
„„$ %
UInt16
‰‰ 
	sessionId
‰‰ 
,
‰‰ 
UInt32
ÂÂ 
systemBytes
ÂÂ 
)
ÊÊ 
{
ÁÁ 	
FHsmsSendBuffer
ËË 
fBuf
ËË  
=
ËË! "
null
ËË# '
;
ËË' (!
FSecsControlMessage
ÈÈ !
fSecsControlMessage
ÈÈ  3
=
ÈÈ4 5
null
ÈÈ6 :
;
ÈÈ: ;
try
ÎÎ 
{
ÏÏ 
fBuf
ÌÌ 
=
ÌÌ 
new
ÌÌ 
FHsmsSendBuffer
ÌÌ *
(
ÌÌ* +
)
ÌÌ+ ,
;
ÌÌ, -
fBuf
ÓÓ 
.
ÓÓ 
genDeselectRsp
ÓÓ #
(
ÓÓ# $
	sessionId
ÓÓ$ -
,
ÓÓ- .
systemBytes
ÓÓ/ :
)
ÓÓ: ;
;
ÓÓ; <!
fSecsControlMessage
 #
=
$ %
new
& )!
FSecsControlMessage
* =
(
= >
this
ÒÒ 
.
ÒÒ 
fSecs1ToHsms
ÒÒ %
,
ÒÒ% &%
FHsmsControlMessageType
ÚÚ +
.
ÚÚ+ ,
DeselectRsp
ÚÚ, 7
,
ÚÚ7 8
fBuf
ÛÛ 
.
ÛÛ 
	sessionId
ÛÛ "
,
ÛÛ" #
fBuf
ÙÙ 
.
ÙÙ 
byte2
ÙÙ 
,
ÙÙ 
fBuf
ıı 
.
ıı 
byte3
ıı 
,
ıı 
fBuf
ˆˆ 
.
ˆˆ 
ptype
ˆˆ 
,
ˆˆ 
fBuf
˜˜ 
.
˜˜ 
stype
˜˜ 
,
˜˜ 
fBuf
¯¯ 
.
¯¯ 
systemBytes
¯¯ $
,
¯¯$ %
string
˘˘ 
.
˘˘ 
Empty
˘˘  
)
˙˙ 
;
˙˙ 
m_fTcpClient
¸¸ 
.
¸¸ 
send
¸¸ !
(
¸¸! "
new
¸¸" %
FSocketSendData
¸¸& 5
(
¸¸5 6
fBuf
¸¸6 :
.
¸¸: ;
getBinaryData
¸¸; H
(
¸¸H I
)
¸¸I J
,
¸¸J K!
fSecsControlMessage
¸¸L _
)
¸¸_ `
)
¸¸` a
;
¸¸a b
}
˝˝ 
catch
˛˛ 
(
˛˛ 
	Exception
˛˛ 
ex
˛˛ 
)
˛˛  
{
ˇˇ !
procHsmsErrorRaised
ÄÄ #
(
ÄÄ# $
ex
ÄÄ$ &
)
ÄÄ& '
;
ÄÄ' (
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
fBuf
ÑÑ 
=
ÑÑ 
null
ÑÑ 
;
ÑÑ !
fSecsControlMessage
ÖÖ #
=
ÖÖ$ %
null
ÖÖ& *
;
ÖÖ* +
}
ÜÜ 
}
áá 	
private
ãã 
void
ãã 
sendLinktestRsp
ãã $
(
ãã$ %
UInt16
åå 
	sessionId
åå 
,
åå 
UInt32
çç 
systemBytes
çç 
)
éé 
{
èè 	
FHsmsSendBuffer
êê 
fBuf
êê  
=
êê! "
null
êê# '
;
êê' (!
FSecsControlMessage
ëë !
fSecsControlMessage
ëë  3
=
ëë4 5
null
ëë6 :
;
ëë: ;
try
ìì 
{
îî 
fBuf
ïï 
=
ïï 
new
ïï 
FHsmsSendBuffer
ïï *
(
ïï* +
)
ïï+ ,
;
ïï, -
fBuf
ññ 
.
ññ 
genLinktestRsp
ññ #
(
ññ# $
	sessionId
ññ$ -
,
ññ- .
systemBytes
ññ/ :
)
ññ: ;
;
ññ; <!
fSecsControlMessage
òò #
=
òò$ %
new
òò& )!
FSecsControlMessage
òò* =
(
òò= >
this
ôô 
.
ôô 
fSecs1ToHsms
ôô %
,
ôô% &%
FHsmsControlMessageType
öö +
.
öö+ ,
LinktestRsp
öö, 7
,
öö7 8
fBuf
õõ 
.
õõ 
	sessionId
õõ "
,
õõ" #
fBuf
úú 
.
úú 
byte2
úú 
,
úú 
fBuf
ùù 
.
ùù 
byte3
ùù 
,
ùù 
fBuf
ûû 
.
ûû 
ptype
ûû 
,
ûû 
fBuf
üü 
.
üü 
stype
üü 
,
üü 
fBuf
†† 
.
†† 
systemBytes
†† $
,
††$ %
string
°° 
.
°° 
Empty
°°  
)
¢¢ 
;
¢¢ 
m_fTcpClient
§§ 
.
§§ 
send
§§ !
(
§§! "
new
§§" %
FSocketSendData
§§& 5
(
§§5 6
fBuf
§§6 :
.
§§: ;
getBinaryData
§§; H
(
§§H I
)
§§I J
,
§§J K!
fSecsControlMessage
§§L _
)
§§_ `
)
§§` a
;
§§a b
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶ 
ex
¶¶ 
)
¶¶  
{
ßß !
procHsmsErrorRaised
®® #
(
®®# $
ex
®®$ &
)
®®& '
;
®®' (
}
©© 
finally
™™ 
{
´´ 
fBuf
¨¨ 
=
¨¨ 
null
¨¨ 
;
¨¨ !
fSecsControlMessage
≠≠ #
=
≠≠$ %
null
≠≠& *
;
≠≠* +
}
ÆÆ 
}
ØØ 	
private
≥≥ 
void
≥≥ 
sendRejectReq
≥≥ "
(
≥≥" #
UInt16
¥¥ 
	sessionId
¥¥ 
,
¥¥ 
byte
µµ 
stype
µµ 
,
µµ 
byte
∂∂ 

reasonCode
∂∂ 
,
∂∂ 
UInt32
∑∑ 
systemBytes
∑∑ 
)
∏∏ 
{
ππ 	
FHsmsSendBuffer
∫∫ 
fBuf
∫∫  
=
∫∫! "
null
∫∫# '
;
∫∫' (!
FSecsControlMessage
ªª !
fSecsControlMessage
ªª  3
=
ªª4 5
null
ªª6 :
;
ªª: ;
try
ΩΩ 
{
ææ 
fBuf
øø 
=
øø 
new
øø 
FHsmsSendBuffer
øø *
(
øø* +
)
øø+ ,
;
øø, -
fBuf
¿¿ 
.
¿¿ 
genRejectReq
¿¿ !
(
¿¿! "
	sessionId
¿¿" +
,
¿¿+ ,
stype
¿¿- 2
,
¿¿2 3

reasonCode
¿¿4 >
,
¿¿> ?
systemBytes
¿¿@ K
)
¿¿K L
;
¿¿L M!
fSecsControlMessage
¬¬ #
=
¬¬$ %
new
¬¬& )!
FSecsControlMessage
¬¬* =
(
¬¬= >
this
√√ 
.
√√ 
fSecs1ToHsms
√√ %
,
√√% &%
FHsmsControlMessageType
ƒƒ +
.
ƒƒ+ ,
	RejectReq
ƒƒ, 5
,
ƒƒ5 6
fBuf
≈≈ 
.
≈≈ 
	sessionId
≈≈ "
,
≈≈" #
fBuf
∆∆ 
.
∆∆ 
byte2
∆∆ 
,
∆∆ 
fBuf
«« 
.
«« 
byte3
«« 
,
«« 
fBuf
»» 
.
»» 
ptype
»» 
,
»» 
fBuf
…… 
.
…… 
stype
…… 
,
…… 
fBuf
   
.
   
systemBytes
   $
,
  $ %$
getRejectReasonMessage
ÀÀ *
(
ÀÀ* +

reasonCode
ÀÀ+ 5
)
ÀÀ5 6
)
ÃÃ 
;
ÃÃ 
m_fTcpClient
ŒŒ 
.
ŒŒ 
send
ŒŒ !
(
ŒŒ! "
new
ŒŒ" %
FSocketSendData
ŒŒ& 5
(
ŒŒ5 6
fBuf
ŒŒ6 :
.
ŒŒ: ;
getBinaryData
ŒŒ; H
(
ŒŒH I
)
ŒŒI J
,
ŒŒJ K!
fSecsControlMessage
ŒŒL _
)
ŒŒ_ `
)
ŒŒ` a
;
ŒŒa b
}
œœ 
catch
–– 
(
–– 
	Exception
–– 
ex
–– 
)
––  
{
—— !
procHsmsErrorRaised
““ #
(
““# $
ex
““$ &
)
““& '
;
““' (
}
”” 
finally
‘‘ 
{
’’ 
fBuf
÷÷ 
=
÷÷ 
null
÷÷ 
;
÷÷ !
fSecsControlMessage
◊◊ #
=
◊◊$ %
null
◊◊& *
;
◊◊* +
}
ÿÿ 
}
ŸŸ 	
private
›› 
void
›› 
sendSeparateReq
›› $
(
››$ %
)
ﬁﬁ 
{
ﬂﬂ 	
FHsmsSendBuffer
‡‡ 
fBuf
‡‡  
=
‡‡! "
null
‡‡# '
;
‡‡' (!
FSecsControlMessage
·· !
fSecsControlMessage
··  3
=
··4 5
null
··6 :
;
··: ;
try
„„ 
{
‰‰ 
fBuf
ÂÂ 
=
ÂÂ 
new
ÂÂ 
FHsmsSendBuffer
ÂÂ *
(
ÂÂ* +
)
ÂÂ+ ,
;
ÂÂ, -
fBuf
ÊÊ 
.
ÊÊ 
genSeparateReq
ÊÊ #
(
ÊÊ# $
this
ÊÊ$ (
.
ÊÊ( )!
fSystemBytesPointer
ÊÊ) <
.
ÊÊ< =
uniqueId
ÊÊ= E
)
ÊÊE F
;
ÊÊF G!
fSecsControlMessage
ËË #
=
ËË$ %
new
ËË& )!
FSecsControlMessage
ËË* =
(
ËË= >
this
ÈÈ 
.
ÈÈ 
fSecs1ToHsms
ÈÈ %
,
ÈÈ% &%
FHsmsControlMessageType
ÍÍ +
.
ÍÍ+ ,
SeparateReq
ÍÍ, 7
,
ÍÍ7 8
fBuf
ÎÎ 
.
ÎÎ 
	sessionId
ÎÎ "
,
ÎÎ" #
fBuf
ÏÏ 
.
ÏÏ 
byte2
ÏÏ 
,
ÏÏ 
fBuf
ÌÌ 
.
ÌÌ 
byte3
ÌÌ 
,
ÌÌ 
fBuf
ÓÓ 
.
ÓÓ 
ptype
ÓÓ 
,
ÓÓ 
fBuf
ÔÔ 
.
ÔÔ 
stype
ÔÔ 
,
ÔÔ 
fBuf
 
.
 
systemBytes
 $
,
$ %
string
ÒÒ 
.
ÒÒ 
Empty
ÒÒ  
)
ÚÚ 
;
ÚÚ 
m_fTcpClient
ÙÙ 
.
ÙÙ 
send
ÙÙ !
(
ÙÙ! "
new
ÙÙ" %
FSocketSendData
ÙÙ& 5
(
ÙÙ5 6
fBuf
ÙÙ6 :
.
ÙÙ: ;
getBinaryData
ÙÙ; H
(
ÙÙH I
)
ÙÙI J
,
ÙÙJ K!
fSecsControlMessage
ÙÙL _
)
ÙÙ_ `
)
ÙÙ` a
;
ÙÙa b
}
ıı 
catch
ˆˆ 
(
ˆˆ 
	Exception
ˆˆ 
ex
ˆˆ 
)
ˆˆ  
{
˜˜ !
procHsmsErrorRaised
¯¯ #
(
¯¯# $
ex
¯¯$ &
)
¯¯& '
;
¯¯' (
}
˘˘ 
finally
˙˙ 
{
˚˚ 
fBuf
¸¸ 
=
¸¸ 
null
¸¸ 
;
¸¸ !
fSecsControlMessage
˝˝ #
=
˝˝$ %
null
˝˝& *
;
˝˝* +
}
˛˛ 
}
ˇˇ 	
private
áá 
void
áá (
m_fThdMain_ThreadJobCalled
áá /
(
áá/ 0
object
àà 
sender
àà 
,
àà 
FThreadEventArgs
ââ 
e
ââ 
)
ää 
{
ãã 	
bool
åå 
waited
åå 
=
åå 
false
åå 
;
åå  
try
éé 
{
èè 
waited
êê 
=
êê 
m_fMainSync
êê $
.
êê$ %
tryWait
êê% ,
(
êê, -
$num
êê- .
)
êê. /
;
êê/ 0
if
ëë 
(
ëë 
!
ëë 
waited
ëë 
)
ëë 
{
íí 
return
ìì 
;
ìì 
}
îî 
if
òò 
(
òò 
m_fTcpClient
òò  
==
òò! #
null
òò$ (
||
òò) +
m_fTcpClient
òò, 8
.
òò8 9
fState
òò9 ?
!=
òò@ B
FTcpClientState
òòC R
.
òòR S
	Connected
òòS \
)
òò\ ]
{
ôô 
e
öö 
.
öö 
sleepThread
öö !
(
öö! "
$num
öö" #
)
öö# $
;
öö$ %
return
õõ 
;
õõ 
}
úú 
if
ûû 
(
ûû 
m_fState
ûû 
!=
ûû !
FCommunicationState
ûû  3
.
ûû3 4
	Connected
ûû4 =
)
ûû= >
{
üü 
e
†† 
.
†† 
sleepThread
†† !
(
††! "
$num
††" #
)
††# $
;
††$ %
return
°° 
;
°° 
}
¢¢ 
if
©© 
(
©© 
m_fTmrT7
©© 
.
©© 
elasped
©© $
(
©©$ %
false
©©% *
)
©©* +
)
©©+ ,
{
™™ 
this
´´ 
.
´´ 
fSecs1ToHsms
´´ %
.
´´% &
fEventPusher
´´& 2
.
´´2 3
pushHsmsEvent
´´3 @
(
´´@ A
new
¨¨ )
FHsmsTimeoutRaisedEventArgs
¨¨ 7
(
¨¨7 8
this
¨¨8 <
.
¨¨< =
fSecs1ToHsms
¨¨= I
,
¨¨I J
FEventId
¨¨K S
.
¨¨S T
HsmsTimeoutRaised
¨¨T e
,
¨¨e f
FSecsTimeout
¨¨g s
.
¨¨s t
T7
¨¨t v
,
¨¨v w 
getTimeoutMessage¨¨x â
(¨¨â ä
FSecsTimeout¨¨ä ñ
.¨¨ñ ó
T7¨¨ó ô
)¨¨ô ö
)¨¨ö õ
)
≠≠ 
;
≠≠ 
sendSeparateReq
ØØ #
(
ØØ# $
)
ØØ$ %
;
ØØ% &
m_fTcpClient
∂∂  
.
∂∂  !
close
∂∂! &
(
∂∂& '
)
∂∂' (
;
∂∂( )
return
∑∑ 
;
∑∑ 
}
∏∏ 
if
øø 
(
øø 
m_fTmrT8
øø 
.
øø 
elasped
øø $
(
øø$ %
false
øø% *
)
øø* +
)
øø+ ,
{
¿¿ 
this
¡¡ 
.
¡¡ 
fSecs1ToHsms
¡¡ %
.
¡¡% &
fEventPusher
¡¡& 2
.
¡¡2 3
pushHsmsEvent
¡¡3 @
(
¡¡@ A
new
¬¬ )
FHsmsTimeoutRaisedEventArgs
¬¬ 7
(
¬¬7 8
this
¬¬8 <
.
¬¬< =
fSecs1ToHsms
¬¬= I
,
¬¬I J
FEventId
¬¬K S
.
¬¬S T
HsmsTimeoutRaised
¬¬T e
,
¬¬e f
FSecsTimeout
¬¬g s
.
¬¬s t
T8
¬¬t v
,
¬¬v w 
getTimeoutMessage¬¬x â
(¬¬â ä
FSecsTimeout¬¬ä ñ
.¬¬ñ ó
T8¬¬ó ô
)¬¬ô ö
)¬¬ö õ
)
√√ 
;
√√ 
sendSeparateReq
≈≈ #
(
≈≈# $
)
≈≈$ %
;
≈≈% &
m_fTcpClient
ÃÃ  
.
ÃÃ  !
close
ÃÃ! &
(
ÃÃ& '
)
ÃÃ' (
;
ÃÃ( )
return
ÕÕ 
;
ÕÕ 
}
ŒŒ 
e
““ 
.
““ 
sleepThread
““ 
(
““ 
$num
““ 
)
““  
;
““  !
}
”” 
catch
‘‘ 
(
‘‘ 
	Exception
‘‘ 
ex
‘‘ 
)
‘‘  
{
’’ !
procHsmsErrorRaised
÷÷ #
(
÷÷# $
ex
÷÷$ &
)
÷÷& '
;
÷÷' (
}
◊◊ 
finally
ÿÿ 
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
waited
⁄⁄ 
)
⁄⁄ 
{
€€ 
m_fMainSync
‹‹ 
.
‹‹  
set
‹‹  #
(
‹‹# $
)
‹‹$ %
;
‹‹% &
}
›› 
}
ﬁﬁ 
}
ﬂﬂ 	
private
ÁÁ 
void
ÁÁ 0
"m_fTcpClient_TcpClientStateChanged
ÁÁ 7
(
ÁÁ7 8
object
ËË 
sender
ËË 
,
ËË -
FTcpClientStateChangedEventArgs
ÈÈ +
e
ÈÈ, -
)
ÍÍ 
{
ÎÎ 	
try
ÏÏ 
{
ÌÌ 
m_fMainSync
ÓÓ 
.
ÓÓ 
wait
ÓÓ  
(
ÓÓ  !
)
ÓÓ! "
;
ÓÓ" #
if
ÚÚ 
(
ÚÚ 
e
ÚÚ 
.
ÚÚ 
fState
ÚÚ 
==
ÚÚ 
FTcpClientState
ÚÚ  /
.
ÚÚ/ 0
Closed
ÚÚ0 6
)
ÚÚ6 7
{
ÛÛ 
m_fState
ÙÙ 
=
ÙÙ !
FCommunicationState
ÙÙ 2
.
ÙÙ2 3
Closed
ÙÙ3 9
;
ÙÙ9 :
this
ˆˆ 
.
ˆˆ 
fSecs1ToHsms
ˆˆ %
.
ˆˆ% &
fEventPusher
ˆˆ& 2
.
ˆˆ2 3
pushHsmsEvent
ˆˆ3 @
(
ˆˆ@ A
new
˜˜ (
FHsmsStateChangedEventArgs
˜˜ 6
(
˜˜6 7
this
¯¯  
.
¯¯  !
fSecs1ToHsms
¯¯! -
,
¯¯- .
FEventId
˘˘ $
.
˘˘$ %
HsmsStateChanged
˘˘% 5
,
˘˘5 6
FResultCode
˙˙ '
.
˙˙' (
Warninig
˙˙( 0
,
˙˙0 1
string
˚˚ "
.
˚˚" #
Format
˚˚# )
(
˚˚) *

FConstants
˚˚* 4
.
˚˚4 5

err_m_0024
˚˚5 ?
,
˚˚? @
$str
˚˚A ^
)
˚˚^ _
,
˚˚_ `
FConnectMode
¸¸ (
.
¸¸( )
Passive
¸¸) 0
,
¸¸0 1
this
˝˝  
.
˝˝  !
localIp
˝˝! (
,
˝˝( )
this
˛˛  
.
˛˛  !
	localPort
˛˛! *
,
˛˛* +
this
ˇˇ  
.
ˇˇ  !
remoteIp
ˇˇ! )
,
ˇˇ) *
this
ÄÄ  
.
ÄÄ  !

remotePort
ÄÄ! +
,
ÄÄ+ ,
m_fState
ÅÅ $
)
ÇÇ 
)
ÉÉ 
;
ÉÉ 
resetResource
áá !
(
áá! "
)
áá" #
;
áá# $
}
àà 
}
ââ 
catch
ää 
(
ää 
	Exception
ää 
ex
ää 
)
ää  
{
ãã !
procHsmsErrorRaised
åå #
(
åå# $
ex
åå$ &
)
åå& '
;
åå' (
}
çç 
finally
éé 
{
èè 
m_fMainSync
êê 
.
êê 
set
êê 
(
êê  
)
êê  !
;
êê! "
}
ëë 
}
íí 	
private
ññ 
void
ññ 0
"m_fTcpClient_TcpClientDataReceived
ññ 7
(
ññ7 8
object
óó 
sender
óó 
,
óó -
FTcpClientDataReceivedEventArgs
òò +
e
òò, -
)
ôô 
{
öö 	
try
õõ 
{
úú 
m_fMainSync
ùù 
.
ùù 
wait
ùù  
(
ùù  !
)
ùù! "
;
ùù" #
m_fTmrT8
§§ 
.
§§ 
stop
§§ 
(
§§ 
)
§§ 
;
§§  

m_fRecvBuf
®® 
.
®® 
input
®®  
(
®®  !
e
®®! "
.
®®" #
data
®®# '
)
®®' (
;
®®( )
while
™™ 
(
™™ 

m_fRecvBuf
™™ !
.
™™! "
parse
™™" '
(
™™' (
)
™™( )
)
™™) *
{
´´ 
if
¨¨ 
(
¨¨ 

m_fRecvBuf
¨¨ "
.
¨¨" #
stype
¨¨# (
==
¨¨) +
$num
¨¨, -
)
¨¨- .
{
≠≠ 
sendRejectReq
±± %
(
±±% &

m_fRecvBuf
±±& 0
.
±±0 1
	sessionId
±±1 :
,
±±: ;

m_fRecvBuf
±±< F
.
±±F G
stype
±±G L
,
±±L M
$num
±±N O
,
±±O P

m_fRecvBuf
±±Q [
.
±±[ \
systemBytes
±±\ g
)
±±g h
;
±±h i
}
≤≤ 
else
≥≥ 
if
≥≥ 
(
≥≥ 

m_fRecvBuf
≥≥ '
.
≥≥' (
stype
≥≥( -
==
≥≥. 0
$num
≥≥1 2
)
≥≥2 3
{
¥¥ 
recvSelectReq
µµ %
(
µµ% &
)
µµ& '
;
µµ' (
}
∂∂ 
else
∑∑ 
if
∑∑ 
(
∑∑ 

m_fRecvBuf
∑∑ '
.
∑∑' (
stype
∑∑( -
==
∑∑. 0
$num
∑∑1 2
)
∑∑2 3
{
∏∏ 
recvSelectRsp
ππ %
(
ππ% &
)
ππ& '
;
ππ' (
}
∫∫ 
else
ªª 
if
ªª 
(
ªª 

m_fRecvBuf
ªª '
.
ªª' (
stype
ªª( -
==
ªª. 0
$num
ªª1 2
)
ªª2 3
{
ºº 
recvDeselectReq
ΩΩ '
(
ΩΩ' (
)
ΩΩ( )
;
ΩΩ) *
}
ææ 
else
øø 
if
øø 
(
øø 

m_fRecvBuf
øø '
.
øø' (
stype
øø( -
==
øø. 0
$num
øø1 2
)
øø2 3
{
¿¿ 
recvDeselectRsp
¡¡ '
(
¡¡' (
)
¡¡( )
;
¡¡) *
}
¬¬ 
else
√√ 
if
√√ 
(
√√ 

m_fRecvBuf
√√ '
.
√√' (
stype
√√( -
==
√√. 0
$num
√√1 2
)
√√2 3
{
ƒƒ 
recvLinktestReq
≈≈ '
(
≈≈' (
)
≈≈( )
;
≈≈) *
}
∆∆ 
else
«« 
if
«« 
(
«« 

m_fRecvBuf
«« '
.
««' (
stype
««( -
==
««. 0
$num
««1 2
)
««2 3
{
»» 
recvLinktestRsp
…… '
(
……' (
)
……( )
;
……) *
}
   
else
ÀÀ 
if
ÀÀ 
(
ÀÀ 

m_fRecvBuf
ÀÀ '
.
ÀÀ' (
stype
ÀÀ( -
==
ÀÀ. 0
$num
ÀÀ1 2
)
ÀÀ2 3
{
ÃÃ 
recvRejectReq
ÕÕ %
(
ÕÕ% &
)
ÕÕ& '
;
ÕÕ' (
}
ŒŒ 
else
œœ 
if
œœ 
(
œœ 

m_fRecvBuf
œœ '
.
œœ' (
stype
œœ( -
==
œœ. 0
$num
œœ1 2
)
œœ2 3
{
–– 
recvSeparateReq
—— '
(
——' (
)
——( )
;
——) *
}
““ 
else
”” 
{
‘‘ 
sendRejectReq
ÿÿ %
(
ÿÿ% &

m_fRecvBuf
ÿÿ& 0
.
ÿÿ0 1
	sessionId
ÿÿ1 :
,
ÿÿ: ;

m_fRecvBuf
ÿÿ< F
.
ÿÿF G
stype
ÿÿG L
,
ÿÿL M
$num
ÿÿN O
,
ÿÿO P

m_fRecvBuf
ÿÿQ [
.
ÿÿ[ \
systemBytes
ÿÿ\ g
)
ÿÿg h
;
ÿÿh i
}
ŸŸ 

m_fRecvBuf
›› 
.
›› 
init
›› #
(
››# $
)
››$ %
;
››% &
}
ﬁﬁ 
if
ÂÂ 
(
ÂÂ 
!
ÂÂ 

m_fRecvBuf
ÂÂ 
.
ÂÂ  
isCompleted
ÂÂ  +
)
ÂÂ+ ,
{
ÊÊ 
m_fTmrT8
ÁÁ 
.
ÁÁ 
start
ÁÁ "
(
ÁÁ" #
this
ÁÁ# '
.
ÁÁ' (
fSecs1ToHsms
ÁÁ( 4
.
ÁÁ4 5
fHsmsConfig
ÁÁ5 @
.
ÁÁ@ A
	t8Timeout
ÁÁA J
*
ÁÁK L
$num
ÁÁM Q
)
ÁÁQ R
;
ÁÁR S
}
ËË 
}
ÈÈ 
catch
ÍÍ 
(
ÍÍ 
	Exception
ÍÍ 
ex
ÍÍ 
)
ÍÍ  
{
ÎÎ !
procHsmsErrorRaised
ÏÏ #
(
ÏÏ# $
ex
ÏÏ$ &
)
ÏÏ& '
;
ÏÏ' (
}
ÌÌ 
finally
ÓÓ 
{
ÔÔ 
m_fMainSync
 
.
 
set
 
(
  
)
  !
;
! "
}
ÒÒ 
}
ÚÚ 	
private
ˆˆ 
void
ˆˆ ,
m_fTcpClient_TcpClientDataSent
ˆˆ 3
(
ˆˆ3 4
object
˜˜ 
sender
˜˜ 
,
˜˜ )
FTcpClientDataSentEventArgs
¯¯ '
e
¯¯( )
)
˘˘ 
{
˙˙ 	!
FSecsControlMessage
˚˚ !
fSecsControlMessage
˚˚  3
=
˚˚4 5
null
˚˚6 :
;
˚˚: ;
try
˝˝ 
{
˛˛ 
m_fMainSync
ˇˇ 
.
ˇˇ 
wait
ˇˇ  
(
ˇˇ  !
)
ˇˇ! "
;
ˇˇ" #
if
É	É	 
(
É	É	 
e
É	É	 
.
É	É	 
fData
É	É	 
.
É	É	 
state
É	É	 !
is
É	É	" $!
FSecsControlMessage
É	É	% 8
)
É	É	8 9
{
Ñ	Ñ	 !
fSecsControlMessage
Ö	Ö	 '
=
Ö	Ö	( )
(
Ö	Ö	* +!
FSecsControlMessage
Ö	Ö	+ >
)
Ö	Ö	> ?
e
Ö	Ö	? @
.
Ö	Ö	@ A
fData
Ö	Ö	A F
.
Ö	Ö	F G
state
Ö	Ö	G L
;
Ö	Ö	L M
this
Ü	Ü	 
.
Ü	Ü	 
fSecs1ToHsms
Ü	Ü	 %
.
Ü	Ü	% &
fEventPusher
Ü	Ü	& 2
.
Ü	Ü	2 3
pushHsmsEvent
Ü	Ü	3 @
(
Ü	Ü	@ A
new
á	á	 .
 FHsmsControlMessageSentEventArgs
á	á	 <
(
á	á	< =
this
á	á	= A
.
á	á	A B
fSecs1ToHsms
á	á	B N
,
á	á	N O
FEventId
á	á	P X
.
á	á	X Y$
HsmsControlMessageSent
á	á	Y o
,
á	á	o p
FResultCode
á	á	q |
.
á	á	| }
Successá	á	} Ñ
,á	á	Ñ Ö
stringá	á	Ü å
.á	á	å ç
Emptyá	á	ç í
,á	á	í ì#
fSecsControlMessageá	á	î ß
)á	á	ß ®
)
à	à	 
;
à	à	 
if
ã	ã	 
(
ã	ã	 !
fSecsControlMessage
ã	ã	 +
.
ã	ã	+ ,
fType
ã	ã	, 1
==
ã	ã	2 4%
FHsmsControlMessageType
ã	ã	5 L
.
ã	ã	L M
	SelectRsp
ã	ã	M V
)
ã	ã	V W
{
å	å	 
sendSeparateReq
ç	ç	 '
(
ç	ç	' (
)
ç	ç	( )
;
ç	ç	) *
m_fTcpClient
î	î	 $
.
î	î	$ %
close
î	î	% *
(
î	î	* +
)
î	î	+ ,
;
î	î	, -
}
ï	ï	 
}
ñ	ñ	 
}
ó	ó	 
catch
ò	ò	 
(
ò	ò	 
	Exception
ò	ò	 
ex
ò	ò	 
)
ò	ò	  
{
ô	ô	 !
procHsmsErrorRaised
ö	ö	 #
(
ö	ö	# $
ex
ö	ö	$ &
)
ö	ö	& '
;
ö	ö	' (
}
õ	õ	 
finally
ú	ú	 
{
ù	ù	 !
fSecsControlMessage
û	û	 #
=
û	û	$ %
null
û	û	& *
;
û	û	* +
m_fMainSync
†	†	 
.
†	†	 
set
†	†	 
(
†	†	  
)
†	†	  !
;
†	†	! "
}
°	°	 
}
¢	¢	 	
private
¶	¶	 
void
¶	¶	 2
$m_fTcpClient_TcpClientDataSendFailed
¶	¶	 9
(
¶	¶	9 :
object
ß	ß	 
sender
ß	ß	 
,
ß	ß	 /
!FTcpClientDataSendFailedEventArgs
®	®	 -
e
®	®	. /
)
©	©	 
{
™	™	 	!
FSecsControlMessage
´	´	 !
fSecsControlMessage
´	´	  3
=
´	´	4 5
null
´	´	6 :
;
´	´	: ;
try
≠	≠	 
{
Æ	Æ	 
m_fMainSync
Ø	Ø	 
.
Ø	Ø	 
wait
Ø	Ø	  
(
Ø	Ø	  !
)
Ø	Ø	! "
;
Ø	Ø	" #
if
≥	≥	 
(
≥	≥	 
e
≥	≥	 
.
≥	≥	 
fData
≥	≥	 
.
≥	≥	 
state
≥	≥	 !
is
≥	≥	" $!
FSecsControlMessage
≥	≥	% 8
)
≥	≥	8 9
{
¥	¥	 !
fSecsControlMessage
µ	µ	 '
=
µ	µ	( )
(
µ	µ	* +!
FSecsControlMessage
µ	µ	+ >
)
µ	µ	> ?
e
µ	µ	? @
.
µ	µ	@ A
fData
µ	µ	A F
.
µ	µ	F G
state
µ	µ	G L
;
µ	µ	L M
this
∂	∂	 
.
∂	∂	 
fSecs1ToHsms
∂	∂	 %
.
∂	∂	% &
fEventPusher
∂	∂	& 2
.
∂	∂	2 3
pushHsmsEvent
∂	∂	3 @
(
∂	∂	@ A
new
∑	∑	 .
 FHsmsControlMessageSentEventArgs
∑	∑	 <
(
∑	∑	< =
this
∑	∑	= A
.
∑	∑	A B
fSecs1ToHsms
∑	∑	B N
,
∑	∑	N O
FEventId
∑	∑	P X
.
∑	∑	X Y$
HsmsControlMessageSent
∑	∑	Y o
,
∑	∑	o p
FResultCode
∑	∑	q |
.
∑	∑	| }
Error∑	∑	} Ç
,∑	∑	Ç É
e∑	∑	Ñ Ö
.∑	∑	Ö Ü
message∑	∑	Ü ç
,∑	∑	ç é#
fSecsControlMessage∑	∑	è ¢
)∑	∑	¢ £
)
∏	∏	 
;
∏	∏	 
}
π	π	 
}
∫	∫	 
catch
ª	ª	 
(
ª	ª	 
	Exception
ª	ª	 
ex
ª	ª	 
)
ª	ª	  
{
º	º	 !
procHsmsErrorRaised
Ω	Ω	 #
(
Ω	Ω	# $
ex
Ω	Ω	$ &
)
Ω	Ω	& '
;
Ω	Ω	' (
}
æ	æ	 
finally
ø	ø	 
{
¿	¿	 
m_fMainSync
¡	¡	 
.
¡	¡	 
set
¡	¡	 
(
¡	¡	  
)
¡	¡	  !
;
¡	¡	! "
}
¬	¬	 
}
√	√	 	
private
«	«	 
void
«	«	 /
!m_fTcpClient_TcpClientErrorRaised
«	«	 6
(
«	«	6 7
object
»	»	 
sender
»	»	 
,
»	»	 ,
FTcpClientErrorRaisedEventArgs
…	…	 *
e
…	…	+ ,
)
 	 	 
{
À	À	 	
try
Ã	Ã	 
{
Õ	Õ	 !
procHsmsErrorRaised
Œ	Œ	 #
(
Œ	Œ	# $
e
Œ	Œ	$ %
.
Œ	Œ	% &
	exception
Œ	Œ	& /
)
Œ	Œ	/ 0
;
Œ	Œ	0 1
}
œ	œ	 
catch
–	–	 
(
–	–	 
	Exception
–	–	 
ex
–	–	 
)
–	–	  
{
—	—	 !
procHsmsErrorRaised
“	“	 #
(
“	“	# $
ex
“	“	$ &
)
“	“	& '
;
“	“	' (
}
”	”	 
finally
‘	‘	 
{
’	’	 
}
◊	◊	 
}
ÿ	ÿ	 	
}
ﬁ	ﬁ	 
}ﬂ	ﬂ	 €Ë
yD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\HSMS\c_FHsmsActive.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FHsmsActive 
: 
	FBaseHsms  )
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FHsmsRecvBuffer 

m_fRecvBuf  *
=+ ,
null- 1
;1 2
private 

FTcpClient 
m_fTcpClient '
=( )
null* .
;. /
private 
	FCodeLock 
m_fMainSync %
=& '
null( ,
;, -
private 
FThread 

m_fThdMain "
=# $
null% )
;) *
private   
FStaticTimer   
m_fTmrLinktest   +
=  , -
null  . 2
;  2 3
private!! 
FStaticTimer!! 
m_fTmrT8!! %
=!!& '
null!!( ,
;!!, -
private"" *
FHsmsControlMessageTransaction"" .
m_fTranSelectReq""/ ?
=""@ A
null""B F
;""F G
private## *
FHsmsControlMessageTransaction## .
m_fTranLinktestReq##/ A
=##B C
null##D H
;##H I
public)) 
FHsmsActive)) 
()) 
FSecs1ToHsms** 
fSecs1ToHsms** %
)++ 
:,, 
base,, 
(,, 
fSecs1ToHsms,, 
),,  
{-- 	
init.. 
(.. 
).. 
;.. 
}// 	
~33 	
FHsmsActive33	 
(33 
)44 
{55 	
	myDispose66 
(66 
false66 
)66 
;66 
}77 	
	protected;; 
override;; 
void;; 
	myDispose;;  )
(;;) *
bool<< 
	disposing<< 
)== 
{>> 	
if?? 
(?? 
!?? 

m_disposed?? 
)?? 
{@@ 
ifAA 
(AA 
	disposingAA 
)AA 
{BB 
termCC 
(CC 
)CC 
;CC 
}DD 
baseHH 
.HH 
	myDisposeHH 
(HH 
	disposingHH (
)HH( )
;HH) *
}II 
}JJ 	
publicRR 
voidRR 
DisposeRR 
(RR 
)SS 
{TT 	
	myDisposeUU 
(UU 
trueUU 
)UU 
;UU 
GCVV 
.VV 
SuppressFinalizeVV 
(VV  
thisVV  $
)VV$ %
;VV% &
}WW 	
privategg 
voidgg 
initgg 
(gg 
)hh 
{ii 	
tryjj 
{kk 
m_fTmrLinktestll 
=ll  
newll! $
FStaticTimerll% 1
(ll1 2
)ll2 3
;ll3 4
m_fTmrT8mm 
=mm 
newmm 
FStaticTimermm +
(mm+ ,
)mm, -
;mm- .
m_fTranSelectReqnn  
=nn! "
newnn# &*
FHsmsControlMessageTransactionnn' E
(nnE F
thisnnF J
.nnJ K
fSecs1ToHsmsnnK W
)nnW X
;nnX Y
m_fTranLinktestReqoo "
=oo# $
newoo% (*
FHsmsControlMessageTransactionoo) G
(ooG H
thisooH L
.ooL M
fSecs1ToHsmsooM Y
)ooY Z
;ooZ [

m_fRecvBufpp 
=pp 
newpp  
FHsmsRecvBufferpp! 0
(pp0 1
)pp1 2
;pp2 3
m_fMainSynctt 
=tt 
newtt !
	FCodeLocktt" +
(tt+ ,
)tt, -
;tt- .

m_fThdMainuu 
=uu 
newuu  
FThreaduu! (
(uu( )
$struu) @
)uu@ A
;uuA B

m_fThdMainvv 
.vv 
ThreadJobCalledvv *
+=vv+ -
newvv. 1(
FThreadJobCalledEventHandlervv2 N
(vvN O&
m_fThdMain_ThreadJobCalledvvO i
)vvi j
;vvj k

m_fThdMainww 
.ww 
startww  
(ww  !
)ww! "
;ww" #
}xx 
catchyy 
(yy 
	Exceptionyy 
exyy 
)yy  
{zz 
FDebug{{ 
.{{ 
throwException{{ %
({{% &
ex{{& (
){{( )
;{{) *
}|| 
finally}} 
{~~ 
}
ÄÄ 
}
ÅÅ 	
private
ÖÖ 
void
ÖÖ 
term
ÖÖ 
(
ÖÖ 
)
ÜÜ 
{
áá 	
try
àà 
{
ââ 
if
ää 
(
ää 

m_fThdMain
ää 
!=
ää !
null
ää" &
)
ää& '
{
ãã 

m_fThdMain
åå 
.
åå 
stop
åå #
(
åå# $
)
åå$ %
;
åå% &

m_fThdMain
çç 
.
çç 
Dispose
çç &
(
çç& '
)
çç' (
;
çç( )

m_fThdMain
éé 
.
éé 
ThreadJobCalled
éé .
-=
éé/ 1
new
éé2 5*
FThreadJobCalledEventHandler
éé6 R
(
ééR S(
m_fThdMain_ThreadJobCalled
ééS m
)
éém n
;
één o

m_fThdMain
èè 
=
èè  
null
èè! %
;
èè% &
}
êê 
if
îî 
(
îî 
m_fTcpClient
îî  
!=
îî! #
null
îî$ (
)
îî( )
{
ïï 
m_fTcpClient
ññ  
.
ññ  !
close
ññ! &
(
ññ& '
)
ññ' (
;
ññ( )
m_fTcpClient
óó  
.
óó  !
Dispose
óó! (
(
óó( )
)
óó) *
;
óó* +
m_fTcpClient
ôô  
.
ôô  !#
TcpClientStateChanged
ôô! 6
-=
ôô7 9
new
ôô: =0
"FTcpClientStateChangedEventHandler
ôô> `
(
ôô` a1
"m_fTcpClient_TcpClientStateChangedôôa É
)ôôÉ Ñ
;ôôÑ Ö
m_fTcpClient
öö  
.
öö  !#
TcpClientDataReceived
öö! 6
-=
öö7 9
new
öö: =0
"FTcpClientDataReceivedEventHandler
öö> `
(
öö` a1
"m_fTcpClient_TcpClientDataReceivedööa É
)ööÉ Ñ
;ööÑ Ö
m_fTcpClient
õõ  
.
õõ  !
TcpClientDataSent
õõ! 2
-=
õõ3 5
new
õõ6 9,
FTcpClientDataSentEventHandler
õõ: X
(
õõX Y,
m_fTcpClient_TcpClientDataSent
õõY w
)
õõw x
;
õõx y
m_fTcpClient
úú  
.
úú  !%
TcpClientDataSendFailed
úú! 8
-=
úú9 ;
new
úú< ?2
$FTcpClientDataSendFailedEventHandler
úú@ d
(
úúd e3
$m_fTcpClient_TcpClientDataSendFailedúúe â
)úúâ ä
;úúä ã
m_fTcpClient
ùù  
.
ùù  !"
TcpClientErrorRaised
ùù! 5
-=
ùù6 8
new
ùù9 </
!FTcpClientErrorRaisedEventHandler
ùù= ^
(
ùù^ _0
!m_fTcpClient_TcpClientErrorRaisedùù_ Ä
)ùùÄ Å
;ùùÅ Ç
m_fTcpClient
üü  
=
üü! "
null
üü# '
;
üü' (
}
†† 
if
§§ 
(
§§ 
m_fTmrLinktest
§§ "
!=
§§# %
null
§§& *
)
§§* +
{
•• 
m_fTmrLinktest
¶¶ "
.
¶¶" #
Dispose
¶¶# *
(
¶¶* +
)
¶¶+ ,
;
¶¶, -
m_fTmrLinktest
ßß "
=
ßß# $
null
ßß% )
;
ßß) *
}
®® 
if
™™ 
(
™™ 
m_fTmrT8
™™ 
!=
™™ 
null
™™  $
)
™™$ %
{
´´ 
m_fTmrT8
¨¨ 
.
¨¨ 
Dispose
¨¨ $
(
¨¨$ %
)
¨¨% &
;
¨¨& '
m_fTmrT8
≠≠ 
=
≠≠ 
null
≠≠ #
;
≠≠# $
}
ÆÆ 
if
∞∞ 
(
∞∞ 
m_fTranSelectReq
∞∞ $
!=
∞∞% '
null
∞∞( ,
)
∞∞, -
{
±± 
m_fTranSelectReq
≤≤ $
.
≤≤$ %
Dispose
≤≤% ,
(
≤≤, -
)
≤≤- .
;
≤≤. /
m_fTranSelectReq
≥≥ $
=
≥≥% &
null
≥≥' +
;
≥≥+ ,
}
¥¥ 
if
∂∂ 
(
∂∂  
m_fTranLinktestReq
∂∂ &
!=
∂∂' )
null
∂∂* .
)
∂∂. /
{
∑∑  
m_fTranLinktestReq
∏∏ &
.
∏∏& '
Dispose
∏∏' .
(
∏∏. /
)
∏∏/ 0
;
∏∏0 1 
m_fTranLinktestReq
ππ &
=
ππ' (
null
ππ) -
;
ππ- .
}
∫∫ 
if
ºº 
(
ºº 

m_fRecvBuf
ºº 
!=
ºº !
null
ºº" &
)
ºº& '
{
ΩΩ 

m_fRecvBuf
ææ 
.
ææ 
Dispose
ææ &
(
ææ& '
)
ææ' (
;
ææ( )

m_fRecvBuf
øø 
=
øø  
null
øø! %
;
øø% &
}
¿¿ 
if
¬¬ 
(
¬¬ 
m_fMainSync
¬¬ 
!=
¬¬  "
null
¬¬# '
)
¬¬' (
{
√√ 
m_fMainSync
ƒƒ 
.
ƒƒ  
Dispose
ƒƒ  '
(
ƒƒ' (
)
ƒƒ( )
;
ƒƒ) *
m_fMainSync
≈≈ 
=
≈≈  !
null
≈≈" &
;
≈≈& '
}
∆∆ 
}
«« 
catch
»» 
(
»» 
	Exception
»» 
ex
»» 
)
»»  
{
…… 
FDebug
   
.
   
throwException
   %
(
  % &
ex
  & (
)
  ( )
;
  ) *
}
ÀÀ 
finally
ÃÃ 
{
ÕÕ 
}
œœ 
}
–– 	
public
‘‘ 
override
‘‘ 
void
‘‘ 
open
‘‘ !
(
‘‘! "
)
’’ 
{
÷÷ 	
try
◊◊ 
{
ÿÿ 
m_fTcpClient
ŸŸ 
=
ŸŸ 
new
ŸŸ "

FTcpClient
ŸŸ# -
(
ŸŸ- .
this
⁄⁄ 
.
⁄⁄ 
fSecs1ToHsms
⁄⁄ $
.
⁄⁄$ %
fHsmsConfig
⁄⁄% 0
.
⁄⁄0 1
localIp
⁄⁄1 8
,
⁄⁄8 9
this
€€ 
.
€€ 
fSecs1ToHsms
€€ $
.
€€$ %
fHsmsConfig
€€% 0
.
€€0 1
remoteIp
€€1 9
,
€€9 :
this
‹‹ 
.
‹‹ 
fSecs1ToHsms
‹‹ $
.
‹‹$ %
fHsmsConfig
‹‹% 0
.
‹‹0 1

remotePort
‹‹1 ;
)
›› 
;
›› 
m_fTcpClient
ﬁﬁ 
.
ﬁﬁ  
retryConnectPeriod
ﬁﬁ /
=
ﬁﬁ0 1
this
ﬁﬁ2 6
.
ﬁﬁ6 7
fSecs1ToHsms
ﬁﬁ7 C
.
ﬁﬁC D
fHsmsConfig
ﬁﬁD O
.
ﬁﬁO P
	t5Timeout
ﬁﬁP Y
*
ﬁﬁZ [
$num
ﬁﬁ\ `
;
ﬁﬁ` a
m_fTcpClient
‡‡ 
.
‡‡ #
TcpClientStateChanged
‡‡ 2
+=
‡‡3 5
new
‡‡6 90
"FTcpClientStateChangedEventHandler
‡‡: \
(
‡‡\ ]0
"m_fTcpClient_TcpClientStateChanged
‡‡] 
)‡‡ Ä
;‡‡Ä Å
m_fTcpClient
·· 
.
·· #
TcpClientDataReceived
·· 2
+=
··3 5
new
··6 90
"FTcpClientDataReceivedEventHandler
··: \
(
··\ ]0
"m_fTcpClient_TcpClientDataReceived
··] 
)·· Ä
;··Ä Å
m_fTcpClient
‚‚ 
.
‚‚ 
TcpClientDataSent
‚‚ .
+=
‚‚/ 1
new
‚‚2 5,
FTcpClientDataSentEventHandler
‚‚6 T
(
‚‚T U,
m_fTcpClient_TcpClientDataSent
‚‚U s
)
‚‚s t
;
‚‚t u
m_fTcpClient
„„ 
.
„„ %
TcpClientDataSendFailed
„„ 4
+=
„„5 7
new
„„8 ;2
$FTcpClientDataSendFailedEventHandler
„„< `
(
„„` a3
$m_fTcpClient_TcpClientDataSendFailed„„a Ö
)„„Ö Ü
;„„Ü á
m_fTcpClient
‰‰ 
.
‰‰ "
TcpClientErrorRaised
‰‰ 1
+=
‰‰2 4
new
‰‰5 8/
!FTcpClientErrorRaisedEventHandler
‰‰9 Z
(
‰‰Z [/
!m_fTcpClient_TcpClientErrorRaised
‰‰[ |
)
‰‰| }
;
‰‰} ~
m_fTcpClient
ÊÊ 
.
ÊÊ 
connect
ÊÊ $
(
ÊÊ$ %
)
ÊÊ% &
;
ÊÊ& '
}
ÁÁ 
catch
ËË 
(
ËË 
	Exception
ËË 
ex
ËË 
)
ËË  
{
ÈÈ 
FDebug
ÍÍ 
.
ÍÍ 
throwException
ÍÍ %
(
ÍÍ% &
ex
ÍÍ& (
)
ÍÍ( )
;
ÍÍ) *
}
ÎÎ 
finally
ÏÏ 
{
ÌÌ 
}
ÔÔ 
}
 	
public
ÙÙ 
override
ÙÙ 
void
ÙÙ 
close
ÙÙ "
(
ÙÙ" #
)
ıı 
{
ˆˆ 	
try
˜˜ 
{
¯¯ 
if
˘˘ 
(
˘˘ 
m_fTcpClient
˘˘  
==
˘˘! #
null
˘˘$ (
)
˘˘( )
{
˙˙ 
return
˚˚ 
;
˚˚ 
}
¸¸ 
if
ÄÄ 
(
ÄÄ 
m_fTcpClient
ÄÄ  
.
ÄÄ  !
fState
ÄÄ! '
==
ÄÄ( *
FTcpClientState
ÄÄ+ :
.
ÄÄ: ;
	Connected
ÄÄ; D
)
ÄÄD E
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
this
ÇÇ 
.
ÇÇ 
fSecs1ToHsms
ÇÇ )
.
ÇÇ) *

fHsmsState
ÇÇ* 4
==
ÇÇ5 7!
FCommunicationState
ÇÇ8 K
.
ÇÇK L
Selected
ÇÇL T
)
ÇÇT U
{
ÉÉ 
while
ÑÑ 
(
ÑÑ 
this
ÑÑ #
.
ÑÑ# $
fSecs1ToHsms
ÑÑ$ 0
.
ÑÑ0 1
fEventPusher
ÑÑ1 =
.
ÑÑ= >
hsmsEventCount
ÑÑ> L
>
ÑÑM N
$num
ÑÑO P
||
ÑÑQ S
!
ÑÑT U
m_fTcpClient
ÑÑU a
.
ÑÑa b
sendCompleted
ÑÑb o
)
ÑÑo p
{
ÖÖ 
if
ÜÜ 
(
ÜÜ  
System
ÜÜ  &
.
ÜÜ& '
Windows
ÜÜ' .
.
ÜÜ. /
Forms
ÜÜ/ 4
.
ÜÜ4 5
Application
ÜÜ5 @
.
ÜÜ@ A
MessageLoop
ÜÜA L
)
ÜÜL M
{
áá 
System
àà  &
.
àà& '
Windows
àà' .
.
àà. /
Forms
àà/ 4
.
àà4 5
Application
àà5 @
.
àà@ A
DoEvents
ààA I
(
ààI J
)
ààJ K
;
ààK L
}
ââ 
System
ää "
.
ää" #
	Threading
ää# ,
.
ää, -
Thread
ää- 3
.
ää3 4
Sleep
ää4 9
(
ää9 :
$num
ää: ;
)
ää; <
;
ää< =
}
ãã 
}
åå 
sendSeparateReq
éé #
(
éé# $
)
éé$ %
;
éé% &
}
èè 
m_fTcpClient
ìì 
.
ìì 
close
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
m_fTcpClient
îî 
.
îî 
Dispose
îî $
(
îî$ %
)
îî% &
;
îî& '
m_fTcpClient
ññ 
.
ññ #
TcpClientStateChanged
ññ 2
-=
ññ3 5
new
ññ6 90
"FTcpClientStateChangedEventHandler
ññ: \
(
ññ\ ]0
"m_fTcpClient_TcpClientStateChanged
ññ] 
)ññ Ä
;ññÄ Å
m_fTcpClient
óó 
.
óó #
TcpClientDataReceived
óó 2
-=
óó3 5
new
óó6 90
"FTcpClientDataReceivedEventHandler
óó: \
(
óó\ ]0
"m_fTcpClient_TcpClientDataReceived
óó] 
)óó Ä
;óóÄ Å
m_fTcpClient
òò 
.
òò 
TcpClientDataSent
òò .
-=
òò/ 1
new
òò2 5,
FTcpClientDataSentEventHandler
òò6 T
(
òòT U,
m_fTcpClient_TcpClientDataSent
òòU s
)
òòs t
;
òòt u
m_fTcpClient
ôô 
.
ôô %
TcpClientDataSendFailed
ôô 4
-=
ôô5 7
new
ôô8 ;2
$FTcpClientDataSendFailedEventHandler
ôô< `
(
ôô` a3
$m_fTcpClient_TcpClientDataSendFailedôôa Ö
)ôôÖ Ü
;ôôÜ á
m_fTcpClient
öö 
.
öö "
TcpClientErrorRaised
öö 1
-=
öö2 4
new
öö5 8/
!FTcpClientErrorRaisedEventHandler
öö9 Z
(
ööZ [/
!m_fTcpClient_TcpClientErrorRaised
öö[ |
)
öö| }
;
öö} ~
m_fTcpClient
úú 
=
úú 
null
úú #
;
úú# $
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû 
ex
ûû 
)
ûû  
{
üü 
FDebug
†† 
.
†† 
throwException
†† %
(
††% &
ex
††& (
)
††( )
;
††) *
}
°° 
finally
¢¢ 
{
££ 
}
•• 
}
¶¶ 	
public
™™ 
override
™™ 
void
™™ 
send
™™ !
(
™™! "
FSecsDataMessage
´´ 
fSecsDataMessage
´´ -
)
¨¨ 
{
≠≠ 	
try
ÆÆ 
{
ØØ 
sendDataMessage
∞∞ 
(
∞∞  
fSecsDataMessage
∞∞  0
)
∞∞0 1
;
∞∞1 2
}
±± 
catch
≤≤ 
(
≤≤ 
	Exception
≤≤ 
ex
≤≤ 
)
≤≤  
{
≥≥ 
FDebug
¥¥ 
.
¥¥ 
throwException
¥¥ %
(
¥¥% &
ex
¥¥& (
)
¥¥( )
;
¥¥) *
}
µµ 
finally
∂∂ 
{
∑∑ 
}
ππ 
}
∫∫ 	
private
ææ 
void
ææ 
resetResource
ææ "
(
ææ" #
)
øø 
{
¿¿ 	
try
¡¡ 
{
¬¬ 
m_fTmrLinktest
∆∆ 
.
∆∆ 
stop
∆∆ #
(
∆∆# $
)
∆∆$ %
;
∆∆% &
m_fTmrT8
«« 
.
«« 
stop
«« 
(
«« 
)
«« 
;
««  
m_fTranSelectReq
»»  
.
»»  !
reset
»»! &
(
»»& '
)
»»' (
;
»»( ) 
m_fTranLinktestReq
…… "
.
……" #
reset
……# (
(
……( )
)
……) *
;
……* +

m_fRecvBuf
   
.
   
clear
    
(
    !
)
  ! "
;
  " #
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ 
ex
ÃÃ 
)
ÃÃ  
{
ÕÕ 
FDebug
ŒŒ 
.
ŒŒ 
throwException
ŒŒ %
(
ŒŒ% &
ex
ŒŒ& (
)
ŒŒ( )
;
ŒŒ) *
}
œœ 
finally
–– 
{
—— 
}
”” 
}
‘‘ 	
private
ÿÿ 
void
ÿÿ 
sendSelectReq
ÿÿ "
(
ÿÿ" #
)
ŸŸ 
{
⁄⁄ 	
FHsmsSendBuffer
€€ 
fBuf
€€  
=
€€! "
null
€€# '
;
€€' (!
FSecsControlMessage
‹‹ !
fSecsControlMessage
‹‹  3
=
‹‹4 5
null
‹‹6 :
;
‹‹: ;
try
ﬁﬁ 
{
ﬂﬂ 
fBuf
‡‡ 
=
‡‡ 
new
‡‡ 
FHsmsSendBuffer
‡‡ *
(
‡‡* +
)
‡‡+ ,
;
‡‡, -
fBuf
·· 
.
·· 
genSelectReq
·· !
(
··! "
this
··" &
.
··& '!
fSystemBytesPointer
··' :
.
··: ;
uniqueId
··; C
)
··C D
;
··D E!
fSecsControlMessage
„„ #
=
„„$ %
new
„„& )!
FSecsControlMessage
„„* =
(
„„= >
this
‰‰ 
.
‰‰ 
fSecs1ToHsms
‰‰ %
,
‰‰% &%
FHsmsControlMessageType
ÂÂ +
.
ÂÂ+ ,
	SelectReq
ÂÂ, 5
,
ÂÂ5 6
fBuf
ÊÊ 
.
ÊÊ 
	sessionId
ÊÊ "
,
ÊÊ" #
fBuf
ÁÁ 
.
ÁÁ 
byte2
ÁÁ 
,
ÁÁ 
fBuf
ËË 
.
ËË 
byte3
ËË 
,
ËË 
fBuf
ÈÈ 
.
ÈÈ 
ptype
ÈÈ 
,
ÈÈ 
fBuf
ÍÍ 
.
ÍÍ 
stype
ÍÍ 
,
ÍÍ 
fBuf
ÎÎ 
.
ÎÎ 
systemBytes
ÎÎ $
,
ÎÎ$ %
string
ÏÏ 
.
ÏÏ 
Empty
ÏÏ  
)
ÌÌ 
;
ÌÌ 
m_fTcpClient
ÔÔ 
.
ÔÔ 
send
ÔÔ !
(
ÔÔ! "
new
ÔÔ" %
FSocketSendData
ÔÔ& 5
(
ÔÔ5 6
fBuf
ÔÔ6 :
.
ÔÔ: ;
getBinaryData
ÔÔ; H
(
ÔÔH I
)
ÔÔI J
,
ÔÔJ K!
fSecsControlMessage
ÔÔL _
)
ÔÔ_ `
)
ÔÔ` a
;
ÔÔa b
m_fTranSelectReq
ˆˆ  
.
ˆˆ  !
set
ˆˆ! $
(
ˆˆ$ %
fBuf
ˆˆ% )
.
ˆˆ) *
	sessionId
ˆˆ* 3
,
ˆˆ3 4
fBuf
ˆˆ5 9
.
ˆˆ9 :
systemBytes
ˆˆ: E
)
ˆˆE F
;
ˆˆF G
}
˜˜ 
catch
¯¯ 
(
¯¯ 
	Exception
¯¯ 
ex
¯¯ 
)
¯¯  
{
˘˘ !
procHsmsErrorRaised
˙˙ #
(
˙˙# $
ex
˙˙$ &
)
˙˙& '
;
˙˙' (
}
˚˚ 
finally
¸¸ 
{
˝˝ 
fBuf
˛˛ 
=
˛˛ 
null
˛˛ 
;
˛˛ !
fSecsControlMessage
ˇˇ #
=
ˇˇ$ %
null
ˇˇ& *
;
ˇˇ* +
}
ÄÄ 
}
ÅÅ 	
private
ÖÖ 
void
ÖÖ 
sendDeselectRsp
ÖÖ $
(
ÖÖ$ %
UInt16
ÜÜ 
	sessionId
ÜÜ 
,
ÜÜ 
UInt32
áá 
systemBytes
áá 
)
àà 
{
ââ 	
FHsmsSendBuffer
ää 
fBuf
ää  
=
ää! "
null
ää# '
;
ää' (!
FSecsControlMessage
ãã !
fSecsControlMessage
ãã  3
=
ãã4 5
null
ãã6 :
;
ãã: ;
try
çç 
{
éé 
fBuf
èè 
=
èè 
new
èè 
FHsmsSendBuffer
èè *
(
èè* +
)
èè+ ,
;
èè, -
fBuf
êê 
.
êê 
genDeselectRsp
êê #
(
êê# $
	sessionId
êê$ -
,
êê- .
systemBytes
êê/ :
)
êê: ;
;
êê; <!
fSecsControlMessage
íí #
=
íí$ %
new
íí& )!
FSecsControlMessage
íí* =
(
íí= >
this
ìì 
.
ìì 
fSecs1ToHsms
ìì %
,
ìì% &%
FHsmsControlMessageType
îî +
.
îî+ ,
DeselectRsp
îî, 7
,
îî7 8
fBuf
ïï 
.
ïï 
	sessionId
ïï "
,
ïï" #
fBuf
ññ 
.
ññ 
byte2
ññ 
,
ññ 
fBuf
óó 
.
óó 
byte3
óó 
,
óó 
fBuf
òò 
.
òò 
ptype
òò 
,
òò 
fBuf
ôô 
.
ôô 
stype
ôô 
,
ôô 
fBuf
öö 
.
öö 
systemBytes
öö $
,
öö$ %
string
õõ 
.
õõ 
Empty
õõ  
)
úú 
;
úú 
m_fTcpClient
ûû 
.
ûû 
send
ûû !
(
ûû! "
new
ûû" %
FSocketSendData
ûû& 5
(
ûû5 6
fBuf
ûû6 :
.
ûû: ;
getBinaryData
ûû; H
(
ûûH I
)
ûûI J
,
ûûJ K!
fSecsControlMessage
ûûL _
)
ûû_ `
)
ûû` a
;
ûûa b
}
üü 
catch
†† 
(
†† 
	Exception
†† 
ex
†† 
)
††  
{
°° !
procHsmsErrorRaised
¢¢ #
(
¢¢# $
ex
¢¢$ &
)
¢¢& '
;
¢¢' (
}
££ 
finally
§§ 
{
•• 
fBuf
¶¶ 
=
¶¶ 
null
¶¶ 
;
¶¶ !
fSecsControlMessage
ßß #
=
ßß$ %
null
ßß& *
;
ßß* +
}
®® 
}
©© 	
private
≠≠ 
void
≠≠ 
sendLinktestReq
≠≠ $
(
≠≠$ %
)
ÆÆ 
{
ØØ 	
FHsmsSendBuffer
∞∞ 
fBuf
∞∞  
=
∞∞! "
null
∞∞# '
;
∞∞' (!
FSecsControlMessage
±± !
fSecsControlMessage
±±  3
=
±±4 5
null
±±6 :
;
±±: ;
try
≥≥ 
{
¥¥ 
fBuf
µµ 
=
µµ 
new
µµ 
FHsmsSendBuffer
µµ *
(
µµ* +
)
µµ+ ,
;
µµ, -
fBuf
∂∂ 
.
∂∂ 
genLinktestReq
∂∂ #
(
∂∂# $
this
∂∂$ (
.
∂∂( )!
fSystemBytesPointer
∂∂) <
.
∂∂< =
uniqueId
∂∂= E
)
∂∂E F
;
∂∂F G!
fSecsControlMessage
∏∏ #
=
∏∏$ %
new
∏∏& )!
FSecsControlMessage
∏∏* =
(
∏∏= >
this
ππ 
.
ππ 
fSecs1ToHsms
ππ %
,
ππ% &%
FHsmsControlMessageType
∫∫ +
.
∫∫+ ,
LinktestReq
∫∫, 7
,
∫∫7 8
fBuf
ªª 
.
ªª 
	sessionId
ªª "
,
ªª" #
fBuf
ºº 
.
ºº 
byte2
ºº 
,
ºº 
fBuf
ΩΩ 
.
ΩΩ 
byte3
ΩΩ 
,
ΩΩ 
fBuf
ææ 
.
ææ 
ptype
ææ 
,
ææ 
fBuf
øø 
.
øø 
stype
øø 
,
øø 
fBuf
¿¿ 
.
¿¿ 
systemBytes
¿¿ $
,
¿¿$ %
string
¡¡ 
.
¡¡ 
Empty
¡¡  
)
¬¬ 
;
¬¬ 
m_fTcpClient
ƒƒ 
.
ƒƒ 
send
ƒƒ !
(
ƒƒ! "
new
ƒƒ" %
FSocketSendData
ƒƒ& 5
(
ƒƒ5 6
fBuf
ƒƒ6 :
.
ƒƒ: ;
getBinaryData
ƒƒ; H
(
ƒƒH I
)
ƒƒI J
,
ƒƒJ K!
fSecsControlMessage
ƒƒL _
)
ƒƒ_ `
)
ƒƒ` a
;
ƒƒa b 
m_fTranLinktestReq
ÀÀ "
.
ÀÀ" #
set
ÀÀ# &
(
ÀÀ& '
fBuf
ÀÀ' +
.
ÀÀ+ ,
	sessionId
ÀÀ, 5
,
ÀÀ5 6
fBuf
ÀÀ7 ;
.
ÀÀ; <
systemBytes
ÀÀ< G
)
ÀÀG H
;
ÀÀH I
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ 
ex
ÕÕ 
)
ÕÕ  
{
ŒŒ !
procHsmsErrorRaised
œœ #
(
œœ# $
ex
œœ$ &
)
œœ& '
;
œœ' (
}
–– 
finally
—— 
{
““ 
fBuf
”” 
=
”” 
null
”” 
;
”” !
fSecsControlMessage
‘‘ #
=
‘‘$ %
null
‘‘& *
;
‘‘* +
}
’’ 
}
÷÷ 	
private
⁄⁄ 
void
⁄⁄ 
sendLinktestRsp
⁄⁄ $
(
⁄⁄$ %
UInt16
€€ 
	sessionId
€€ 
,
€€ 
UInt32
‹‹ 
systemBytes
‹‹ 
)
›› 
{
ﬁﬁ 	
FHsmsSendBuffer
ﬂﬂ 
fBuf
ﬂﬂ  
=
ﬂﬂ! "
null
ﬂﬂ# '
;
ﬂﬂ' (!
FSecsControlMessage
‡‡ !
fSecsControlMessage
‡‡  3
=
‡‡4 5
null
‡‡6 :
;
‡‡: ;
try
‚‚ 
{
„„ 
fBuf
‰‰ 
=
‰‰ 
new
‰‰ 
FHsmsSendBuffer
‰‰ *
(
‰‰* +
)
‰‰+ ,
;
‰‰, -
fBuf
ÂÂ 
.
ÂÂ 
genLinktestRsp
ÂÂ #
(
ÂÂ# $
	sessionId
ÂÂ$ -
,
ÂÂ- .
systemBytes
ÂÂ/ :
)
ÂÂ: ;
;
ÂÂ; <!
fSecsControlMessage
ÁÁ #
=
ÁÁ$ %
new
ÁÁ& )!
FSecsControlMessage
ÁÁ* =
(
ÁÁ= >
this
ËË 
.
ËË 
fSecs1ToHsms
ËË %
,
ËË% &%
FHsmsControlMessageType
ÈÈ +
.
ÈÈ+ ,
LinktestRsp
ÈÈ, 7
,
ÈÈ7 8
fBuf
ÍÍ 
.
ÍÍ 
	sessionId
ÍÍ "
,
ÍÍ" #
fBuf
ÎÎ 
.
ÎÎ 
byte2
ÎÎ 
,
ÎÎ 
fBuf
ÏÏ 
.
ÏÏ 
byte3
ÏÏ 
,
ÏÏ 
fBuf
ÌÌ 
.
ÌÌ 
ptype
ÌÌ 
,
ÌÌ 
fBuf
ÓÓ 
.
ÓÓ 
stype
ÓÓ 
,
ÓÓ 
fBuf
ÔÔ 
.
ÔÔ 
systemBytes
ÔÔ $
,
ÔÔ$ %
string
 
.
 
Empty
  
)
ÒÒ 
;
ÒÒ 
m_fTcpClient
ÛÛ 
.
ÛÛ 
send
ÛÛ !
(
ÛÛ! "
new
ÛÛ" %
FSocketSendData
ÛÛ& 5
(
ÛÛ5 6
fBuf
ÛÛ6 :
.
ÛÛ: ;
getBinaryData
ÛÛ; H
(
ÛÛH I
)
ÛÛI J
,
ÛÛJ K!
fSecsControlMessage
ÛÛL _
)
ÛÛ_ `
)
ÛÛ` a
;
ÛÛa b
}
ÙÙ 
catch
ıı 
(
ıı 
	Exception
ıı 
ex
ıı 
)
ıı  
{
ˆˆ !
procHsmsErrorRaised
˜˜ #
(
˜˜# $
ex
˜˜$ &
)
˜˜& '
;
˜˜' (
}
¯¯ 
finally
˘˘ 
{
˙˙ 
fBuf
˚˚ 
=
˚˚ 
null
˚˚ 
;
˚˚ !
fSecsControlMessage
¸¸ #
=
¸¸$ %
null
¸¸& *
;
¸¸* +
}
˝˝ 
}
˛˛ 	
private
ÇÇ 
void
ÇÇ 
sendRejectReq
ÇÇ "
(
ÇÇ" #
UInt16
ÉÉ 
	sessionId
ÉÉ 
,
ÉÉ 
byte
ÑÑ 
stype
ÑÑ 
,
ÑÑ 
byte
ÖÖ 

reasonCode
ÖÖ 
,
ÖÖ 
UInt32
ÜÜ 
systemBytes
ÜÜ 
)
áá 
{
àà 	
FHsmsSendBuffer
ââ 
fBuf
ââ  
=
ââ! "
null
ââ# '
;
ââ' (!
FSecsControlMessage
ää !
fSecsControlMessage
ää  3
=
ää4 5
null
ää6 :
;
ää: ;
try
åå 
{
çç 
fBuf
éé 
=
éé 
new
éé 
FHsmsSendBuffer
éé *
(
éé* +
)
éé+ ,
;
éé, -
fBuf
èè 
.
èè 
genRejectReq
èè !
(
èè! "
	sessionId
èè" +
,
èè+ ,
stype
èè- 2
,
èè2 3

reasonCode
èè4 >
,
èè> ?
systemBytes
èè@ K
)
èèK L
;
èèL M!
fSecsControlMessage
ëë #
=
ëë$ %
new
ëë& )!
FSecsControlMessage
ëë* =
(
ëë= >
this
íí 
.
íí 
fSecs1ToHsms
íí %
,
íí% &%
FHsmsControlMessageType
ìì +
.
ìì+ ,
	RejectReq
ìì, 5
,
ìì5 6
fBuf
îî 
.
îî 
	sessionId
îî "
,
îî" #
fBuf
ïï 
.
ïï 
byte2
ïï 
,
ïï 
fBuf
ññ 
.
ññ 
byte3
ññ 
,
ññ 
fBuf
óó 
.
óó 
ptype
óó 
,
óó 
fBuf
òò 
.
òò 
stype
òò 
,
òò 
fBuf
ôô 
.
ôô 
systemBytes
ôô $
,
ôô$ %
string
öö 
.
öö 
Empty
öö  
)
õõ 
;
õõ 
m_fTcpClient
ùù 
.
ùù 
send
ùù !
(
ùù! "
new
ùù" %
FSocketSendData
ùù& 5
(
ùù5 6
fBuf
ùù6 :
.
ùù: ;
getBinaryData
ùù; H
(
ùùH I
)
ùùI J
,
ùùJ K!
fSecsControlMessage
ùùL _
)
ùù_ `
)
ùù` a
;
ùùa b
}
ûû 
catch
üü 
(
üü 
	Exception
üü 
ex
üü 
)
üü  
{
†† !
procHsmsErrorRaised
°° #
(
°°# $
ex
°°$ &
)
°°& '
;
°°' (
}
¢¢ 
finally
££ 
{
§§ 
fBuf
•• 
=
•• 
null
•• 
;
•• !
fSecsControlMessage
¶¶ #
=
¶¶$ %
null
¶¶& *
;
¶¶* +
}
ßß 
}
®® 	
private
¨¨ 
void
¨¨ 
sendSeparateReq
¨¨ $
(
¨¨$ %
)
≠≠ 
{
ÆÆ 	
FHsmsSendBuffer
ØØ 
fBuf
ØØ  
=
ØØ! "
null
ØØ# '
;
ØØ' (!
FSecsControlMessage
∞∞ !
fSecsControlMessage
∞∞  3
=
∞∞4 5
null
∞∞6 :
;
∞∞: ;
try
≤≤ 
{
≥≥ 
fBuf
¥¥ 
=
¥¥ 
new
¥¥ 
FHsmsSendBuffer
¥¥ *
(
¥¥* +
)
¥¥+ ,
;
¥¥, -
fBuf
µµ 
.
µµ 
genSeparateReq
µµ #
(
µµ# $
this
µµ$ (
.
µµ( )!
fSystemBytesPointer
µµ) <
.
µµ< =
uniqueId
µµ= E
)
µµE F
;
µµF G!
fSecsControlMessage
∑∑ #
=
∑∑$ %
new
∑∑& )!
FSecsControlMessage
∑∑* =
(
∑∑= >
this
∏∏ 
.
∏∏ 
fSecs1ToHsms
∏∏ %
,
∏∏% &%
FHsmsControlMessageType
ππ +
.
ππ+ ,
SeparateReq
ππ, 7
,
ππ7 8
fBuf
∫∫ 
.
∫∫ 
	sessionId
∫∫ "
,
∫∫" #
fBuf
ªª 
.
ªª 
byte2
ªª 
,
ªª 
fBuf
ºº 
.
ºº 
byte3
ºº 
,
ºº 
fBuf
ΩΩ 
.
ΩΩ 
ptype
ΩΩ 
,
ΩΩ 
fBuf
ææ 
.
ææ 
stype
ææ 
,
ææ 
fBuf
øø 
.
øø 
systemBytes
øø $
,
øø$ %
string
¿¿ 
.
¿¿ 
Empty
¿¿  
)
¡¡ 
;
¡¡ 
m_fTcpClient
√√ 
.
√√ 
send
√√ !
(
√√! "
new
√√" %
FSocketSendData
√√& 5
(
√√5 6
fBuf
√√6 :
.
√√: ;
getBinaryData
√√; H
(
√√H I
)
√√I J
,
√√J K!
fSecsControlMessage
√√L _
)
√√_ `
)
√√` a
;
√√a b
}
ƒƒ 
catch
≈≈ 
(
≈≈ 
	Exception
≈≈ 
ex
≈≈ 
)
≈≈  
{
∆∆ !
procHsmsErrorRaised
«« #
(
««# $
ex
««$ &
)
««& '
;
««' (
}
»» 
finally
…… 
{
   
fBuf
ÀÀ 
=
ÀÀ 
null
ÀÀ 
;
ÀÀ !
fSecsControlMessage
ÃÃ #
=
ÃÃ$ %
null
ÃÃ& *
;
ÃÃ* +
}
ÕÕ 
}
ŒŒ 	
private
““ 
void
““ 
sendDataMessage
““ $
(
““$ %
FSecsDataMessage
”” 
fSecsDataMessage
”” -
)
‘‘ 
{
’’ 	
try
÷÷ 
{
◊◊ 
m_fTcpClient
ÿÿ 
.
ÿÿ 
send
ÿÿ !
(
ÿÿ! "
new
ÿÿ" %
FSocketSendData
ÿÿ& 5
(
ÿÿ5 6
fSecsDataMessage
ÿÿ6 F
.
ÿÿF G
getHsmsBinaryData
ÿÿG X
(
ÿÿX Y
true
ÿÿY ]
)
ÿÿ] ^
,
ÿÿ^ _
fSecsDataMessage
ÿÿ` p
)
ÿÿp q
)
ÿÿq r
;
ÿÿr s
}
ŸŸ 
catch
⁄⁄ 
(
⁄⁄ 
	Exception
⁄⁄ 
ex
⁄⁄ 
)
⁄⁄  
{
€€ !
procHsmsErrorRaised
‹‹ #
(
‹‹# $
ex
‹‹$ &
)
‹‹& '
;
‹‹' (
}
›› 
finally
ﬁﬁ 
{
ﬂﬂ 
}
·· 
}
‚‚ 	
private
ÊÊ 
void
ÊÊ 
recvSelectReq
ÊÊ "
(
ÊÊ" #
)
ÁÁ 
{
ËË 	!
FSecsControlMessage
ÈÈ !
fSecsControlMessage
ÈÈ  3
=
ÈÈ4 5
null
ÈÈ6 :
;
ÈÈ: ;
string
ÍÍ 
errorMessage
ÍÍ 
=
ÍÍ  !
string
ÍÍ" (
.
ÍÍ( )
Empty
ÍÍ) .
;
ÍÍ. /
try
ÏÏ 
{
ÌÌ 
errorMessage
ÓÓ 
=
ÓÓ $
getRejectReasonMessage
ÓÓ 5
(
ÓÓ5 6
$num
ÓÓ6 7
)
ÓÓ7 8
;
ÓÓ8 9!
fSecsControlMessage
ÚÚ #
=
ÚÚ$ %
new
ÚÚ& )!
FSecsControlMessage
ÚÚ* =
(
ÚÚ= >
this
ÛÛ 
.
ÛÛ 
fSecs1ToHsms
ÛÛ %
,
ÛÛ% &%
FHsmsControlMessageType
ÙÙ +
.
ÙÙ+ ,
	SelectRsp
ÙÙ, 5
,
ÙÙ5 6

m_fRecvBuf
ıı 
.
ıı 
	sessionId
ıı (
,
ıı( )

m_fRecvBuf
ˆˆ 
.
ˆˆ 
byte2
ˆˆ $
,
ˆˆ$ %

m_fRecvBuf
˜˜ 
.
˜˜ 
byte3
˜˜ $
,
˜˜$ %

m_fRecvBuf
¯¯ 
.
¯¯ 
ptype
¯¯ $
,
¯¯$ %

m_fRecvBuf
˘˘ 
.
˘˘ 
stype
˘˘ $
,
˘˘$ %

m_fRecvBuf
˙˙ 
.
˙˙ 
systemBytes
˙˙ *
,
˙˙* +
errorMessage
˚˚  
)
¸¸ 
;
¸¸ 
this
˛˛ 
.
˛˛ 
fSecs1ToHsms
˛˛ !
.
˛˛! "
fEventPusher
˛˛" .
.
˛˛. /
pushHsmsEvent
˛˛/ <
(
˛˛< =
new
ˇˇ 2
$FHsmsControlMessageReceivedEventArgs
ˇˇ <
(
ˇˇ< =
this
ˇˇ= A
.
ˇˇA B
fSecs1ToHsms
ˇˇB N
,
ˇˇN O
FEventId
ˇˇP X
.
ˇˇX Y(
HsmsControlMessageReceived
ˇˇY s
,
ˇˇs t
FResultCodeˇˇu Ä
.ˇˇÄ Å
WarninigˇˇÅ â
,ˇˇâ ä
errorMessageˇˇã ó
,ˇˇó ò#
fSecsControlMessageˇˇô ¨
)ˇˇ¨ ≠
)
ÄÄ 
;
ÄÄ 
sendRejectReq
ÑÑ 
(
ÑÑ 

m_fRecvBuf
ÑÑ (
.
ÑÑ( )
	sessionId
ÑÑ) 2
,
ÑÑ2 3

m_fRecvBuf
ÑÑ4 >
.
ÑÑ> ?
stype
ÑÑ? D
,
ÑÑD E
$num
ÑÑF G
,
ÑÑG H

m_fRecvBuf
ÑÑI S
.
ÑÑS T
systemBytes
ÑÑT _
)
ÑÑ_ `
;
ÑÑ` a
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
ex
ÜÜ 
)
ÜÜ  
{
áá !
procHsmsErrorRaised
àà #
(
àà# $
ex
àà$ &
)
àà& '
;
àà' (
}
ââ 
finally
ää 
{
ãã !
fSecsControlMessage
åå #
=
åå$ %
null
åå& *
;
åå* +
}
çç 
}
éé 	
private
íí 
void
íí 
recvSelectRsp
íí "
(
íí" #
)
ìì 
{
îî 	!
FSecsControlMessage
ïï !
fSecsControlMessage
ïï  3
=
ïï4 5
null
ïï6 :
;
ïï: ;
FResultCode
ññ 
fResult
ññ 
=
ññ  !
FResultCode
ññ" -
.
ññ- .
Success
ññ. 5
;
ññ5 6
string
óó 
errorMessage
óó 
=
óó  !
string
óó" (
.
óó( )
Empty
óó) .
;
óó. /
try
ôô 
{
öö 
if
õõ 
(
õõ 
!
õõ 
m_fTranSelectReq
õõ %
.
õõ% &
enabled
õõ& -
)
õõ- .
{
úú 
fResult
ùù 
=
ùù 
FResultCode
ùù )
.
ùù) *
Warninig
ùù* 2
;
ùù2 3
errorMessage
ûû  
=
ûû! "$
getRejectReasonMessage
ûû# 9
(
ûû9 :
$num
ûû: ;
)
ûû; <
;
ûû< =
sendRejectReq
†† !
(
††! "

m_fRecvBuf
††" ,
.
††, -
	sessionId
††- 6
,
††6 7

m_fRecvBuf
††8 B
.
††B C
stype
††C H
,
††H I
$num
††J K
,
††K L

m_fRecvBuf
††M W
.
††W X
systemBytes
††X c
)
††c d
;
††d e
}
°° 
else
¢¢ 
if
¢¢ 
(
¢¢ 
m_fTranSelectReq
¢¢ )
.
¢¢) *
	sessionId
¢¢* 3
!=
¢¢4 6

m_fRecvBuf
¢¢7 A
.
¢¢A B
	sessionId
¢¢B K
)
¢¢K L
{
££ 
fResult
§§ 
=
§§ 
FResultCode
§§ )
.
§§) *
Warninig
§§* 2
;
§§2 3
errorMessage
••  
=
••! "
string
••# )
.
••) *
Format
••* 0
(
••0 1

FConstants
••1 ;
.
••; <

err_m_0015
••< F
,
••F G
$str
••H f
)
••f g
;
••g h
}
¶¶ 
else
ßß 
if
ßß 
(
ßß 
m_fTranSelectReq
ßß )
.
ßß) *
systemBytes
ßß* 5
!=
ßß6 8

m_fRecvBuf
ßß9 C
.
ßßC D
systemBytes
ßßD O
)
ßßO P
{
®® 
fResult
©© 
=
©© 
FResultCode
©© )
.
©©) *
Warninig
©©* 2
;
©©2 3
errorMessage
™™  
=
™™! "
string
™™# )
.
™™) *
Format
™™* 0
(
™™0 1

FConstants
™™1 ;
.
™™; <

err_m_0015
™™< F
,
™™F G
$str
™™H h
)
™™h i
;
™™i j
}
´´ 
else
¨¨ 
if
¨¨ 
(
¨¨ 

m_fRecvBuf
¨¨ #
.
¨¨# $
byte3
¨¨$ )
!=
¨¨* ,
$num
¨¨- .
)
¨¨. /
{
≠≠ 
fResult
ÆÆ 
=
ÆÆ 
FResultCode
ÆÆ )
.
ÆÆ) *
Warninig
ÆÆ* 2
;
ÆÆ2 3
errorMessage
ØØ  
=
ØØ! "
this
ØØ# '
.
ØØ' ($
getSelectStatusMessage
ØØ( >
(
ØØ> ?

m_fRecvBuf
ØØ? I
.
ØØI J
byte3
ØØJ O
)
ØØO P
;
ØØP Q
}
∞∞ 
else
±± 
{
≤≤ 
m_fTranSelectReq
∂∂ $
.
∂∂$ %
reset
∂∂% *
(
∂∂* +
)
∂∂+ ,
;
∂∂, -
}
∑∑ !
fSecsControlMessage
ªª #
=
ªª$ %
new
ªª& )!
FSecsControlMessage
ªª* =
(
ªª= >
this
ºº 
.
ºº 
fSecs1ToHsms
ºº %
,
ºº% &%
FHsmsControlMessageType
ΩΩ +
.
ΩΩ+ ,
	SelectRsp
ΩΩ, 5
,
ΩΩ5 6

m_fRecvBuf
ææ 
.
ææ 
	sessionId
ææ (
,
ææ( )

m_fRecvBuf
øø 
.
øø 
byte2
øø $
,
øø$ %

m_fRecvBuf
¿¿ 
.
¿¿ 
byte3
¿¿ $
,
¿¿$ %

m_fRecvBuf
¡¡ 
.
¡¡ 
ptype
¡¡ $
,
¡¡$ %

m_fRecvBuf
¬¬ 
.
¬¬ 
stype
¬¬ $
,
¬¬$ %

m_fRecvBuf
√√ 
.
√√ 
systemBytes
√√ *
,
√√* +
errorMessage
ƒƒ  
)
≈≈ 
;
≈≈ 
this
«« 
.
«« 
fSecs1ToHsms
«« !
.
««! "
fEventPusher
««" .
.
««. /
pushHsmsEvent
««/ <
(
««< =
new
»» 2
$FHsmsControlMessageReceivedEventArgs
»» <
(
»»< =
this
»»= A
.
»»A B
fSecs1ToHsms
»»B N
,
»»N O
FEventId
»»P X
.
»»X Y(
HsmsControlMessageReceived
»»Y s
,
»»s t
fResult
»»u |
,
»»| }
errorMessage»»~ ä
,»»ä ã#
fSecsControlMessage»»å ü
)»»ü †
)
…… 
;
…… 
if
ÕÕ 
(
ÕÕ 
fResult
ÕÕ 
==
ÕÕ 
FResultCode
ÕÕ *
.
ÕÕ* +
Success
ÕÕ+ 2
)
ÕÕ2 3
{
ŒŒ 
this
œœ 
.
œœ 
fSecs1ToHsms
œœ %
.
œœ% &
changeHsmsState
œœ& 5
(
œœ5 6
FConnectMode
œœ6 B
.
œœB C
Active
œœC I
,
œœI J
this
œœK O
.
œœO P
localIp
œœP W
,
œœW X
this
œœY ]
.
œœ] ^
	localPort
œœ^ g
,
œœg h
this
œœi m
.
œœm n
remoteIp
œœn v
,
œœv w
this
œœx |
.
œœ| }

remotePortœœ} á
,œœá à#
FCommunicationStateœœâ ú
.œœú ù
Selectedœœù •
)œœ• ¶
;œœ¶ ß
if
”” 
(
”” 
this
”” 
.
”” 
fSecs1ToHsms
”” )
.
””) *
fHsmsConfig
””* 5
.
””5 6
linkTestPeriod
””6 D
>
””E F
$num
””G H
)
””H I
{
‘‘ 
m_fTmrLinktest
’’ &
.
’’& '
start
’’' ,
(
’’, -
this
’’- 1
.
’’1 2
fSecs1ToHsms
’’2 >
.
’’> ?
fHsmsConfig
’’? J
.
’’J K
linkTestPeriod
’’K Y
*
’’Z [
$num
’’\ `
)
’’` a
;
’’a b
}
÷÷ 
}
◊◊ 
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ 
	Exception
ŸŸ 
ex
ŸŸ 
)
ŸŸ  
{
⁄⁄ !
procHsmsErrorRaised
€€ #
(
€€# $
ex
€€$ &
)
€€& '
;
€€' (
}
‹‹ 
finally
›› 
{
ﬁﬁ !
fSecsControlMessage
ﬂﬂ #
=
ﬂﬂ$ %
null
ﬂﬂ& *
;
ﬂﬂ* +
}
‡‡ 
}
·· 	
private
ÂÂ 
void
ÂÂ 
recvDeselectReq
ÂÂ $
(
ÂÂ$ %
)
ÊÊ 
{
ÁÁ 	!
FSecsControlMessage
ËË !
fSecsControlMessage
ËË  3
=
ËË4 5
null
ËË6 :
;
ËË: ;
try
ÍÍ 
{
ÎÎ !
fSecsControlMessage
ÏÏ #
=
ÏÏ$ %
new
ÏÏ& )!
FSecsControlMessage
ÏÏ* =
(
ÏÏ= >
this
ÌÌ 
.
ÌÌ 
fSecs1ToHsms
ÌÌ %
,
ÌÌ% &%
FHsmsControlMessageType
ÓÓ +
.
ÓÓ+ ,
DeselectReq
ÓÓ, 7
,
ÓÓ7 8

m_fRecvBuf
ÔÔ 
.
ÔÔ 
	sessionId
ÔÔ (
,
ÔÔ( )

m_fRecvBuf
 
.
 
byte2
 $
,
$ %

m_fRecvBuf
ÒÒ 
.
ÒÒ 
byte3
ÒÒ $
,
ÒÒ$ %

m_fRecvBuf
ÚÚ 
.
ÚÚ 
ptype
ÚÚ $
,
ÚÚ$ %

m_fRecvBuf
ÛÛ 
.
ÛÛ 
stype
ÛÛ $
,
ÛÛ$ %

m_fRecvBuf
ÙÙ 
.
ÙÙ 
systemBytes
ÙÙ *
,
ÙÙ* +
string
ıı 
.
ıı 
Empty
ıı  
)
ˆˆ 
;
ˆˆ 
this
¯¯ 
.
¯¯ 
fSecs1ToHsms
¯¯ !
.
¯¯! "
fEventPusher
¯¯" .
.
¯¯. /
pushHsmsEvent
¯¯/ <
(
¯¯< =
new
˘˘ 2
$FHsmsControlMessageReceivedEventArgs
˘˘ <
(
˘˘< =
this
˘˘= A
.
˘˘A B
fSecs1ToHsms
˘˘B N
,
˘˘N O
FEventId
˘˘P X
.
˘˘X Y(
HsmsControlMessageReceived
˘˘Y s
,
˘˘s t
FResultCode˘˘u Ä
.˘˘Ä Å
Success˘˘Å à
,˘˘à â
string˘˘ä ê
.˘˘ê ë
Empty˘˘ë ñ
,˘˘ñ ó#
fSecsControlMessage˘˘ò ´
)˘˘´ ¨
)
˙˙ 
;
˙˙ 
sendDeselectRsp
˛˛ 
(
˛˛  

m_fRecvBuf
˛˛  *
.
˛˛* +
	sessionId
˛˛+ 4
,
˛˛4 5

m_fRecvBuf
˛˛6 @
.
˛˛@ A
systemBytes
˛˛A L
)
˛˛L M
;
˛˛M N
m_fTcpClient
ÖÖ 
.
ÖÖ 
	reconnect
ÖÖ &
(
ÖÖ& '
)
ÖÖ' (
;
ÖÖ( )
}
ÜÜ 
catch
áá 
(
áá 
	Exception
áá 
ex
áá 
)
áá  
{
àà !
procHsmsErrorRaised
ââ #
(
ââ# $
ex
ââ$ &
)
ââ& '
;
ââ' (
}
ää 
finally
ãã 
{
åå !
fSecsControlMessage
çç #
=
çç$ %
null
çç& *
;
çç* +
}
éé 
}
èè 	
private
ìì 
void
ìì 
recvDeselectRsp
ìì $
(
ìì$ %
)
îî 
{
ïï 	!
FSecsControlMessage
ññ !
fSecsControlMessage
ññ  3
=
ññ4 5
null
ññ6 :
;
ññ: ;
string
óó 
errorMessage
óó 
=
óó  !
string
óó" (
.
óó( )
Empty
óó) .
;
óó. /
try
ôô 
{
öö 
errorMessage
õõ 
=
õõ $
getRejectReasonMessage
õõ 5
(
õõ5 6
$num
õõ6 7
)
õõ7 8
;
õõ8 9!
fSecsControlMessage
üü #
=
üü$ %
new
üü& )!
FSecsControlMessage
üü* =
(
üü= >
this
†† 
.
†† 
fSecs1ToHsms
†† %
,
††% &%
FHsmsControlMessageType
°° +
.
°°+ ,
DeselectRsp
°°, 7
,
°°7 8

m_fRecvBuf
¢¢ 
.
¢¢ 
	sessionId
¢¢ (
,
¢¢( )

m_fRecvBuf
££ 
.
££ 
byte2
££ $
,
££$ %

m_fRecvBuf
§§ 
.
§§ 
byte3
§§ $
,
§§$ %

m_fRecvBuf
•• 
.
•• 
ptype
•• $
,
••$ %

m_fRecvBuf
¶¶ 
.
¶¶ 
stype
¶¶ $
,
¶¶$ %

m_fRecvBuf
ßß 
.
ßß 
systemBytes
ßß *
,
ßß* +
errorMessage
®®  
)
©© 
;
©© 
this
´´ 
.
´´ 
fSecs1ToHsms
´´ !
.
´´! "
fEventPusher
´´" .
.
´´. /
pushHsmsEvent
´´/ <
(
´´< =
new
¨¨ 2
$FHsmsControlMessageReceivedEventArgs
¨¨ <
(
¨¨< =
this
¨¨= A
.
¨¨A B
fSecs1ToHsms
¨¨B N
,
¨¨N O
FEventId
¨¨P X
.
¨¨X Y(
HsmsControlMessageReceived
¨¨Y s
,
¨¨s t
FResultCode¨¨u Ä
.¨¨Ä Å
Warninig¨¨Å â
,¨¨â ä
errorMessage¨¨ã ó
,¨¨ó ò#
fSecsControlMessage¨¨ô ¨
)¨¨¨ ≠
)
≠≠ 
;
≠≠ 
sendRejectReq
±± 
(
±± 

m_fRecvBuf
±± (
.
±±( )
	sessionId
±±) 2
,
±±2 3

m_fRecvBuf
±±4 >
.
±±> ?
stype
±±? D
,
±±D E
$num
±±F G
,
±±G H

m_fRecvBuf
±±I S
.
±±S T
systemBytes
±±T _
)
±±_ `
;
±±` a
}
≤≤ 
catch
≥≥ 
(
≥≥ 
	Exception
≥≥ 
ex
≥≥ 
)
≥≥  
{
¥¥ !
procHsmsErrorRaised
µµ #
(
µµ# $
ex
µµ$ &
)
µµ& '
;
µµ' (
}
∂∂ 
finally
∑∑ 
{
∏∏ !
fSecsControlMessage
ππ #
=
ππ$ %
null
ππ& *
;
ππ* +
}
∫∫ 
}
ªª 	
private
øø 
void
øø 
recvLinktestReq
øø $
(
øø$ %
)
¿¿ 
{
¡¡ 	!
FSecsControlMessage
¬¬ !
fSecsControlMessage
¬¬  3
=
¬¬4 5
null
¬¬6 :
;
¬¬: ;
try
ƒƒ 
{
≈≈ !
fSecsControlMessage
∆∆ #
=
∆∆$ %
new
∆∆& )!
FSecsControlMessage
∆∆* =
(
∆∆= >
this
«« 
.
«« 
fSecs1ToHsms
«« %
,
««% &%
FHsmsControlMessageType
»» +
.
»»+ ,
LinktestReq
»», 7
,
»»7 8

m_fRecvBuf
…… 
.
…… 
	sessionId
…… (
,
……( )

m_fRecvBuf
   
.
   
byte2
   $
,
  $ %

m_fRecvBuf
ÀÀ 
.
ÀÀ 
byte3
ÀÀ $
,
ÀÀ$ %

m_fRecvBuf
ÃÃ 
.
ÃÃ 
ptype
ÃÃ $
,
ÃÃ$ %

m_fRecvBuf
ÕÕ 
.
ÕÕ 
stype
ÕÕ $
,
ÕÕ$ %

m_fRecvBuf
ŒŒ 
.
ŒŒ 
systemBytes
ŒŒ *
,
ŒŒ* +
string
œœ 
.
œœ 
Empty
œœ  
)
–– 
;
–– 
this
““ 
.
““ 
fSecs1ToHsms
““ !
.
““! "
fEventPusher
““" .
.
““. /
pushHsmsEvent
““/ <
(
““< =
new
”” 2
$FHsmsControlMessageReceivedEventArgs
”” <
(
””< =
this
””= A
.
””A B
fSecs1ToHsms
””B N
,
””N O
FEventId
””P X
.
””X Y(
HsmsControlMessageReceived
””Y s
,
””s t
FResultCode””u Ä
.””Ä Å
Success””Å à
,””à â
string””ä ê
.””ê ë
Empty””ë ñ
,””ñ ó#
fSecsControlMessage””ò ´
)””´ ¨
)
‘‘ 
;
‘‘ 
sendLinktestRsp
ÿÿ 
(
ÿÿ  

m_fRecvBuf
ÿÿ  *
.
ÿÿ* +
	sessionId
ÿÿ+ 4
,
ÿÿ4 5

m_fRecvBuf
ÿÿ6 @
.
ÿÿ@ A
systemBytes
ÿÿA L
)
ÿÿL M
;
ÿÿM N
}
ŸŸ 
catch
⁄⁄ 
(
⁄⁄ 
	Exception
⁄⁄ 
ex
⁄⁄ 
)
⁄⁄  
{
€€ !
procHsmsErrorRaised
‹‹ #
(
‹‹# $
ex
‹‹$ &
)
‹‹& '
;
‹‹' (
}
›› 
finally
ﬁﬁ 
{
ﬂﬂ !
fSecsControlMessage
‡‡ #
=
‡‡$ %
null
‡‡& *
;
‡‡* +
}
·· 
}
‚‚ 	
private
ÊÊ 
void
ÊÊ 
recvLinktestRsp
ÊÊ $
(
ÊÊ$ %
)
ÁÁ 
{
ËË 	!
FSecsControlMessage
ÈÈ !
fSecsControlMessage
ÈÈ  3
=
ÈÈ4 5
null
ÈÈ6 :
;
ÈÈ: ;
FResultCode
ÍÍ 
fResult
ÍÍ 
=
ÍÍ  !
FResultCode
ÍÍ" -
.
ÍÍ- .
Success
ÍÍ. 5
;
ÍÍ5 6
string
ÎÎ 
errorMessage
ÎÎ 
=
ÎÎ  !
string
ÎÎ" (
.
ÎÎ( )
Empty
ÎÎ) .
;
ÎÎ. /
try
ÌÌ 
{
ÓÓ 
if
ÔÔ 
(
ÔÔ 
!
ÔÔ  
m_fTranLinktestReq
ÔÔ '
.
ÔÔ' (
enabled
ÔÔ( /
)
ÔÔ/ 0
{
 
fResult
ÒÒ 
=
ÒÒ 
FResultCode
ÒÒ )
.
ÒÒ) *
Warninig
ÒÒ* 2
;
ÒÒ2 3
errorMessage
ÚÚ  
=
ÚÚ! "$
getRejectReasonMessage
ÚÚ# 9
(
ÚÚ9 :
$num
ÚÚ: ;
)
ÚÚ; <
;
ÚÚ< =
sendRejectReq
ÙÙ !
(
ÙÙ! "

m_fRecvBuf
ÙÙ" ,
.
ÙÙ, -
	sessionId
ÙÙ- 6
,
ÙÙ6 7

m_fRecvBuf
ÙÙ8 B
.
ÙÙB C
stype
ÙÙC H
,
ÙÙH I
$num
ÙÙJ K
,
ÙÙK L

m_fRecvBuf
ÙÙM W
.
ÙÙW X
systemBytes
ÙÙX c
)
ÙÙc d
;
ÙÙd e
}
ıı 
else
ˆˆ 
if
ˆˆ 
(
ˆˆ  
m_fTranLinktestReq
ˆˆ +
.
ˆˆ+ ,
	sessionId
ˆˆ, 5
!=
ˆˆ6 8

m_fRecvBuf
ˆˆ9 C
.
ˆˆC D
	sessionId
ˆˆD M
)
ˆˆM N
{
˜˜ 
fResult
¯¯ 
=
¯¯ 
FResultCode
¯¯ )
.
¯¯) *
Warninig
¯¯* 2
;
¯¯2 3
errorMessage
˘˘  
=
˘˘! "
string
˘˘# )
.
˘˘) *
Format
˘˘* 0
(
˘˘0 1

FConstants
˘˘1 ;
.
˘˘; <

err_m_0015
˘˘< F
,
˘˘F G
$str
˘˘H g
)
˘˘g h
;
˘˘h i
}
˙˙ 
else
˚˚ 
if
˚˚ 
(
˚˚  
m_fTranLinktestReq
˚˚ +
.
˚˚+ ,
systemBytes
˚˚, 7
!=
˚˚8 :

m_fRecvBuf
˚˚; E
.
˚˚E F
systemBytes
˚˚F Q
)
˚˚Q R
{
¸¸ 
fResult
˝˝ 
=
˝˝ 
FResultCode
˝˝ )
.
˝˝) *
Warninig
˝˝* 2
;
˝˝2 3
errorMessage
˛˛  
=
˛˛! "
string
˛˛# )
.
˛˛) *
Format
˛˛* 0
(
˛˛0 1

FConstants
˛˛1 ;
.
˛˛; <

err_m_0015
˛˛< F
,
˛˛F G
$str
˛˛H j
)
˛˛j k
;
˛˛k l
}
ˇˇ 
else
ÄÄ 
if
ÄÄ 
(
ÄÄ 

m_fRecvBuf
ÄÄ #
.
ÄÄ# $
byte3
ÄÄ$ )
!=
ÄÄ* ,
$num
ÄÄ- .
)
ÄÄ. /
{
ÅÅ 
fResult
ÇÇ 
=
ÇÇ 
FResultCode
ÇÇ )
.
ÇÇ) *
Warninig
ÇÇ* 2
;
ÇÇ2 3
errorMessage
ÉÉ  
=
ÉÉ! "
this
ÉÉ# '
.
ÉÉ' ($
getSelectStatusMessage
ÉÉ( >
(
ÉÉ> ?

m_fRecvBuf
ÉÉ? I
.
ÉÉI J
byte3
ÉÉJ O
)
ÉÉO P
;
ÉÉP Q
}
ÑÑ 
else
ÖÖ 
{
ÜÜ  
m_fTranLinktestReq
ää &
.
ää& '
reset
ää' ,
(
ää, -
)
ää- .
;
ää. /
}
ãã !
fSecsControlMessage
èè #
=
èè$ %
new
èè& )!
FSecsControlMessage
èè* =
(
èè= >
this
êê 
.
êê 
fSecs1ToHsms
êê %
,
êê% &%
FHsmsControlMessageType
ëë +
.
ëë+ ,
LinktestRsp
ëë, 7
,
ëë7 8

m_fRecvBuf
íí 
.
íí 
	sessionId
íí (
,
íí( )

m_fRecvBuf
ìì 
.
ìì 
byte2
ìì $
,
ìì$ %

m_fRecvBuf
îî 
.
îî 
byte3
îî $
,
îî$ %

m_fRecvBuf
ïï 
.
ïï 
ptype
ïï $
,
ïï$ %

m_fRecvBuf
ññ 
.
ññ 
stype
ññ $
,
ññ$ %

m_fRecvBuf
óó 
.
óó 
systemBytes
óó *
,
óó* +
errorMessage
òò  
)
ôô 
;
ôô 
this
õõ 
.
õõ 
fSecs1ToHsms
õõ !
.
õõ! "
fEventPusher
õõ" .
.
õõ. /
pushHsmsEvent
õõ/ <
(
õõ< =
new
úú 2
$FHsmsControlMessageReceivedEventArgs
úú <
(
úú< =
this
úú= A
.
úúA B
fSecs1ToHsms
úúB N
,
úúN O
FEventId
úúP X
.
úúX Y(
HsmsControlMessageReceived
úúY s
,
úús t
fResult
úúu |
,
úú| }
errorMessageúú~ ä
,úúä ã#
fSecsControlMessageúúå ü
)úúü †
)
ùù 
;
ùù 
}
ûû 
catch
üü 
(
üü 
	Exception
üü 
ex
üü 
)
üü  
{
†† !
procHsmsErrorRaised
°° #
(
°°# $
ex
°°$ &
)
°°& '
;
°°' (
}
¢¢ 
finally
££ 
{
§§ !
fSecsControlMessage
•• #
=
••$ %
null
••& *
;
••* +
}
¶¶ 
}
ßß 	
private
´´ 
void
´´ 
recvRejectReq
´´ "
(
´´" #
)
¨¨ 
{
≠≠ 	!
FSecsControlMessage
ÆÆ !
fSecsControlMessage
ÆÆ  3
=
ÆÆ4 5
null
ÆÆ6 :
;
ÆÆ: ;
string
ØØ 
errorMessage
ØØ 
=
ØØ  !
string
ØØ" (
.
ØØ( )
Empty
ØØ) .
;
ØØ. /
try
±± 
{
≤≤ 
errorMessage
≥≥ 
=
≥≥ $
getRejectReasonMessage
≥≥ 5
(
≥≥5 6

m_fRecvBuf
≥≥6 @
.
≥≥@ A
byte3
≥≥A F
)
≥≥F G
;
≥≥G H!
fSecsControlMessage
∑∑ #
=
∑∑$ %
new
∑∑& )!
FSecsControlMessage
∑∑* =
(
∑∑= >
this
∏∏ 
.
∏∏ 
fSecs1ToHsms
∏∏ %
,
∏∏% &%
FHsmsControlMessageType
ππ +
.
ππ+ ,
DeselectRsp
ππ, 7
,
ππ7 8

m_fRecvBuf
∫∫ 
.
∫∫ 
	sessionId
∫∫ (
,
∫∫( )

m_fRecvBuf
ªª 
.
ªª 
byte2
ªª $
,
ªª$ %

m_fRecvBuf
ºº 
.
ºº 
byte3
ºº $
,
ºº$ %

m_fRecvBuf
ΩΩ 
.
ΩΩ 
ptype
ΩΩ $
,
ΩΩ$ %

m_fRecvBuf
ææ 
.
ææ 
stype
ææ $
,
ææ$ %

m_fRecvBuf
øø 
.
øø 
systemBytes
øø *
,
øø* +
errorMessage
¿¿  
)
¡¡ 
;
¡¡ 
this
√√ 
.
√√ 
fSecs1ToHsms
√√ !
.
√√! "
fEventPusher
√√" .
.
√√. /
pushHsmsEvent
√√/ <
(
√√< =
new
ƒƒ 2
$FHsmsControlMessageReceivedEventArgs
ƒƒ <
(
ƒƒ< =
this
ƒƒ= A
.
ƒƒA B
fSecs1ToHsms
ƒƒB N
,
ƒƒN O
FEventId
ƒƒP X
.
ƒƒX Y(
HsmsControlMessageReceived
ƒƒY s
,
ƒƒs t
FResultCodeƒƒu Ä
.ƒƒÄ Å
WarninigƒƒÅ â
,ƒƒâ ä
errorMessageƒƒã ó
,ƒƒó ò#
fSecsControlMessageƒƒô ¨
)ƒƒ¨ ≠
)
≈≈ 
;
≈≈ 
}
∆∆ 
catch
«« 
(
«« 
	Exception
«« 
ex
«« 
)
««  
{
»» !
procHsmsErrorRaised
…… #
(
……# $
ex
……$ &
)
……& '
;
……' (
}
   
finally
ÀÀ 
{
ÃÃ !
fSecsControlMessage
ÕÕ #
=
ÕÕ$ %
null
ÕÕ& *
;
ÕÕ* +
}
ŒŒ 
}
œœ 	
private
”” 
void
”” 
recvSeparateReq
”” $
(
””$ %
)
‘‘ 
{
’’ 	!
FSecsControlMessage
÷÷ !
fSecsControlMessage
÷÷  3
=
÷÷4 5
null
÷÷6 :
;
÷÷: ;
try
ÿÿ 
{
ŸŸ !
fSecsControlMessage
⁄⁄ #
=
⁄⁄$ %
new
⁄⁄& )!
FSecsControlMessage
⁄⁄* =
(
⁄⁄= >
this
€€ 
.
€€ 
fSecs1ToHsms
€€ %
,
€€% &%
FHsmsControlMessageType
‹‹ +
.
‹‹+ ,
SeparateReq
‹‹, 7
,
‹‹7 8

m_fRecvBuf
›› 
.
›› 
	sessionId
›› (
,
››( )

m_fRecvBuf
ﬁﬁ 
.
ﬁﬁ 
byte2
ﬁﬁ $
,
ﬁﬁ$ %

m_fRecvBuf
ﬂﬂ 
.
ﬂﬂ 
byte3
ﬂﬂ $
,
ﬂﬂ$ %

m_fRecvBuf
‡‡ 
.
‡‡ 
ptype
‡‡ $
,
‡‡$ %

m_fRecvBuf
·· 
.
·· 
stype
·· $
,
··$ %

m_fRecvBuf
‚‚ 
.
‚‚ 
systemBytes
‚‚ *
,
‚‚* +
string
„„ 
.
„„ 
Empty
„„  
)
‰‰ 
;
‰‰ 
this
ÊÊ 
.
ÊÊ 
fSecs1ToHsms
ÊÊ !
.
ÊÊ! "
fEventPusher
ÊÊ" .
.
ÊÊ. /
pushHsmsEvent
ÊÊ/ <
(
ÊÊ< =
new
ÁÁ 2
$FHsmsControlMessageReceivedEventArgs
ÁÁ <
(
ÁÁ< =
this
ÁÁ= A
.
ÁÁA B
fSecs1ToHsms
ÁÁB N
,
ÁÁN O
FEventId
ÁÁP X
.
ÁÁX Y(
HsmsControlMessageReceived
ÁÁY s
,
ÁÁs t
FResultCodeÁÁu Ä
.ÁÁÄ Å
SuccessÁÁÅ à
,ÁÁà â
stringÁÁä ê
.ÁÁê ë
EmptyÁÁë ñ
,ÁÁñ ó#
fSecsControlMessageÁÁò ´
)ÁÁ´ ¨
)
ËË 
;
ËË 
m_fTcpClient
ÔÔ 
.
ÔÔ 
	reconnect
ÔÔ &
(
ÔÔ& '
)
ÔÔ' (
;
ÔÔ( )
}
 
catch
ÒÒ 
(
ÒÒ 
	Exception
ÒÒ 
ex
ÒÒ 
)
ÒÒ  
{
ÚÚ !
procHsmsErrorRaised
ÛÛ #
(
ÛÛ# $
ex
ÛÛ$ &
)
ÛÛ& '
;
ÛÛ' (
}
ÙÙ 
finally
ıı 
{
ˆˆ !
fSecsControlMessage
˜˜ #
=
˜˜$ %
null
˜˜& *
;
˜˜* +
}
¯¯ 
}
˘˘ 	
private
˝˝ 
void
˝˝ 
recvDataMessage
˝˝ $
(
˝˝$ %
)
˛˛ 
{
ˇˇ 	
FResultCode
ÄÄ 
fResult
ÄÄ 
=
ÄÄ  !
FResultCode
ÄÄ" -
.
ÄÄ- .
Success
ÄÄ. 5
;
ÄÄ5 6
string
ÅÅ 
errorMessage
ÅÅ 
=
ÅÅ  !
string
ÅÅ" (
.
ÅÅ( )
Empty
ÅÅ) .
;
ÅÅ. /
FSecsDataMessage
ÇÇ 
fSecsDataMessage
ÇÇ -
=
ÇÇ. /
null
ÇÇ0 4
;
ÇÇ4 5
try
ÑÑ 
{
ÖÖ 
if
ÜÜ 
(
ÜÜ 
this
ÜÜ 
.
ÜÜ 
fSecs1ToHsms
ÜÜ %
.
ÜÜ% &

fHsmsState
ÜÜ& 0
!=
ÜÜ1 3!
FCommunicationState
ÜÜ4 G
.
ÜÜG H
Selected
ÜÜH P
)
ÜÜP Q
{
áá 
fResult
àà 
=
àà 
FResultCode
àà )
.
àà) *
Warninig
àà* 2
;
àà2 3
errorMessage
ââ  
=
ââ! "$
getRejectReasonMessage
ââ# 9
(
ââ9 :
$num
ââ: ;
)
ââ; <
;
ââ< =
sendRejectReq
ãã !
(
ãã! "

m_fRecvBuf
ãã" ,
.
ãã, -
	sessionId
ãã- 6
,
ãã6 7

m_fRecvBuf
ãã8 B
.
ããB C
stype
ããC H
,
ããH I
$num
ããJ K
,
ããK L

m_fRecvBuf
ããM W
.
ããW X
systemBytes
ããX c
)
ããc d
;
ããd e
}
åå 
fSecsDataMessage
êê  
=
êê! "
new
êê# &
FSecsDataMessage
êê' 7
(
êê7 8
this
ëë 
.
ëë 
fSecs1ToHsms
ëë %
,
ëë% &

m_fRecvBuf
íí 
.
íí 
	sessionId
íí (
,
íí( )

m_fRecvBuf
ìì 
.
ìì 
wbit
ìì #
,
ìì# $

m_fRecvBuf
îî 
.
îî 
stream
îî %
,
îî% &

m_fRecvBuf
ïï 
.
ïï 
function
ïï '
,
ïï' (

m_fRecvBuf
ññ 
.
ññ 
systemBytes
ññ *
,
ññ* +

m_fRecvBuf
óó 
.
óó 
body
óó #
.
óó# $
ToArray
óó$ +
(
óó+ ,
)
óó, -
)
òò 
;
òò 
this
öö 
.
öö 
fSecs1ToHsms
öö !
.
öö! "
fEventPusher
öö" .
.
öö. /
pushHsmsEvent
öö/ <
(
öö< =
new
õõ /
!FHsmsDataMessageReceivedEventArgs
õõ 9
(
õõ9 :
this
õõ: >
.
õõ> ?
fSecs1ToHsms
õõ? K
,
õõK L
FEventId
õõM U
.
õõU V%
HsmsDataMessageReceived
õõV m
,
õõm n
fResult
õõo v
,
õõv w
errorMessageõõx Ñ
,õõÑ Ö 
fSecsDataMessageõõÜ ñ
)õõñ ó
)
úú 
;
úú 
if
†† 
(
†† 
fResult
†† 
==
†† 
FResultCode
†† *
.
††* +
Success
††+ 2
)
††2 3
{
°° 
if
¢¢ 
(
¢¢ 
this
¢¢ 
.
¢¢ 
fSecs1ToHsms
¢¢ )
.
¢¢) *+
isHsmsInterceptingDataMessage
¢¢* G
(
¢¢G H
fSecsDataMessage
¢¢H X
.
¢¢X Y
stream
¢¢Y _
,
¢¢_ `
fSecsDataMessage
¢¢a q
.
¢¢q r
function
¢¢r z
)
¢¢z {
)
¢¢{ |
{
££ 
this
§§ 
.
§§ 
fSecs1ToHsms
§§ )
.
§§) *
fEventPusher
§§* 6
.
§§6 7
pushHsmsEvent
§§7 D
(
§§D E
new
•• ;
-FHsmsInterceptingDataMessageReceivedEventArgs
••  M
(
••M N
this
¶¶  $
.
¶¶$ %
fSecs1ToHsms
¶¶% 1
,
¶¶1 2
FEventId
ßß  (
.
ßß( )1
#HsmsInterceptingDataMessageReceived
ßß) L
,
ßßL M
fResult
®®  '
,
®®' (
errorMessage
©©  ,
,
©©, -
fSecsDataMessage
™™  0
)
´´  !
)
¨¨ 
;
¨¨ 
}
≠≠ 
}
ÆÆ 
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞ 
ex
∞∞ 
)
∞∞  
{
±± !
procHsmsErrorRaised
≤≤ #
(
≤≤# $
ex
≤≤$ &
)
≤≤& '
;
≤≤' (
}
≥≥ 
finally
¥¥ 
{
µµ 
fSecsDataMessage
∂∂  
=
∂∂! "
null
∂∂# '
;
∂∂' (
}
∑∑ 
}
∏∏ 	
private
ºº 
void
ºº !
procHsmsErrorRaised
ºº (
(
ºº( )
	Exception
ΩΩ 
inEx
ΩΩ 
)
ææ 
{
øø 	
try
¿¿ 
{
¡¡ 
FDebug
¬¬ 
.
¬¬ 
writeLog
¬¬ 
(
¬¬  
inEx
¬¬  $
)
¬¬$ %
;
¬¬% &
this
ƒƒ 
.
ƒƒ 
fSecs1ToHsms
ƒƒ !
.
ƒƒ! "
fEventPusher
ƒƒ" .
.
ƒƒ. /
pushHsmsEvent
ƒƒ/ <
(
ƒƒ< =
new
≈≈ '
FHsmsErrorRaisedEventArgs
≈≈ 1
(
≈≈1 2
this
≈≈2 6
.
≈≈6 7
fSecs1ToHsms
≈≈7 C
,
≈≈C D
FEventId
≈≈E M
.
≈≈M N
HsmsErrorRaised
≈≈N ]
,
≈≈] ^
inEx
≈≈_ c
.
≈≈c d
Message
≈≈d k
)
≈≈k l
)
∆∆ 
;
∆∆ 
}
«« 
catch
»» 
(
»» 
	Exception
»» 
ex
»» 
)
»»  
{
…… 
FDebug
   
.
   
writeLog
   
(
    
ex
    "
)
  " #
;
  # $
}
ÀÀ 
finally
ÃÃ 
{
ÕÕ 
}
œœ 
}
–– 	
private
‘‘ 
void
‘‘ 
procSelectTimeout
‘‘ &
(
‘‘& '
)
’’ 
{
÷÷ 	
try
◊◊ 
{
ÿÿ 
this
ŸŸ 
.
ŸŸ 
fSecs1ToHsms
ŸŸ !
.
ŸŸ! "
fEventPusher
ŸŸ" .
.
ŸŸ. /
pushHsmsEvent
ŸŸ/ <
(
ŸŸ< =
new
⁄⁄ )
FHsmsTimeoutRaisedEventArgs
⁄⁄ 3
(
⁄⁄3 4
this
⁄⁄4 8
.
⁄⁄8 9
fSecs1ToHsms
⁄⁄9 E
,
⁄⁄E F
FEventId
⁄⁄G O
.
⁄⁄O P
HsmsTimeoutRaised
⁄⁄P a
,
⁄⁄a b
FSecsTimeout
⁄⁄c o
.
⁄⁄o p
T6
⁄⁄p r
,
⁄⁄r s 
getTimeoutMessage⁄⁄t Ö
(⁄⁄Ö Ü
FSecsTimeout⁄⁄Ü í
.⁄⁄í ì
T6⁄⁄ì ï
)⁄⁄ï ñ
)⁄⁄ñ ó
)
€€ 
;
€€ 
sendSeparateReq
›› 
(
››  
)
››  !
;
››! "
m_fTcpClient
‰‰ 
.
‰‰ 
	reconnect
‰‰ &
(
‰‰& '
)
‰‰' (
;
‰‰( )
}
ÂÂ 
catch
ÊÊ 
(
ÊÊ 
	Exception
ÊÊ 
ex
ÊÊ 
)
ÊÊ  
{
ÁÁ 
FDebug
ËË 
.
ËË 
throwException
ËË %
(
ËË% &
ex
ËË& (
)
ËË( )
;
ËË) *
}
ÈÈ 
finally
ÍÍ 
{
ÎÎ 
}
ÌÌ 
}
ÓÓ 	
private
ÚÚ 
void
ÚÚ !
procLinktestTimeout
ÚÚ (
(
ÚÚ( )
)
ÛÛ 
{
ÙÙ 	
try
ıı 
{
ˆˆ 
this
˜˜ 
.
˜˜ 
fSecs1ToHsms
˜˜ !
.
˜˜! "
fEventPusher
˜˜" .
.
˜˜. /
pushHsmsEvent
˜˜/ <
(
˜˜< =
new
¯¯ )
FHsmsTimeoutRaisedEventArgs
¯¯ 3
(
¯¯3 4
this
¯¯4 8
.
¯¯8 9
fSecs1ToHsms
¯¯9 E
,
¯¯E F
FEventId
¯¯G O
.
¯¯O P
HsmsTimeoutRaised
¯¯P a
,
¯¯a b
FSecsTimeout
¯¯c o
.
¯¯o p
T6
¯¯p r
,
¯¯r s 
getTimeoutMessage¯¯t Ö
(¯¯Ö Ü
FSecsTimeout¯¯Ü í
.¯¯í ì
T6¯¯ì ï
)¯¯ï ñ
)¯¯ñ ó
)
˘˘ 
;
˘˘ 
sendSeparateReq
˚˚ 
(
˚˚  
)
˚˚  !
;
˚˚! "
m_fTcpClient
Ç	Ç	 
.
Ç	Ç	 
	reconnect
Ç	Ç	 &
(
Ç	Ç	& '
)
Ç	Ç	' (
;
Ç	Ç	( )
}
É	É	 
catch
Ñ	Ñ	 
(
Ñ	Ñ	 
	Exception
Ñ	Ñ	 
ex
Ñ	Ñ	 
)
Ñ	Ñ	  
{
Ö	Ö	 
FDebug
Ü	Ü	 
.
Ü	Ü	 
throwException
Ü	Ü	 %
(
Ü	Ü	% &
ex
Ü	Ü	& (
)
Ü	Ü	( )
;
Ü	Ü	) *
}
á	á	 
finally
à	à	 
{
â	â	 
}
ã	ã	 
}
å	å	 	
private
ê	ê	 
void
ê	ê	 
procT8Timeout
ê	ê	 "
(
ê	ê	" #
)
ë	ë	 
{
í	í	 	
try
ì	ì	 
{
î	î	 
this
ï	ï	 
.
ï	ï	 
fSecs1ToHsms
ï	ï	 !
.
ï	ï	! "
fEventPusher
ï	ï	" .
.
ï	ï	. /
pushHsmsEvent
ï	ï	/ <
(
ï	ï	< =
new
ñ	ñ	 )
FHsmsTimeoutRaisedEventArgs
ñ	ñ	 3
(
ñ	ñ	3 4
this
ñ	ñ	4 8
.
ñ	ñ	8 9
fSecs1ToHsms
ñ	ñ	9 E
,
ñ	ñ	E F
FEventId
ñ	ñ	G O
.
ñ	ñ	O P
HsmsTimeoutRaised
ñ	ñ	P a
,
ñ	ñ	a b
FSecsTimeout
ñ	ñ	c o
.
ñ	ñ	o p
T8
ñ	ñ	p r
,
ñ	ñ	r s 
getTimeoutMessageñ	ñ	t Ö
(ñ	ñ	Ö Ü
FSecsTimeoutñ	ñ	Ü í
.ñ	ñ	í ì
T8ñ	ñ	ì ï
)ñ	ñ	ï ñ
)ñ	ñ	ñ ó
)
ó	ó	 
;
ó	ó	 
sendSeparateReq
ô	ô	 
(
ô	ô	  
)
ô	ô	  !
;
ô	ô	! "
m_fTcpClient
†	†	 
.
†	†	 
	reconnect
†	†	 &
(
†	†	& '
)
†	†	' (
;
†	†	( )
}
°	°	 
catch
¢	¢	 
(
¢	¢	 
	Exception
¢	¢	 
ex
¢	¢	 
)
¢	¢	  
{
£	£	 
FDebug
§	§	 
.
§	§	 
throwException
§	§	 %
(
§	§	% &
ex
§	§	& (
)
§	§	( )
;
§	§	) *
}
•	•	 
finally
¶	¶	 
{
ß	ß	 
}
©	©	 
}
™	™	 	
private
≤	≤	 
void
≤	≤	 (
m_fThdMain_ThreadJobCalled
≤	≤	 /
(
≤	≤	/ 0
object
≥	≥	 
sender
≥	≥	 
,
≥	≥	 
FThreadEventArgs
¥	¥	 
e
¥	¥	 
)
µ	µ	 
{
∂	∂	 	
bool
∑	∑	 
waited
∑	∑	 
=
∑	∑	 
false
∑	∑	 
;
∑	∑	  
try
π	π	 
{
∫	∫	 
waited
ª	ª	 
=
ª	ª	 
m_fMainSync
ª	ª	 $
.
ª	ª	$ %
tryWait
ª	ª	% ,
(
ª	ª	, -
$num
ª	ª	- .
)
ª	ª	. /
;
ª	ª	/ 0
if
º	º	 
(
º	º	 
!
º	º	 
waited
º	º	 
)
º	º	 
{
Ω	Ω	 
return
æ	æ	 
;
æ	æ	 
}
ø	ø	 
if
√	√	 
(
√	√	 
m_fTcpClient
√	√	  
==
√	√	! #
null
√	√	$ (
||
√	√	) +
m_fTcpClient
√	√	, 8
.
√	√	8 9
fState
√	√	9 ?
!=
√	√	@ B
FTcpClientState
√	√	C R
.
√	√	R S
	Connected
√	√	S \
)
√	√	\ ]
{
ƒ	ƒ	 
e
≈	≈	 
.
≈	≈	 
sleepThread
≈	≈	 !
(
≈	≈	! "
$num
≈	≈	" #
)
≈	≈	# $
;
≈	≈	$ %
return
∆	∆	 
;
∆	∆	 
}
«	«	 
if
…	…	 
(
…	…	 
this
…	…	 
.
…	…	 
fSecs1ToHsms
…	…	 %
.
…	…	% &

fHsmsState
…	…	& 0
!=
…	…	1 3!
FCommunicationState
…	…	4 G
.
…	…	G H
	Connected
…	…	H Q
&&
…	…	R T
this
…	…	U Y
.
…	…	Y Z
fSecs1ToHsms
…	…	Z f
.
…	…	f g

fHsmsState
…	…	g q
!=
…	…	r t"
FCommunicationState…	…	u à
.…	…	à â
Selected…	…	â ë
)…	…	ë í
{
 	 	 
e
À	À	 
.
À	À	 
sleepThread
À	À	 !
(
À	À	! "
$num
À	À	" #
)
À	À	# $
;
À	À	$ %
return
Ã	Ã	 
;
Ã	Ã	 
}
Õ	Õ	 
if
‘	‘	 
(
‘	‘	 
m_fTranSelectReq
‘	‘	 $
.
‘	‘	$ %
timeout
‘	‘	% ,
(
‘	‘	, -
)
‘	‘	- .
)
‘	‘	. /
{
’	’	 
procSelectTimeout
÷	÷	 %
(
÷	÷	% &
)
÷	÷	& '
;
÷	÷	' (
return
◊	◊	 
;
◊	◊	 
}
ÿ	ÿ	 
if
ﬂ	ﬂ	 
(
ﬂ	ﬂ	  
m_fTranLinktestReq
ﬂ	ﬂ	 &
.
ﬂ	ﬂ	& '
timeout
ﬂ	ﬂ	' .
(
ﬂ	ﬂ	. /
)
ﬂ	ﬂ	/ 0
)
ﬂ	ﬂ	0 1
{
‡	‡	 !
procLinktestTimeout
·	·	 '
(
·	·	' (
)
·	·	( )
;
·	·	) *
return
‚	‚	 
;
‚	‚	 
}
„	„	 
if
Í	Í	 
(
Í	Í	 
m_fTmrT8
Í	Í	 
.
Í	Í	 
elasped
Í	Í	 $
(
Í	Í	$ %
false
Í	Í	% *
)
Í	Í	* +
)
Í	Í	+ ,
{
Î	Î	 
procT8Timeout
Ï	Ï	 !
(
Ï	Ï	! "
)
Ï	Ï	" #
;
Ï	Ï	# $
return
Ì	Ì	 
;
Ì	Ì	 
}
Ó	Ó	 
if
ı	ı	 
(
ı	ı	 
m_fTmrLinktest
ı	ı	 "
.
ı	ı	" #
elasped
ı	ı	# *
(
ı	ı	* +
true
ı	ı	+ /
)
ı	ı	/ 0
)
ı	ı	0 1
{
ˆ	ˆ	 
if
˜	˜	 
(
˜	˜	 
!
˜	˜	  
m_fTranLinktestReq
˜	˜	 +
.
˜	˜	+ ,
enabled
˜	˜	, 3
)
˜	˜	3 4
{
¯	¯	 
sendLinktestReq
˘	˘	 '
(
˘	˘	' (
)
˘	˘	( )
;
˘	˘	) *
}
˙	˙	 
}
˚	˚	 
e
ˇ	ˇ	 
.
ˇ	ˇ	 
sleepThread
ˇ	ˇ	 
(
ˇ	ˇ	 
$num
ˇ	ˇ	 
)
ˇ	ˇ	  
;
ˇ	ˇ	  !
}
Ä
Ä
 
catch
Å
Å
 
(
Å
Å
 
	Exception
Å
Å
 
ex
Å
Å
 
)
Å
Å
  
{
Ç
Ç
 !
procHsmsErrorRaised
É
É
 #
(
É
É
# $
ex
É
É
$ &
)
É
É
& '
;
É
É
' (
}
Ñ
Ñ
 
finally
Ö
Ö
 
{
Ü
Ü
 
if
á
á
 
(
á
á
 
waited
á
á
 
)
á
á
 
{
à
à
 
m_fMainSync
â
â
 
.
â
â
  
set
â
â
  #
(
â
â
# $
)
â
â
$ %
;
â
â
% &
}
ä
ä
 
}
ã
ã
 
}
å
å
 	
private
î
î
 
void
î
î
 0
"m_fTcpClient_TcpClientStateChanged
î
î
 7
(
î
î
7 8
object
ï
ï
 
sender
ï
ï
 
,
ï
ï
 -
FTcpClientStateChangedEventArgs
ñ
ñ
 +
e
ñ
ñ
, -
)
ó
ó
 
{
ò
ò
 	
try
ô
ô
 
{
ö
ö
 
m_fMainSync
õ
õ
 
.
õ
õ
 
wait
õ
õ
  
(
õ
õ
  !
)
õ
õ
! "
;
õ
õ
" #
this
ü
ü
 
.
ü
ü
 
localIp
ü
ü
 
=
ü
ü
 
e
ü
ü
  
.
ü
ü
  !
localIp
ü
ü
! (
;
ü
ü
( )
this
†
†
 
.
†
†
 
	localPort
†
†
 
=
†
†
  
e
†
†
! "
.
†
†
" #
	localPort
†
†
# ,
;
†
†
, -
this
°
°
 
.
°
°
 
remoteIp
°
°
 
=
°
°
 
e
°
°
  !
.
°
°
! "
remoteIp
°
°
" *
;
°
°
* +
this
¢
¢
 
.
¢
¢
 

remotePort
¢
¢
 
=
¢
¢
  !
e
¢
¢
" #
.
¢
¢
# $

remotePort
¢
¢
$ .
;
¢
¢
. /
if
¶
¶
 
(
¶
¶
 
e
¶
¶
 
.
¶
¶
 
fState
¶
¶
 
==
¶
¶
 
FTcpClientState
¶
¶
  /
.
¶
¶
/ 0
Opened
¶
¶
0 6
)
¶
¶
6 7
{
ß
ß
 
this
®
®
 
.
®
®
 
fSecs1ToHsms
®
®
 %
.
®
®
% &
changeHsmsState
®
®
& 5
(
®
®
5 6
FConnectMode
®
®
6 B
.
®
®
B C
Active
®
®
C I
,
®
®
I J
this
®
®
K O
.
®
®
O P
localIp
®
®
P W
,
®
®
W X
this
®
®
Y ]
.
®
®
] ^
	localPort
®
®
^ g
,
®
®
g h
this
®
®
i m
.
®
®
m n
remoteIp
®
®
n v
,
®
®
v w
this
®
®
x |
.
®
®
| }

remotePort®
®
} á
,®
®
á à#
FCommunicationState®
®
â ú
.®
®
ú ù
Opened®
®
ù £
)®
®
£ §
;®
®
§ •
resetResource
™
™
 !
(
™
™
! "
)
™
™
" #
;
™
™
# $
}
´
´
 
else
¨
¨
 
if
¨
¨
 
(
¨
¨
 
e
¨
¨
 
.
¨
¨
 
fState
¨
¨
 !
==
¨
¨
" $
FTcpClientState
¨
¨
% 4
.
¨
¨
4 5
	Connected
¨
¨
5 >
)
¨
¨
> ?
{
≠
≠
 
this
Æ
Æ
 
.
Æ
Æ
 
fSecs1ToHsms
Æ
Æ
 %
.
Æ
Æ
% &
changeHsmsState
Æ
Æ
& 5
(
Æ
Æ
5 6
FConnectMode
Æ
Æ
6 B
.
Æ
Æ
B C
Active
Æ
Æ
C I
,
Æ
Æ
I J
this
Æ
Æ
K O
.
Æ
Æ
O P
localIp
Æ
Æ
P W
,
Æ
Æ
W X
this
Æ
Æ
Y ]
.
Æ
Æ
] ^
	localPort
Æ
Æ
^ g
,
Æ
Æ
g h
this
Æ
Æ
i m
.
Æ
Æ
m n
remoteIp
Æ
Æ
n v
,
Æ
Æ
v w
this
Æ
Æ
x |
.
Æ
Æ
| }

remotePortÆ
Æ
} á
,Æ
Æ
á à#
FCommunicationStateÆ
Æ
â ú
.Æ
Æ
ú ù
	ConnectedÆ
Æ
ù ¶
)Æ
Æ
¶ ß
;Æ
Æ
ß ®
sendSelectReq
∞
∞
 !
(
∞
∞
! "
)
∞
∞
" #
;
∞
∞
# $
}
±
±
 
else
≤
≤
 
if
≤
≤
 
(
≤
≤
 
e
≤
≤
 
.
≤
≤
 
fState
≤
≤
 !
==
≤
≤
" $
FTcpClientState
≤
≤
% 4
.
≤
≤
4 5
Closed
≤
≤
5 ;
)
≤
≤
; <
{
≥
≥
 
this
¥
¥
 
.
¥
¥
 
fSecs1ToHsms
¥
¥
 %
.
¥
¥
% &
changeHsmsState
¥
¥
& 5
(
¥
¥
5 6
FConnectMode
¥
¥
6 B
.
¥
¥
B C
Active
¥
¥
C I
,
¥
¥
I J
this
¥
¥
K O
.
¥
¥
O P
localIp
¥
¥
P W
,
¥
¥
W X
this
¥
¥
Y ]
.
¥
¥
] ^
	localPort
¥
¥
^ g
,
¥
¥
g h
this
¥
¥
i m
.
¥
¥
m n
remoteIp
¥
¥
n v
,
¥
¥
v w
this
¥
¥
x |
.
¥
¥
| }

remotePort¥
¥
} á
,¥
¥
á à#
FCommunicationState¥
¥
â ú
.¥
¥
ú ù
Closed¥
¥
ù £
)¥
¥
£ §
;¥
¥
§ •
}
µ
µ
 
}
∂
∂
 
catch
∑
∑
 
(
∑
∑
 
	Exception
∑
∑
 
ex
∑
∑
 
)
∑
∑
  
{
∏
∏
 !
procHsmsErrorRaised
π
π
 #
(
π
π
# $
ex
π
π
$ &
)
π
π
& '
;
π
π
' (
}
∫
∫
 
finally
ª
ª
 
{
º
º
 
m_fMainSync
Ω
Ω
 
.
Ω
Ω
 
set
Ω
Ω
 
(
Ω
Ω
  
)
Ω
Ω
  !
;
Ω
Ω
! "
}
æ
æ
 
}
ø
ø
 	
private
√
√
 
void
√
√
 0
"m_fTcpClient_TcpClientDataReceived
√
√
 7
(
√
√
7 8
object
ƒ
ƒ
 
sender
ƒ
ƒ
 
,
ƒ
ƒ
 -
FTcpClientDataReceivedEventArgs
≈
≈
 +
e
≈
≈
, -
)
∆
∆
 
{
«
«
 	
try
»
»
 
{
…
…
 
m_fMainSync
 
 
 
.
 
 
 
wait
 
 
  
(
 
 
  !
)
 
 
! "
;
 
 
" #
m_fTmrT8
—
—
 
.
—
—
 
stop
—
—
 
(
—
—
 
)
—
—
 
;
—
—
  
if
ÿ
ÿ
 
(
ÿ
ÿ
 
m_fTmrLinktest
ÿ
ÿ
 "
.
ÿ
ÿ
" #
enabled
ÿ
ÿ
# *
)
ÿ
ÿ
* +
{
Ÿ
Ÿ
 
m_fTmrLinktest
⁄
⁄
 "
.
⁄
⁄
" #
restart
⁄
⁄
# *
(
⁄
⁄
* +
this
⁄
⁄
+ /
.
⁄
⁄
/ 0
fSecs1ToHsms
⁄
⁄
0 <
.
⁄
⁄
< =
fHsmsConfig
⁄
⁄
= H
.
⁄
⁄
H I
linkTestPeriod
⁄
⁄
I W
*
⁄
⁄
X Y
$num
⁄
⁄
Z ^
)
⁄
⁄
^ _
;
⁄
⁄
_ `
}
€
€
 

m_fRecvBuf
ﬂ
ﬂ
 
.
ﬂ
ﬂ
 
input
ﬂ
ﬂ
  
(
ﬂ
ﬂ
  !
e
ﬂ
ﬂ
! "
.
ﬂ
ﬂ
" #
data
ﬂ
ﬂ
# '
)
ﬂ
ﬂ
' (
;
ﬂ
ﬂ
( )
while
·
·
 
(
·
·
 

m_fRecvBuf
·
·
 !
.
·
·
! "
parse
·
·
" '
(
·
·
' (
)
·
·
( )
)
·
·
) *
{
‚
‚
 
if
„
„
 
(
„
„
 

m_fRecvBuf
„
„
 "
.
„
„
" #
stype
„
„
# (
==
„
„
) +
$num
„
„
, -
)
„
„
- .
{
‰
‰
 
recvDataMessage
Â
Â
 '
(
Â
Â
' (
)
Â
Â
( )
;
Â
Â
) *
}
Ê
Ê
 
else
Á
Á
 
if
Á
Á
 
(
Á
Á
 

m_fRecvBuf
Á
Á
 '
.
Á
Á
' (
stype
Á
Á
( -
==
Á
Á
. 0
$num
Á
Á
1 2
)
Á
Á
2 3
{
Ë
Ë
 
recvSelectReq
È
È
 %
(
È
È
% &
)
È
È
& '
;
È
È
' (
}
Í
Í
 
else
Î
Î
 
if
Î
Î
 
(
Î
Î
 

m_fRecvBuf
Î
Î
 '
.
Î
Î
' (
stype
Î
Î
( -
==
Î
Î
. 0
$num
Î
Î
1 2
)
Î
Î
2 3
{
Ï
Ï
 
recvSelectRsp
Ì
Ì
 %
(
Ì
Ì
% &
)
Ì
Ì
& '
;
Ì
Ì
' (
}
Ó
Ó
 
else
Ô
Ô
 
if
Ô
Ô
 
(
Ô
Ô
 

m_fRecvBuf
Ô
Ô
 '
.
Ô
Ô
' (
stype
Ô
Ô
( -
==
Ô
Ô
. 0
$num
Ô
Ô
1 2
)
Ô
Ô
2 3
{


 
recvDeselectReq
Ò
Ò
 '
(
Ò
Ò
' (
)
Ò
Ò
( )
;
Ò
Ò
) *
}
Ú
Ú
 
else
Û
Û
 
if
Û
Û
 
(
Û
Û
 

m_fRecvBuf
Û
Û
 '
.
Û
Û
' (
stype
Û
Û
( -
==
Û
Û
. 0
$num
Û
Û
1 2
)
Û
Û
2 3
{
Ù
Ù
 
recvDeselectRsp
ı
ı
 '
(
ı
ı
' (
)
ı
ı
( )
;
ı
ı
) *
}
ˆ
ˆ
 
else
˜
˜
 
if
˜
˜
 
(
˜
˜
 

m_fRecvBuf
˜
˜
 '
.
˜
˜
' (
stype
˜
˜
( -
==
˜
˜
. 0
$num
˜
˜
1 2
)
˜
˜
2 3
{
¯
¯
 
recvLinktestReq
˘
˘
 '
(
˘
˘
' (
)
˘
˘
( )
;
˘
˘
) *
}
˙
˙
 
else
˚
˚
 
if
˚
˚
 
(
˚
˚
 

m_fRecvBuf
˚
˚
 '
.
˚
˚
' (
stype
˚
˚
( -
==
˚
˚
. 0
$num
˚
˚
1 2
)
˚
˚
2 3
{
¸
¸
 
recvLinktestRsp
˝
˝
 '
(
˝
˝
' (
)
˝
˝
( )
;
˝
˝
) *
}
˛
˛
 
else
ˇ
ˇ
 
if
ˇ
ˇ
 
(
ˇ
ˇ
 

m_fRecvBuf
ˇ
ˇ
 '
.
ˇ
ˇ
' (
stype
ˇ
ˇ
( -
==
ˇ
ˇ
. 0
$num
ˇ
ˇ
1 2
)
ˇ
ˇ
2 3
{
ÄÄ 
recvRejectReq
ÅÅ %
(
ÅÅ% &
)
ÅÅ& '
;
ÅÅ' (
}
ÇÇ 
else
ÉÉ 
if
ÉÉ 
(
ÉÉ 

m_fRecvBuf
ÉÉ '
.
ÉÉ' (
stype
ÉÉ( -
==
ÉÉ. 0
$num
ÉÉ1 2
)
ÉÉ2 3
{
ÑÑ 
recvSeparateReq
ÖÖ '
(
ÖÖ' (
)
ÖÖ( )
;
ÖÖ) *
}
ÜÜ 
else
áá 
{
àà 
sendRejectReq
çç %
(
çç% &

m_fRecvBuf
çç& 0
.
çç0 1
	sessionId
çç1 :
,
çç: ;

m_fRecvBuf
çç< F
.
ççF G
stype
ççG L
,
ççL M
$num
ççN O
,
ççO P

m_fRecvBuf
ççQ [
.
çç[ \
systemBytes
çç\ g
)
ççg h
;
ççh i
}
éé 

m_fRecvBuf
íí 
.
íí 
init
íí #
(
íí# $
)
íí$ %
;
íí% &
}
ìì 
if
öö 
(
öö 
!
öö 

m_fRecvBuf
öö 
.
öö  
isCompleted
öö  +
)
öö+ ,
{
õõ 
m_fTmrT8
úú 
.
úú 
start
úú "
(
úú" #
this
úú# '
.
úú' (
fSecs1ToHsms
úú( 4
.
úú4 5
fHsmsConfig
úú5 @
.
úú@ A
	t8Timeout
úúA J
*
úúK L
$num
úúM Q
)
úúQ R
;
úúR S
}
ùù 
}
ûû 
catch
üü 
(
üü 
	Exception
üü 
ex
üü 
)
üü  
{
†† !
procHsmsErrorRaised
°° #
(
°°# $
ex
°°$ &
)
°°& '
;
°°' (
}
¢¢ 
finally
££ 
{
§§ 
m_fMainSync
•• 
.
•• 
set
•• 
(
••  
)
••  !
;
••! "
}
¶¶ 
}
ßß 	
private
´´ 
void
´´ ,
m_fTcpClient_TcpClientDataSent
´´ 3
(
´´3 4
object
¨¨ 
sender
¨¨ 
,
¨¨ )
FTcpClientDataSentEventArgs
≠≠ '
e
≠≠( )
)
ÆÆ 
{
ØØ 	!
FSecsControlMessage
∞∞ !
fSecsControlMessage
∞∞  3
=
∞∞4 5
null
∞∞6 :
;
∞∞: ;
FSecsDataMessage
±± 
fSecsDataMessage
±± -
=
±±. /
null
±±0 4
;
±±4 5
try
≥≥ 
{
¥¥ 
m_fMainSync
µµ 
.
µµ 
wait
µµ  
(
µµ  !
)
µµ! "
;
µµ" #
if
ππ 
(
ππ 
e
ππ 
.
ππ 
fData
ππ 
.
ππ 
state
ππ !
is
ππ" $!
FSecsControlMessage
ππ% 8
)
ππ8 9
{
∫∫ !
fSecsControlMessage
ªª '
=
ªª( )
(
ªª* +!
FSecsControlMessage
ªª+ >
)
ªª> ?
e
ªª? @
.
ªª@ A
fData
ªªA F
.
ªªF G
state
ªªG L
;
ªªL M
this
ºº 
.
ºº 
fSecs1ToHsms
ºº %
.
ºº% &
fEventPusher
ºº& 2
.
ºº2 3
pushHsmsEvent
ºº3 @
(
ºº@ A
new
ΩΩ .
 FHsmsControlMessageSentEventArgs
ΩΩ <
(
ΩΩ< =
this
ΩΩ= A
.
ΩΩA B
fSecs1ToHsms
ΩΩB N
,
ΩΩN O
FEventId
ΩΩP X
.
ΩΩX Y$
HsmsControlMessageSent
ΩΩY o
,
ΩΩo p
FResultCode
ΩΩq |
.
ΩΩ| }
SuccessΩΩ} Ñ
,ΩΩÑ Ö
stringΩΩÜ å
.ΩΩå ç
EmptyΩΩç í
,ΩΩí ì#
fSecsControlMessageΩΩî ß
)ΩΩß ®
)
ææ 
;
ææ 
}
øø 
else
¿¿ 
if
¿¿ 
(
¿¿ 
e
¿¿ 
.
¿¿ 
fData
¿¿  
.
¿¿  !
state
¿¿! &
is
¿¿' )
FSecsDataMessage
¿¿* :
)
¿¿: ;
{
¡¡ 
fSecsDataMessage
¬¬ $
=
¬¬% &
(
¬¬' (
FSecsDataMessage
¬¬( 8
)
¬¬8 9
e
¬¬9 :
.
¬¬: ;
fData
¬¬; @
.
¬¬@ A
state
¬¬A F
;
¬¬F G
this
√√ 
.
√√ 
fSecs1ToHsms
√√ %
.
√√% &
fEventPusher
√√& 2
.
√√2 3
pushHsmsEvent
√√3 @
(
√√@ A
new
ƒƒ +
FHsmsDataMessageSentEventArgs
ƒƒ 9
(
ƒƒ9 :
this
ƒƒ: >
.
ƒƒ> ?
fSecs1ToHsms
ƒƒ? K
,
ƒƒK L
FEventId
ƒƒM U
.
ƒƒU V!
HsmsDataMessageSent
ƒƒV i
,
ƒƒi j
FResultCode
ƒƒk v
.
ƒƒv w
Success
ƒƒw ~
,
ƒƒ~ 
stringƒƒÄ Ü
.ƒƒÜ á
Emptyƒƒá å
,ƒƒå ç 
fSecsDataMessageƒƒé û
)ƒƒû ü
)
≈≈ 
;
≈≈ 
}
∆∆ 
}
«« 
catch
»» 
(
»» 
	Exception
»» 
ex
»» 
)
»»  
{
…… !
procHsmsErrorRaised
   #
(
  # $
ex
  $ &
)
  & '
;
  ' (
}
ÀÀ 
finally
ÃÃ 
{
ÕÕ !
fSecsControlMessage
ŒŒ #
=
ŒŒ$ %
null
ŒŒ& *
;
ŒŒ* +
fSecsDataMessage
œœ  
=
œœ! "
null
œœ# '
;
œœ' (
m_fMainSync
—— 
.
—— 
set
—— 
(
——  
)
——  !
;
——! "
}
““ 
}
”” 	
private
◊◊ 
void
◊◊ 2
$m_fTcpClient_TcpClientDataSendFailed
◊◊ 9
(
◊◊9 :
object
ÿÿ 
sender
ÿÿ 
,
ÿÿ /
!FTcpClientDataSendFailedEventArgs
ŸŸ -
e
ŸŸ. /
)
⁄⁄ 
{
€€ 	!
FSecsControlMessage
‹‹ !
fSecsControlMessage
‹‹  3
=
‹‹4 5
null
‹‹6 :
;
‹‹: ;
FSecsDataMessage
›› 
fSecsDataMessage
›› -
=
››. /
null
››0 4
;
››4 5
try
ﬂﬂ 
{
‡‡ 
m_fMainSync
·· 
.
·· 
wait
··  
(
··  !
)
··! "
;
··" #
if
ÂÂ 
(
ÂÂ 
e
ÂÂ 
.
ÂÂ 
fData
ÂÂ 
.
ÂÂ 
state
ÂÂ !
is
ÂÂ" $!
FSecsControlMessage
ÂÂ% 8
)
ÂÂ8 9
{
ÊÊ !
fSecsControlMessage
ÁÁ '
=
ÁÁ( )
(
ÁÁ* +!
FSecsControlMessage
ÁÁ+ >
)
ÁÁ> ?
e
ÁÁ? @
.
ÁÁ@ A
fData
ÁÁA F
.
ÁÁF G
state
ÁÁG L
;
ÁÁL M
this
ËË 
.
ËË 
fSecs1ToHsms
ËË %
.
ËË% &
fEventPusher
ËË& 2
.
ËË2 3
pushHsmsEvent
ËË3 @
(
ËË@ A
new
ÈÈ .
 FHsmsControlMessageSentEventArgs
ÈÈ <
(
ÈÈ< =
this
ÈÈ= A
.
ÈÈA B
fSecs1ToHsms
ÈÈB N
,
ÈÈN O
FEventId
ÈÈP X
.
ÈÈX Y$
HsmsControlMessageSent
ÈÈY o
,
ÈÈo p
FResultCode
ÈÈq |
.
ÈÈ| }
ErrorÈÈ} Ç
,ÈÈÇ É
eÈÈÑ Ö
.ÈÈÖ Ü
messageÈÈÜ ç
,ÈÈç é#
fSecsControlMessageÈÈè ¢
)ÈÈ¢ £
)
ÍÍ 
;
ÍÍ 
}
ÎÎ 
else
ÏÏ 
if
ÏÏ 
(
ÏÏ 
e
ÏÏ 
.
ÏÏ 
fData
ÏÏ  
.
ÏÏ  !
state
ÏÏ! &
is
ÏÏ' )
FSecsDataMessage
ÏÏ* :
)
ÏÏ: ;
{
ÌÌ 
fSecsDataMessage
ÓÓ $
=
ÓÓ% &
(
ÓÓ' (
FSecsDataMessage
ÓÓ( 8
)
ÓÓ8 9
e
ÓÓ9 :
.
ÓÓ: ;
fData
ÓÓ; @
.
ÓÓ@ A
state
ÓÓA F
;
ÓÓF G
this
ÔÔ 
.
ÔÔ 
fSecs1ToHsms
ÔÔ %
.
ÔÔ% &
fEventPusher
ÔÔ& 2
.
ÔÔ2 3
pushHsmsEvent
ÔÔ3 @
(
ÔÔ@ A
new
 +
FHsmsDataMessageSentEventArgs
 9
(
9 :
this
: >
.
> ?
fSecs1ToHsms
? K
,
K L
FEventId
M U
.
U V!
HsmsDataMessageSent
V i
,
i j
FResultCode
k v
.
v w
Error
w |
,
| }
e
~ 
. Ä
messageÄ á
,á à 
fSecsDataMessageâ ô
)ô ö
)
ÒÒ 
;
ÒÒ 
}
ÚÚ 
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı !
procHsmsErrorRaised
ˆˆ #
(
ˆˆ# $
ex
ˆˆ$ &
)
ˆˆ& '
;
ˆˆ' (
}
˜˜ 
finally
¯¯ 
{
˘˘ !
fSecsControlMessage
˙˙ #
=
˙˙$ %
null
˙˙& *
;
˙˙* +
fSecsDataMessage
˚˚  
=
˚˚! "
null
˚˚# '
;
˚˚' (
m_fMainSync
¸¸ 
.
¸¸ 
set
¸¸ 
(
¸¸  
)
¸¸  !
;
¸¸! "
}
˝˝ 
}
˛˛ 	
private
ÇÇ 
void
ÇÇ /
!m_fTcpClient_TcpClientErrorRaised
ÇÇ 6
(
ÇÇ6 7
object
ÉÉ 
sender
ÉÉ 
,
ÉÉ ,
FTcpClientErrorRaisedEventArgs
ÑÑ *
e
ÑÑ+ ,
)
ÖÖ 
{
ÜÜ 	
try
áá 
{
àà !
procHsmsErrorRaised
ââ #
(
ââ# $
e
ââ$ %
.
ââ% &
	exception
ââ& /
)
ââ/ 0
;
ââ0 1
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå !
procHsmsErrorRaised
çç #
(
çç# $
ex
çç$ &
)
çç& '
;
çç' (
}
éé 
finally
èè 
{
êê 
}
íí 
}
ìì 	
}
ôô 
}öö „à
uD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\SECS1\c_FSECS1.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FSECS1 
: 
IDisposable &
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
FSecs1RecvState 
m_fRecvState  ,
=- .
FSecs1RecvState/ >
.> ?
	Completed? H
;H I
private 
FSecs1SendState 
m_fSendState  ,
=- .
FSecs1SendState/ >
.> ?
	Completed? H
;H I
private   
FSecs1RecvBuffer    

m_fRecvBuf  ! +
=  , -
null  . 2
;  2 3
private!! 
FSecs1RecvBlock!! 
m_fRecvBlock!!  ,
=!!- .
null!!/ 3
;!!3 4
private"" 
FSecs1RecvBlockList"" #
m_fRecvBlockList""$ 4
=""5 6
null""7 ;
;""; <
private## 
FSecs1SendBlock## 
m_fSendBlock##  ,
=##- .
null##/ 3
;##3 4
private$$ 
FQueue$$ 
<$$ 
FSecs1SendBlockList$$ *
>$$* +!
m_fSendBlockListQueue$$, A
=$$B C
null$$D H
;$$H I
private%% 
FSerial%% 
	m_fSerial%% !
=%%" #
null%%$ (
;%%( )
private&& 
	FCodeLock&& 
m_fMainSync&& %
=&&& '
null&&( ,
;&&, -
private'' 
FThread'' 

m_fThdMain'' "
=''# $
null''% )
;'') *
private(( 
FStaticTimer(( 
m_fTmrT1(( %
=((& '
null((( ,
;((, -
private)) 
FStaticTimer)) 
m_fTmrT2)) %
=))& '
null))( ,
;)), -
private** 
FStaticTimer** 
m_fTmrT4Runner** +
=**, -
null**. 2
;**2 3
public00 
FSECS100 
(00 
FSecs1ToHsms11 
fSecs1ToHsms11 %
)22 
{33 	
m_fSecs1ToHsms44 
=44 
fSecs1ToHsms44 )
;44) *
init66 
(66 
)66 
;66 
}77 	
~;; 	
FSECS1;;	 
(;; 
)<< 
{== 	
	myDispose>> 
(>> 
false>> 
)>> 
;>> 
}?? 	
	protectedCC 
voidCC 
	myDisposeCC  
(CC  !
boolDD 
	disposingDD 
)EE 
{FF 	
ifGG 
(GG 
!GG 

m_disposedGG 
)GG 
{HH 
ifII 
(II 
	disposingII 
)II 
{JJ 
termKK 
(KK 
)KK 
;KK 
m_fSecs1ToHsmsMM "
=MM# $
nullMM% )
;MM) *
}NN 

m_disposedPP 
=PP 
truePP !
;PP! "
}QQ 
}RR 	
publicZZ 
voidZZ 
DisposeZZ 
(ZZ 
)[[ 
{\\ 	
	myDispose]] 
(]] 
true]] 
)]] 
;]] 
GC^^ 
.^^ 
SuppressFinalize^^ 
(^^  
this^^  $
)^^$ %
;^^% &
}__ 	
privatemm 
voidmm 
initmm 
(mm 
)nn 
{oo 	
trypp 
{qq 

m_fRecvBufrr 
=rr 
newrr  
FSecs1RecvBufferrr! 1
(rr1 2
)rr2 3
;rr3 4
m_fRecvBlockListss  
=ss! "
newss# &
FSecs1RecvBlockListss' :
(ss: ;
m_fSecs1ToHsmsss; I
)ssI J
;ssJ K!
m_fSendBlockListQueuett %
=tt& '
newtt( +
FQueuett, 2
<tt2 3
FSecs1SendBlockListtt3 F
>ttF G
(ttG H
)ttH I
;ttI J
m_fTmrT1xx 
=xx 
newxx 
FStaticTimerxx +
(xx+ ,
)xx, -
;xx- .
m_fTmrT2yy 
=yy 
newyy 
FStaticTimeryy +
(yy+ ,
)yy, -
;yy- .
m_fTmrT4Runnerzz 
=zz  
newzz! $
FStaticTimerzz% 1
(zz1 2
)zz2 3
;zz3 4
m_fTmrT4Runner{{ 
.{{ 
start{{ $
({{$ %
$num{{% )
){{) *
;{{* +
m_fMainSync 
= 
new !
	FCodeLock" +
(+ ,
), -
;- .

m_fThdMain
ÄÄ 
=
ÄÄ 
new
ÄÄ  
FThread
ÄÄ! (
(
ÄÄ( )
$str
ÄÄ) :
)
ÄÄ: ;
;
ÄÄ; <

m_fThdMain
ÅÅ 
.
ÅÅ 
ThreadJobCalled
ÅÅ *
+=
ÅÅ+ -
new
ÅÅ. 1*
FThreadJobCalledEventHandler
ÅÅ2 N
(
ÅÅN O(
m_fThdMain_ThreadJobCalled
ÅÅO i
)
ÅÅi j
;
ÅÅj k

m_fThdMain
ÇÇ 
.
ÇÇ 
start
ÇÇ  
(
ÇÇ  !
)
ÇÇ! "
;
ÇÇ" #
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ 
ex
ÑÑ 
)
ÑÑ  
{
ÖÖ 
FDebug
ÜÜ 
.
ÜÜ 
throwException
ÜÜ %
(
ÜÜ% &
ex
ÜÜ& (
)
ÜÜ( )
;
ÜÜ) *
}
áá 
finally
àà 
{
ââ 
}
ãã 
}
åå 	
private
êê 
void
êê 
term
êê 
(
êê 
)
ëë 
{
íí 	
try
ìì 
{
îî 
if
ïï 
(
ïï 

m_fThdMain
ïï 
!=
ïï !
null
ïï" &
)
ïï& '
{
ññ 

m_fThdMain
óó 
.
óó 
stop
óó #
(
óó# $
)
óó$ %
;
óó% &

m_fThdMain
òò 
.
òò 
Dispose
òò &
(
òò& '
)
òò' (
;
òò( )

m_fThdMain
ôô 
.
ôô 
ThreadJobCalled
ôô .
-=
ôô/ 1
new
ôô2 5*
FThreadJobCalledEventHandler
ôô6 R
(
ôôR S(
m_fThdMain_ThreadJobCalled
ôôS m
)
ôôm n
;
ôôn o

m_fThdMain
öö 
=
öö  
null
öö! %
;
öö% &
}
õõ 
if
ùù 
(
ùù 
	m_fSerial
ùù 
!=
ùù  
null
ùù! %
)
ùù% &
{
ûû 
	m_fSerial
üü 
.
üü 
close
üü #
(
üü# $
)
üü$ %
;
üü% &
	m_fSerial
†† 
.
†† 
Dispose
†† %
(
††% &
)
††& '
;
††' (
	m_fSerial
¢¢ 
.
¢¢  
SerialStateChanged
¢¢ 0
-=
¢¢1 3
new
¢¢4 7-
FSerialStateChangedEventHandler
¢¢8 W
(
¢¢W X*
m_fSerial_SerialStateChanged
¢¢X t
)
¢¢t u
;
¢¢u v
	m_fSerial
££ 
.
££  
SerialDataReceived
££ 0
-=
££1 3
new
££4 7-
FSerialDataReceivedEventHandler
££8 W
(
££W X*
m_fSerial_SerialDataReceived
££X t
)
££t u
;
££u v
	m_fSerial
§§ 
.
§§ 
SerialDataSent
§§ ,
-=
§§- /
new
§§0 3)
FSerialDataSentEventHandler
§§4 O
(
§§O P&
m_fSerial_SerialDataSent
§§P h
)
§§h i
;
§§i j
	m_fSerial
•• 
.
•• "
SerialDataSendFailed
•• 2
-=
••3 5
new
••6 9/
!FSerialDataSendFailedEventHandler
••: [
(
••[ \,
m_fSerial_SerialDataSendFailed
••\ z
)
••z {
;
••{ |
	m_fSerial
¶¶ 
.
¶¶ 
SerialErrorRaised
¶¶ /
-=
¶¶0 2
new
¶¶3 6,
FSerialErrorRaisedEventHandler
¶¶7 U
(
¶¶U V)
m_fSerial_SerialErrorRaised
¶¶V q
)
¶¶q r
;
¶¶r s
	m_fSerial
®® 
=
®® 
null
®®  $
;
®®$ %
}
©© 
if
´´ 
(
´´ 

m_fRecvBuf
´´ 
!=
´´ !
null
´´" &
)
´´& '
{
¨¨ 

m_fRecvBuf
≠≠ 
.
≠≠ 
Dispose
≠≠ &
(
≠≠& '
)
≠≠' (
;
≠≠( )

m_fRecvBuf
ÆÆ 
=
ÆÆ  
null
ÆÆ! %
;
ÆÆ% &
}
ØØ 
if
±± 
(
±± 
m_fRecvBlockList
±± $
!=
±±% '
null
±±( ,
)
±±, -
{
≤≤ 
m_fRecvBlockList
≥≥ $
.
≥≥$ %
Dispose
≥≥% ,
(
≥≥, -
)
≥≥- .
;
≥≥. /
m_fRecvBlockList
¥¥ $
=
¥¥% &
null
¥¥' +
;
¥¥+ ,
}
µµ 
if
∑∑ 
(
∑∑ 
m_fSendBlock
∑∑  
!=
∑∑! #
null
∑∑$ (
)
∑∑( )
{
∏∏ 
m_fSendBlock
ππ  
.
ππ  !
Dispose
ππ! (
(
ππ( )
)
ππ) *
;
ππ* +
m_fSendBlock
∫∫  
=
∫∫! "
null
∫∫# '
;
∫∫' (
}
ªª 
if
ΩΩ 
(
ΩΩ #
m_fSendBlockListQueue
ΩΩ )
!=
ΩΩ* ,
null
ΩΩ- 1
)
ΩΩ1 2
{
ææ #
m_fSendBlockListQueue
øø )
.
øø) *
Dispose
øø* 1
(
øø1 2
)
øø2 3
;
øø3 4#
m_fSendBlockListQueue
¿¿ )
=
¿¿* +
null
¿¿, 0
;
¿¿0 1
}
¡¡ 
if
√√ 
(
√√ 
m_fTmrT1
√√ 
!=
√√ 
null
√√  $
)
√√$ %
{
ƒƒ 
m_fTmrT1
≈≈ 
.
≈≈ 
Dispose
≈≈ $
(
≈≈$ %
)
≈≈% &
;
≈≈& '
m_fTmrT1
∆∆ 
=
∆∆ 
null
∆∆ #
;
∆∆# $
}
«« 
if
…… 
(
…… 
m_fTmrT2
…… 
!=
…… 
null
……  $
)
……$ %
{
   
m_fTmrT2
ÀÀ 
.
ÀÀ 
Dispose
ÀÀ $
(
ÀÀ$ %
)
ÀÀ% &
;
ÀÀ& '
m_fTmrT2
ÃÃ 
=
ÃÃ 
null
ÃÃ #
;
ÃÃ# $
}
ÕÕ 
if
œœ 
(
œœ 
m_fTmrT4Runner
œœ "
!=
œœ# %
null
œœ& *
)
œœ* +
{
–– 
m_fTmrT4Runner
—— "
.
——" #
Dispose
——# *
(
——* +
)
——+ ,
;
——, -
m_fTmrT4Runner
““ "
=
““# $
null
““% )
;
““) *
}
”” 
if
’’ 
(
’’ 
m_fMainSync
’’ 
!=
’’  "
null
’’# '
)
’’' (
{
÷÷ 
m_fMainSync
◊◊ 
.
◊◊  
Dispose
◊◊  '
(
◊◊' (
)
◊◊( )
;
◊◊) *
m_fMainSync
ÿÿ 
=
ÿÿ  !
null
ÿÿ" &
;
ÿÿ& '
}
ŸŸ 
}
⁄⁄ 
catch
€€ 
(
€€ 
	Exception
€€ 
ex
€€ 
)
€€  
{
‹‹ 
FDebug
›› 
.
›› 
throwException
›› %
(
››% &
ex
››& (
)
››( )
;
››) *
}
ﬁﬁ 
finally
ﬂﬂ 
{
‡‡ 
}
‚‚ 
}
„„ 	
public
ÁÁ 
void
ÁÁ 
open
ÁÁ 
(
ÁÁ 
)
ËË 
{
ÈÈ 	
try
ÍÍ 
{
ÎÎ 
	m_fSerial
ÏÏ 
=
ÏÏ 
new
ÏÏ 
FSerial
ÏÏ  '
(
ÏÏ' (
this
ÌÌ 
.
ÌÌ 
m_fSecs1ToHsms
ÌÌ '
.
ÌÌ' (
fSecs1Config
ÌÌ( 4
.
ÌÌ4 5

serialPort
ÌÌ5 ?
,
ÌÌ? @
this
ÓÓ 
.
ÓÓ 
m_fSecs1ToHsms
ÓÓ '
.
ÓÓ' (
fSecs1Config
ÓÓ( 4
.
ÓÓ4 5
baud
ÓÓ5 9
)
ÔÔ 
;
ÔÔ 
	m_fSerial
ÒÒ 
.
ÒÒ  
SerialStateChanged
ÒÒ ,
+=
ÒÒ- /
new
ÒÒ0 3-
FSerialStateChangedEventHandler
ÒÒ4 S
(
ÒÒS T*
m_fSerial_SerialStateChanged
ÒÒT p
)
ÒÒp q
;
ÒÒq r
	m_fSerial
ÚÚ 
.
ÚÚ  
SerialDataReceived
ÚÚ ,
+=
ÚÚ- /
new
ÚÚ0 3-
FSerialDataReceivedEventHandler
ÚÚ4 S
(
ÚÚS T*
m_fSerial_SerialDataReceived
ÚÚT p
)
ÚÚp q
;
ÚÚq r
	m_fSerial
ÛÛ 
.
ÛÛ 
SerialDataSent
ÛÛ (
+=
ÛÛ) +
new
ÛÛ, /)
FSerialDataSentEventHandler
ÛÛ0 K
(
ÛÛK L&
m_fSerial_SerialDataSent
ÛÛL d
)
ÛÛd e
;
ÛÛe f
	m_fSerial
ÙÙ 
.
ÙÙ "
SerialDataSendFailed
ÙÙ .
+=
ÙÙ/ 1
new
ÙÙ2 5/
!FSerialDataSendFailedEventHandler
ÙÙ6 W
(
ÙÙW X,
m_fSerial_SerialDataSendFailed
ÙÙX v
)
ÙÙv w
;
ÙÙw x
	m_fSerial
ıı 
.
ıı 
SerialErrorRaised
ıı +
+=
ıı, .
new
ıı/ 2,
FSerialErrorRaisedEventHandler
ıı3 Q
(
ııQ R)
m_fSerial_SerialErrorRaised
ııR m
)
ıım n
;
ıın o
	m_fSerial
˜˜ 
.
˜˜ 
open
˜˜ 
(
˜˜ 
)
˜˜  
;
˜˜  !
}
¯¯ 
catch
˘˘ 
(
˘˘ 
	Exception
˘˘ 
ex
˘˘ 
)
˘˘  
{
˙˙ 
FDebug
˚˚ 
.
˚˚ 
throwException
˚˚ %
(
˚˚% &
ex
˚˚& (
)
˚˚( )
;
˚˚) *
}
¸¸ 
finally
˝˝ 
{
˛˛ 
}
ÄÄ 
}
ÅÅ 	
public
ÖÖ 
void
ÖÖ 
close
ÖÖ 
(
ÖÖ 
)
ÜÜ 
{
áá 	
try
àà 
{
ââ 
if
ää 
(
ää 
	m_fSerial
ää 
.
ää 
fState
ää $
==
ää% '
FSerialState
ää( 4
.
ää4 5
Opened
ää5 ;
)
ää; <
{
ãã 
while
åå 
(
åå 
m_fSecs1ToHsms
åå )
.
åå) *
fEventPusher
åå* 6
.
åå6 7
secs1EventCount
åå7 F
>
ååG H
$num
ååI J
||
ååK M
!
ååN O
	m_fSerial
ååO X
.
ååX Y
sendCompleted
ååY f
)
ååf g
{
çç 
if
éé 
(
éé 
System
éé "
.
éé" #
Windows
éé# *
.
éé* +
Forms
éé+ 0
.
éé0 1
Application
éé1 <
.
éé< =
MessageLoop
éé= H
)
ééH I
{
èè 
System
êê "
.
êê" #
Windows
êê# *
.
êê* +
Forms
êê+ 0
.
êê0 1
Application
êê1 <
.
êê< =
DoEvents
êê= E
(
êêE F
)
êêF G
;
êêG H
}
ëë 
System
íí 
.
íí 
	Threading
íí (
.
íí( )
Thread
íí) /
.
íí/ 0
Sleep
íí0 5
(
íí5 6
$num
íí6 7
)
íí7 8
;
íí8 9
}
ìì 
}
îî 
	m_fSerial
òò 
.
òò 
close
òò 
(
òò  
)
òò  !
;
òò! "
	m_fSerial
ôô 
.
ôô 
Dispose
ôô !
(
ôô! "
)
ôô" #
;
ôô# $
	m_fSerial
õõ 
.
õõ  
SerialStateChanged
õõ ,
-=
õõ- /
new
õõ0 3-
FSerialStateChangedEventHandler
õõ4 S
(
õõS T*
m_fSerial_SerialStateChanged
õõT p
)
õõp q
;
õõq r
	m_fSerial
úú 
.
úú  
SerialDataReceived
úú ,
-=
úú- /
new
úú0 3-
FSerialDataReceivedEventHandler
úú4 S
(
úúS T*
m_fSerial_SerialDataReceived
úúT p
)
úúp q
;
úúq r
	m_fSerial
ùù 
.
ùù 
SerialDataSent
ùù (
-=
ùù) +
new
ùù, /)
FSerialDataSentEventHandler
ùù0 K
(
ùùK L&
m_fSerial_SerialDataSent
ùùL d
)
ùùd e
;
ùùe f
	m_fSerial
ûû 
.
ûû "
SerialDataSendFailed
ûû .
-=
ûû/ 1
new
ûû2 5/
!FSerialDataSendFailedEventHandler
ûû6 W
(
ûûW X,
m_fSerial_SerialDataSendFailed
ûûX v
)
ûûv w
;
ûûw x
	m_fSerial
üü 
.
üü 
SerialErrorRaised
üü +
-=
üü, .
new
üü/ 2,
FSerialErrorRaisedEventHandler
üü3 Q
(
üüQ R)
m_fSerial_SerialErrorRaised
üüR m
)
üüm n
;
üün o
	m_fSerial
°° 
=
°° 
null
°°  
;
°°  !
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
ex
££ 
)
££  
{
§§ 
FDebug
•• 
.
•• 
throwException
•• %
(
••% &
ex
••& (
)
••( )
;
••) *
}
¶¶ 
finally
ßß 
{
®® 
}
™™ 
}
´´ 	
public
ØØ 
void
ØØ 
send
ØØ 
(
ØØ 
FSecsDataMessage
∞∞ 
fSecsDataMessage
∞∞ -
)
±± 
{
≤≤ 	
try
≥≥ 
{
¥¥ #
m_fSendBlockListQueue
µµ %
.
µµ% &
enqueue
µµ& -
(
µµ- .
fSecsDataMessage
µµ. >
.
µµ> ?#
getSecs1SendBlockList
µµ? T
(
µµT U
)
µµU V
)
µµV W
;
µµW X
}
∂∂ 
catch
∑∑ 
(
∑∑ 
	Exception
∑∑ 
ex
∑∑ 
)
∑∑  
{
∏∏ 
FDebug
ππ 
.
ππ 
throwException
ππ %
(
ππ% &
ex
ππ& (
)
ππ( )
;
ππ) *
}
∫∫ 
finally
ªª 
{
ºº 
}
ææ 
}
øø 	
private
√√ 
void
√√ 
sendHandshakeENQ
√√ %
(
√√% &
)
ƒƒ 
{
≈≈ 	%
FSecs1HandshakeSendData
∆∆ #
fData
∆∆$ )
=
∆∆* +
null
∆∆, 0
;
∆∆0 1
try
»» 
{
…… 
m_fSendState
ÕÕ 
=
ÕÕ 
FSecs1SendState
ÕÕ .
.
ÕÕ. /
Enq
ÕÕ/ 2
;
ÕÕ2 3
m_fTmrT2
‘‘ 
.
‘‘ 
restart
‘‘  
(
‘‘  !
(
‘‘! "
int
‘‘" %
)
‘‘% &
(
‘‘& '
m_fSecs1ToHsms
‘‘' 5
.
‘‘5 6
fSecs1Config
‘‘6 B
.
‘‘B C
	t2Timeout
‘‘C L
*
‘‘M N
$num
‘‘O S
)
‘‘S T
)
‘‘T U
;
‘‘U V
fData
ÿÿ 
=
ÿÿ 
new
ÿÿ %
FSecs1HandshakeSendData
ÿÿ 3
(
ÿÿ3 4!
FSecs1HandshakeCode
ÿÿ4 G
.
ÿÿG H
ENQ
ÿÿH K
)
ÿÿK L
;
ÿÿL M
	m_fSerial
⁄⁄ 
.
⁄⁄ 
send
⁄⁄ 
(
⁄⁄ 
new
€€ 
FSerialSendData
€€ '
(
€€' (
fData
€€( -
.
€€- .
handshakeToBytes
€€. >
(
€€> ?
)
€€? @
,
€€@ A
fData
€€B G
)
€€G H
)
‹‹ 
;
‹‹ 
}
›› 
catch
ﬁﬁ 
(
ﬁﬁ 
	Exception
ﬁﬁ 
ex
ﬁﬁ 
)
ﬁﬁ  
{
ﬂﬂ "
procSecs1ErrorRaised
‡‡ $
(
‡‡$ %
ex
‡‡% '
)
‡‡' (
;
‡‡( )
}
·· 
finally
‚‚ 
{
„„ 
fData
‰‰ 
=
‰‰ 
null
‰‰ 
;
‰‰ 
}
ÂÂ 
}
ÊÊ 	
private
ÍÍ 
void
ÍÍ 
sendHandshakeEOT
ÍÍ %
(
ÍÍ% &
)
ÎÎ 
{
ÏÏ 	%
FSecs1HandshakeSendData
ÌÌ #
fData
ÌÌ$ )
=
ÌÌ* +
null
ÌÌ, 0
;
ÌÌ0 1
try
ÔÔ 
{
 
m_fRecvState
ÙÙ 
=
ÙÙ 
FSecs1RecvState
ÙÙ .
.
ÙÙ. /
Eot
ÙÙ/ 2
;
ÙÙ2 3
m_fTmrT2
˚˚ 
.
˚˚ 
restart
˚˚  
(
˚˚  !
(
˚˚! "
int
˚˚" %
)
˚˚% &
(
˚˚& '
m_fSecs1ToHsms
˚˚' 5
.
˚˚5 6
fSecs1Config
˚˚6 B
.
˚˚B C
	t2Timeout
˚˚C L
*
˚˚M N
$num
˚˚O S
)
˚˚S T
)
˚˚T U
;
˚˚U V
fData
ˇˇ 
=
ˇˇ 
new
ˇˇ %
FSecs1HandshakeSendData
ˇˇ 3
(
ˇˇ3 4!
FSecs1HandshakeCode
ˇˇ4 G
.
ˇˇG H
EOT
ˇˇH K
)
ˇˇK L
;
ˇˇL M
	m_fSerial
ÅÅ 
.
ÅÅ 
send
ÅÅ 
(
ÅÅ 
new
ÇÇ 
FSerialSendData
ÇÇ '
(
ÇÇ' (
fData
ÇÇ( -
.
ÇÇ- .
handshakeToBytes
ÇÇ. >
(
ÇÇ> ?
)
ÇÇ? @
,
ÇÇ@ A
fData
ÇÇB G
)
ÇÇG H
)
ÉÉ 
;
ÉÉ 
}
ÑÑ 
catch
ÖÖ 
(
ÖÖ 
	Exception
ÖÖ 
ex
ÖÖ 
)
ÖÖ  
{
ÜÜ "
procSecs1ErrorRaised
áá $
(
áá$ %
ex
áá% '
)
áá' (
;
áá( )
}
àà 
finally
ââ 
{
ää 
fData
ãã 
=
ãã 
null
ãã 
;
ãã 
}
åå 
}
çç 	
private
ëë 
void
ëë 
sendHandshakeACK
ëë %
(
ëë% &
FSecsDataMessage
íí 
fSecsDataMessage
íí -
)
ìì 
{
îî 	%
FSecs1HandshakeSendData
ïï #
fData
ïï$ )
=
ïï* +
null
ïï, 0
;
ïï0 1
try
óó 
{
òò 
m_fRecvState
úú 
=
úú 
FSecs1RecvState
úú .
.
úú. /
	Completed
úú/ 8
;
úú8 9
fData
†† 
=
†† 
new
†† %
FSecs1HandshakeSendData
†† 3
(
††3 4!
FSecs1HandshakeCode
††4 G
.
††G H
ACK
††H K
,
††K L
fSecsDataMessage
††M ]
)
††] ^
;
††^ _
	m_fSerial
¢¢ 
.
¢¢ 
send
¢¢ 
(
¢¢ 
new
££ 
FSerialSendData
££ '
(
££' (
fData
££( -
.
££- .
handshakeToBytes
££. >
(
££> ?
)
££? @
,
££@ A
fData
££B G
)
££G H
)
§§ 
;
§§ 
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶ 
ex
¶¶ 
)
¶¶  
{
ßß "
procSecs1ErrorRaised
®® $
(
®®$ %
ex
®®% '
)
®®' (
;
®®( )
}
©© 
finally
™™ 
{
´´ 
fData
¨¨ 
=
¨¨ 
null
¨¨ 
;
¨¨ 
}
≠≠ 
}
ÆÆ 	
private
≤≤ 
void
≤≤ 
sendHandshakeNAK
≤≤ %
(
≤≤% &
)
≥≥ 
{
¥¥ 	%
FSecs1HandshakeSendData
µµ #
fData
µµ$ )
=
µµ* +
null
µµ, 0
;
µµ0 1
try
∑∑ 
{
∏∏ 
m_fRecvState
ºº 
=
ºº 
FSecs1RecvState
ºº .
.
ºº. /
	Completed
ºº/ 8
;
ºº8 9
fData
¿¿ 
=
¿¿ 
new
¿¿ %
FSecs1HandshakeSendData
¿¿ 3
(
¿¿3 4!
FSecs1HandshakeCode
¿¿4 G
.
¿¿G H
NAK
¿¿H K
)
¿¿K L
;
¿¿L M
	m_fSerial
¬¬ 
.
¬¬ 
send
¬¬ 
(
¬¬ 
new
√√ 
FSerialSendData
√√ '
(
√√' (
fData
√√( -
.
√√- .
handshakeToBytes
√√. >
(
√√> ?
)
√√? @
,
√√@ A
fData
√√B G
)
√√G H
)
ƒƒ 
;
ƒƒ 
}
≈≈ 
catch
∆∆ 
(
∆∆ 
	Exception
∆∆ 
ex
∆∆ 
)
∆∆  
{
«« "
procSecs1ErrorRaised
»» $
(
»»$ %
ex
»»% '
)
»»' (
;
»»( )
}
…… 
finally
   
{
ÀÀ 
fData
ÃÃ 
=
ÃÃ 
null
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}
ŒŒ 	
private
““ 
void
““ 
	sendBlock
““ 
(
““ 
)
”” 
{
‘‘ 	

FSecsBlock
’’ 

fSecsBlock
’’ !
=
’’" #
null
’’$ (
;
’’( )
try
◊◊ 
{
ÿÿ 
m_fTmrT2
‹‹ 
.
‹‹ 
restart
‹‹  
(
‹‹  !
(
‹‹! "
int
‹‹" %
)
‹‹% &
(
‹‹& '
m_fSecs1ToHsms
‹‹' 5
.
‹‹5 6
fSecs1Config
‹‹6 B
.
‹‹B C
	t2Timeout
‹‹C L
*
‹‹M N
$num
‹‹O S
)
‹‹S T
)
‹‹T U
;
‹‹U V

fSecsBlock
‡‡ 
=
‡‡ 
new
‡‡  

FSecsBlock
‡‡! +
(
‡‡+ ,
m_fSecs1ToHsms
·· "
,
··" #
m_fSendBlock
‚‚  
.
‚‚  !
length
‚‚! '
,
‚‚' (
m_fSendBlock
„„  
.
„„  !
	blockData
„„! *
,
„„* +
m_fSendBlock
‰‰  
.
‰‰  !
rbit
‰‰! %
,
‰‰% &
m_fSendBlock
ÂÂ  
.
ÂÂ  !
	sessionId
ÂÂ! *
,
ÂÂ* +
m_fSendBlock
ÊÊ  
.
ÊÊ  !
wbit
ÊÊ! %
,
ÊÊ% &
m_fSendBlock
ÁÁ  
.
ÁÁ  !
stream
ÁÁ! '
,
ÁÁ' (
m_fSendBlock
ËË  
.
ËË  !
function
ËË! )
,
ËË) *
m_fSendBlock
ÈÈ  
.
ÈÈ  !
ebit
ÈÈ! %
,
ÈÈ% &
m_fSendBlock
ÍÍ  
.
ÍÍ  !
blockNo
ÍÍ! (
,
ÍÍ( )
m_fSendBlock
ÎÎ  
.
ÎÎ  !
systemBytes
ÎÎ! ,
,
ÎÎ, -
m_fSendBlock
ÏÏ  
.
ÏÏ  !
body
ÏÏ! %
,
ÏÏ% &
m_fSendBlock
ÌÌ  
.
ÌÌ  !
checkSum
ÌÌ! )
)
ÓÓ 
;
ÓÓ 
	m_fSerial
 
.
 
send
 
(
 
new
 "
FSerialSendData
# 2
(
2 3
m_fSendBlock
3 ?
.
? @
	blockData
@ I
,
I J

fSecsBlock
K U
)
U V
)
V W
;
W X
}
ÒÒ 
catch
ÚÚ 
(
ÚÚ 
	Exception
ÚÚ 
ex
ÚÚ 
)
ÚÚ  
{
ÛÛ "
procSecs1ErrorRaised
ÙÙ $
(
ÙÙ$ %
ex
ÙÙ% '
)
ÙÙ' (
;
ÙÙ( )
}
ıı 
finally
ˆˆ 
{
˜˜ 

fSecsBlock
¯¯ 
=
¯¯ 
null
¯¯ !
;
¯¯! "
}
˘˘ 
}
˙˙ 	
private
˛˛ 
void
˛˛ 
retrySendBlock
˛˛ #
(
˛˛# $
)
ˇˇ 
{
ÄÄ 	
try
ÅÅ 
{
ÇÇ 
m_fSendState
ÜÜ 
=
ÜÜ 
FSecs1SendState
ÜÜ .
.
ÜÜ. /
	Completed
ÜÜ/ 8
;
ÜÜ8 9
if
çç 
(
çç 
m_fSendBlock
çç  
.
çç  !

retryCount
çç! +
<
çç, -
m_fSecs1ToHsms
çç. <
.
çç< =
fSecs1Config
çç= I
.
ççI J

retryLimit
ççJ T
)
ççT U
{
éé 
m_fSendBlock
èè  
.
èè  !
addRetryCount
èè! .
(
èè. /
)
èè/ 0
;
èè0 1
m_fSendBlock
êê  
.
êê  !
isRetry
êê! (
=
êê) *
true
êê+ /
;
êê/ 0
}
ëë 
else
íí 
{
ìì 
m_fSecs1ToHsms
îî "
.
îî" #
fEventPusher
îî# /
.
îî/ 0
pushSecs1Event
îî0 >
(
îî> ?
new
ïï ,
FSecs1DataMessageSentEventArgs
ïï :
(
ïï: ;
m_fSecs1ToHsms
ññ *
,
ññ* +
FEventId
óó $
.
óó$ %"
Secs1DataMessageSent
óó% 9
,
óó9 :
FResultCode
òò '
.
òò' (
Error
òò( -
,
òò- .

FConstants
ôô &
.
ôô& '
err_m_16002
ôô' 2
,
ôô2 3
m_fSendBlock
öö (
.
öö( )

fBlockList
öö) 3
.
öö3 4
fSecsDataMessage
öö4 D
)
õõ 
)
úú 
;
úú 
m_fSendBlock
ûû  
=
ûû! "
null
ûû# '
;
ûû' (
}
üü 
}
†† 
catch
°° 
(
°° 
	Exception
°° 
ex
°° 
)
°°  
{
¢¢ "
procSecs1ErrorRaised
££ $
(
££$ %
ex
££% '
)
££' (
;
££( )
}
§§ 
finally
•• 
{
¶¶ 
}
®® 
}
©© 	
private
≠≠ 
bool
≠≠ 
sendDataMessage
≠≠ $
(
≠≠$ %
)
ÆÆ 
{
ØØ 	
try
∞∞ 
{
±± 
if
µµ 
(
µµ 
m_fRecvState
µµ  
!=
µµ! #
FSecs1RecvState
µµ$ 3
.
µµ3 4
	Completed
µµ4 =
||
µµ> @
m_fSendState
µµA M
!=
µµN P
FSecs1SendState
µµQ `
.
µµ` a
	Completed
µµa j
)
µµj k
{
∂∂ 
return
∑∑ 
false
∑∑  
;
∑∑  !
}
∏∏ 
if
ºº 
(
ºº 
m_fSendBlock
ºº  
!=
ºº! #
null
ºº$ (
)
ºº( )
{
ΩΩ 
if
ææ 
(
ææ 
m_fSendBlock
ææ $
.
ææ$ %
isRetry
ææ% ,
)
ææ, -
{
øø 
m_fSendBlock
√√ $
.
√√$ %
isRetry
√√% ,
=
√√- .
false
√√/ 4
;
√√4 5
sendHandshakeENQ
≈≈ (
(
≈≈( )
)
≈≈) *
;
≈≈* +
return
∆∆ 
true
∆∆ #
;
∆∆# $
}
«« 
return
»» 
false
»»  
;
»»  !
}
…… 
if
–– 
(
–– #
m_fSendBlockListQueue
–– )
.
––) *
count
––* /
==
––0 2
$num
––3 4
)
––4 5
{
—— 
return
““ 
false
““  
;
““  !
}
”” 
m_fSendBlock
◊◊ 
=
◊◊ #
m_fSendBlockListQueue
◊◊ 4
.
◊◊4 5
dequeue
◊◊5 <
(
◊◊< =
)
◊◊= >
.
◊◊> ?
fCurrentBlock
◊◊? L
;
◊◊L M
sendHandshakeENQ
ÿÿ  
(
ÿÿ  !
)
ÿÿ! "
;
ÿÿ" #
return
ŸŸ 
true
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
catch
€€ 
(
€€ 
	Exception
€€ 
ex
€€ 
)
€€  
{
‹‹ "
procSecs1ErrorRaised
›› $
(
››$ %
ex
››% '
)
››' (
;
››( )
}
ﬁﬁ 
finally
ﬂﬂ 
{
‡‡ 
}
‚‚ 
return
„„ 
false
„„ 
;
„„ 
}
‰‰ 	
private
ËË 
void
ËË  
procSecs1T1Timeout
ËË '
(
ËË' (
)
ÈÈ 
{
ÍÍ 	
try
ÎÎ 
{
ÏÏ 
m_fSecs1ToHsms
 
.
 
fEventPusher
 +
.
+ ,
pushSecs1Event
, :
(
: ;
new
ÒÒ *
FSecs1TimeoutRaisedEventArgs
ÒÒ 4
(
ÒÒ4 5
m_fSecs1ToHsms
ÒÒ5 C
,
ÒÒC D
FEventId
ÒÒE M
.
ÒÒM N 
Secs1TimeoutRaised
ÒÒN `
,
ÒÒ` a
FSecsTimeout
ÒÒb n
.
ÒÒn o
T1
ÒÒo q
,
ÒÒq r

FConstants
ÒÒs }
.
ÒÒ} ~
err_m_20001ÒÒ~ â
)ÒÒâ ä
)
ÚÚ 
;
ÚÚ 
m_fRecvBlock
˘˘ 
=
˘˘ 
null
˘˘ #
;
˘˘# $
sendHandshakeNAK
ÄÄ  
(
ÄÄ  !
)
ÄÄ! "
;
ÄÄ" #
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
	Exception
ÇÇ 
ex
ÇÇ 
)
ÇÇ  
{
ÉÉ 
FDebug
ÑÑ 
.
ÑÑ 
throwException
ÑÑ %
(
ÑÑ% &
ex
ÑÑ& (
)
ÑÑ( )
;
ÑÑ) *
}
ÖÖ 
finally
ÜÜ 
{
áá 
}
ââ 
}
ää 	
private
éé 
void
éé  
procSecs1T2Timeout
éé '
(
éé' (
)
èè 
{
êê 	
try
ëë 
{
íí 
m_fSecs1ToHsms
ññ 
.
ññ 
fEventPusher
ññ +
.
ññ+ ,
pushSecs1Event
ññ, :
(
ññ: ;
new
óó *
FSecs1TimeoutRaisedEventArgs
óó 4
(
óó4 5
m_fSecs1ToHsms
óó5 C
,
óóC D
FEventId
óóE M
.
óóM N 
Secs1TimeoutRaised
óóN `
,
óó` a
FSecsTimeout
óób n
.
óón o
T2
óóo q
,
óóq r

FConstants
óós }
.
óó} ~
err_m_20002óó~ â
)óóâ ä
)
òò 
;
òò 
if
úú 
(
úú 
m_fRecvState
úú  
==
úú! #
FSecs1RecvState
úú$ 3
.
úú3 4
Eot
úú4 7
)
úú7 8
{
ùù 
sendHandshakeNAK
°° $
(
°°$ %
)
°°% &
;
°°& '
}
¢¢ 
else
££ 
if
££ 
(
££ 
m_fSendState
§§  
==
§§! #
FSecs1SendState
§§$ 3
.
§§3 4
Enq
§§4 7
||
§§8 :
m_fSendState
••  
==
••! #
FSecs1SendState
••$ 3
.
••3 4
Eot
••4 7
)
¶¶ 
{
ßß 
retrySendBlock
®® "
(
®®" #
)
®®# $
;
®®$ %
}
©© 
}
™™ 
catch
´´ 
(
´´ 
	Exception
´´ 
ex
´´ 
)
´´  
{
¨¨ 
FDebug
≠≠ 
.
≠≠ 
throwException
≠≠ %
(
≠≠% &
ex
≠≠& (
)
≠≠( )
;
≠≠) *
}
ÆÆ 
finally
ØØ 
{
∞∞ 
}
≤≤ 
}
≥≥ 	
private
∑∑ 
void
∑∑  
procSecs1T4Timeout
∑∑ '
(
∑∑' ("
FSecs1T4TimeoutBlock
∏∏  
fBlock
∏∏! '
)
ππ 
{
∫∫ 	
string
ªª 
errorMessage
ªª 
=
ªª  !
string
ªª" (
.
ªª( )
Empty
ªª) .
;
ªª. /
try
ΩΩ 
{
ææ 
errorMessage
øø 
=
øø 
string
øø %
.
øø% &
Format
øø& ,
(
øø, -

FConstants
øø- 7
.
øø7 8
err_m_20004
øø8 C
,
øøC D
fBlock
øøE K
.
øøK L
stream
øøL R
,
øøR S
fBlock
øøT Z
.
øøZ [
function
øø[ c
,
øøc d
fBlock
øøe k
.
øøk l
	sessionId
øøl u
,
øøu v
fBlock
øøw }
.
øø} ~
systemBytesøø~ â
)øøâ ä
;øøä ã
m_fSecs1ToHsms
∆∆ 
.
∆∆ 
fEventPusher
∆∆ +
.
∆∆+ ,
pushSecs1Event
∆∆, :
(
∆∆: ;
new
«« *
FSecs1TimeoutRaisedEventArgs
«« 4
(
««4 5
m_fSecs1ToHsms
««5 C
,
««C D
FEventId
««E M
.
««M N 
Secs1TimeoutRaised
««N `
,
««` a
FSecsTimeout
««b n
.
««n o
T4
««o q
,
««q r
errorMessage
««s 
)«« Ä
)
»» 
;
»» 
}
…… 
catch
   
(
   
	Exception
   
ex
   
)
    
{
ÀÀ 
FDebug
ÃÃ 
.
ÃÃ 
throwException
ÃÃ %
(
ÃÃ% &
ex
ÃÃ& (
)
ÃÃ( )
;
ÃÃ) *
}
ÕÕ 
finally
ŒŒ 
{
œœ 
}
—— 
}
““ 	
private
÷÷ 
void
÷÷ "
procSecs1ErrorRaised
÷÷ )
(
÷÷) *
	Exception
◊◊ 
inEx
◊◊ 
)
ÿÿ 
{
ŸŸ 	
try
⁄⁄ 
{
€€ 
FDebug
‹‹ 
.
‹‹ 
writeLog
‹‹ 
(
‹‹  
inEx
‹‹  $
)
‹‹$ %
;
‹‹% &
m_fSecs1ToHsms
ﬁﬁ 
.
ﬁﬁ 
fEventPusher
ﬁﬁ +
.
ﬁﬁ+ ,
pushSecs1Event
ﬁﬁ, :
(
ﬁﬁ: ;
new
ﬂﬂ (
FSecs1ErrorRaisedEventArgs
ﬂﬂ 2
(
ﬂﬂ2 3
m_fSecs1ToHsms
ﬂﬂ3 A
,
ﬂﬂA B
FEventId
ﬂﬂC K
.
ﬂﬂK L
Secs1ErrorRaised
ﬂﬂL \
,
ﬂﬂ\ ]
inEx
ﬂﬂ^ b
.
ﬂﬂb c
Message
ﬂﬂc j
)
ﬂﬂj k
)
‡‡ 
;
‡‡ 
}
·· 
catch
‚‚ 
(
‚‚ 
	Exception
‚‚ 
ex
‚‚ 
)
‚‚  
{
„„ 
FDebug
‰‰ 
.
‰‰ 
writeLog
‰‰ 
(
‰‰  
ex
‰‰  "
)
‰‰" #
;
‰‰# $
}
ÂÂ 
finally
ÊÊ 
{
ÁÁ 
}
ÈÈ 
}
ÍÍ 	
private
ÓÓ 
void
ÓÓ "
procSecs1ErrorRaised
ÓÓ )
(
ÓÓ) *
string
ÔÔ 
errorMessage
ÔÔ 
)
 
{
ÒÒ 	
	Exception
ÚÚ 
inEx
ÚÚ 
=
ÚÚ 
null
ÚÚ !
;
ÚÚ! "
try
ÙÙ 
{
ıı 
inEx
ˆˆ 
=
ˆˆ 
new
ˆˆ 
	Exception
ˆˆ $
(
ˆˆ$ %
errorMessage
ˆˆ% 1
)
ˆˆ1 2
;
ˆˆ2 3"
procSecs1ErrorRaised
¯¯ $
(
¯¯$ %
inEx
¯¯% )
)
¯¯) *
;
¯¯* +
}
˘˘ 
catch
˙˙ 
(
˙˙ 
	Exception
˙˙ 
ex
˙˙ 
)
˙˙  
{
˚˚ 
FDebug
¸¸ 
.
¸¸ 
writeLog
¸¸ 
(
¸¸  
ex
¸¸  "
)
¸¸" #
;
¸¸# $
}
˝˝ 
finally
˛˛ 
{
ˇˇ 
}
ÅÅ 
}
ÇÇ 	
private
ää 
void
ää (
m_fThdMain_ThreadJobCalled
ää /
(
ää/ 0
object
ãã 
sender
ãã 
,
ãã 
FThreadEventArgs
åå 
e
åå 
)
çç 
{
éé 	
bool
èè 
waited
èè 
=
èè 
false
èè 
;
èè  
try
ëë 
{
íí 
waited
ìì 
=
ìì 
m_fMainSync
ìì $
.
ìì$ %
tryWait
ìì% ,
(
ìì, -
$num
ìì- .
)
ìì. /
;
ìì/ 0
if
îî 
(
îî 
!
îî 
waited
îî 
)
îî 
{
ïï 
return
ññ 
;
ññ 
}
óó 
if
õõ 
(
õõ 
	m_fSerial
õõ 
==
õõ  
null
õõ! %
||
õõ& (
	m_fSerial
õõ) 2
.
õõ2 3
fState
õõ3 9
!=
õõ: <
FSerialState
õõ= I
.
õõI J
Opened
õõJ P
||
õõQ S
m_fSecs1ToHsms
õõT b
.
õõb c
fSecs1State
õõc n
!=
õõo q"
FCommunicationStateõõr Ö
.õõÖ Ü
SelectedõõÜ é
)õõé è
{
úú 
e
ùù 
.
ùù 
sleepThread
ùù !
(
ùù! "
$num
ùù" #
)
ùù# $
;
ùù$ %
return
ûû 
;
ûû 
}
üü 
if
¶¶ 
(
¶¶ 
m_fTmrT1
¶¶ 
.
¶¶ 
elasped
¶¶ $
(
¶¶$ %
false
¶¶% *
)
¶¶* +
)
¶¶+ ,
{
ßß  
procSecs1T1Timeout
®® &
(
®®& '
)
®®' (
;
®®( )
return
©© 
;
©© 
}
™™ 
if
ØØ 
(
ØØ 
m_fTmrT2
ØØ 
.
ØØ 
elasped
ØØ $
(
ØØ$ %
false
ØØ% *
)
ØØ* +
)
ØØ+ ,
{
∞∞  
procSecs1T2Timeout
±± &
(
±±& '
)
±±' (
;
±±( )
return
≤≤ 
;
≤≤ 
}
≥≥ 
if
∏∏ 
(
∏∏ 
m_fTmrT4Runner
∏∏ "
.
∏∏" #
elasped
∏∏# *
(
∏∏* +
true
∏∏+ /
)
∏∏/ 0
)
∏∏0 1
{
ππ 
foreach
∫∫ 
(
∫∫ "
FSecs1T4TimeoutBlock
∫∫ 1
b
∫∫2 3
in
∫∫4 6
m_fRecvBlockList
∫∫7 G
.
∫∫G H"
removeT4TimeoutBlock
∫∫H \
(
∫∫\ ]
)
∫∫] ^
)
∫∫^ _
{
ªª  
procSecs1T4Timeout
ºº *
(
ºº* +
b
ºº+ ,
)
ºº, -
;
ºº- .
}
ΩΩ 
}
ææ 
if
≈≈ 
(
≈≈ 
sendDataMessage
≈≈ #
(
≈≈# $
)
≈≈$ %
)
≈≈% &
{
∆∆ 
return
«« 
;
«« 
}
»» 
e
ÃÃ 
.
ÃÃ 
sleepThread
ÃÃ 
(
ÃÃ 
$num
ÃÃ 
)
ÃÃ  
;
ÃÃ  !
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
	Exception
ŒŒ 
ex
ŒŒ 
)
ŒŒ  
{
œœ "
procSecs1ErrorRaised
–– $
(
––$ %
ex
––% '
)
––' (
;
––( )
}
—— 
finally
““ 
{
”” 
if
‘‘ 
(
‘‘ 
waited
‘‘ 
)
‘‘ 
{
’’ 
m_fMainSync
÷÷ 
.
÷÷  
set
÷÷  #
(
÷÷# $
)
÷÷$ %
;
÷÷% &
}
◊◊ 
}
ÿÿ 
}
ŸŸ 	
private
·· 
void
·· *
m_fSerial_SerialStateChanged
·· 1
(
··1 2
object
‚‚ 
sender
‚‚ 
,
‚‚ *
FSerialStateChangedEventArgs
„„ (
e
„„) *
)
‰‰ 
{
ÂÂ 	
try
ÊÊ 
{
ÁÁ 
m_fMainSync
ËË 
.
ËË 
wait
ËË  
(
ËË  !
)
ËË! "
;
ËË" #
if
ÏÏ 
(
ÏÏ 
e
ÏÏ 
.
ÏÏ 
fState
ÏÏ 
==
ÏÏ 
FSerialState
ÏÏ  ,
.
ÏÏ, -
Opened
ÏÏ- 3
)
ÏÏ3 4
{
ÌÌ 
m_fSecs1ToHsms
ÓÓ "
.
ÓÓ" #
changeSecs1State
ÓÓ# 3
(
ÓÓ3 4!
FCommunicationState
ÓÓ4 G
.
ÓÓG H
Opened
ÓÓH N
,
ÓÓN O
m_fSecs1ToHsms
ÓÓP ^
.
ÓÓ^ _
fSecs1Config
ÓÓ_ k
.
ÓÓk l

serialPort
ÓÓl v
,
ÓÓv w
m_fSecs1ToHsmsÓÓx Ü
.ÓÓÜ á
fSecs1ConfigÓÓá ì
.ÓÓì î
baudÓÓî ò
)ÓÓò ô
;ÓÓô ö
m_fSecs1ToHsms
ÔÔ "
.
ÔÔ" #
changeSecs1State
ÔÔ# 3
(
ÔÔ3 4!
FCommunicationState
ÔÔ4 G
.
ÔÔG H
	Connected
ÔÔH Q
,
ÔÔQ R
m_fSecs1ToHsms
ÔÔS a
.
ÔÔa b
fSecs1Config
ÔÔb n
.
ÔÔn o

serialPort
ÔÔo y
,
ÔÔy z
m_fSecs1ToHsmsÔÔ{ â
.ÔÔâ ä
fSecs1ConfigÔÔä ñ
.ÔÔñ ó
baudÔÔó õ
)ÔÔõ ú
;ÔÔú ù
m_fSecs1ToHsms
 "
.
" #
changeSecs1State
# 3
(
3 4!
FCommunicationState
4 G
.
G H
Selected
H P
,
P Q
m_fSecs1ToHsms
R `
.
` a
fSecs1Config
a m
.
m n

serialPort
n x
,
x y
m_fSecs1ToHsmsz à
.à â
fSecs1Configâ ï
.ï ñ
baudñ ö
)ö õ
;õ ú
}
ÒÒ 
else
ÚÚ 
if
ÚÚ 
(
ÚÚ 
e
ÚÚ 
.
ÚÚ 
fState
ÚÚ !
==
ÚÚ" $
FSerialState
ÚÚ% 1
.
ÚÚ1 2
Closed
ÚÚ2 8
)
ÚÚ8 9
{
ÛÛ 
m_fSecs1ToHsms
ÙÙ "
.
ÙÙ" #
changeSecs1State
ÙÙ# 3
(
ÙÙ3 4!
FCommunicationState
ÙÙ4 G
.
ÙÙG H
Closed
ÙÙH N
,
ÙÙN O
m_fSecs1ToHsms
ÙÙP ^
.
ÙÙ^ _
fSecs1Config
ÙÙ_ k
.
ÙÙk l

serialPort
ÙÙl v
,
ÙÙv w
m_fSecs1ToHsmsÙÙx Ü
.ÙÙÜ á
fSecs1ConfigÙÙá ì
.ÙÙì î
baudÙÙî ò
)ÙÙò ô
;ÙÙô ö
}
ıı 
}
ˆˆ 
catch
˜˜ 
(
˜˜ 
	Exception
˜˜ 
ex
˜˜ 
)
˜˜  
{
¯¯ 
FDebug
˘˘ 
.
˘˘ 
writeLog
˘˘ 
(
˘˘  
ex
˘˘  "
)
˘˘" #
;
˘˘# $
}
˙˙ 
finally
˚˚ 
{
¸¸ 
m_fMainSync
˝˝ 
.
˝˝ 
set
˝˝ 
(
˝˝  
)
˝˝  !
;
˝˝! "
}
˛˛ 
}
ˇˇ 	
private
ÉÉ 
void
ÉÉ *
m_fSerial_SerialDataReceived
ÉÉ 1
(
ÉÉ1 2
object
ÑÑ 
sender
ÑÑ 
,
ÑÑ *
FSerialDataReceivedEventArgs
ÖÖ (
e
ÖÖ) *
)
ÜÜ 
{
áá 	
byte
àà 
byteData
àà 
=
àà 
$num
àà 
;
àà 
int
ââ 

needLength
ââ 
=
ââ 
$num
ââ 
;
ââ 
int
ää 

copyLength
ää 
=
ää 
$num
ää 
;
ää 
FResultCode
ãã 
fResult
ãã 
=
ãã  !
FResultCode
ãã" -
.
ãã- .
Success
ãã. 5
;
ãã5 6
string
åå 
errorMessage
åå 
=
åå  !
string
åå" (
.
åå( )
Empty
åå) .
;
åå. /

FSecsBlock
çç 

fSecsBlock
çç !
=
çç" #
null
çç$ (
;
çç( )
FSecsDataMessage
éé 
fSecsDataMessage
éé -
=
éé. /
null
éé0 4
;
éé4 5
try
êê 
{
ëë 
m_fMainSync
íí 
.
íí 
wait
íí  
(
íí  !
)
íí! "
;
íí" #

m_fRecvBuf
ññ 
.
ññ 
input
ññ  
(
ññ  !
e
ññ! "
.
ññ" #
data
ññ# '
)
ññ' (
;
ññ( )
while
òò 
(
òò 

m_fRecvBuf
òò !
.
òò! "
length
òò" (
>
òò) *
$num
òò+ ,
)
òò, -
{
ôô 
if
öö 
(
öö 
m_fRecvState
öö $
==
öö% '
FSecs1RecvState
öö( 7
.
öö7 8
Enq
öö8 ;
)
öö; <
{
õõ "
procSecs1ErrorRaised
°° ,
(
°°, -
string
°°- 3
.
°°3 4
Format
°°4 :
(
°°: ;

FConstants
°°; E
.
°°E F
err_m_16001
°°F Q
,
°°Q R

m_fRecvBuf
°°S ]
.
°°] ^
output
°°^ d
(
°°d e
)
°°e f
)
°°f g
)
°°g h
;
°°h i
}
§§ 
else
•• 
if
•• 
(
•• 
m_fRecvState
•• )
==
••* ,
FSecs1RecvState
••- <
.
••< =
Eot
••= @
)
••@ A
{
¶¶ 
if
©© 
(
©© 
m_fRecvBlock
©© (
==
©©) +
null
©©, 0
)
©©0 1
{
™™ 
byteData
ÆÆ $
=
ÆÆ% &

m_fRecvBuf
ÆÆ' 1
.
ÆÆ1 2
output
ÆÆ2 8
(
ÆÆ8 9
)
ÆÆ9 :
;
ÆÆ: ;
if
∞∞ 
(
∞∞  
byteData
∞∞  (
<
∞∞) *
$num
∞∞+ -
||
∞∞. 0
byteData
∞∞1 9
>
∞∞: ;
$num
∞∞< ?
)
∞∞? @
{
±± "
procSecs1ErrorRaised
µµ  4
(
µµ4 5
string
µµ5 ;
.
µµ; <
Format
µµ< B
(
µµB C

FConstants
µµC M
.
µµM N
err_m_16012
µµN Y
,
µµY Z
byteData
µµ[ c
)
µµc d
)
µµd e
;
µµe f
continue
∂∂  (
;
∂∂( )
}
∑∑ 
else
∏∏  
{
ππ 
m_fTmrT2
ΩΩ  (
.
ΩΩ( )
stop
ΩΩ) -
(
ΩΩ- .
)
ΩΩ. /
;
ΩΩ/ 0
m_fRecvBlock
øø  ,
=
øø- .
new
øø/ 2
FSecs1RecvBlock
øø3 B
(
øøB C
byteData
øøC K
)
øøK L
;
øøL M
}
¿¿ 
}
¡¡ 

needLength
»» "
=
»»# $
m_fRecvBlock
»»% 1
.
»»1 2!
calculateNeedLength
»»2 E
(
»»E F
)
»»F G
;
»»G H
if
…… 
(
…… 

m_fRecvBuf
…… &
.
……& '
length
……' -
>
……. /

needLength
……0 :
)
……: ;
{
   

copyLength
ÀÀ &
=
ÀÀ' (

needLength
ÀÀ) 3
;
ÀÀ3 4
}
ÃÃ 
else
ÕÕ 
{
ŒŒ 

copyLength
œœ &
=
œœ' (

m_fRecvBuf
œœ) 3
.
œœ3 4
length
œœ4 :
;
œœ: ;
}
–– 
m_fRecvBlock
—— $
.
——$ %
input
——% *
(
——* +

m_fRecvBuf
——+ 5
.
——5 6
output
——6 <
(
——< =

copyLength
——= G
)
——G H
)
——H I
;
——I J
m_fTmrT1
ÿÿ  
.
ÿÿ  !
stop
ÿÿ! %
(
ÿÿ% &
)
ÿÿ& '
;
ÿÿ' (
if
ﬂﬂ 
(
ﬂﬂ 
m_fRecvBlock
ﬂﬂ (
.
ﬂﬂ( )*
blockDataCollectionCompleted
ﬂﬂ) E
)
ﬂﬂE F
{
‡‡ 
m_fRecvBlock
‰‰ (
.
‰‰( )
parse
‰‰) .
(
‰‰. /
)
‰‰/ 0
;
‰‰0 1
if
ÎÎ 
(
ÎÎ  
!
ÎÎ  !
m_fRecvBlock
ÎÎ! -
.
ÎÎ- .
validateCheckSum
ÎÎ. >
(
ÎÎ> ?
)
ÎÎ? @
)
ÎÎ@ A
{
ÏÏ 
fResult
ÌÌ  '
=
ÌÌ( )
FResultCode
ÌÌ* 5
.
ÌÌ5 6
Error
ÌÌ6 ;
;
ÌÌ; <
errorMessage
ÓÓ  ,
=
ÓÓ- .

FConstants
ÓÓ/ 9
.
ÓÓ9 :
err_m_16010
ÓÓ: E
;
ÓÓE F
}
ÔÔ 
else
  
if
! #
(
$ %
!
% &
m_fRecvBlock
& 2
.
2 3
validateRbit
3 ?
(
? @
m_fSecs1ToHsms
@ N
.
N O
fSecs1Config
O [
.
[ \
rbit
\ `
)
` a
)
a b
{
ÒÒ 
fResult
ÚÚ  '
=
ÚÚ( )
FResultCode
ÚÚ* 5
.
ÚÚ5 6
Error
ÚÚ6 ;
;
ÚÚ; <
errorMessage
ÛÛ  ,
=
ÛÛ- .
string
ÛÛ/ 5
.
ÛÛ5 6
Format
ÛÛ6 <
(
ÛÛ< =

FConstants
ÛÛ= G
.
ÛÛG H

err_m_0061
ÛÛH R
,
ÛÛR S
$str
ÛÛT [
,
ÛÛ[ \
$str
ÛÛ] d
)
ÛÛd e
;
ÛÛe f
}
ÙÙ 
else
ıı  
if
ıı! #
(
ıı$ %
!
ıı% &
m_fRecvBlock
ıı& 2
.
ıı2 3
validateSessionId
ıı3 D
(
ııD E
m_fSecs1ToHsms
ııE S
.
ııS T
fSecs1Config
ııT `
.
ıı` a
	sessionId
ııa j
)
ııj k
)
ıık l
{
ˆˆ 
fResult
˜˜  '
=
˜˜( )
FResultCode
˜˜* 5
.
˜˜5 6
Error
˜˜6 ;
;
˜˜; <
errorMessage
¯¯  ,
=
¯¯- .
string
¯¯/ 5
.
¯¯5 6
Format
¯¯6 <
(
¯¯< =

FConstants
¯¯= G
.
¯¯G H

err_m_0061
¯¯H R
,
¯¯R S
$str
¯¯T `
,
¯¯` a
$str
¯¯b i
)
¯¯i j
;
¯¯j k
}
˘˘ 
else
˙˙  
if
˙˙! #
(
˙˙$ %
!
˙˙% &
m_fRecvBlockList
˙˙& 6
.
˙˙6 7 
validateInterleave
˙˙7 I
(
˙˙I J
m_fRecvBlock
˙˙J V
)
˙˙V W
)
˙˙W X
{
˚˚ 
fResult
¸¸  '
=
¸¸( )
FResultCode
¸¸* 5
.
¸¸5 6
Error
¸¸6 ;
;
¸¸; <
errorMessage
˝˝  ,
=
˝˝- .

FConstants
˝˝/ 9
.
˝˝9 :
err_m_16008
˝˝: E
;
˝˝E F
}
˛˛ 
else
ˇˇ  
if
ˇˇ! #
(
ˇˇ$ %
!
ˇˇ% &
m_fRecvBlockList
ˇˇ& 6
.
ˇˇ6 7
validateBlockNo
ˇˇ7 F
(
ˇˇF G
m_fRecvBlock
ˇˇG S
)
ˇˇS T
)
ˇˇT U
{
ÄÄ 
fResult
ÅÅ  '
=
ÅÅ( )
FResultCode
ÅÅ* 5
.
ÅÅ5 6
Error
ÅÅ6 ;
;
ÅÅ; <
errorMessage
ÇÇ  ,
=
ÇÇ- .

FConstants
ÇÇ/ 9
.
ÇÇ9 :
err_m_16006
ÇÇ: E
;
ÇÇE F
}
ÉÉ 
else
ÑÑ  
if
ÑÑ! #
(
ÑÑ$ %
!
ÑÑ% &
m_fRecvBlockList
ÑÑ& 6
.
ÑÑ6 7$
validateDuplidateBlock
ÑÑ7 M
(
ÑÑM N
m_fRecvBlock
ÑÑN Z
)
ÑÑZ [
)
ÑÑ[ \
{
ÖÖ 
fResult
ÜÜ  '
=
ÜÜ( )
FResultCode
ÜÜ* 5
.
ÜÜ5 6
Error
ÜÜ6 ;
;
ÜÜ; <
errorMessage
áá  ,
=
áá- .

FConstants
áá/ 9
.
áá9 :
err_m_16005
áá: E
;
ááE F
}
àà 
else
ââ  
{
ää 
fResult
ãã  '
=
ãã( )
FResultCode
ãã* 5
.
ãã5 6
Success
ãã6 =
;
ãã= >
}
åå 

fSecsBlock
êê &
=
êê' (
new
êê) ,

FSecsBlock
êê- 7
(
êê7 8
m_fSecs1ToHsms
ëë  .
,
ëë. /
m_fRecvBlock
íí  ,
.
íí, -
length
íí- 3
,
íí3 4
m_fRecvBlock
ìì  ,
.
ìì, -
	blockData
ìì- 6
,
ìì6 7
m_fRecvBlock
îî  ,
.
îî, -
rbit
îî- 1
,
îî1 2
m_fRecvBlock
ïï  ,
.
ïï, -
	sessionId
ïï- 6
,
ïï6 7
m_fRecvBlock
ññ  ,
.
ññ, -
wbit
ññ- 1
,
ññ1 2
m_fRecvBlock
óó  ,
.
óó, -
stream
óó- 3
,
óó3 4
m_fRecvBlock
òò  ,
.
òò, -
function
òò- 5
,
òò5 6
m_fRecvBlock
ôô  ,
.
ôô, -
ebit
ôô- 1
,
ôô1 2
m_fRecvBlock
öö  ,
.
öö, -
blockNo
öö- 4
,
öö4 5
m_fRecvBlock
õõ  ,
.
õõ, -
systemBytes
õõ- 8
,
õõ8 9
m_fRecvBlock
úú  ,
.
úú, -
body
úú- 1
,
úú1 2
m_fRecvBlock
ùù  ,
.
ùù, -
checkSum
ùù- 5
)
ûû  !
;
ûû! "
m_fSecs1ToHsms
†† *
.
††* +
fEventPusher
††+ 7
.
††7 8
pushSecs1Event
††8 F
(
††F G
new
°°  #*
FSecs1BlockReceivedEventArgs
°°$ @
(
°°@ A
m_fSecs1ToHsms
°°A O
,
°°O P
FEventId
°°Q Y
.
°°Y Z 
Secs1BlockReceived
°°Z l
,
°°l m
fResult
°°n u
,
°°u v
errorMessage°°w É
,°°É Ñ

fSecsBlock°°Ö è
)°°è ê
)
¢¢  !
;
¢¢! "
if
¶¶ 
(
¶¶  
fResult
¶¶  '
==
¶¶( *
FResultCode
¶¶+ 6
.
¶¶6 7
Success
¶¶7 >
)
¶¶> ?
{
ßß 
fSecsDataMessage
®®  0
=
®®1 2
m_fRecvBlockList
®®3 C
.
®®C D
addBlock
®®D L
(
®®L M
m_fRecvBlock
®®M Y
)
®®Y Z
;
®®Z [
sendHandshakeACK
™™  0
(
™™0 1
fSecsDataMessage
™™1 A
)
™™A B
;
™™B C
}
´´ 
else
¨¨  
{
≠≠ 
sendHandshakeNAK
ÆÆ  0
(
ÆÆ0 1
)
ÆÆ1 2
;
ÆÆ2 3
}
ØØ 
m_fRecvBlock
∞∞ (
=
∞∞) *
null
∞∞+ /
;
∞∞/ 0
}
±± 
else
≤≤ 
{
≥≥ 
m_fTmrT1
∑∑ $
.
∑∑$ %
restart
∑∑% ,
(
∑∑, -
(
∑∑- .
int
∑∑. 1
)
∑∑1 2
(
∑∑2 3
m_fSecs1ToHsms
∑∑3 A
.
∑∑A B
fSecs1Config
∑∑B N
.
∑∑N O
	t1Timeout
∑∑O X
*
∑∑Y Z
$num
∑∑[ _
)
∑∑_ `
)
∑∑` a
;
∑∑a b
}
∏∏ 
}
ªª 
else
ºº 
if
ºº 
(
ºº 
m_fSendState
ºº )
==
ºº* ,
FSecs1SendState
ºº- <
.
ºº< =
Enq
ºº= @
)
ºº@ A
{
ΩΩ 
byteData
¿¿  
=
¿¿! "

m_fRecvBuf
¿¿# -
.
¿¿- .
output
¿¿. 4
(
¿¿4 5
)
¿¿5 6
;
¿¿6 7
if
¬¬ 
(
¬¬ 
byteData
¬¬ $
==
¬¬% '
(
¬¬( )
byte
¬¬) -
)
¬¬- .!
FSecs1HandshakeCode
¬¬. A
.
¬¬A B
ENQ
¬¬B E
)
¬¬E F
{
√√ 
m_fSecs1ToHsms
ƒƒ *
.
ƒƒ* +
fEventPusher
ƒƒ+ 7
.
ƒƒ7 8
pushSecs1Event
ƒƒ8 F
(
ƒƒF G
new
≈≈  #.
 FSecs1HandshakeReceivedEventArgs
≈≈$ D
(
≈≈D E
m_fSecs1ToHsms
≈≈E S
,
≈≈S T
FEventId
≈≈U ]
.
≈≈] ^$
Secs1HandshakeReceived
≈≈^ t
,
≈≈t u
FResultCode≈≈v Å
.≈≈Å Ç
Success≈≈Ç â
,≈≈â ä
string≈≈ã ë
.≈≈ë í
Empty≈≈í ó
,≈≈ó ò#
FSecs1HandshakeCode≈≈ô ¨
.≈≈¨ ≠
ENQ≈≈≠ ∞
)≈≈∞ ±
)
∆∆  !
;
∆∆! "
if
ÕÕ 
(
ÕÕ  
!
ÕÕ  !
m_fSecs1ToHsms
ÕÕ! /
.
ÕÕ/ 0
fSecs1Config
ÕÕ0 <
.
ÕÕ< =
rbit
ÕÕ= A
)
ÕÕA B
{
ŒŒ 
m_fTmrT2
““  (
.
““( )
stop
““) -
(
““- .
)
““. /
;
““/ 0
m_fSendState
ŸŸ  ,
=
ŸŸ- .
FSecs1SendState
ŸŸ/ >
.
ŸŸ> ?
	Completed
ŸŸ? H
;
ŸŸH I
m_fSendBlock
‡‡  ,
.
‡‡, -
isRetry
‡‡- 4
=
‡‡5 6
true
‡‡7 ;
;
‡‡; <
m_fRecvState
ÁÁ  ,
=
ÁÁ- .
FSecs1RecvState
ÁÁ/ >
.
ÁÁ> ?
Enq
ÁÁ? B
;
ÁÁB C
sendHandshakeEOT
ÈÈ  0
(
ÈÈ0 1
)
ÈÈ1 2
;
ÈÈ2 3
}
ÍÍ 
}
ÎÎ 
else
ÏÏ 
if
ÏÏ 
(
ÏÏ  !
byteData
ÏÏ! )
==
ÏÏ* ,
(
ÏÏ- .
byte
ÏÏ. 2
)
ÏÏ2 3!
FSecs1HandshakeCode
ÏÏ3 F
.
ÏÏF G
EOT
ÏÏG J
)
ÏÏJ K
{
ÌÌ 
m_fTmrT2
ÒÒ $
.
ÒÒ$ %
stop
ÒÒ% )
(
ÒÒ) *
)
ÒÒ* +
;
ÒÒ+ ,
m_fSendState
¯¯ (
=
¯¯) *
FSecs1SendState
¯¯+ :
.
¯¯: ;
Eot
¯¯; >
;
¯¯> ?
m_fSecs1ToHsms
˙˙ *
.
˙˙* +
fEventPusher
˙˙+ 7
.
˙˙7 8
pushSecs1Event
˙˙8 F
(
˙˙F G
new
˚˚  #.
 FSecs1HandshakeReceivedEventArgs
˚˚$ D
(
˚˚D E
m_fSecs1ToHsms
˚˚E S
,
˚˚S T
FEventId
˚˚U ]
.
˚˚] ^$
Secs1HandshakeReceived
˚˚^ t
,
˚˚t u
FResultCode˚˚v Å
.˚˚Å Ç
Success˚˚Ç â
,˚˚â ä
string˚˚ã ë
.˚˚ë í
Empty˚˚í ó
,˚˚ó ò#
FSecs1HandshakeCode˚˚ô ¨
.˚˚¨ ≠
EOT˚˚≠ ∞
)˚˚∞ ±
)
¸¸  !
;
¸¸! "
	sendBlock
˝˝ %
(
˝˝% &
)
˝˝& '
;
˝˝' (
}
˛˛ 
else
ˇˇ 
{
Ä	Ä	 "
procSecs1ErrorRaised
Å	Å	 0
(
Å	Å	0 1
string
Å	Å	1 7
.
Å	Å	7 8
Format
Å	Å	8 >
(
Å	Å	> ?

FConstants
Å	Å	? I
.
Å	Å	I J
err_m_16001
Å	Å	J U
,
Å	Å	U V
byteData
Å	Å	W _
)
Å	Å	_ `
)
Å	Å	` a
;
Å	Å	a b
}
Ç	Ç	 
}
Ö	Ö	 
else
Ü	Ü	 
if
Ü	Ü	 
(
Ü	Ü	 
m_fSendState
Ü	Ü	 )
==
Ü	Ü	* ,
FSecs1SendState
Ü	Ü	- <
.
Ü	Ü	< =
Eot
Ü	Ü	= @
)
Ü	Ü	@ A
{
á	á	 
byteData
ä	ä	  
=
ä	ä	! "

m_fRecvBuf
ä	ä	# -
.
ä	ä	- .
output
ä	ä	. 4
(
ä	ä	4 5
)
ä	ä	5 6
;
ä	ä	6 7
if
å	å	 
(
å	å	 
byteData
å	å	 $
==
å	å	% '
(
å	å	( )
byte
å	å	) -
)
å	å	- .!
FSecs1HandshakeCode
å	å	. A
.
å	å	A B
ACK
å	å	B E
)
å	å	E F
{
ç	ç	 
m_fTmrT2
ë	ë	 $
.
ë	ë	$ %
stop
ë	ë	% )
(
ë	ë	) *
)
ë	ë	* +
;
ë	ë	+ ,
m_fSendState
ò	ò	 (
=
ò	ò	) *
FSecs1SendState
ò	ò	+ :
.
ò	ò	: ;
	Completed
ò	ò	; D
;
ò	ò	D E
m_fSecs1ToHsms
ö	ö	 *
.
ö	ö	* +
fEventPusher
ö	ö	+ 7
.
ö	ö	7 8
pushSecs1Event
ö	ö	8 F
(
ö	ö	F G
new
õ	õ	  #.
 FSecs1HandshakeReceivedEventArgs
õ	õ	$ D
(
õ	õ	D E
m_fSecs1ToHsms
õ	õ	E S
,
õ	õ	S T
FEventId
õ	õ	U ]
.
õ	õ	] ^$
Secs1HandshakeReceived
õ	õ	^ t
,
õ	õ	t u
FResultCodeõ	õ	v Å
.õ	õ	Å Ç
Successõ	õ	Ç â
,õ	õ	â ä
stringõ	õ	ã ë
.õ	õ	ë í
Emptyõ	õ	í ó
,õ	õ	ó ò#
FSecs1HandshakeCodeõ	õ	ô ¨
.õ	õ	¨ ≠
ACKõ	õ	≠ ∞
)õ	õ	∞ ±
)
ú	ú	  !
;
ú	ú	! "
if
†	†	 
(
†	†	  
m_fSendBlock
†	†	  ,
.
†	†	, -

fBlockList
†	†	- 7
.
†	†	7 8
next
†	†	8 <
(
†	†	< =
)
†	†	= >
)
†	†	> ?
{
°	°	 
m_fSendBlock
•	•	  ,
=
•	•	- .
m_fSendBlock
•	•	/ ;
.
•	•	; <

fBlockList
•	•	< F
.
•	•	F G
fCurrentBlock
•	•	G T
;
•	•	T U
sendHandshakeENQ
¶	¶	  0
(
¶	¶	0 1
)
¶	¶	1 2
;
¶	¶	2 3
}
ß	ß	 
else
®	®	  
{
©	©	 
m_fSecs1ToHsms
≠	≠	  .
.
≠	≠	. /
fEventPusher
≠	≠	/ ;
.
≠	≠	; <
pushSecs1Event
≠	≠	< J
(
≠	≠	J K
new
Æ	Æ	$ ',
FSecs1DataMessageSentEventArgs
Æ	Æ	( F
(
Æ	Æ	F G
m_fSecs1ToHsms
Æ	Æ	G U
,
Æ	Æ	U V
FEventId
Æ	Æ	W _
.
Æ	Æ	_ `"
Secs1DataMessageSent
Æ	Æ	` t
,
Æ	Æ	t u
FResultCodeÆ	Æ	v Å
.Æ	Æ	Å Ç
SuccessÆ	Æ	Ç â
,Æ	Æ	â ä
stringÆ	Æ	ã ë
.Æ	Æ	ë í
EmptyÆ	Æ	í ó
,Æ	Æ	ó ò
m_fSendBlockÆ	Æ	ô •
.Æ	Æ	• ¶

fBlockListÆ	Æ	¶ ∞
.Æ	Æ	∞ ± 
fSecsDataMessageÆ	Æ	± ¡
)Æ	Æ	¡ ¬
)
Ø	Ø	$ %
;
Ø	Ø	% &
m_fSendBlock
∞	∞	  ,
=
∞	∞	- .
null
∞	∞	/ 3
;
∞	∞	3 4
}
±	±	 
}
≤	≤	 
else
≥	≥	 
if
≥	≥	 
(
≥	≥	  !
byteData
≥	≥	! )
==
≥	≥	* ,
(
≥	≥	- .
byte
≥	≥	. 2
)
≥	≥	2 3!
FSecs1HandshakeCode
≥	≥	3 F
.
≥	≥	F G
NAK
≥	≥	G J
)
≥	≥	J K
{
¥	¥	 
m_fTmrT2
∏	∏	 $
.
∏	∏	$ %
stop
∏	∏	% )
(
∏	∏	) *
)
∏	∏	* +
;
∏	∏	+ ,
m_fSecs1ToHsms
º	º	 *
.
º	º	* +
fEventPusher
º	º	+ 7
.
º	º	7 8
pushSecs1Event
º	º	8 F
(
º	º	F G
new
Ω	Ω	  #.
 FSecs1HandshakeReceivedEventArgs
Ω	Ω	$ D
(
Ω	Ω	D E
m_fSecs1ToHsms
Ω	Ω	E S
,
Ω	Ω	S T
FEventId
Ω	Ω	U ]
.
Ω	Ω	] ^$
Secs1HandshakeReceived
Ω	Ω	^ t
,
Ω	Ω	t u
FResultCodeΩ	Ω	v Å
.Ω	Ω	Å Ç
SuccessΩ	Ω	Ç â
,Ω	Ω	â ä
stringΩ	Ω	ã ë
.Ω	Ω	ë í
EmptyΩ	Ω	í ó
,Ω	Ω	ó ò#
FSecs1HandshakeCodeΩ	Ω	ô ¨
.Ω	Ω	¨ ≠
NAKΩ	Ω	≠ ∞
)Ω	Ω	∞ ±
)
æ	æ	  !
;
æ	æ	! "
retrySendBlock
¬	¬	 *
(
¬	¬	* +
)
¬	¬	+ ,
;
¬	¬	, -
}
√	√	 
else
ƒ	ƒ	 
{
≈	≈	 "
procSecs1ErrorRaised
∆	∆	 0
(
∆	∆	0 1
string
∆	∆	1 7
.
∆	∆	7 8
Format
∆	∆	8 >
(
∆	∆	> ?

FConstants
∆	∆	? I
.
∆	∆	I J
err_m_16001
∆	∆	J U
,
∆	∆	U V
byteData
∆	∆	W _
)
∆	∆	_ `
)
∆	∆	` a
;
∆	∆	a b
}
«	«	 
}
 	 	 
else
À	À	 
{
Ã	Ã	 
byteData
œ	œ	  
=
œ	œ	! "

m_fRecvBuf
œ	œ	# -
.
œ	œ	- .
output
œ	œ	. 4
(
œ	œ	4 5
)
œ	œ	5 6
;
œ	œ	6 7
if
—	—	 
(
—	—	 
byteData
—	—	 $
==
—	—	% '
(
—	—	( )
byte
—	—	) -
)
—	—	- .!
FSecs1HandshakeCode
—	—	. A
.
—	—	A B
ENQ
—	—	B E
)
—	—	E F
{
“	“	 
m_fRecvState
÷	÷	 (
=
÷	÷	) *
FSecs1RecvState
÷	÷	+ :
.
÷	÷	: ;
Enq
÷	÷	; >
;
÷	÷	> ?
m_fSecs1ToHsms
ÿ	ÿ	 *
.
ÿ	ÿ	* +
fEventPusher
ÿ	ÿ	+ 7
.
ÿ	ÿ	7 8
pushSecs1Event
ÿ	ÿ	8 F
(
ÿ	ÿ	F G
new
Ÿ	Ÿ	  #.
 FSecs1HandshakeReceivedEventArgs
Ÿ	Ÿ	$ D
(
Ÿ	Ÿ	D E
m_fSecs1ToHsms
Ÿ	Ÿ	E S
,
Ÿ	Ÿ	S T
FEventId
Ÿ	Ÿ	U ]
.
Ÿ	Ÿ	] ^$
Secs1HandshakeReceived
Ÿ	Ÿ	^ t
,
Ÿ	Ÿ	t u
FResultCodeŸ	Ÿ	v Å
.Ÿ	Ÿ	Å Ç
SuccessŸ	Ÿ	Ç â
,Ÿ	Ÿ	â ä
stringŸ	Ÿ	ã ë
.Ÿ	Ÿ	ë í
EmptyŸ	Ÿ	í ó
,Ÿ	Ÿ	ó ò#
FSecs1HandshakeCodeŸ	Ÿ	ô ¨
.Ÿ	Ÿ	¨ ≠
ENQŸ	Ÿ	≠ ∞
)Ÿ	Ÿ	∞ ±
)
⁄	⁄	  !
;
⁄	⁄	! "
sendHandshakeEOT
€	€	 ,
(
€	€	, -
)
€	€	- .
;
€	€	. /
}
‹	‹	 
else
›	›	 
{
ﬁ	ﬁ	 "
procSecs1ErrorRaised
ﬂ	ﬂ	 0
(
ﬂ	ﬂ	0 1
string
ﬂ	ﬂ	1 7
.
ﬂ	ﬂ	7 8
Format
ﬂ	ﬂ	8 >
(
ﬂ	ﬂ	> ?

FConstants
ﬂ	ﬂ	? I
.
ﬂ	ﬂ	I J
err_m_16001
ﬂ	ﬂ	J U
,
ﬂ	ﬂ	U V
byteData
ﬂ	ﬂ	W _
)
ﬂ	ﬂ	_ `
)
ﬂ	ﬂ	` a
;
ﬂ	ﬂ	a b
}
‡	‡	 
}
„	„	 
}
‰	‰	 
}
Â	Â	 
catch
Ê	Ê	 
(
Ê	Ê	 
	Exception
Ê	Ê	 
ex
Ê	Ê	 
)
Ê	Ê	  
{
Á	Á	 
FDebug
Ë	Ë	 
.
Ë	Ë	 
writeLog
Ë	Ë	 
(
Ë	Ë	  
ex
Ë	Ë	  "
)
Ë	Ë	" #
;
Ë	Ë	# $
}
È	È	 
finally
Í	Í	 
{
Î	Î	 

fSecsBlock
Ï	Ï	 
=
Ï	Ï	 
null
Ï	Ï	 !
;
Ï	Ï	! "
fSecsDataMessage
Ì	Ì	  
=
Ì	Ì	! "
null
Ì	Ì	# '
;
Ì	Ì	' (
m_fMainSync
Ò	Ò	 
.
Ò	Ò	 
set
Ò	Ò	 
(
Ò	Ò	  
)
Ò	Ò	  !
;
Ò	Ò	! "
}
Ú	Ú	 
}
Û	Û	 	
private
˜	˜	 
void
˜	˜	 &
m_fSerial_SerialDataSent
˜	˜	 -
(
˜	˜	- .
object
¯	¯	 
sender
¯	¯	 
,
¯	¯	 &
FSerialDataSentEventArgs
˘	˘	 $
e
˘	˘	% &
)
˙	˙	 
{
˚	˚	 	%
FSecs1HandshakeSendData
¸	¸	 #
fHandshakeData
¸	¸	$ 2
=
¸	¸	3 4
null
¸	¸	5 9
;
¸	¸	9 :
try
˛	˛	 
{
ˇ	ˇ	 
m_fMainSync
Ä
Ä
 
.
Ä
Ä
 
wait
Ä
Ä
  
(
Ä
Ä
  !
)
Ä
Ä
! "
;
Ä
Ä
" #
if
Ñ
Ñ
 
(
Ñ
Ñ
 
e
Ñ
Ñ
 
.
Ñ
Ñ
 
fData
Ñ
Ñ
 
.
Ñ
Ñ
 
state
Ñ
Ñ
 !
is
Ñ
Ñ
" $%
FSecs1HandshakeSendData
Ñ
Ñ
% <
)
Ñ
Ñ
< =
{
Ö
Ö
 
fHandshakeData
à
à
 "
=
à
à
# $
(
à
à
% &%
FSecs1HandshakeSendData
à
à
& =
)
à
à
= >
e
à
à
> ?
.
à
à
? @
fData
à
à
@ E
.
à
à
E F
state
à
à
F K
;
à
à
K L
if
ä
ä
 
(
ä
ä
 
fHandshakeData
ä
ä
 &
.
ä
ä
& '
fHandshakeCode
ä
ä
' 5
==
ä
ä
6 8!
FSecs1HandshakeCode
ä
ä
9 L
.
ä
ä
L M
ENQ
ä
ä
M P
)
ä
ä
P Q
{
ã
ã
 
m_fSecs1ToHsms
é
é
 &
.
é
é
& '
fEventPusher
é
é
' 3
.
é
é
3 4
pushSecs1Event
é
é
4 B
(
é
é
B C
new
è
è
 *
FSecs1HandshakeSentEventArgs
è
è
  <
(
è
è
< =
m_fSecs1ToHsms
è
è
= K
,
è
è
K L
FEventId
è
è
M U
.
è
è
U V 
Secs1HandshakeSent
è
è
V h
,
è
è
h i
FResultCode
è
è
j u
.
è
è
u v
Success
è
è
v }
,
è
è
} ~
stringè
è
 Ö
.è
è
Ö Ü
Emptyè
è
Ü ã
,è
è
ã å#
FSecs1HandshakeCodeè
è
ç †
.è
è
† °
ENQè
è
° §
)è
è
§ •
)
ê
ê
 
;
ê
ê
 
}
ì
ì
 
else
î
î
 
if
î
î
 
(
î
î
 
fHandshakeData
î
î
 +
.
î
î
+ ,
fHandshakeCode
î
î
, :
==
î
î
; =!
FSecs1HandshakeCode
î
î
> Q
.
î
î
Q R
EOT
î
î
R U
)
î
î
U V
{
ï
ï
 
m_fSecs1ToHsms
ò
ò
 &
.
ò
ò
& '
fEventPusher
ò
ò
' 3
.
ò
ò
3 4
pushSecs1Event
ò
ò
4 B
(
ò
ò
B C
new
ô
ô
 *
FSecs1HandshakeSentEventArgs
ô
ô
  <
(
ô
ô
< =
m_fSecs1ToHsms
ô
ô
= K
,
ô
ô
K L
FEventId
ô
ô
M U
.
ô
ô
U V 
Secs1HandshakeSent
ô
ô
V h
,
ô
ô
h i
FResultCode
ô
ô
j u
.
ô
ô
u v
Success
ô
ô
v }
,
ô
ô
} ~
stringô
ô
 Ö
.ô
ô
Ö Ü
Emptyô
ô
Ü ã
,ô
ô
ã å#
FSecs1HandshakeCodeô
ô
ç †
.ô
ô
† °
EOTô
ô
° §
)ô
ô
§ •
)
ö
ö
 
;
ö
ö
 
}
ù
ù
 
else
û
û
 
if
û
û
 
(
û
û
 
fHandshakeData
û
û
 +
.
û
û
+ ,
fHandshakeCode
û
û
, :
==
û
û
; =!
FSecs1HandshakeCode
û
û
> Q
.
û
û
Q R
ACK
û
û
R U
)
û
û
U V
{
ü
ü
 
m_fSecs1ToHsms
¢
¢
 &
.
¢
¢
& '
fEventPusher
¢
¢
' 3
.
¢
¢
3 4
pushSecs1Event
¢
¢
4 B
(
¢
¢
B C
new
£
£
 *
FSecs1HandshakeSentEventArgs
£
£
  <
(
£
£
< =
m_fSecs1ToHsms
£
£
= K
,
£
£
K L
FEventId
£
£
M U
.
£
£
U V 
Secs1HandshakeSent
£
£
V h
,
£
£
h i
FResultCode
£
£
j u
.
£
£
u v
Success
£
£
v }
,
£
£
} ~
string£
£
 Ö
.£
£
Ö Ü
Empty£
£
Ü ã
,£
£
ã å#
FSecs1HandshakeCode£
£
ç †
.£
£
† °
ACK£
£
° §
)£
£
§ •
)
§
§
 
;
§
§
 
if
¶
¶
 
(
¶
¶
 
fHandshakeData
¶
¶
 *
.
¶
¶
* +!
hasSecsDataMesssage
¶
¶
+ >
)
¶
¶
> ?
{
ß
ß
 
m_fSecs1ToHsms
®
®
 *
.
®
®
* +
fEventPusher
®
®
+ 7
.
®
®
7 8
pushSecs1Event
®
®
8 F
(
®
®
F G
new
©
©
  #0
"FSecs1DataMessageReceivedEventArgs
©
©
$ F
(
©
©
F G
m_fSecs1ToHsms
™
™
$ 2
,
™
™
2 3
FEventId
´
´
$ ,
.
´
´
, -&
Secs1DataMessageReceived
´
´
- E
,
´
´
E F
FResultCode
¨
¨
$ /
.
¨
¨
/ 0
Success
¨
¨
0 7
,
¨
¨
7 8
string
≠
≠
$ *
.
≠
≠
* +
Empty
≠
≠
+ 0
,
≠
≠
0 1
fHandshakeData
Æ
Æ
$ 2
.
Æ
Æ
2 3
fSecsDataMessage
Æ
Æ
3 C
)
Ø
Ø
$ %
)
∞
∞
  !
;
∞
∞
! "
if
¥
¥
 
(
¥
¥
  
m_fSecs1ToHsms
¥
¥
  .
.
¥
¥
. /,
isSecs1InterceptingDataMessage
¥
¥
/ M
(
¥
¥
M N
fHandshakeData
¥
¥
N \
.
¥
¥
\ ]
fSecsDataMessage
¥
¥
] m
.
¥
¥
m n
stream
¥
¥
n t
,
¥
¥
t u
fHandshakeData¥
¥
v Ñ
.¥
¥
Ñ Ö 
fSecsDataMessage¥
¥
Ö ï
.¥
¥
ï ñ
function¥
¥
ñ û
)¥
¥
û ü
)¥
¥
ü †
{
µ
µ
 
m_fSecs1ToHsms
∂
∂
  .
.
∂
∂
. /
fEventPusher
∂
∂
/ ;
.
∂
∂
; <
pushSecs1Event
∂
∂
< J
(
∂
∂
J K
new
∑
∑
$ '<
.FSecs1InterceptingDataMessageReceivedEventArgs
∑
∑
( V
(
∑
∑
V W
m_fSecs1ToHsms
∏
∏
( 6
,
∏
∏
6 7
FEventId
π
π
( 0
.
π
π
0 12
$Secs1InterceptingDataMessageReceived
π
π
1 U
,
π
π
U V
FResultCode
∫
∫
( 3
.
∫
∫
3 4
Success
∫
∫
4 ;
,
∫
∫
; <
string
ª
ª
( .
.
ª
ª
. /
Empty
ª
ª
/ 4
,
ª
ª
4 5
fHandshakeData
º
º
( 6
.
º
º
6 7
fSecsDataMessage
º
º
7 G
)
Ω
Ω
( )
)
æ
æ
  !
;
æ
æ
! "
}
ø
ø
 
}
¿
¿
 
}
√
√
 
else
ƒ
ƒ
 
if
ƒ
ƒ
 
(
ƒ
ƒ
 
fHandshakeData
ƒ
ƒ
 +
.
ƒ
ƒ
+ ,
fHandshakeCode
ƒ
ƒ
, :
==
ƒ
ƒ
; =!
FSecs1HandshakeCode
ƒ
ƒ
> Q
.
ƒ
ƒ
Q R
NAK
ƒ
ƒ
R U
)
ƒ
ƒ
U V
{
≈
≈
 
m_fSecs1ToHsms
»
»
 &
.
»
»
& '
fEventPusher
»
»
' 3
.
»
»
3 4
pushSecs1Event
»
»
4 B
(
»
»
B C
new
…
…
 *
FSecs1HandshakeSentEventArgs
…
…
  <
(
…
…
< =
m_fSecs1ToHsms
…
…
= K
,
…
…
K L
FEventId
…
…
M U
.
…
…
U V 
Secs1HandshakeSent
…
…
V h
,
…
…
h i
FResultCode
…
…
j u
.
…
…
u v
Success
…
…
v }
,
…
…
} ~
string…
…
 Ö
.…
…
Ö Ü
Empty…
…
Ü ã
,…
…
ã å#
FSecs1HandshakeCode…
…
ç †
.…
…
† °
NAK…
…
° §
)…
…
§ •
)
 
 
 
;
 
 
 
}
Õ
Õ
 
}
–
–
 
else
—
—
 
if
—
—
 
(
—
—
 
e
—
—
 
.
—
—
 
fData
—
—
  
.
—
—
  !
state
—
—
! &
is
—
—
' )

FSecsBlock
—
—
* 4
)
—
—
4 5
{
“
“
 
m_fSecs1ToHsms
’
’
 "
.
’
’
" #
fEventPusher
’
’
# /
.
’
’
/ 0
pushSecs1Event
’
’
0 >
(
’
’
> ?
new
÷
÷
 &
FSecs1BlockSentEventArgs
÷
÷
 4
(
÷
÷
4 5
m_fSecs1ToHsms
÷
÷
5 C
,
÷
÷
C D
FEventId
÷
÷
E M
.
÷
÷
M N
Secs1BlockSent
÷
÷
N \
,
÷
÷
\ ]
FResultCode
÷
÷
^ i
.
÷
÷
i j
Success
÷
÷
j q
,
÷
÷
q r
string
÷
÷
s y
.
÷
÷
y z
Empty
÷
÷
z 
,÷
÷
 Ä
(÷
÷
Å Ç

FSecsBlock÷
÷
Ç å
)÷
÷
å ç
e÷
÷
ç é
.÷
÷
é è
fData÷
÷
è î
.÷
÷
î ï
state÷
÷
ï ö
)÷
÷
ö õ
)
◊
◊
 
;
◊
◊
 
}
⁄
⁄
 
}
€
€
 
catch
‹
‹
 
(
‹
‹
 
	Exception
‹
‹
 
ex
‹
‹
 
)
‹
‹
  
{
›
›
 
FDebug
ﬁ
ﬁ
 
.
ﬁ
ﬁ
 
writeLog
ﬁ
ﬁ
 
(
ﬁ
ﬁ
  
ex
ﬁ
ﬁ
  "
)
ﬁ
ﬁ
" #
;
ﬁ
ﬁ
# $
}
ﬂ
ﬂ
 
finally
‡
‡
 
{
·
·
 
fHandshakeData
‚
‚
 
=
‚
‚
  
null
‚
‚
! %
;
‚
‚
% &
m_fMainSync
Ê
Ê
 
.
Ê
Ê
 
set
Ê
Ê
 
(
Ê
Ê
  
)
Ê
Ê
  !
;
Ê
Ê
! "
}
Á
Á
 
}
Ë
Ë
 	
private
Ï
Ï
 
void
Ï
Ï
 ,
m_fSerial_SerialDataSendFailed
Ï
Ï
 3
(
Ï
Ï
3 4
object
Ì
Ì
 
sender
Ì
Ì
 
,
Ì
Ì
 ,
FSerialDataSendFailedEventArgs
Ó
Ó
 *
e
Ó
Ó
+ ,
)
Ô
Ô
 
{


 	%
FSecs1HandshakeSendData
Ò
Ò
 #
fHandshakeData
Ò
Ò
$ 2
=
Ò
Ò
3 4
null
Ò
Ò
5 9
;
Ò
Ò
9 :
try
Û
Û
 
{
Ù
Ù
 
m_fMainSync
ı
ı
 
.
ı
ı
 
wait
ı
ı
  
(
ı
ı
  !
)
ı
ı
! "
;
ı
ı
" #
if
˘
˘
 
(
˘
˘
 
e
˘
˘
 
.
˘
˘
 
fData
˘
˘
 
.
˘
˘
 
state
˘
˘
 !
is
˘
˘
" $%
FSecs1HandshakeSendData
˘
˘
% <
)
˘
˘
< =
{
˙
˙
 
fHandshakeData
˝
˝
 "
=
˝
˝
# $
(
˝
˝
% &%
FSecs1HandshakeSendData
˝
˝
& =
)
˝
˝
= >
e
˝
˝
> ?
.
˝
˝
? @
fData
˝
˝
@ E
.
˝
˝
E F
state
˝
˝
F K
;
˝
˝
K L
if
ˇ
ˇ
 
(
ˇ
ˇ
 
fHandshakeData
ˇ
ˇ
 &
.
ˇ
ˇ
& '
fHandshakeCode
ˇ
ˇ
' 5
==
ˇ
ˇ
6 8!
FSecs1HandshakeCode
ˇ
ˇ
9 L
.
ˇ
ˇ
L M
ENQ
ˇ
ˇ
M P
)
ˇ
ˇ
P Q
{
ÄÄ 
m_fSecs1ToHsms
ÉÉ &
.
ÉÉ& '
fEventPusher
ÉÉ' 3
.
ÉÉ3 4
pushSecs1Event
ÉÉ4 B
(
ÉÉB C
new
ÑÑ *
FSecs1HandshakeSentEventArgs
ÑÑ  <
(
ÑÑ< =
m_fSecs1ToHsms
ÑÑ= K
,
ÑÑK L
FEventId
ÑÑM U
.
ÑÑU V 
Secs1HandshakeSent
ÑÑV h
,
ÑÑh i
FResultCode
ÑÑj u
.
ÑÑu v
Error
ÑÑv {
,
ÑÑ{ |
e
ÑÑ} ~
.
ÑÑ~ 
messageÑÑ Ü
,ÑÑÜ á#
FSecs1HandshakeCodeÑÑà õ
.ÑÑõ ú
ENQÑÑú ü
)ÑÑü †
)
ÖÖ 
;
ÖÖ 
}
àà 
else
ââ 
if
ââ 
(
ââ 
fHandshakeData
ââ +
.
ââ+ ,
fHandshakeCode
ââ, :
==
ââ; =!
FSecs1HandshakeCode
ââ> Q
.
ââQ R
EOT
ââR U
)
ââU V
{
ää 
m_fSecs1ToHsms
çç &
.
çç& '
fEventPusher
çç' 3
.
çç3 4
pushSecs1Event
çç4 B
(
ççB C
new
éé *
FSecs1HandshakeSentEventArgs
éé  <
(
éé< =
m_fSecs1ToHsms
éé= K
,
ééK L
FEventId
ééM U
.
ééU V 
Secs1HandshakeSent
ééV h
,
ééh i
FResultCode
ééj u
.
ééu v
Error
éév {
,
éé{ |
e
éé} ~
.
éé~ 
messageéé Ü
,ééÜ á#
FSecs1HandshakeCodeééà õ
.ééõ ú
EOTééú ü
)ééü †
)
èè 
;
èè 
}
íí 
else
ìì 
if
ìì 
(
ìì 
fHandshakeData
ìì +
.
ìì+ ,
fHandshakeCode
ìì, :
==
ìì; =!
FSecs1HandshakeCode
ìì> Q
.
ììQ R
ACK
ììR U
)
ììU V
{
îî 
m_fSecs1ToHsms
óó &
.
óó& '
fEventPusher
óó' 3
.
óó3 4
pushSecs1Event
óó4 B
(
óóB C
new
òò *
FSecs1HandshakeSentEventArgs
òò  <
(
òò< =
m_fSecs1ToHsms
òò= K
,
òòK L
FEventId
òòM U
.
òòU V 
Secs1HandshakeSent
òòV h
,
òòh i
FResultCode
òòj u
.
òòu v
Error
òòv {
,
òò{ |
e
òò} ~
.
òò~ 
messageòò Ü
,òòÜ á#
FSecs1HandshakeCodeòòà õ
.òòõ ú
ACKòòú ü
)òòü †
)
ôô 
;
ôô 
if
õõ 
(
õõ 
fHandshakeData
õõ *
.
õõ* +!
hasSecsDataMesssage
õõ+ >
)
õõ> ?
{
úú 
m_fSecs1ToHsms
ùù *
.
ùù* +
fEventPusher
ùù+ 7
.
ùù7 8
pushSecs1Event
ùù8 F
(
ùùF G
new
ûû  #0
"FSecs1DataMessageReceivedEventArgs
ûû$ F
(
ûûF G
m_fSecs1ToHsms
ûûG U
,
ûûU V
FEventId
ûûW _
.
ûû_ `&
Secs1DataMessageReceived
ûû` x
,
ûûx y
FResultCodeûûz Ö
.ûûÖ Ü
ErrorûûÜ ã
,ûûã å
stringûûç ì
.ûûì î
Formatûûî ö
(ûûö õ

FConstantsûûõ •
.ûû• ¶

err_m_0062ûû¶ ∞
,ûû∞ ±
$strûû≤ ∑
)ûû∑ ∏
,ûû∏ π
fHandshakeDataûû∫ »
.ûû» … 
fSecsDataMessageûû… Ÿ
)ûûŸ ⁄
)
üü  !
;
üü! "
}
†† 
}
££ 
else
§§ 
if
§§ 
(
§§ 
fHandshakeData
§§ +
.
§§+ ,
fHandshakeCode
§§, :
==
§§; =!
FSecs1HandshakeCode
§§> Q
.
§§Q R
NAK
§§R U
)
§§U V
{
•• 
m_fSecs1ToHsms
®® &
.
®®& '
fEventPusher
®®' 3
.
®®3 4
pushSecs1Event
®®4 B
(
®®B C
new
©© *
FSecs1HandshakeSentEventArgs
©©  <
(
©©< =
m_fSecs1ToHsms
©©= K
,
©©K L
FEventId
©©M U
.
©©U V 
Secs1HandshakeSent
©©V h
,
©©h i
FResultCode
©©j u
.
©©u v
Error
©©v {
,
©©{ |
e
©©} ~
.
©©~ 
message©© Ü
,©©Ü á#
FSecs1HandshakeCode©©à õ
.©©õ ú
NAK©©ú ü
)©©ü †
)
™™ 
;
™™ 
}
≠≠ 
}
∞∞ 
else
±± 
if
±± 
(
±± 
e
±± 
.
±± 
fData
±±  
.
±±  !
state
±±! &
is
±±' )

FSecsBlock
±±* 4
)
±±4 5
{
≤≤ 
m_fSecs1ToHsms
µµ "
.
µµ" #
fEventPusher
µµ# /
.
µµ/ 0
pushSecs1Event
µµ0 >
(
µµ> ?
new
∂∂ &
FSecs1BlockSentEventArgs
∂∂ 4
(
∂∂4 5
m_fSecs1ToHsms
∂∂5 C
,
∂∂C D
FEventId
∂∂E M
.
∂∂M N
Secs1BlockSent
∂∂N \
,
∂∂\ ]
FResultCode
∂∂^ i
.
∂∂i j
Error
∂∂j o
,
∂∂o p
e
∂∂q r
.
∂∂r s
message
∂∂s z
,
∂∂z {
(
∂∂| }

FSecsBlock∂∂} á
)∂∂á à
e∂∂à â
.∂∂â ä
fData∂∂ä è
.∂∂è ê
state∂∂ê ï
)∂∂ï ñ
)
∑∑ 
;
∑∑ 
}
ææ 
}
øø 
catch
¿¿ 
(
¿¿ 
	Exception
¿¿ 
ex
¿¿ 
)
¿¿  
{
¡¡ 
FDebug
¬¬ 
.
¬¬ 
writeLog
¬¬ 
(
¬¬  
ex
¬¬  "
)
¬¬" #
;
¬¬# $
}
√√ 
finally
ƒƒ 
{
≈≈ 
m_fMainSync
∆∆ 
.
∆∆ 
set
∆∆ 
(
∆∆  
)
∆∆  !
;
∆∆! "
}
«« 
}
»» 	
private
ÃÃ 
void
ÃÃ )
m_fSerial_SerialErrorRaised
ÃÃ 0
(
ÃÃ0 1
object
ÕÕ 
sender
ÕÕ 
,
ÕÕ )
FSerialErrorRaisedEventArgs
ŒŒ '
e
ŒŒ( )
)
œœ 
{
–– 	
try
—— 
{
““ "
procSecs1ErrorRaised
”” $
(
””$ %
e
””% &
.
””& '
	exception
””' 0
)
””0 1
;
””1 2
}
‘‘ 
catch
’’ 
(
’’ 
	Exception
’’ 
ex
’’ 
)
’’  
{
÷÷ 
FDebug
◊◊ 
.
◊◊ 
writeLog
◊◊ 
(
◊◊  
ex
◊◊  "
)
◊◊" #
;
◊◊# $
}
ÿÿ 
finally
ŸŸ 
{
⁄⁄ 
}
‹‹ 
}
›› 	
}
„„ 
}‰‰ ¡+
D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\SECS1\c_FSecs1RecvBuffer.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FSecs1RecvBuffer #
:# $
IDisposable% 0
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
List 
< 
byte 
> 
m_data !
=" #
null$ (
;( )
public"" 
FSecs1RecvBuffer"" 
(""  
)## 
{$$ 	
m_data%% 
=%% 
new%% 
List%% 
<%% 
byte%% "
>%%" #
(%%# $
)%%$ %
;%%% &
}&& 	
~** 	
FSecs1RecvBuffer**	 
(** 
)++ 
{,, 	
	myDispose-- 
(-- 
false-- 
)-- 
;-- 
}.. 	
	protected22 
void22 
	myDispose22  
(22  !
bool33 
	disposing33 
)44 
{55 	
if66 
(66 
!66 

m_disposed66 
)66 
{77 
if88 
(88 
	disposing88 
)88 
{99 
m_data:: 
=:: 
null:: !
;::! "
};; 

m_disposed== 
=== 
true== !
;==! "
}>> 
}?? 	
publicGG 
voidGG 
DisposeGG 
(GG 
)HH 
{II 	
	myDisposeJJ 
(JJ 
trueJJ 
)JJ 
;JJ 
GCKK 
.KK 
SuppressFinalizeKK 
(KK  
thisKK  $
)KK$ %
;KK% &
}LL 	
publicTT 
intTT 
lengthTT 
{UU 	
getVV 
{WW 
tryXX 
{YY 
returnZZ 
m_dataZZ !
.ZZ! "
CountZZ" '
;ZZ' (
}[[ 
catch\\ 
(\\ 
	Exception\\  
ex\\! #
)\\# $
{]] 
FDebug^^ 
.^^ 
throwException^^ )
(^^) *
ex^^* ,
)^^, -
;^^- .
}__ 
finally`` 
{aa 
}cc 
returndd 
$numdd 
;dd 
}ee 
}ff 	
publicnn 
voidnn 
inputnn 
(nn 
byteoo 
[oo 
]oo 
dataoo 
)pp 
{qq 	
tryrr 
{ss 
m_datatt 
.tt 
AddRangett 
(tt  
datatt  $
)tt$ %
;tt% &
}uu 
catchvv 
(vv 
	Exceptionvv 
exvv 
)vv  
{ww 
FDebugxx 
.xx 
throwExceptionxx %
(xx% &
exxx& (
)xx( )
;xx) *
}yy 
finallyzz 
{{{ 
}}} 
}~~ 	
public
ÇÇ 
byte
ÇÇ 
output
ÇÇ 
(
ÇÇ 
)
ÉÉ 
{
ÑÑ 	
byte
ÖÖ 
data
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
try
áá 
{
àà 
data
ââ 
=
ââ 
m_data
ââ 
[
ââ 
$num
ââ 
]
ââ  
;
ââ  !
m_data
ää 
.
ää 
RemoveAt
ää 
(
ää  
$num
ää  !
)
ää! "
;
ää" #
return
åå 
data
åå 
;
åå 
}
çç 
catch
éé 
(
éé 
	Exception
éé 
ex
éé 
)
éé  
{
èè 
FDebug
êê 
.
êê 
throwException
êê %
(
êê% &
ex
êê& (
)
êê( )
;
êê) *
}
ëë 
finally
íí 
{
ìì 
}
ïï 
return
ññ 
$num
ññ 
;
ññ 
}
óó 	
public
õõ 
byte
õõ 
[
õõ 
]
õõ 
output
õõ 
(
õõ 
int
úú 
length
úú 
)
ùù 
{
ûû 	
byte
üü 
[
üü 
]
üü 
data
üü 
=
üü 
null
üü 
;
üü 
try
°° 
{
¢¢ 
data
££ 
=
££ 
m_data
££ 
.
££ 
GetRange
££ &
(
££& '
$num
££' (
,
££( )
length
££* 0
)
££0 1
.
££1 2
ToArray
££2 9
(
££9 :
)
££: ;
;
££; <
m_data
§§ 
.
§§ 
RemoveRange
§§ "
(
§§" #
$num
§§# $
,
§§$ %
length
§§& ,
)
§§, -
;
§§- .
return
¶¶ 
data
¶¶ 
;
¶¶ 
}
ßß 
catch
®® 
(
®® 
	Exception
®® 
ex
®® 
)
®®  
{
©© 
FDebug
™™ 
.
™™ 
throwException
™™ %
(
™™% &
ex
™™& (
)
™™( )
;
™™) *
}
´´ 
finally
¨¨ 
{
≠≠ 
}
ØØ 
return
∞∞ 
null
∞∞ 
;
∞∞ 
}
±± 	
}
∑∑ 
}∏∏ €+
ÜD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\SECS1\c_FSecs1HandshakeSendData.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class #
FSecs1HandshakeSendData *
:* +
IDisposable, 7
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1HandshakeCode #
m_fHandshakeCode$ 4
=5 6
FSecs1HandshakeCode7 J
.J K
ENQK N
;N O
private 
FSecsDataMessage  
m_fSecsDataMessage! 3
=4 5
null6 :
;: ;
public## #
FSecs1HandshakeSendData## &
(##& '
FSecs1HandshakeCode$$ 
fHandshakeCode$$  .
)%% 
{&& 	
m_fHandshakeCode'' 
='' 
fHandshakeCode'' -
;''- .
}(( 	
public,, #
FSecs1HandshakeSendData,, &
(,,& '
FSecs1HandshakeCode-- 
fHandshakeCode--  .
,--. /
FSecsDataMessage.. 
fSecsDataMessage.. -
)// 
{00 	
m_fHandshakeCode11 
=11 
fHandshakeCode11 -
;11- .
m_fSecsDataMessage22 
=22  
fSecsDataMessage22! 1
;221 2
}33 	
~77 	#
FSecs1HandshakeSendData77	  
(77  !
)88 
{99 	
	myDispose:: 
(:: 
false:: 
):: 
;:: 
};; 	
	protected?? 
void?? 
	myDispose??  
(??  !
bool@@ 
	disposing@@ 
)AA 
{BB 	
ifCC 
(CC 
!CC 

m_disposedCC 
)CC 
{DD 
ifEE 
(EE 
	disposingEE 
)EE 
{FF 
m_fSecsDataMessageGG &
=GG' (
nullGG) -
;GG- .
}HH 

m_disposedJJ 
=JJ 
trueJJ !
;JJ! "
}KK 
}LL 	
publicTT 
voidTT 
DisposeTT 
(TT 
)UU 
{VV 	
	myDisposeWW 
(WW 
trueWW 
)WW 
;WW 
GCXX 
.XX 
SuppressFinalizeXX 
(XX  
thisXX  $
)XX$ %
;XX% &
}YY 	
publicaa 
FSecs1HandshakeCodeaa "
fHandshakeCodeaa# 1
{bb 	
getcc 
{dd 
tryee 
{ff 
returngg 
m_fHandshakeCodegg +
;gg+ ,
}hh 
catchii 
(ii 
	Exceptionii  
exii! #
)ii# $
{jj 
FDebugkk 
.kk 
throwExceptionkk )
(kk) *
exkk* ,
)kk, -
;kk- .
}ll 
finallymm 
{nn 
}pp 
returnqq 
FSecs1HandshakeCodeqq *
.qq* +
ENQqq+ .
;qq. /
}rr 
}ss 	
publicww 
FSecsDataMessageww 
fSecsDataMessageww  0
{xx 	
getyy 
{zz 
try{{ 
{|| 
return}} 
m_fSecsDataMessage}} -
;}}- .
}~~ 
catch 
( 
	Exception  
ex! #
)# $
{
ÄÄ 
FDebug
ÅÅ 
.
ÅÅ 
throwException
ÅÅ )
(
ÅÅ) *
ex
ÅÅ* ,
)
ÅÅ, -
;
ÅÅ- .
}
ÇÇ 
finally
ÉÉ 
{
ÑÑ 
}
ÜÜ 
return
áá 
null
áá 
;
áá 
}
àà 
}
ââ 	
public
çç 
bool
çç !
hasSecsDataMesssage
çç '
{
éé 	
get
èè 
{
êê 
try
ëë 
{
íí 
return
ìì  
m_fSecsDataMessage
ìì -
==
ìì. 0
null
ìì1 5
?
ìì6 7
false
ìì8 =
:
ìì> ?
true
ìì@ D
;
ììD E
}
îî 
catch
ïï 
(
ïï 
	Exception
ïï  
ex
ïï! #
)
ïï# $
{
ññ 
FDebug
óó 
.
óó 
throwException
óó )
(
óó) *
ex
óó* ,
)
óó, -
;
óó- .
}
òò 
finally
ôô 
{
öö 
}
úú 
return
ùù 
false
ùù 
;
ùù 
}
ûû 
}
üü 	
public
ßß 
byte
ßß 
[
ßß 
]
ßß 
handshakeToBytes
ßß &
(
ßß& '
)
®® 
{
©© 	
try
™™ 
{
´´ 
return
¨¨ 
new
¨¨ 
byte
¨¨ 
[
¨¨  
]
¨¨  !
{
¨¨" #
(
¨¨$ %
byte
¨¨% )
)
¨¨) *
m_fHandshakeCode
¨¨* :
}
¨¨; <
;
¨¨< =
}
≠≠ 
catch
ÆÆ 
(
ÆÆ 
	Exception
ÆÆ 
ex
ÆÆ 
)
ÆÆ  
{
ØØ 
FDebug
∞∞ 
.
∞∞ 
throwException
∞∞ %
(
∞∞% &
ex
∞∞& (
)
∞∞( )
;
∞∞) *
}
±± 
finally
≤≤ 
{
≥≥ 
}
µµ 
return
∂∂ 
null
∂∂ 
;
∂∂ 
}
∑∑ 	
}
ΩΩ 
}ææ µ±
~D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\SECS1\c_FSecs1RecvBlock.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FSecs1RecvBlock "
:" #
IDisposable$ /
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
byte 
m_length 
= 
$num  !
;! "
private 
List 
< 
byte 
> 
m_blockData &
=' (
null) -
;- .
private 
bool 
m_rbit 
= 
false #
;# $
private   
UInt16   
m_sessionId   "
=  # $
$num  % &
;  & '
private!! 
bool!! 
m_wbit!! 
=!! 
false!! #
;!!# $
private"" 
byte"" 
m_stream"" 
="" 
$num""  !
;""! "
private## 
byte## 

m_function## 
=##  !
$num##" #
;### $
private$$ 
bool$$ 
m_ebit$$ 
=$$ 
false$$ #
;$$# $
private%% 
UInt16%% 
	m_blockNo%%  
=%%! "
$num%%# $
;%%$ %
private&& 
UInt32&& 
m_systemBytes&& $
=&&% &
$num&&' (
;&&( )
private'' 
List'' 
<'' 
byte'' 
>'' 
m_body'' !
=''" #
null''$ (
;''( )
private(( 
UInt16(( 

m_checkSum(( !
=((" #
$num(($ %
;((% &
public.. 
FSecs1RecvBlock.. 
(.. 
byte// 
length// 
)00 
{11 	
m_length22 
=22 
length22 
;22 
m_blockData33 
=33 
new33 
List33 "
<33" #
byte33# '
>33' (
(33( )
)33) *
;33* +
m_blockData44 
.44 
Add44 
(44 
m_length44 $
)44$ %
;44% &
}55 	
~99 	
FSecs1RecvBlock99	 
(99 
):: 
{;; 	
	myDispose<< 
(<< 
false<< 
)<< 
;<< 
}== 	
	protectedAA 
voidAA 
	myDisposeAA  
(AA  !
boolBB 
	disposingBB 
)CC 
{DD 	
ifEE 
(EE 
!EE 

m_disposedEE 
)EE 
{FF 
ifGG 
(GG 
	disposingGG 
)GG 
{HH 
m_blockDataII 
=II  !
nullII" &
;II& '
m_bodyJJ 
=JJ 
nullJJ !
;JJ! "
}KK 

m_disposedMM 
=MM 
trueMM !
;MM! "
}NN 
}OO 	
publicWW 
voidWW 
DisposeWW 
(WW 
)XX 
{YY 	
	myDisposeZZ 
(ZZ 
trueZZ 
)ZZ 
;ZZ 
GC[[ 
.[[ 
SuppressFinalize[[ 
([[  
this[[  $
)[[$ %
;[[% &
}\\ 	
publicdd 
bytedd 
lengthdd 
{ee 	
getff 
{gg 
tryhh 
{ii 
returnjj 
m_lengthjj #
;jj# $
}kk 
catchll 
(ll 
	Exceptionll  
exll! #
)ll# $
{mm 
FDebugnn 
.nn 
throwExceptionnn )
(nn) *
exnn* ,
)nn, -
;nn- .
}oo 
finallypp 
{qq 
}ss 
returntt 
$numtt 
;tt 
}uu 
}vv 	
publiczz 
bytezz 
[zz 
]zz 
	blockDatazz 
{{{ 	
get|| 
{}} 
try~~ 
{ 
return
ÄÄ 
m_blockData
ÄÄ &
.
ÄÄ& '
ToArray
ÄÄ' .
(
ÄÄ. /
)
ÄÄ/ 0
;
ÄÄ0 1
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
	Exception
ÇÇ  
ex
ÇÇ! #
)
ÇÇ# $
{
ÉÉ 
FDebug
ÑÑ 
.
ÑÑ 
throwException
ÑÑ )
(
ÑÑ) *
ex
ÑÑ* ,
)
ÑÑ, -
;
ÑÑ- .
}
ÖÖ 
finally
ÜÜ 
{
áá 
}
ââ 
return
ää 
null
ää 
;
ää 
}
ãã 
}
åå 	
public
êê 
int
êê 
blockDataLength
êê "
{
ëë 	
get
íí 
{
ìì 
try
îî 
{
ïï 
return
ññ 
m_blockData
ññ &
.
ññ& '
Count
ññ' ,
;
ññ, -
}
óó 
catch
òò 
(
òò 
	Exception
òò  
ex
òò! #
)
òò# $
{
ôô 
FDebug
öö 
.
öö 
throwException
öö )
(
öö) *
ex
öö* ,
)
öö, -
;
öö- .
}
õõ 
finally
úú 
{
ùù 
}
üü 
return
†† 
$num
†† 
;
†† 
}
°° 
}
¢¢ 	
public
¶¶ 
bool
¶¶ *
blockDataCollectionCompleted
¶¶ 0
{
ßß 	
get
®® 
{
©© 
try
™™ 
{
´´ 
return
¨¨ 
this
¨¨ 
.
¨¨  !
calculateNeedLength
¨¨  3
(
¨¨3 4
)
¨¨4 5
==
¨¨6 8
$num
¨¨9 :
?
¨¨; <
true
¨¨= A
:
¨¨B C
false
¨¨D I
;
¨¨I J
}
≠≠ 
catch
ÆÆ 
(
ÆÆ 
	Exception
ÆÆ  
ex
ÆÆ! #
)
ÆÆ# $
{
ØØ 
FDebug
∞∞ 
.
∞∞ 
throwException
∞∞ )
(
∞∞) *
ex
∞∞* ,
)
∞∞, -
;
∞∞- .
}
±± 
finally
≤≤ 
{
≥≥ 
}
µµ 
return
∂∂ 
false
∂∂ 
;
∂∂ 
}
∑∑ 
}
∏∏ 	
public
ºº 
bool
ºº 
rbit
ºº 
{
ΩΩ 	
get
ææ 
{
øø 
try
¿¿ 
{
¡¡ 
return
¬¬ 
m_rbit
¬¬ !
;
¬¬! "
}
√√ 
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ  
ex
ƒƒ! #
)
ƒƒ# $
{
≈≈ 
FDebug
∆∆ 
.
∆∆ 
throwException
∆∆ )
(
∆∆) *
ex
∆∆* ,
)
∆∆, -
;
∆∆- .
}
«« 
finally
»» 
{
…… 
}
ÀÀ 
return
ÃÃ 
false
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}
ŒŒ 	
public
““ 
UInt16
““ 
	sessionId
““ 
{
”” 	
get
‘‘ 
{
’’ 
try
÷÷ 
{
◊◊ 
return
ÿÿ 
m_sessionId
ÿÿ &
;
ÿÿ& '
}
ŸŸ 
catch
⁄⁄ 
(
⁄⁄ 
	Exception
⁄⁄  
ex
⁄⁄! #
)
⁄⁄# $
{
€€ 
FDebug
‹‹ 
.
‹‹ 
throwException
‹‹ )
(
‹‹) *
ex
‹‹* ,
)
‹‹, -
;
‹‹- .
}
›› 
finally
ﬁﬁ 
{
ﬂﬂ 
}
·· 
return
‚‚ 
$num
‚‚ 
;
‚‚ 
}
„„ 
}
‰‰ 	
public
ËË 
bool
ËË 
wbit
ËË 
{
ÈÈ 	
get
ÍÍ 
{
ÎÎ 
try
ÏÏ 
{
ÌÌ 
return
ÓÓ 
m_wbit
ÓÓ !
;
ÓÓ! "
}
ÔÔ 
catch
 
(
 
	Exception
  
ex
! #
)
# $
{
ÒÒ 
FDebug
ÚÚ 
.
ÚÚ 
throwException
ÚÚ )
(
ÚÚ) *
ex
ÚÚ* ,
)
ÚÚ, -
;
ÚÚ- .
}
ÛÛ 
finally
ÙÙ 
{
ıı 
}
˜˜ 
return
¯¯ 
false
¯¯ 
;
¯¯ 
}
˘˘ 
}
˙˙ 	
public
˛˛ 
byte
˛˛ 
stream
˛˛ 
{
ˇˇ 	
get
ÄÄ 
{
ÅÅ 
try
ÇÇ 
{
ÉÉ 
return
ÑÑ 
m_stream
ÑÑ #
;
ÑÑ# $
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ  
ex
ÜÜ! #
)
ÜÜ# $
{
áá 
FDebug
àà 
.
àà 
throwException
àà )
(
àà) *
ex
àà* ,
)
àà, -
;
àà- .
}
ââ 
finally
ää 
{
ãã 
}
çç 
return
éé 
$num
éé 
;
éé 
}
èè 
}
êê 	
public
îî 
byte
îî 
function
îî 
{
ïï 	
get
ññ 
{
óó 
try
òò 
{
ôô 
return
öö 

m_function
öö %
;
öö% &
}
õõ 
catch
úú 
(
úú 
	Exception
úú  
ex
úú! #
)
úú# $
{
ùù 
FDebug
ûû 
.
ûû 
throwException
ûû )
(
ûû) *
ex
ûû* ,
)
ûû, -
;
ûû- .
}
üü 
finally
†† 
{
°° 
}
££ 
return
§§ 
$num
§§ 
;
§§ 
}
•• 
}
¶¶ 	
public
™™ 
bool
™™ 
ebit
™™ 
{
´´ 	
get
¨¨ 
{
≠≠ 
try
ÆÆ 
{
ØØ 
return
∞∞ 
m_ebit
∞∞ !
;
∞∞! "
}
±± 
catch
≤≤ 
(
≤≤ 
	Exception
≤≤  
ex
≤≤! #
)
≤≤# $
{
≥≥ 
FDebug
¥¥ 
.
¥¥ 
throwException
¥¥ )
(
¥¥) *
ex
¥¥* ,
)
¥¥, -
;
¥¥- .
}
µµ 
finally
∂∂ 
{
∑∑ 
}
ππ 
return
∫∫ 
false
∫∫ 
;
∫∫ 
}
ªª 
}
ºº 	
public
¿¿ 
UInt16
¿¿ 
blockNo
¿¿ 
{
¡¡ 	
get
¬¬ 
{
√√ 
try
ƒƒ 
{
≈≈ 
return
∆∆ 
	m_blockNo
∆∆ $
;
∆∆$ %
}
«« 
catch
»» 
(
»» 
	Exception
»»  
ex
»»! #
)
»»# $
{
…… 
FDebug
   
.
   
throwException
   )
(
  ) *
ex
  * ,
)
  , -
;
  - .
}
ÀÀ 
finally
ÃÃ 
{
ÕÕ 
}
œœ 
return
–– 
$num
–– 
;
–– 
}
—— 
}
““ 	
public
÷÷ 
UInt32
÷÷ 
systemBytes
÷÷ !
{
◊◊ 	
get
ÿÿ 
{
ŸŸ 
try
⁄⁄ 
{
€€ 
return
‹‹ 
m_systemBytes
‹‹ (
;
‹‹( )
}
›› 
catch
ﬁﬁ 
(
ﬁﬁ 
	Exception
ﬁﬁ  
ex
ﬁﬁ! #
)
ﬁﬁ# $
{
ﬂﬂ 
FDebug
‡‡ 
.
‡‡ 
throwException
‡‡ )
(
‡‡) *
ex
‡‡* ,
)
‡‡, -
;
‡‡- .
}
·· 
finally
‚‚ 
{
„„ 
}
ÂÂ 
return
ÊÊ 
$num
ÊÊ 
;
ÊÊ 
}
ÁÁ 
}
ËË 	
public
ÏÏ 
byte
ÏÏ 
[
ÏÏ 
]
ÏÏ 
body
ÏÏ 
{
ÌÌ 	
get
ÓÓ 
{
ÔÔ 
try
 
{
ÒÒ 
return
ÚÚ 
m_body
ÚÚ !
.
ÚÚ! "
ToArray
ÚÚ" )
(
ÚÚ) *
)
ÚÚ* +
;
ÚÚ+ ,
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ  
ex
ÙÙ! #
)
ÙÙ# $
{
ıı 
FDebug
ˆˆ 
.
ˆˆ 
throwException
ˆˆ )
(
ˆˆ) *
ex
ˆˆ* ,
)
ˆˆ, -
;
ˆˆ- .
}
˜˜ 
finally
¯¯ 
{
˘˘ 
}
˚˚ 
return
¸¸ 
null
¸¸ 
;
¸¸ 
}
˝˝ 
}
˛˛ 	
public
ÇÇ 
UInt16
ÇÇ 
checkSum
ÇÇ 
{
ÉÉ 	
get
ÑÑ 
{
ÖÖ 
try
ÜÜ 
{
áá 
return
àà 

m_checkSum
àà %
;
àà% &
}
ââ 
catch
ää 
(
ää 
	Exception
ää  
ex
ää! #
)
ää# $
{
ãã 
FDebug
åå 
.
åå 
throwException
åå )
(
åå) *
ex
åå* ,
)
åå, -
;
åå- .
}
çç 
finally
éé 
{
èè 
}
ëë 
return
íí 
$num
íí 
;
íí 
}
ìì 
}
îî 	
public
úú 
int
úú !
calculateNeedLength
úú &
(
úú& '
)
ùù 
{
ûû 	
try
üü 
{
†† 
return
°° 
this
°° 
.
°° 
length
°° "
-
°°# $
this
°°% )
.
°°) *
blockDataLength
°°* 9
+
°°: ;
$num
°°< =
+
°°> ?
$num
°°@ A
;
°°A B
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
ex
££ 
)
££  
{
§§ 
FDebug
•• 
.
•• 
throwException
•• %
(
••% &
ex
••& (
)
••( )
;
••) *
}
¶¶ 
finally
ßß 
{
®® 
}
™™ 
return
´´ 
$num
´´ 
;
´´ 
}
¨¨ 	
public
∞∞ 
void
∞∞ 
input
∞∞ 
(
∞∞ 
byte
±± 
[
±± 
]
±± 
	blockData
±± 
)
≤≤ 
{
≥≥ 	
try
¥¥ 
{
µµ 
m_blockData
∂∂ 
.
∂∂ 
AddRange
∂∂ $
(
∂∂$ %
	blockData
∂∂% .
)
∂∂. /
;
∂∂/ 0
}
∑∑ 
catch
∏∏ 
(
∏∏ 
	Exception
∏∏ 
ex
∏∏ 
)
∏∏  
{
ππ 
FDebug
∫∫ 
.
∫∫ 
throwException
∫∫ %
(
∫∫% &
ex
∫∫& (
)
∫∫( )
;
∫∫) *
}
ªª 
finally
ºº 
{
ΩΩ 
}
øø 
}
¿¿ 	
public
ƒƒ 
void
ƒƒ 
parse
ƒƒ 
(
ƒƒ 
)
≈≈ 
{
∆∆ 	
try
«« 
{
»» 
m_rbit
…… 
=
…… 
(
…… 
m_blockData
…… %
[
……% &
$num
……& '
]
……' (
&
……) *
$num
……+ /
)
……/ 0
==
……1 3
$num
……4 5
?
……6 7
false
……8 =
:
……> ?
true
……@ D
;
……D E
m_sessionId
   
=
   
BitConverter
   *
.
  * +
ToUInt16
  + 3
(
  3 4
new
  4 7
byte
  8 <
[
  < =
]
  = >
{
  ? @
m_blockData
  A L
[
  L M
$num
  M N
]
  N O
,
  O P
(
  Q R
byte
  R V
)
  V W
(
  W X
m_blockData
  X c
[
  c d
$num
  d e
]
  e f
&
  g h
$num
  i m
)
  m n
}
  o p
,
  p q
$num
  r s
)
  s t
;
  t u
m_wbit
ÀÀ 
=
ÀÀ 
(
ÀÀ 
m_blockData
ÀÀ %
[
ÀÀ% &
$num
ÀÀ& '
]
ÀÀ' (
&
ÀÀ) *
$num
ÀÀ+ /
)
ÀÀ/ 0
==
ÀÀ1 3
$num
ÀÀ4 5
?
ÀÀ6 7
false
ÀÀ8 =
:
ÀÀ> ?
true
ÀÀ@ D
;
ÀÀD E
m_stream
ÃÃ 
=
ÃÃ 
(
ÃÃ 
byte
ÃÃ  
)
ÃÃ  !
(
ÃÃ! "
m_blockData
ÃÃ" -
[
ÃÃ- .
$num
ÃÃ. /
]
ÃÃ/ 0
&
ÃÃ1 2
$num
ÃÃ3 7
)
ÃÃ7 8
;
ÃÃ8 9

m_function
ÕÕ 
=
ÕÕ 
m_blockData
ÕÕ (
[
ÕÕ( )
$num
ÕÕ) *
]
ÕÕ* +
;
ÕÕ+ ,
m_ebit
ŒŒ 
=
ŒŒ 
(
ŒŒ 
m_blockData
ŒŒ %
[
ŒŒ% &
$num
ŒŒ& '
]
ŒŒ' (
&
ŒŒ) *
$num
ŒŒ+ /
)
ŒŒ/ 0
==
ŒŒ1 3
$num
ŒŒ4 5
?
ŒŒ6 7
false
ŒŒ8 =
:
ŒŒ> ?
true
ŒŒ@ D
;
ŒŒD E
	m_blockNo
œœ 
=
œœ 
BitConverter
œœ (
.
œœ( )
ToUInt16
œœ) 1
(
œœ1 2
new
œœ2 5
byte
œœ6 :
[
œœ: ;
]
œœ; <
{
œœ= >
m_blockData
œœ? J
[
œœJ K
$num
œœK L
]
œœL M
,
œœM N
(
œœO P
byte
œœP T
)
œœT U
(
œœU V
m_blockData
œœV a
[
œœa b
$num
œœb c
]
œœc d
&
œœe f
$num
œœg k
)
œœk l
}
œœm n
,
œœn o
$num
œœp q
)
œœq r
;
œœr s
m_systemBytes
–– 
=
–– 
BitConverter
––  ,
.
––, -
ToUInt32
––- 5
(
––5 6
new
––6 9
byte
––: >
[
––> ?
]
––? @
{
––A B
m_blockData
––C N
[
––N O
$num
––O Q
]
––Q R
,
––R S
m_blockData
––T _
[
––_ `
$num
––` a
]
––a b
,
––b c
m_blockData
––d o
[
––o p
$num
––p q
]
––q r
,
––r s
m_blockData
––t 
[–– Ä
$num––Ä Å
]––Å Ç
}––É Ñ
,––Ñ Ö
$num––Ü á
)––á à
;––à â
m_body
““ 
=
““ 
new
““ 
List
““ !
<
““! "
byte
““" &
>
““& '
(
““' (
)
““( )
;
““) *
if
”” 
(
”” 
length
”” 
>
”” 
$num
”” 
)
””  
{
‘‘ 
m_body
’’ 
.
’’ 
AddRange
’’ #
(
’’# $
m_blockData
’’$ /
.
’’/ 0
GetRange
’’0 8
(
’’8 9
$num
’’9 ;
,
’’; <
length
’’= C
-
’’D E
$num
’’F H
)
’’H I
)
’’I J
;
’’J K
}
÷÷ 

m_checkSum
ÿÿ 
=
ÿÿ 
BitConverter
ÿÿ )
.
ÿÿ) *
ToUInt16
ÿÿ* 2
(
ÿÿ2 3
new
ÿÿ3 6
byte
ÿÿ7 ;
[
ÿÿ; <
]
ÿÿ< =
{
ÿÿ> ?
m_blockData
ÿÿ@ K
[
ÿÿK L
m_length
ÿÿL T
+
ÿÿU V
$num
ÿÿW X
]
ÿÿX Y
,
ÿÿY Z
m_blockData
ÿÿ[ f
[
ÿÿf g
m_length
ÿÿg o
+
ÿÿp q
$num
ÿÿr s
]
ÿÿs t
}
ÿÿu v
,
ÿÿv w
$num
ÿÿx y
)
ÿÿy z
;
ÿÿz {
}
ŸŸ 
catch
⁄⁄ 
(
⁄⁄ 
	Exception
⁄⁄ 
ex
⁄⁄ 
)
⁄⁄  
{
€€ 
FDebug
‹‹ 
.
‹‹ 
throwException
‹‹ %
(
‹‹% &
ex
‹‹& (
)
‹‹( )
;
‹‹) *
}
›› 
finally
ﬁﬁ 
{
ﬂﬂ 
}
·· 
}
‚‚ 	
public
ÊÊ 
bool
ÊÊ 
validateCheckSum
ÊÊ $
(
ÊÊ$ %
)
ÁÁ 
{
ËË 	
UInt16
ÈÈ 
sum
ÈÈ 
=
ÈÈ 
$num
ÈÈ 
;
ÈÈ 
try
ÎÎ 
{
ÏÏ 
for
ÌÌ 
(
ÌÌ 
int
ÌÌ 
i
ÌÌ 
=
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
i
ÌÌ  !
<
ÌÌ" #
m_blockData
ÌÌ$ /
.
ÌÌ/ 0
Count
ÌÌ0 5
-
ÌÌ6 7
$num
ÌÌ8 9
;
ÌÌ9 :
i
ÌÌ; <
++
ÌÌ< >
)
ÌÌ> ?
{
ÓÓ 
sum
ÔÔ 
+=
ÔÔ 
m_blockData
ÔÔ &
[
ÔÔ& '
i
ÔÔ' (
]
ÔÔ( )
;
ÔÔ) *
}
 
return
ÒÒ 
sum
ÒÒ 
==
ÒÒ 

m_checkSum
ÒÒ (
?
ÒÒ) *
true
ÒÒ+ /
:
ÒÒ0 1
false
ÒÒ2 7
;
ÒÒ7 8
}
ÚÚ 
catch
ÛÛ 
(
ÛÛ 
	Exception
ÛÛ 
ex
ÛÛ 
)
ÛÛ  
{
ÙÙ 
FDebug
ıı 
.
ıı 
throwException
ıı %
(
ıı% &
ex
ıı& (
)
ıı( )
;
ıı) *
}
ˆˆ 
finally
˜˜ 
{
¯¯ 
}
˙˙ 
return
˚˚ 
false
˚˚ 
;
˚˚ 
}
¸¸ 	
public
ÄÄ 
bool
ÄÄ 
validateRbit
ÄÄ  
(
ÄÄ  !
bool
ÅÅ 
rbit
ÅÅ 
)
ÇÇ 
{
ÉÉ 	
try
ÑÑ 
{
ÖÖ 
return
ÜÜ 
m_rbit
ÜÜ 
==
ÜÜ  
rbit
ÜÜ! %
?
ÜÜ& '
false
ÜÜ( -
:
ÜÜ. /
true
ÜÜ0 4
;
ÜÜ4 5
}
áá 
catch
àà 
(
àà 
	Exception
àà 
ex
àà 
)
àà  
{
ââ 
FDebug
ää 
.
ää 
throwException
ää %
(
ää% &
ex
ää& (
)
ää( )
;
ää) *
}
ãã 
finally
åå 
{
çç 
}
èè 
return
êê 
false
êê 
;
êê 
}
ëë 	
public
ïï 
bool
ïï 
validateSessionId
ïï %
(
ïï% &
UInt16
ïï& ,
	sessionId
ïï- 6
)
ïï6 7
{
ññ 	
try
óó 
{
òò 
return
ôô 
m_sessionId
ôô "
==
ôô# %
	sessionId
ôô& /
?
ôô0 1
true
ôô2 6
:
ôô7 8
false
ôô9 >
;
ôô> ?
}
öö 
catch
õõ 
(
õõ 
	Exception
õõ 
ex
õõ 
)
õõ  
{
úú 
FDebug
ùù 
.
ùù 
throwException
ùù %
(
ùù% &
ex
ùù& (
)
ùù( )
;
ùù) *
}
ûû 
finally
üü 
{
†† 
}
¢¢ 
return
££ 
false
££ 
;
££ 
}
§§ 	
}
™™ 
}´´ çÆ
ÇD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\SECS1\c_FSecs1RecvBlockList.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FSecs1RecvBlockList &
:& '
IDisposable( 3
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 

Dictionary 
< 
string !
,! "

Dictionary# -
<- .
UInt16. 4
,4 5
FSecs1RecvBlock6 E
>E F
>F G
m_fSecs1BlockListH Y
=Z [
null\ `
;` a
private 

Dictionary 
< 
string !
,! "
FStaticTimer# /
>/ 0
m_fTmrT4List1 =
=> ?
null@ D
;D E
public$$ 
FSecs1RecvBlockList$$ "
($$" #
FSecs1ToHsms%% 
fSecs1ToHsms%% %
)&& 
{'' 	
m_fSecs1ToHsms(( 
=(( 
fSecs1ToHsms(( )
;(() *
m_fSecs1BlockList)) 
=)) 
new))  #

Dictionary))$ .
<)). /
string))/ 5
,))5 6

Dictionary))7 A
<))A B
UInt16))B H
,))H I
FSecs1RecvBlock))J Y
>))Y Z
>))Z [
())[ \
)))\ ]
;))] ^
m_fTmrT4List** 
=** 
new** 

Dictionary** )
<**) *
string*** 0
,**0 1
FStaticTimer**2 >
>**> ?
(**? @
)**@ A
;**A B
}++ 	
~// 	
FSecs1RecvBlockList//	 
(// 
)00 
{11 	
	myDispose22 
(22 
false22 
)22 
;22 
}33 	
	protected77 
void77 
	myDispose77  
(77  !
bool88 
	disposing88 
)99 
{:: 	
if;; 
(;; 
!;; 

m_disposed;; 
);; 
{<< 
if== 
(== 
	disposing== 
)== 
{>> 
m_fSecs1ToHsms?? "
=??# $
null??% )
;??) *
m_fSecs1BlockList@@ %
=@@& '
null@@( ,
;@@, -
}AA 

m_disposedCC 
=CC 
trueCC !
;CC! "
}DD 
}EE 	
publicMM 
voidMM 
DisposeMM 
(MM 
)NN 
{OO 	
	myDisposePP 
(PP 
truePP 
)PP 
;PP 
GCQQ 
.QQ 
SuppressFinalizeQQ 
(QQ  
thisQQ  $
)QQ$ %
;QQ% &
}RR 	
private`` 
string`` 
makeKey`` 
(`` 
byteaa 
streamaa 
,aa 
bytebb 
functionbb 
,bb 
UInt32cc 
systemBytescc 
)dd 
{ee 	
stringff 
keyff 
=ff 
stringff 
.ff  
Emptyff  %
;ff% &
tryhh 
{ii 
ifjj 
(jj 
m_fSecs1ToHsmsjj "
.jj" #
fSecs1Configjj# /
.jj/ 0
ignoreSystemBytesjj0 A
)jjA B
{kk 
keyll 
=ll 
stringll  
.ll  !
Formatll! '
(ll' (
$strll( 1
,ll1 2
streamll3 9
.ll9 :
ToStringll: B
(llB C
)llC D
,llD E
functionllF N
.llN O
ToStringllO W
(llW X
)llX Y
)llY Z
;llZ [
}mm 
elsenn 
{oo 
keypp 
=pp 
stringpp  
.pp  !
Formatpp! '
(pp' (
$strpp( 5
,pp5 6
streampp7 =
.pp= >
ToStringpp> F
(ppF G
)ppG H
,ppH I
functionppJ R
.ppR S
ToStringppS [
(pp[ \
)pp\ ]
,pp] ^
systemBytespp_ j
.ppj k
ToStringppk s
(pps t
)ppt u
)ppu v
;ppv w
}qq 
returnss 
keyss 
;ss 
}tt 
catchuu 
(uu 
	Exceptionuu 
exuu 
)uu  
{vv 
FDebugww 
.ww 
throwExceptionww %
(ww% &
exww& (
)ww( )
;ww) *
}xx 
finallyyy 
{zz 
}|| 
return}} 
string}} 
.}} 
Empty}} 
;}}  
}~~ 	
public
ÇÇ 
bool
ÇÇ  
validateInterleave
ÇÇ &
(
ÇÇ& '
FSecs1RecvBlock
ÉÉ 

fRecvBlock
ÉÉ &
)
ÑÑ 
{
ÖÖ 	
string
ÜÜ 
key
ÜÜ 
=
ÜÜ 
string
ÜÜ 
.
ÜÜ  
Empty
ÜÜ  %
;
ÜÜ% &
try
àà 
{
ââ 
if
çç 
(
çç 
m_fSecs1ToHsms
çç "
.
çç" #
fSecs1Config
çç# /
.
çç/ 0

interleave
çç0 :
)
çç: ;
{
éé 
return
èè 
true
èè 
;
èè  
}
êê 
if
óó 
(
óó 
m_fSecs1BlockList
óó %
.
óó% &
Count
óó& +
==
óó, .
$num
óó/ 0
)
óó0 1
{
òò 
return
ôô 
true
ôô 
;
ôô  
}
öö 
key
°° 
=
°° 
makeKey
°° 
(
°° 

fRecvBlock
°° (
.
°°( )
stream
°°) /
,
°°/ 0

fRecvBlock
°°1 ;
.
°°; <
function
°°< D
,
°°D E

fRecvBlock
°°F P
.
°°P Q
systemBytes
°°Q \
)
°°\ ]
;
°°] ^
if
££ 
(
££ 
m_fSecs1BlockList
££ %
.
££% &
ContainsKey
££& 1
(
££1 2
key
££2 5
)
££5 6
)
££6 7
{
§§ 
return
•• 
true
•• 
;
••  
}
¶¶ 
return
™™ 
false
™™ 
;
™™ 
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨ 
ex
¨¨ 
)
¨¨  
{
≠≠ 
FDebug
ÆÆ 
.
ÆÆ 
throwException
ÆÆ %
(
ÆÆ% &
ex
ÆÆ& (
)
ÆÆ( )
;
ÆÆ) *
}
ØØ 
finally
∞∞ 
{
±± 
}
≥≥ 
return
¥¥ 
false
¥¥ 
;
¥¥ 
}
µµ 	
public
ππ 
bool
ππ 
validateBlockNo
ππ #
(
ππ# $
FSecs1RecvBlock
∫∫ 

fRecvBlock
∫∫ &
)
ªª 
{
ºº 	
string
ΩΩ 
key
ΩΩ 
=
ΩΩ 
string
ΩΩ 
.
ΩΩ  
Empty
ΩΩ  %
;
ΩΩ% &
FSecs1RecvBlock
ææ 
fLastRecvBlock
ææ *
=
ææ+ ,
null
ææ- 1
;
ææ1 2
try
¿¿ 
{
¡¡ 
key
¬¬ 
=
¬¬ 
makeKey
¬¬ 
(
¬¬ 

fRecvBlock
¬¬ (
.
¬¬( )
stream
¬¬) /
,
¬¬/ 0

fRecvBlock
¬¬1 ;
.
¬¬; <
function
¬¬< D
,
¬¬D E

fRecvBlock
¬¬F P
.
¬¬P Q
systemBytes
¬¬Q \
)
¬¬\ ]
;
¬¬] ^
if
ƒƒ 
(
ƒƒ 
m_fSecs1BlockList
ƒƒ %
.
ƒƒ% &
ContainsKey
ƒƒ& 1
(
ƒƒ1 2
key
ƒƒ2 5
)
ƒƒ5 6
)
ƒƒ6 7
{
≈≈ 
fLastRecvBlock
∆∆ "
=
∆∆# $
m_fSecs1BlockList
∆∆% 6
[
∆∆6 7
key
∆∆7 :
]
∆∆: ;
.
∆∆; <
Last
∆∆< @
(
∆∆@ A
)
∆∆A B
.
∆∆B C
Value
∆∆C H
;
∆∆H I
}
«« 
if
ÀÀ 
(
ÀÀ 
fLastRecvBlock
ÀÀ "
==
ÀÀ# %
null
ÀÀ& *
)
ÀÀ* +
{
ÃÃ 
if
–– 
(
–– 

fRecvBlock
–– "
.
––" #
blockNo
––# *
!=
––+ -
$num
––. /
&&
––0 2

fRecvBlock
––3 =
.
––= >
blockNo
––> E
!=
––F H
$num
––I J
)
––J K
{
—— 
return
““ 
false
““ $
;
““$ %
}
”” 
}
‘‘ 
else
’’ 
{
÷÷ 
if
€€ 
(
€€ 
fLastRecvBlock
€€ &
.
€€& '
blockNo
€€' .
!=
€€/ 1

fRecvBlock
€€2 <
.
€€< =
blockNo
€€= D
-
€€E F
$num
€€G H
)
€€H I
{
‹‹ 
if
›› 
(
›› 
!
›› 
m_fSecs1BlockList
›› .
[
››. /
key
››/ 2
]
››2 3
.
››3 4
ContainsKey
››4 ?
(
››? @

fRecvBlock
››@ J
.
››J K
blockNo
››K R
)
››R S
)
››S T
{
ﬁﬁ 
return
ﬂﬂ "
false
ﬂﬂ# (
;
ﬂﬂ( )
}
‡‡ 
}
·· 
}
‚‚ 
return
‰‰ 
true
‰‰ 
;
‰‰ 
}
ÂÂ 
catch
ÊÊ 
(
ÊÊ 
	Exception
ÊÊ 
ex
ÊÊ 
)
ÊÊ  
{
ÁÁ 
FDebug
ËË 
.
ËË 
throwException
ËË %
(
ËË% &
ex
ËË& (
)
ËË( )
;
ËË) *
}
ÈÈ 
finally
ÍÍ 
{
ÎÎ 
fLastRecvBlock
ÏÏ 
=
ÏÏ  
null
ÏÏ! %
;
ÏÏ% &
}
ÌÌ 
return
ÓÓ 
false
ÓÓ 
;
ÓÓ 
}
ÔÔ 	
public
ÛÛ 
bool
ÛÛ $
validateDuplidateBlock
ÛÛ *
(
ÛÛ* +
FSecs1RecvBlock
ÙÙ 

fRecvBlock
ÙÙ &
)
ıı 
{
ˆˆ 	
string
˜˜ 
key
˜˜ 
=
˜˜ 
string
˜˜ 
.
˜˜  
Empty
˜˜  %
;
˜˜% &
try
˘˘ 
{
˙˙ 
key
˚˚ 
=
˚˚ 
makeKey
˚˚ 
(
˚˚ 

fRecvBlock
˚˚ (
.
˚˚( )
stream
˚˚) /
,
˚˚/ 0

fRecvBlock
˚˚1 ;
.
˚˚; <
function
˚˚< D
,
˚˚D E

fRecvBlock
˚˚F P
.
˚˚P Q
systemBytes
˚˚Q \
)
˚˚\ ]
;
˚˚] ^
if
˝˝ 
(
˝˝ 
m_fSecs1BlockList
˝˝ %
.
˝˝% &
ContainsKey
˝˝& 1
(
˝˝1 2
key
˝˝2 5
)
˝˝5 6
)
˝˝6 7
{
˛˛ 
if
ˇˇ 
(
ˇˇ 
m_fSecs1BlockList
ˇˇ )
[
ˇˇ) *
key
ˇˇ* -
]
ˇˇ- .
.
ˇˇ. /
ContainsKey
ˇˇ/ :
(
ˇˇ: ;

fRecvBlock
ˇˇ; E
.
ˇˇE F
blockNo
ˇˇF M
)
ˇˇM N
)
ˇˇN O
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
m_fSecs1ToHsms
ÅÅ *
.
ÅÅ* +
fSecs1Config
ÅÅ+ 7
.
ÅÅ7 8
duplicateError
ÅÅ8 F
)
ÅÅF G
{
ÇÇ 
return
ÉÉ "
false
ÉÉ# (
;
ÉÉ( )
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 
return
àà 
true
àà 
;
àà 
}
ââ 
catch
ää 
(
ää 
	Exception
ää 
ex
ää 
)
ää  
{
ãã 
FDebug
åå 
.
åå 
throwException
åå %
(
åå% &
ex
åå& (
)
åå( )
;
åå) *
}
çç 
finally
éé 
{
èè 
}
ëë 
return
íí 
false
íí 
;
íí 
}
ìì 	
public
óó 
FSecsDataMessage
óó 
addBlock
óó  (
(
óó( )
FSecs1RecvBlock
òò 
fBlock
òò "
)
ôô 
{
öö 	
string
õõ 
key
õõ 
=
õõ 
string
õõ 
.
õõ  
Empty
õõ  %
;
õõ% &

Dictionary
úú 
<
úú 
UInt16
úú 
,
úú 
FSecs1RecvBlock
úú .
>
úú. /
fSecs1Blocks
úú0 <
=
úú= >
null
úú? C
;
úúC D
List
ùù 
<
ùù 
byte
ùù 
>
ùù 
body
ùù 
=
ùù 
null
ùù "
;
ùù" #
FSecsDataMessage
ûû 
fSecsDataMessage
ûû -
=
ûû. /
null
ûû0 4
;
ûû4 5
FStaticTimer
üü 
fTmrT4
üü 
=
üü  !
null
üü" &
;
üü& '
try
°° 
{
¢¢ 
key
££ 
=
££ 
makeKey
££ 
(
££ 
fBlock
££ $
.
££$ %
stream
££% +
,
££+ ,
fBlock
££- 3
.
££3 4
function
££4 <
,
££< =
fBlock
££> D
.
££D E
systemBytes
££E P
)
££P Q
;
££Q R
if
•• 
(
•• 
m_fSecs1BlockList
•• %
.
••% &
ContainsKey
••& 1
(
••1 2
key
••2 5
)
••5 6
)
••6 7
{
¶¶ 
fSecs1Blocks
™™  
=
™™! "
m_fSecs1BlockList
™™# 4
[
™™4 5
key
™™5 8
]
™™8 9
;
™™9 :
if
¨¨ 
(
¨¨ 
fSecs1Blocks
¨¨ $
.
¨¨$ %
ContainsKey
¨¨% 0
(
¨¨0 1
fBlock
¨¨1 7
.
¨¨7 8
blockNo
¨¨8 ?
)
¨¨? @
)
¨¨@ A
{
≠≠ 
if
±± 
(
±± 
!
±± 
m_fSecs1ToHsms
±± +
.
±±+ ,
fSecs1Config
±±, 8
.
±±8 9
duplicateError
±±9 G
)
±±G H
{
≤≤ 
fSecs1Blocks
≥≥ (
[
≥≥( )
fBlock
≥≥) /
.
≥≥/ 0
blockNo
≥≥0 7
]
≥≥7 8
=
≥≥9 :
fBlock
≥≥; A
;
≥≥A B
}
¥¥ 
}
µµ 
else
∂∂ 
{
∑∑ 
fSecs1Blocks
∏∏ $
.
∏∏$ %
Add
∏∏% (
(
∏∏( )
fBlock
∏∏) /
.
∏∏/ 0
blockNo
∏∏0 7
,
∏∏7 8
fBlock
∏∏9 ?
)
∏∏? @
;
∏∏@ A
}
ππ 
m_fTmrT4List
¿¿  
[
¿¿  !
key
¿¿! $
]
¿¿$ %
.
¿¿% &
restart
¿¿& -
(
¿¿- .
m_fSecs1ToHsms
¿¿. <
.
¿¿< =
fSecs1Config
¿¿= I
.
¿¿I J
	t4Timeout
¿¿J S
*
¿¿T U
$num
¿¿V Z
)
¿¿Z [
;
¿¿[ \
}
¡¡ 
else
¬¬ 
{
√√ 
fSecs1Blocks
««  
=
««! "
new
««# &

Dictionary
««' 1
<
««1 2
ushort
««2 8
,
««8 9
FSecs1RecvBlock
««9 H
>
««H I
(
««I J
)
««J K
;
««K L
fSecs1Blocks
»»  
.
»»  !
Add
»»! $
(
»»$ %
fBlock
»»% +
.
»»+ ,
blockNo
»», 3
,
»»3 4
fBlock
»»5 ;
)
»»; <
;
»»< =
m_fSecs1BlockList
   %
.
  % &
Add
  & )
(
  ) *
key
  * -
,
  - .
fSecs1Blocks
  / ;
)
  ; <
;
  < =
fTmrT4
—— 
=
—— 
new
——  
FStaticTimer
——! -
(
——- .
)
——. /
;
——/ 0
fTmrT4
““ 
.
““ 
start
““  
(
““  !
m_fSecs1ToHsms
““! /
.
““/ 0
fSecs1Config
““0 <
.
““< =
	t4Timeout
““= F
*
““G H
$num
““I M
)
““M N
;
““N O
m_fTmrT4List
””  
.
””  !
Add
””! $
(
””$ %
key
””% (
,
””( )
fTmrT4
””* 0
)
””0 1
;
””1 2
}
‘‘ 
if
ÿÿ 
(
ÿÿ 
!
ÿÿ 
fBlock
ÿÿ 
.
ÿÿ 
ebit
ÿÿ  
)
ÿÿ  !
{
ŸŸ 
return
⁄⁄ 
null
⁄⁄ 
;
⁄⁄  
}
€€ 
body
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ 
List
ﬂﬂ 
<
ﬂﬂ  
byte
ﬂﬂ  $
>
ﬂﬂ$ %
(
ﬂﬂ% &
)
ﬂﬂ& '
;
ﬂﬂ' (
foreach
·· 
(
·· 
FSecs1RecvBlock
·· (
b
··) *
in
··+ -
fSecs1Blocks
··. :
.
··: ;
Values
··; A
)
··A B
{
‚‚ 
body
„„ 
.
„„ 
AddRange
„„ !
(
„„! "
b
„„" #
.
„„# $
body
„„$ (
)
„„( )
;
„„) *
}
‰‰ 
fSecsDataMessage
ÊÊ  
=
ÊÊ! "
new
ÊÊ# &
FSecsDataMessage
ÊÊ' 7
(
ÊÊ7 8
m_fSecs1ToHsms
ÁÁ "
,
ÁÁ" #
fBlock
ËË 
.
ËË 
	sessionId
ËË $
,
ËË$ %
fBlock
ÈÈ 
.
ÈÈ 
wbit
ÈÈ 
,
ÈÈ  
fBlock
ÍÍ 
.
ÍÍ 
stream
ÍÍ !
,
ÍÍ! "
fBlock
ÎÎ 
.
ÎÎ 
function
ÎÎ #
,
ÎÎ# $
fBlock
ÏÏ 
.
ÏÏ 
systemBytes
ÏÏ &
,
ÏÏ& '
body
ÌÌ 
.
ÌÌ 
ToArray
ÌÌ  
(
ÌÌ  !
)
ÌÌ! "
)
ÓÓ 
;
ÓÓ 
m_fSecs1BlockList
ÚÚ !
.
ÚÚ! "
Remove
ÚÚ" (
(
ÚÚ( )
key
ÚÚ) ,
)
ÚÚ, -
;
ÚÚ- .
m_fTmrT4List
ÛÛ 
.
ÛÛ 
Remove
ÛÛ #
(
ÛÛ# $
key
ÛÛ$ '
)
ÛÛ' (
;
ÛÛ( )
return
˜˜ 
fSecsDataMessage
˜˜ '
;
˜˜' (
}
¯¯ 
catch
˘˘ 
(
˘˘ 
	Exception
˘˘ 
ex
˘˘ 
)
˘˘  
{
˙˙ 
FDebug
˚˚ 
.
˚˚ 
throwException
˚˚ %
(
˚˚% &
ex
˚˚& (
)
˚˚( )
;
˚˚) *
}
¸¸ 
finally
˝˝ 
{
˛˛ 
fTmrT4
ˇˇ 
=
ˇˇ 
null
ˇˇ 
;
ˇˇ 
}
ÄÄ 
return
ÅÅ 
null
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
public
ÜÜ "
FSecs1T4TimeoutBlock
ÜÜ #
[
ÜÜ# $
]
ÜÜ$ %"
removeT4TimeoutBlock
ÜÜ& :
(
ÜÜ: ;
)
áá 
{
àà 	
List
ââ 
<
ââ 
string
ââ 
>
ââ 
keyList
ââ  
=
ââ! "
null
ââ# '
;
ââ' (
List
ää 
<
ää "
FSecs1T4TimeoutBlock
ää %
>
ää% &

fBlockList
ää' 1
=
ää2 3
null
ää4 8
;
ää8 9
FSecs1RecvBlock
ãã 

fRecvBlock
ãã &
=
ãã' (
null
ãã) -
;
ãã- .
try
çç 
{
éé 
keyList
èè 
=
èè 
new
èè 
List
èè "
<
èè" #
string
èè# )
>
èè) *
(
èè* +
)
èè+ ,
;
èè, -

fBlockList
êê 
=
êê 
new
êê  
List
êê! %
<
êê% &"
FSecs1T4TimeoutBlock
êê& :
>
êê: ;
(
êê; <
)
êê< =
;
êê= >
foreach
îî 
(
îî 
string
îî 
key
îî  #
in
îî$ &
m_fSecs1BlockList
îî' 8
.
îî8 9
Keys
îî9 =
)
îî= >
{
ïï 
if
ññ 
(
ññ 
m_fTmrT4List
ññ $
[
ññ$ %
key
ññ% (
]
ññ( )
.
ññ) *
elasped
ññ* 1
(
ññ1 2
false
ññ2 7
)
ññ7 8
)
ññ8 9
{
óó 
keyList
òò 
.
òò  
Add
òò  #
(
òò# $
key
òò$ '
)
òò' (
;
òò( )
}
ôô 
}
öö 
foreach
ûû 
(
ûû 
string
ûû 
key
ûû  #
in
ûû$ &
keyList
ûû' .
)
ûû. /
{
üü 

fRecvBlock
†† 
=
††  
m_fSecs1BlockList
††! 2
[
††2 3
key
††3 6
]
††6 7
.
††7 8
First
††8 =
(
††= >
)
††> ?
.
††? @
Value
††@ E
;
††E F

fBlockList
°° 
.
°° 
Add
°° "
(
°°" #
new
¢¢ "
FSecs1T4TimeoutBlock
¢¢ 0
(
¢¢0 1

fRecvBlock
¢¢1 ;
.
¢¢; <
	sessionId
¢¢< E
,
¢¢E F

fRecvBlock
¢¢G Q
.
¢¢Q R
stream
¢¢R X
,
¢¢X Y

fRecvBlock
¢¢Z d
.
¢¢d e
function
¢¢e m
,
¢¢m n

fRecvBlock
¢¢o y
.
¢¢y z
systemBytes¢¢z Ö
)¢¢Ö Ü
)
££ 
;
££ 
m_fSecs1BlockList
•• %
.
••% &
Remove
••& ,
(
••, -
key
••- 0
)
••0 1
;
••1 2
m_fTmrT4List
¶¶  
.
¶¶  !
Remove
¶¶! '
(
¶¶' (
key
¶¶( +
)
¶¶+ ,
;
¶¶, -
}
ßß 
return
´´ 

fBlockList
´´ !
.
´´! "
ToArray
´´" )
(
´´) *
)
´´* +
;
´´+ ,
}
¨¨ 
catch
≠≠ 
(
≠≠ 
	Exception
≠≠ 
ex
≠≠ 
)
≠≠  
{
ÆÆ 
FDebug
ØØ 
.
ØØ 
throwException
ØØ %
(
ØØ% &
ex
ØØ& (
)
ØØ( )
;
ØØ) *
}
∞∞ 
finally
±± 
{
≤≤ 
keyList
≥≥ 
=
≥≥ 
null
≥≥ 
;
≥≥ 

fBlockList
¥¥ 
=
¥¥ 
null
¥¥ !
;
¥¥! "

fRecvBlock
µµ 
=
µµ 
null
µµ !
;
µµ! "
}
∂∂ 
return
∑∑ 
null
∑∑ 
;
∑∑ 
}
∏∏ 	
}
ææ 
}øø ô(
ÉD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\SECS1\c_FSecs1T4TimeoutBlock.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class  
FSecs1T4TimeoutBlock '
:' (
IDisposable) 4
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
UInt16 
m_sessionId "
=# $
$num% &
;& '
private 
byte 
m_stream 
= 
$num  !
;! "
private 
byte 

m_function 
=  !
$num" #
;# $
private 
UInt32 
m_systemBytes $
=% &
$num' (
;( )
public%%  
FSecs1T4TimeoutBlock%% #
(%%# $
UInt16&& 
	sessionId&& 
,&& 
byte'' 
stream'' 
,'' 
byte(( 
function(( 
,(( 
UInt32)) 
systemBytes)) 
)** 
{++ 	
m_sessionId,, 
=,, 
	sessionId,, #
;,,# $
m_stream-- 
=-- 
stream-- 
;-- 

m_function.. 
=.. 
function.. !
;..! "
m_systemBytes// 
=// 
systemBytes// '
;//' (
}00 	
~44 	 
FSecs1T4TimeoutBlock44	 
(44 
)55 
{66 	
	myDispose77 
(77 
false77 
)77 
;77 
}88 	
	protected<< 
void<< 
	myDispose<<  
(<<  !
bool== 
	disposing== 
)>> 
{?? 	
if@@ 
(@@ 
!@@ 

m_disposed@@ 
)@@ 
{AA 
ifBB 
(BB 
	disposingBB 
)BB 
{CC 
}EE 

m_disposedGG 
=GG 
trueGG !
;GG! "
}HH 
}II 	
publicQQ 
voidQQ 
DisposeQQ 
(QQ 
)RR 
{SS 	
	myDisposeTT 
(TT 
trueTT 
)TT 
;TT 
GCUU 
.UU 
SuppressFinalizeUU 
(UU  
thisUU  $
)UU$ %
;UU% &
}VV 	
public^^ 
UInt16^^ 
	sessionId^^ 
{__ 	
get`` 
{aa 
trybb 
{cc 
returndd 
m_sessionIddd &
;dd& '
}ee 
catchff 
(ff 
	Exceptionff  
exff! #
)ff# $
{gg 
FDebughh 
.hh 
throwExceptionhh )
(hh) *
exhh* ,
)hh, -
;hh- .
}ii 
finallyjj 
{kk 
}mm 
returnnn 
$numnn 
;nn 
}oo 
}pp 	
publictt 
bytett 
streamtt 
{uu 	
getvv 
{ww 
tryxx 
{yy 
returnzz 
m_streamzz #
;zz# $
}{{ 
catch|| 
(|| 
	Exception||  
ex||! #
)||# $
{}} 
FDebug~~ 
.~~ 
throwException~~ )
(~~) *
ex~~* ,
)~~, -
;~~- .
} 
finally
ÄÄ 
{
ÅÅ 
}
ÉÉ 
return
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
}
ÖÖ 
}
ÜÜ 	
public
ää 
byte
ää 
function
ää 
{
ãã 	
get
åå 
{
çç 
try
éé 
{
èè 
return
êê 

m_function
êê %
;
êê% &
}
ëë 
catch
íí 
(
íí 
	Exception
íí  
ex
íí! #
)
íí# $
{
ìì 
FDebug
îî 
.
îî 
throwException
îî )
(
îî) *
ex
îî* ,
)
îî, -
;
îî- .
}
ïï 
finally
ññ 
{
óó 
}
ôô 
return
öö 
$num
öö 
;
öö 
}
õõ 
}
úú 	
public
†† 
UInt32
†† 
systemBytes
†† !
{
°° 	
get
¢¢ 
{
££ 
try
§§ 
{
•• 
return
¶¶ 
m_systemBytes
¶¶ (
;
¶¶( )
}
ßß 
catch
®® 
(
®® 
	Exception
®®  
ex
®®! #
)
®®# $
{
©© 
FDebug
™™ 
.
™™ 
throwException
™™ )
(
™™) *
ex
™™* ,
)
™™, -
;
™™- .
}
´´ 
finally
¨¨ 
{
≠≠ 
}
ØØ 
return
∞∞ 
$num
∞∞ 
;
∞∞ 
}
±± 
}
≤≤ 	
}
ææ 
}øø Õ≠
~D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\SECS1\c_FSecs1SendBlock.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FSecs1SendBlock "
:" #
IDisposable$ /
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1SendBlockList #
m_fBlockList$ 0
=1 2
null3 7
;7 8
private 
byte 
m_length 
= 
$num  !
;! "
private 
List 
< 
byte 
> 
m_blockData &
=' (
null) -
;- .
private!! 
bool!! 
m_rbit!! 
=!! 
false!! #
;!!# $
private"" 
UInt16"" 
m_sessionId"" "
=""# $
$num""% &
;""& '
private## 
bool## 
m_wbit## 
=## 
false## #
;### $
private$$ 
byte$$ 
m_stream$$ 
=$$ 
$num$$  !
;$$! "
private%% 
byte%% 

m_function%% 
=%%  !
$num%%" #
;%%# $
private&& 
bool&& 
m_ebit&& 
=&& 
false&& #
;&&# $
private'' 
UInt16'' 
	m_blockNo''  
=''! "
$num''# $
;''$ %
private(( 
UInt32(( 
m_systemBytes(( $
=((% &
$num((' (
;((( )
private)) 
List)) 
<)) 
byte)) 
>)) 
m_body)) !
=))" #
null))$ (
;))( )
private** 
UInt16** 

m_checkSum** !
=**" #
$num**$ %
;**% &
private,, 
bool,, 
	m_isRetry,, 
=,,  
false,,! &
;,,& '
private-- 
int-- 
m_retryCount--  
=--! "
$num--# $
;--$ %
public33 
FSecs1SendBlock33 
(33 
FSecs1SendBlockList44 

fBlockList44  *
,44* +
bool55 
rbit55 
,55 
UInt1666 
	sessionId66 
,66 
bool77 
wbit77 
,77 
byte88 
stream88 
,88 
byte99 
function99 
,99 
bool:: 
ebit:: 
,:: 
UInt16;; 
blockNo;; 
,;; 
UInt32<< 
systemBytes<< 
,<< 
byte== 
[== 
]== 
body== 
)>> 
{?? 	
m_fBlockList@@ 
=@@ 

fBlockList@@ %
;@@% &
m_rbitDD 
=DD 
rbitDD 
;DD 
m_sessionIdEE 
=EE 
	sessionIdEE #
;EE# $
m_wbitFF 
=FF 
wbitFF 
;FF 
m_streamGG 
=GG 
streamGG 
;GG 

m_functionHH 
=HH 
functionHH !
;HH! "
m_ebitII 
=II 
ebitII 
;II 
	m_blockNoJJ 
=JJ 
blockNoJJ 
;JJ  
m_systemBytesKK 
=KK 
systemBytesKK '
;KK' (
ifLL 
(LL 
bodyLL 
.LL 
LengthLL 
==LL 
$numLL  
)LL  !
{MM 
m_bodyNN 
=NN 
newNN 
ListNN !
<NN! "
byteNN" &
>NN& '
(NN' (
)NN( )
;NN) *
}OO 
elsePP 
{QQ 
m_bodyRR 
=RR 
newRR 
ListRR !
<RR! "
byteRR" &
>RR& '
(RR' (
bodyRR( ,
)RR, -
;RR- .
}SS 
genBlockDataWW 
(WW 
)WW 
;WW 
}XX 	
~\\ 	
FSecs1SendBlock\\	 
(\\ 
)]] 
{^^ 	
	myDispose__ 
(__ 
false__ 
)__ 
;__ 
}`` 	
	protecteddd 
voiddd 
	myDisposedd  
(dd  !
boolee 
	disposingee 
)ff 
{gg 	
ifhh 
(hh 
!hh 

m_disposedhh 
)hh 
{ii 
ifjj 
(jj 
	disposingjj 
)jj 
{kk 
m_fBlockListll  
=ll! "
nullll# '
;ll' (
m_blockDatamm 
=mm  !
nullmm" &
;mm& '
m_bodynn 
=nn 
nullnn !
;nn! "
}oo 

m_disposedqq 
=qq 
trueqq !
;qq! "
}rr 
}ss 	
public{{ 
void{{ 
Dispose{{ 
({{ 
)|| 
{}} 	
	myDispose~~ 
(~~ 
true~~ 
)~~ 
;~~ 
GC 
. 
SuppressFinalize 
(  
this  $
)$ %
;% &
}
ÄÄ 	
public
àà !
FSecs1SendBlockList
àà "

fBlockList
àà# -
{
ââ 	
get
ää 
{
ãã 
try
åå 
{
çç 
return
éé 
m_fBlockList
éé '
;
éé' (
}
èè 
catch
êê 
(
êê 
	Exception
êê  
ex
êê! #
)
êê# $
{
ëë 
FDebug
íí 
.
íí 
throwException
íí )
(
íí) *
ex
íí* ,
)
íí, -
;
íí- .
}
ìì 
finally
îî 
{
ïï 
}
óó 
return
òò 
null
òò 
;
òò 
}
ôô 
}
öö 	
public
ûû 
byte
ûû 
length
ûû 
{
üü 	
get
†† 
{
°° 
try
¢¢ 
{
££ 
return
§§ 
m_length
§§ #
;
§§# $
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶  
ex
¶¶! #
)
¶¶# $
{
ßß 
FDebug
®® 
.
®® 
throwException
®® )
(
®®) *
ex
®®* ,
)
®®, -
;
®®- .
}
©© 
finally
™™ 
{
´´ 
}
≠≠ 
return
ÆÆ 
$num
ÆÆ 
;
ÆÆ 
}
ØØ 
}
∞∞ 	
public
¥¥ 
byte
¥¥ 
[
¥¥ 
]
¥¥ 
	blockData
¥¥ 
{
µµ 	
get
∂∂ 
{
∑∑ 
try
∏∏ 
{
ππ 
return
∫∫ 
m_blockData
∫∫ &
.
∫∫& '
ToArray
∫∫' .
(
∫∫. /
)
∫∫/ 0
;
∫∫0 1
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº  
ex
ºº! #
)
ºº# $
{
ΩΩ 
FDebug
ææ 
.
ææ 
throwException
ææ )
(
ææ) *
ex
ææ* ,
)
ææ, -
;
ææ- .
}
øø 
finally
¿¿ 
{
¡¡ 
}
√√ 
return
ƒƒ 
null
ƒƒ 
;
ƒƒ 
}
≈≈ 
}
∆∆ 	
public
   
int
   
blockDataLength
   "
{
ÀÀ 	
get
ÃÃ 
{
ÕÕ 
try
ŒŒ 
{
œœ 
return
–– 
m_blockData
–– &
.
––& '
Count
––' ,
;
––, -
}
—— 
catch
““ 
(
““ 
	Exception
““  
ex
““! #
)
““# $
{
”” 
FDebug
‘‘ 
.
‘‘ 
throwException
‘‘ )
(
‘‘) *
ex
‘‘* ,
)
‘‘, -
;
‘‘- .
}
’’ 
finally
÷÷ 
{
◊◊ 
}
ŸŸ 
return
⁄⁄ 
$num
⁄⁄ 
;
⁄⁄ 
}
€€ 
}
‹‹ 	
public
‡‡ 
bool
‡‡ 
rbit
‡‡ 
{
·· 	
get
‚‚ 
{
„„ 
try
‰‰ 
{
ÂÂ 
return
ÊÊ 
m_rbit
ÊÊ !
;
ÊÊ! "
}
ÁÁ 
catch
ËË 
(
ËË 
	Exception
ËË  
ex
ËË! #
)
ËË# $
{
ÈÈ 
FDebug
ÍÍ 
.
ÍÍ 
throwException
ÍÍ )
(
ÍÍ) *
ex
ÍÍ* ,
)
ÍÍ, -
;
ÍÍ- .
}
ÎÎ 
finally
ÏÏ 
{
ÌÌ 
}
ÔÔ 
return
 
false
 
;
 
}
ÒÒ 
}
ÚÚ 	
public
ˆˆ 
UInt16
ˆˆ 
	sessionId
ˆˆ 
{
˜˜ 	
get
¯¯ 
{
˘˘ 
try
˙˙ 
{
˚˚ 
return
¸¸ 
m_sessionId
¸¸ &
;
¸¸& '
}
˝˝ 
catch
˛˛ 
(
˛˛ 
	Exception
˛˛  
ex
˛˛! #
)
˛˛# $
{
ˇˇ 
FDebug
ÄÄ 
.
ÄÄ 
throwException
ÄÄ )
(
ÄÄ) *
ex
ÄÄ* ,
)
ÄÄ, -
;
ÄÄ- .
}
ÅÅ 
finally
ÇÇ 
{
ÉÉ 
}
ÖÖ 
return
ÜÜ 
$num
ÜÜ 
;
ÜÜ 
}
áá 
}
àà 	
public
åå 
bool
åå 
wbit
åå 
{
çç 	
get
éé 
{
èè 
try
êê 
{
ëë 
return
íí 
m_wbit
íí !
;
íí! "
}
ìì 
catch
îî 
(
îî 
	Exception
îî  
ex
îî! #
)
îî# $
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ )
(
ññ) *
ex
ññ* ,
)
ññ, -
;
ññ- .
}
óó 
finally
òò 
{
ôô 
}
õõ 
return
úú 
false
úú 
;
úú 
}
ùù 
}
ûû 	
public
¢¢ 
byte
¢¢ 
stream
¢¢ 
{
££ 	
get
§§ 
{
•• 
try
¶¶ 
{
ßß 
return
®® 
m_stream
®® #
;
®®# $
}
©© 
catch
™™ 
(
™™ 
	Exception
™™  
ex
™™! #
)
™™# $
{
´´ 
FDebug
¨¨ 
.
¨¨ 
throwException
¨¨ )
(
¨¨) *
ex
¨¨* ,
)
¨¨, -
;
¨¨- .
}
≠≠ 
finally
ÆÆ 
{
ØØ 
}
±± 
return
≤≤ 
$num
≤≤ 
;
≤≤ 
}
≥≥ 
}
¥¥ 	
public
∏∏ 
byte
∏∏ 
function
∏∏ 
{
ππ 	
get
∫∫ 
{
ªª 
try
ºº 
{
ΩΩ 
return
ææ 

m_function
ææ %
;
ææ% &
}
øø 
catch
¿¿ 
(
¿¿ 
	Exception
¿¿  
ex
¿¿! #
)
¿¿# $
{
¡¡ 
FDebug
¬¬ 
.
¬¬ 
throwException
¬¬ )
(
¬¬) *
ex
¬¬* ,
)
¬¬, -
;
¬¬- .
}
√√ 
finally
ƒƒ 
{
≈≈ 
}
«« 
return
»» 
$num
»» 
;
»» 
}
…… 
}
   	
public
ŒŒ 
bool
ŒŒ 
ebit
ŒŒ 
{
œœ 	
get
–– 
{
—— 
try
““ 
{
”” 
return
‘‘ 
m_ebit
‘‘ !
;
‘‘! "
}
’’ 
catch
÷÷ 
(
÷÷ 
	Exception
÷÷  
ex
÷÷! #
)
÷÷# $
{
◊◊ 
FDebug
ÿÿ 
.
ÿÿ 
throwException
ÿÿ )
(
ÿÿ) *
ex
ÿÿ* ,
)
ÿÿ, -
;
ÿÿ- .
}
ŸŸ 
finally
⁄⁄ 
{
€€ 
}
›› 
return
ﬁﬁ 
false
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 	
public
‰‰ 
UInt16
‰‰ 
blockNo
‰‰ 
{
ÂÂ 	
get
ÊÊ 
{
ÁÁ 
try
ËË 
{
ÈÈ 
return
ÍÍ 
	m_blockNo
ÍÍ $
;
ÍÍ$ %
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ  
ex
ÏÏ! #
)
ÏÏ# $
{
ÌÌ 
FDebug
ÓÓ 
.
ÓÓ 
throwException
ÓÓ )
(
ÓÓ) *
ex
ÓÓ* ,
)
ÓÓ, -
;
ÓÓ- .
}
ÔÔ 
finally
 
{
ÒÒ 
}
ÛÛ 
return
ÙÙ 
$num
ÙÙ 
;
ÙÙ 
}
ıı 
}
ˆˆ 	
public
˙˙ 
UInt32
˙˙ 
systemBytes
˙˙ !
{
˚˚ 	
get
¸¸ 
{
˝˝ 
try
˛˛ 
{
ˇˇ 
return
ÄÄ 
m_systemBytes
ÄÄ (
;
ÄÄ( )
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ 
	Exception
ÇÇ  
ex
ÇÇ! #
)
ÇÇ# $
{
ÉÉ 
FDebug
ÑÑ 
.
ÑÑ 
throwException
ÑÑ )
(
ÑÑ) *
ex
ÑÑ* ,
)
ÑÑ, -
;
ÑÑ- .
}
ÖÖ 
finally
ÜÜ 
{
áá 
}
ââ 
return
ää 
$num
ää 
;
ää 
}
ãã 
}
åå 	
public
êê 
byte
êê 
[
êê 
]
êê 
body
êê 
{
ëë 	
get
íí 
{
ìì 
try
îî 
{
ïï 
return
ññ 
m_body
ññ !
.
ññ! "
ToArray
ññ" )
(
ññ) *
)
ññ* +
;
ññ+ ,
}
óó 
catch
òò 
(
òò 
	Exception
òò  
ex
òò! #
)
òò# $
{
ôô 
FDebug
öö 
.
öö 
throwException
öö )
(
öö) *
ex
öö* ,
)
öö, -
;
öö- .
}
õõ 
finally
úú 
{
ùù 
}
üü 
return
†† 
null
†† 
;
†† 
}
°° 
}
¢¢ 	
public
¶¶ 
UInt16
¶¶ 
checkSum
¶¶ 
{
ßß 	
get
®® 
{
©© 
try
™™ 
{
´´ 
return
¨¨ 

m_checkSum
¨¨ %
;
¨¨% &
}
≠≠ 
catch
ÆÆ 
(
ÆÆ 
	Exception
ÆÆ  
ex
ÆÆ! #
)
ÆÆ# $
{
ØØ 
FDebug
∞∞ 
.
∞∞ 
throwException
∞∞ )
(
∞∞) *
ex
∞∞* ,
)
∞∞, -
;
∞∞- .
}
±± 
finally
≤≤ 
{
≥≥ 
}
µµ 
return
∂∂ 
$num
∂∂ 
;
∂∂ 
}
∑∑ 
}
∏∏ 	
public
ºº 
bool
ºº 
isRetry
ºº 
{
ΩΩ 	
get
ææ 
{
øø 
try
¿¿ 
{
¡¡ 
return
¬¬ 
	m_isRetry
¬¬ $
;
¬¬$ %
}
√√ 
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ  
ex
ƒƒ! #
)
ƒƒ# $
{
≈≈ 
FDebug
∆∆ 
.
∆∆ 
throwException
∆∆ )
(
∆∆) *
ex
∆∆* ,
)
∆∆, -
;
∆∆- .
}
«« 
finally
»» 
{
…… 
}
ÀÀ 
return
ÃÃ 
false
ÃÃ 
;
ÃÃ 
}
ÕÕ 
set
œœ 
{
–– 
try
—— 
{
““ 
	m_isRetry
”” 
=
”” 
value
””  %
;
””% &
}
‘‘ 
catch
’’ 
(
’’ 
	Exception
’’  
ex
’’! #
)
’’# $
{
÷÷ 
FDebug
◊◊ 
.
◊◊ 
throwException
◊◊ )
(
◊◊) *
ex
◊◊* ,
)
◊◊, -
;
◊◊- .
}
ÿÿ 
finally
ŸŸ 
{
⁄⁄ 
}
‹‹ 
}
›› 
}
ﬁﬁ 	
public
‚‚ 
int
‚‚ 

retryCount
‚‚ 
{
„„ 	
get
‰‰ 
{
ÂÂ 
try
ÊÊ 
{
ÁÁ 
return
ËË 
m_retryCount
ËË '
;
ËË' (
}
ÈÈ 
catch
ÍÍ 
(
ÍÍ 
	Exception
ÍÍ  
ex
ÍÍ! #
)
ÍÍ# $
{
ÎÎ 
FDebug
ÏÏ 
.
ÏÏ 
throwException
ÏÏ )
(
ÏÏ) *
ex
ÏÏ* ,
)
ÏÏ, -
;
ÏÏ- .
}
ÌÌ 
finally
ÓÓ 
{
ÔÔ 
}
ÒÒ 
return
ÚÚ 
$num
ÚÚ 
;
ÚÚ 
}
ÛÛ 
}
ÙÙ 	
private
¸¸ 
void
¸¸ 
genBlockData
¸¸ !
(
¸¸! "
)
˝˝ 
{
˛˛ 	
byte
ˇˇ 
[
ˇˇ 
]
ˇˇ 
tmpByte
ˇˇ 
=
ˇˇ 
null
ˇˇ !
;
ˇˇ! "
try
ÅÅ 
{
ÇÇ 
m_blockData
ÉÉ 
=
ÉÉ 
new
ÉÉ !
List
ÉÉ" &
<
ÉÉ& '
byte
ÉÉ' +
>
ÉÉ+ ,
(
ÉÉ, -
)
ÉÉ- .
;
ÉÉ. /
m_length
ää 
=
ää 
(
ää 
byte
ää  
)
ää  !
(
ää! "
$num
ää" $
+
ää% &
m_body
ää' -
.
ää- .
Count
ää. 3
)
ää3 4
;
ää4 5
m_blockData
ãã 
.
ãã 
Add
ãã 
(
ãã  
m_length
ãã  (
)
ãã( )
;
ãã) *
tmpByte
íí 
=
íí 
FByteConverter
íí (
.
íí( )
getBytes
íí) 1
(
íí1 2
m_sessionId
íí2 =
,
íí= >
true
íí? C
)
ííC D
;
ííD E
m_blockData
ìì 
.
ìì 
Add
ìì 
(
ìì  
(
ìì  !
byte
ìì! %
)
ìì% &
(
ìì& '
tmpByte
ìì' .
[
ìì. /
$num
ìì/ 0
]
ìì0 1
|
ìì2 3
(
ìì4 5
m_rbit
ìì5 ;
?
ìì< =
$num
ìì> B
:
ììC D
$num
ììE I
)
ììI J
)
ììJ K
)
ììK L
;
ììL M
m_blockData
îî 
.
îî 
Add
îî 
(
îî  
tmpByte
îî  '
[
îî' (
$num
îî( )
]
îî) *
)
îî* +
;
îî+ ,
m_blockData
ïï 
.
ïï 
Add
ïï 
(
ïï  
(
ïï  !
byte
ïï! %
)
ïï% &
(
ïï& '
m_stream
ïï' /
|
ïï0 1
(
ïï2 3
m_wbit
ïï3 9
?
ïï: ;
$num
ïï< @
:
ïïA B
$num
ïïC G
)
ïïG H
)
ïïH I
)
ïïI J
;
ïïJ K
m_blockData
ññ 
.
ññ 
Add
ññ 
(
ññ  

m_function
ññ  *
)
ññ* +
;
ññ+ ,
tmpByte
óó 
=
óó 
FByteConverter
óó (
.
óó( )
getBytes
óó) 1
(
óó1 2
	m_blockNo
óó2 ;
,
óó; <
true
óó= A
)
óóA B
;
óóB C
m_blockData
òò 
.
òò 
Add
òò 
(
òò  
(
òò  !
byte
òò! %
)
òò% &
(
òò& '
tmpByte
òò' .
[
òò. /
$num
òò/ 0
]
òò0 1
|
òò2 3
(
òò4 5
m_ebit
òò5 ;
?
òò< =
$num
òò> B
:
òòC D
$num
òòE I
)
òòI J
)
òòJ K
)
òòK L
;
òòL M
m_blockData
ôô 
.
ôô 
Add
ôô 
(
ôô  
tmpByte
ôô  '
[
ôô' (
$num
ôô( )
]
ôô) *
)
ôô* +
;
ôô+ ,
m_blockData
öö 
.
öö 
AddRange
öö $
(
öö$ %
FByteConverter
öö% 3
.
öö3 4
getBytes
öö4 <
(
öö< =
m_systemBytes
öö= J
,
ööJ K
true
ööL P
)
ööP Q
)
ööQ R
;
ööR S
if
°° 
(
°° 
m_body
°° 
.
°° 
Count
°°  
>
°°! "
$num
°°# $
)
°°$ %
{
¢¢ 
m_blockData
££ 
.
££  
AddRange
££  (
(
££( )
m_body
££) /
.
££/ 0
ToArray
££0 7
(
££7 8
)
££8 9
)
££9 :
;
££: ;
}
§§ 
for
´´ 
(
´´ 
int
´´ 
i
´´ 
=
´´ 
$num
´´ 
;
´´ 
i
´´  !
<
´´" #
m_blockData
´´$ /
.
´´/ 0
Count
´´0 5
;
´´5 6
i
´´7 8
++
´´8 :
)
´´: ;
{
¨¨ 

m_checkSum
≠≠ 
+=
≠≠ !
m_blockData
≠≠" -
[
≠≠- .
i
≠≠. /
]
≠≠/ 0
;
≠≠0 1
}
ÆÆ 
m_blockData
ØØ 
.
ØØ 
AddRange
ØØ $
(
ØØ$ %
FByteConverter
ØØ% 3
.
ØØ3 4
getBytes
ØØ4 <
(
ØØ< =

m_checkSum
ØØ= G
,
ØØG H
true
ØØI M
)
ØØM N
)
ØØN O
;
ØØO P
}
∞∞ 
catch
±± 
(
±± 
	Exception
±± 
ex
±± 
)
±±  
{
≤≤ 
FDebug
≥≥ 
.
≥≥ 
throwException
≥≥ %
(
≥≥% &
ex
≥≥& (
)
≥≥( )
;
≥≥) *
}
¥¥ 
finally
µµ 
{
∂∂ 
}
∏∏ 
}
ππ 	
public
ΩΩ 
void
ΩΩ 
addRetryCount
ΩΩ !
(
ΩΩ! "
)
ææ 
{
øø 	
try
¿¿ 
{
¡¡ 
m_retryCount
¬¬ 
++
¬¬ 
;
¬¬ 
}
√√ 
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ 
ex
ƒƒ 
)
ƒƒ  
{
≈≈ 
FDebug
∆∆ 
.
∆∆ 
throwException
∆∆ %
(
∆∆% &
ex
∆∆& (
)
∆∆( )
;
∆∆) *
}
«« 
finally
»» 
{
…… 
}
ÀÀ 
}
ÃÃ 	
}
““ 
}”” Ù4
ÇD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\Protocol\SECS1\c_FSecs1SendBlockList.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
internal 
class 
FSecs1SendBlockList &
:& '
IDisposable( 3
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
FSecsDataMessage  
m_fSecsDataMessage! 3
=4 5
null6 :
;: ;
private 
List 
< 
FSecs1SendBlock $
>$ %
m_fBlockList& 2
=3 4
null5 9
;9 :
private 
int 
m_blockIndex  
=! "
$num# $
;$ %
public%% 
FSecs1SendBlockList%% "
(%%" #
FSecs1ToHsms&& 
fSecs1ToHsms&& %
,&&% &
FSecsDataMessage'' 
fSecsDataMessage'' -
)(( 
{)) 	
m_fSecs1ToHsms** 
=** 
fSecs1ToHsms** )
;**) *
m_fSecsDataMessage++ 
=++  
fSecsDataMessage++! 1
;++1 2
m_fBlockList,, 
=,, 
new,, 
List,, #
<,,# $
FSecs1SendBlock,,$ 3
>,,3 4
(,,4 5
),,5 6
;,,6 7
}-- 	
~11 	
FSecs1SendBlockList11	 
(11 
)22 
{33 	
	myDispose44 
(44 
false44 
)44 
;44 
}55 	
	protected99 
void99 
	myDispose99  
(99  !
bool:: 
	disposing:: 
);; 
{<< 	
if== 
(== 
!== 

m_disposed== 
)== 
{>> 
if?? 
(?? 
	disposing?? 
)?? 
{@@ 
m_fSecs1ToHsmsAA "
=AA# $
nullAA% )
;AA) *
m_fSecsDataMessageBB &
=BB' (
nullBB) -
;BB- .
m_fBlockListCC  
=CC! "
nullCC# '
;CC' (
}DD 

m_disposedFF 
=FF 
trueFF !
;FF! "
}GG 
}HH 	
publicPP 
voidPP 
DisposePP 
(PP 
)QQ 
{RR 	
	myDisposeSS 
(SS 
trueSS 
)SS 
;SS 
GCTT 
.TT 
SuppressFinalizeTT 
(TT  
thisTT  $
)TT$ %
;TT% &
}UU 	
public]] 
int]] 
length]] 
{^^ 	
get__ 
{`` 
tryaa 
{bb 
returncc 
m_fBlockListcc '
.cc' (
Countcc( -
;cc- .
}dd 
catchee 
(ee 
	Exceptionee  
exee! #
)ee# $
{ff 
FDebuggg 
.gg 
throwExceptiongg )
(gg) *
exgg* ,
)gg, -
;gg- .
}hh 
finallyii 
{jj 
}ll 
returnmm 
$nummm 
;mm 
}nn 
}oo 	
publicss 
FSecs1SendBlockss 
fCurrentBlockss ,
{tt 	
getuu 
{vv 
tryww 
{xx 
returnyy 
m_fBlockListyy '
[yy' (
m_blockIndexyy( 4
]yy4 5
;yy5 6
}zz 
catch{{ 
({{ 
	Exception{{  
ex{{! #
){{# $
{|| 
FDebug}} 
.}} 
throwException}} )
(}}) *
ex}}* ,
)}}, -
;}}- .
}~~ 
finally 
{
ÄÄ 
}
ÇÇ 
return
ÉÉ 
null
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
public
ââ 
FSecsDataMessage
ââ 
fSecsDataMessage
ââ  0
{
ää 	
get
ãã 
{
åå 
try
çç 
{
éé 
return
èè  
m_fSecsDataMessage
èè -
;
èè- .
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë  
ex
ëë! #
)
ëë# $
{
íí 
FDebug
ìì 
.
ìì 
throwException
ìì )
(
ìì) *
ex
ìì* ,
)
ìì, -
;
ìì- .
}
îî 
finally
ïï 
{
ññ 
}
òò 
return
ôô 
null
ôô 
;
ôô 
}
öö 
}
õõ 	
public
££ 
void
££ 
addBlock
££ 
(
££ 
FSecs1SendBlock
§§ 
fBlock
§§ "
)
•• 
{
¶¶ 	
try
ßß 
{
®® 
m_fBlockList
©© 
.
©© 
Add
©©  
(
©©  !
fBlock
©©! '
)
©©' (
;
©©( )
}
™™ 
catch
´´ 
(
´´ 
	Exception
´´ 
ex
´´ 
)
´´  
{
¨¨ 
FDebug
≠≠ 
.
≠≠ 
throwException
≠≠ %
(
≠≠% &
ex
≠≠& (
)
≠≠( )
;
≠≠) *
}
ÆÆ 
finally
ØØ 
{
∞∞ 
}
≤≤ 
}
≥≥ 	
public
∑∑ 
bool
∑∑ 
next
∑∑ 
(
∑∑ 
)
∏∏ 
{
ππ 	
int
∫∫ 
index
∫∫ 
=
∫∫ 
$num
∫∫ 
;
∫∫ 
try
ºº 
{
ΩΩ 
index
ææ 
=
ææ 
m_blockIndex
ææ $
+
ææ% &
$num
ææ' (
;
ææ( )
if
øø 
(
øø 
index
øø 
>=
øø 
m_fBlockList
øø )
.
øø) *
Count
øø* /
)
øø/ 0
{
¿¿ 
return
¡¡ 
false
¡¡  
;
¡¡  !
}
¬¬ 
m_blockIndex
ƒƒ 
=
ƒƒ 
index
ƒƒ $
;
ƒƒ$ %
return
≈≈ 
true
≈≈ 
;
≈≈ 
}
∆∆ 
catch
«« 
(
«« 
	Exception
«« 
ex
«« 
)
««  
{
»» 
FDebug
…… 
.
…… 
throwException
…… %
(
……% &
ex
……& (
)
……( )
;
……) *
}
   
finally
ÀÀ 
{
ÃÃ 
}
ŒŒ 
return
œœ 
false
œœ 
;
œœ 
}
–– 	
}
÷÷ 
}◊◊ ÷"
ÑD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\SecsMessage\c_FInterceptingDataMessage.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

class $
FInterceptingDataMessage )
:) *
IDisposable+ 6
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
byte 
m_stream 
= 
$num  !
;! "
private 
byte 

m_function 
=  !
$num" #
;# $
public## $
FInterceptingDataMessage## '
(##' (
byte$$ 
stream$$ 
,$$ 
byte%% 
function%% 
)&& 
{'' 	
m_stream(( 
=(( 
stream(( 
;(( 

m_function)) 
=)) 
function)) !
;))! "
}** 	
~.. 	$
FInterceptingDataMessage..	 !
(..! "
)// 
{00 	
	myDispose11 
(11 
false11 
)11 
;11 
}22 	
	protected66 
void66 
	myDispose66  
(66  !
bool77 
	disposing77 
)88 
{99 	
if:: 
(:: 
!:: 

m_disposed:: 
):: 
{;; 
if<< 
(<< 
	disposing<< 
)<< 
{== 
}?? 

m_disposedAA 
=AA 
trueAA !
;AA! "
}BB 
}CC 	
publicKK 
voidKK 
DisposeKK 
(KK 
)LL 
{MM 	
	myDisposeNN 
(NN 
trueNN 
)NN 
;NN 
GCOO 
.OO 
SuppressFinalizeOO 
(OO  
thisOO  $
)OO$ %
;OO% &
}PP 	
publicXX 
byteXX 
streamXX 
{YY 	
getZZ 
{[[ 
try\\ 
{]] 
return^^ 
m_stream^^ #
;^^# $
}__ 
catch`` 
(`` 
	Exception``  
ex``! #
)``# $
{aa 
FDebugbb 
.bb 
throwExceptionbb )
(bb) *
exbb* ,
)bb, -
;bb- .
}cc 
finallydd 
{ee 
}gg 
returnhh 
$numhh 
;hh 
}ii 
}jj 	
publicnn 
bytenn 
functionnn 
{oo 	
getpp 
{qq 
tryrr 
{ss 
returntt 

m_functiontt %
;tt% &
}uu 
catchvv 
(vv 
	Exceptionvv  
exvv! #
)vv# $
{ww 
FDebugxx 
.xx 
throwExceptionxx )
(xx) *
exxx* ,
)xx, -
;xx- .
}yy 
finallyzz 
{{{ 
}}} 
return~~ 
$num~~ 
;~~ 
} 
}
ÄÄ 	
internal
àà 
string
àà 
getKey
àà 
(
àà 
)
ââ 
{
ää 	
const
ãã 
string
ãã 
	KeyFormat
ãã "
=
ãã# $
$str
ãã% .
;
ãã. /
try
çç 
{
éé 
return
èè 
string
èè 
.
èè 
Format
èè $
(
èè$ %
	KeyFormat
èè% .
,
èè. /
m_stream
èè0 8
.
èè8 9
ToString
èè9 A
(
èèA B
)
èèB C
,
èèC D

m_function
èèE O
.
èèO P
ToString
èèP X
(
èèX Y
)
èèY Z
)
èèZ [
;
èè[ \
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë 
ex
ëë 
)
ëë  
{
íí 
FDebug
ìì 
.
ìì 
throwException
ìì %
(
ìì% &
ex
ìì& (
)
ìì( )
;
ìì) *
}
îî 
finally
ïï 
{
ññ 
}
òò 
return
ôô 
string
ôô 
.
ôô 
Empty
ôô 
;
ôô  
}
öö 	
}
†† 
}°° ê•
|D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\SecsMessage\c_FSecsDataMessage.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

class 
FSecsDataMessage !
:! "
IDisposable# .
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
UInt16 
m_sessionId "
=# $
$num% &
;& '
private 
bool 
m_wbit 
= 
false #
;# $
private   
byte   
m_stream   
=   
$num    !
;  ! "
private!! 
byte!! 

m_function!! 
=!!  !
$num!!" #
;!!# $
private"" 
UInt32"" 
m_systemBytes"" $
=""% &
$num""' (
;""( )
private## 
List## 
<## 
byte## 
>## 
m_body## !
=##" #
null##$ (
;##( )
internal)) 
FSecsDataMessage)) !
())! "
FSecs1ToHsms** 
fSecs1ToHsms** %
,**% &
UInt16++ 
	sessionId++ 
,++ 
bool,, 
wbit,, 
,,, 
byte-- 
stream-- 
,-- 
byte.. 
function.. 
,.. 
UInt32// 
systemBytes// 
,// 
byte00 
[00 
]00 
body00 
)11 
{22 	
m_fSecs1ToHsms33 
=33 
fSecs1ToHsms33 )
;33) *
m_sessionId55 
=55 
	sessionId55 #
;55# $
m_wbit66 
=66 
wbit66 
;66 
m_stream77 
=77 
stream77 
;77 

m_function88 
=88 
function88 !
;88! "
m_systemBytes99 
=99 
systemBytes99 '
;99' (
m_body:: 
=:: 
new:: 
List:: 
<:: 
byte:: "
>::" #
(::# $
body::$ (
)::( )
;::) *
};; 	
~?? 	
FSecsDataMessage??	 
(?? 
)@@ 
{AA 	
	myDisposeBB 
(BB 
falseBB 
)BB 
;BB 
}CC 	
	protectedGG 
voidGG 
	myDisposeGG  
(GG  !
boolHH 
	disposingHH 
)II 
{JJ 	
ifKK 
(KK 
!KK 

m_disposedKK 
)KK 
{LL 
ifMM 
(MM 
	disposingMM 
)MM 
{NN 
m_fSecs1ToHsmsOO "
=OO# $
nullOO% )
;OO) *
m_bodyPP 
=PP 
nullPP !
;PP! "
}QQ 

m_disposedSS 
=SS 
trueSS !
;SS! "
}TT 
}UU 	
public]] 
void]] 
Dispose]] 
(]] 
)^^ 
{__ 	
	myDispose`` 
(`` 
true`` 
)`` 
;`` 
GCaa 
.aa 
SuppressFinalizeaa 
(aa  
thisaa  $
)aa$ %
;aa% &
}bb 	
publicjj 
UInt32jj 
lengthjj 
{kk 	
getll 
{mm 
trynn 
{oo 
returnpp 
(pp 
UInt32pp "
)pp" #
(pp# $
$numpp$ &
+pp' (
m_bodypp) /
.pp/ 0
Countpp0 5
)pp5 6
;pp6 7
}qq 
catchrr 
(rr 
	Exceptionrr  
exrr! #
)rr# $
{ss 
FDebugtt 
.tt 
throwExceptiontt )
(tt) *
extt* ,
)tt, -
;tt- .
}uu 
finallyvv 
{ww 
}yy 
returnzz 
$numzz 
;zz 
}{{ 
}|| 	
public
ÄÄ 
UInt16
ÄÄ 
	sessionId
ÄÄ 
{
ÅÅ 	
get
ÇÇ 
{
ÉÉ 
try
ÑÑ 
{
ÖÖ 
return
ÜÜ 
m_sessionId
ÜÜ &
;
ÜÜ& '
}
áá 
catch
àà 
(
àà 
	Exception
àà  
ex
àà! #
)
àà# $
{
ââ 
FDebug
ää 
.
ää 
throwException
ää )
(
ää) *
ex
ää* ,
)
ää, -
;
ää- .
}
ãã 
finally
åå 
{
çç 
}
èè 
return
êê 
$num
êê 
;
êê 
}
ëë 
}
íí 	
public
ññ 
bool
ññ 
wbit
ññ 
{
óó 	
get
òò 
{
ôô 
try
öö 
{
õõ 
return
úú 
m_wbit
úú !
;
úú! "
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû  
ex
ûû! #
)
ûû# $
{
üü 
FDebug
†† 
.
†† 
throwException
†† )
(
††) *
ex
††* ,
)
††, -
;
††- .
}
°° 
finally
¢¢ 
{
££ 
}
•• 
return
¶¶ 
false
¶¶ 
;
¶¶ 
}
ßß 
}
®® 	
public
¨¨ 
byte
¨¨ 
stream
¨¨ 
{
≠≠ 	
get
ÆÆ 
{
ØØ 
try
∞∞ 
{
±± 
return
≤≤ 
m_stream
≤≤ #
;
≤≤# $
}
≥≥ 
catch
¥¥ 
(
¥¥ 
	Exception
¥¥  
ex
¥¥! #
)
¥¥# $
{
µµ 
FDebug
∂∂ 
.
∂∂ 
throwException
∂∂ )
(
∂∂) *
ex
∂∂* ,
)
∂∂, -
;
∂∂- .
}
∑∑ 
finally
∏∏ 
{
ππ 
}
ªª 
return
ºº 
$num
ºº 
;
ºº 
}
ΩΩ 
}
ææ 	
public
¬¬ 
byte
¬¬ 
function
¬¬ 
{
√√ 	
get
ƒƒ 
{
≈≈ 
try
∆∆ 
{
«« 
return
»» 

m_function
»» %
;
»»% &
}
…… 
catch
   
(
   
	Exception
    
ex
  ! #
)
  # $
{
ÀÀ 
FDebug
ÃÃ 
.
ÃÃ 
throwException
ÃÃ )
(
ÃÃ) *
ex
ÃÃ* ,
)
ÃÃ, -
;
ÃÃ- .
}
ÕÕ 
finally
ŒŒ 
{
œœ 
}
—— 
return
““ 
$num
““ 
;
““ 
}
”” 
}
‘‘ 	
public
ÿÿ 
UInt32
ÿÿ 
systemBytes
ÿÿ !
{
ŸŸ 	
get
⁄⁄ 
{
€€ 
try
‹‹ 
{
›› 
return
ﬁﬁ 
m_systemBytes
ﬁﬁ (
;
ﬁﬁ( )
}
ﬂﬂ 
catch
‡‡ 
(
‡‡ 
	Exception
‡‡  
ex
‡‡! #
)
‡‡# $
{
·· 
FDebug
‚‚ 
.
‚‚ 
throwException
‚‚ )
(
‚‚) *
ex
‚‚* ,
)
‚‚, -
;
‚‚- .
}
„„ 
finally
‰‰ 
{
ÂÂ 
}
ÁÁ 
return
ËË 
$num
ËË 
;
ËË 
}
ÈÈ 
}
ÍÍ 	
public
ÓÓ 
byte
ÓÓ 
[
ÓÓ 
]
ÓÓ 
body
ÓÓ 
{
ÔÔ 	
get
 
{
ÒÒ 
try
ÚÚ 
{
ÛÛ 
return
ÙÙ 
m_body
ÙÙ !
.
ÙÙ! "
ToArray
ÙÙ" )
(
ÙÙ) *
)
ÙÙ* +
;
ÙÙ+ ,
}
ıı 
catch
ˆˆ 
(
ˆˆ 
	Exception
ˆˆ  
ex
ˆˆ! #
)
ˆˆ# $
{
˜˜ 
FDebug
¯¯ 
.
¯¯ 
throwException
¯¯ )
(
¯¯) *
ex
¯¯* ,
)
¯¯, -
;
¯¯- .
}
˘˘ 
finally
˙˙ 
{
˚˚ 
}
˝˝ 
return
˛˛ 
null
˛˛ 
;
˛˛ 
}
ˇˇ 
}
ÄÄ 	
internal
àà 
FSecsDataMessage
àà !
clone
àà" '
(
àà' (
)
ââ 
{
ää 	
try
ãã 
{
åå 
return
çç 
new
çç 
FSecsDataMessage
çç +
(
çç+ ,
m_fSecs1ToHsms
éé "
,
éé" #
m_sessionId
èè 
,
èè  
m_wbit
êê 
,
êê 
m_stream
ëë 
,
ëë 

m_function
íí 
,
íí 
m_systemBytes
ìì !
,
ìì! "
m_body
îî 
.
îî 
ToArray
îî "
(
îî" #
)
îî# $
)
ïï 
;
ïï 
}
ññ 
catch
óó 
(
óó 
	Exception
óó 
ex
óó 
)
óó  
{
òò 
FDebug
ôô 
.
ôô 
throwException
ôô %
(
ôô% &
ex
ôô& (
)
ôô( )
;
ôô) *
}
öö 
finally
õõ 
{
úú 
}
ûû 
return
üü 
null
üü 
;
üü 
}
†† 	
internal
§§ 
byte
§§ 
[
§§ 
]
§§ 
getHsmsBinaryData
§§ )
(
§§) *
bool
•• 
lengthInclude
•• 
)
¶¶ 
{
ßß 	
byte
®® 
[
®® 
]
®® 
binData
®® 
=
®® 
null
®® !
;
®®! "
UInt32
©© 
length
©© 
=
©© 
$num
©© 
;
©© 
byte
™™ 
byte2
™™ 
=
™™ 
$num
™™ 
;
™™ 
byte
´´ 
byte3
´´ 
=
´´ 
$num
´´ 
;
´´ 
byte
¨¨ 
ptype
¨¨ 
=
¨¨ 
$num
¨¨ 
;
¨¨ 
byte
≠≠ 
stype
≠≠ 
=
≠≠ 
$num
≠≠ 
;
≠≠ 
int
ÆÆ 
pos
ÆÆ 
=
ÆÆ 
$num
ÆÆ 
;
ÆÆ 
try
∞∞ 
{
±± 
length
≤≤ 
=
≤≤ 
this
≤≤ 
.
≤≤ 
length
≤≤ $
;
≤≤$ %
byte2
≥≥ 
=
≥≥ 
(
≥≥ 
byte
≥≥ 
)
≥≥ 
(
≥≥ 
stream
≥≥ %
|
≥≥& '
(
≥≥( )
wbit
≥≥) -
?
≥≥. /
$num
≥≥0 4
:
≥≥5 6
$num
≥≥7 ;
)
≥≥; <
)
≥≥< =
;
≥≥= >
byte3
¥¥ 
=
¥¥ 
function
¥¥  
;
¥¥  !
ptype
µµ 
=
µµ 
$num
µµ 
;
µµ 
stype
∂∂ 
=
∂∂ 
$num
∂∂ 
;
∂∂ 
if
∫∫ 
(
∫∫ 
lengthInclude
∫∫ !
)
∫∫! "
{
ªª 
binData
ºº 
=
ºº 
new
ºº !
byte
ºº" &
[
ºº& '
length
ºº' -
+
ºº. /
$num
ºº0 1
]
ºº1 2
;
ºº2 3
Buffer
√√ 
.
√√ 
	BlockCopy
√√ $
(
√√$ %
FByteConverter
√√% 3
.
√√3 4
getBytes
√√4 <
(
√√< =
length
√√= C
,
√√C D
true
√√E I
)
√√I J
,
√√J K
$num
√√L M
,
√√M N
binData
√√O V
,
√√V W
pos
√√X [
,
√√[ \
$num
√√] ^
)
√√^ _
;
√√_ `
pos
ƒƒ 
+=
ƒƒ 
$num
ƒƒ 
;
ƒƒ 
}
≈≈ 
else
∆∆ 
{
«« 
binData
»» 
=
»» 
new
»» !
byte
»»" &
[
»»& '
length
»»' -
]
»»- .
;
»». /
}
…… 
Buffer
–– 
.
–– 
	BlockCopy
––  
(
––  !
FByteConverter
––! /
.
––/ 0
getBytes
––0 8
(
––8 9
m_sessionId
––9 D
,
––D E
true
––F J
)
––J K
,
––K L
$num
––M N
,
––N O
binData
––P W
,
––W X
pos
––Y \
,
––\ ]
$num
––^ _
)
––_ `
;
––` a
pos
—— 
+=
—— 
$num
—— 
;
—— 
binData
““ 
[
““ 
pos
““ 
++
““ 
]
““ 
=
““  
byte2
““! &
;
““& '
binData
”” 
[
”” 
pos
”” 
++
”” 
]
”” 
=
””  
byte3
””! &
;
””& '
binData
‘‘ 
[
‘‘ 
pos
‘‘ 
++
‘‘ 
]
‘‘ 
=
‘‘  
ptype
‘‘! &
;
‘‘& '
binData
’’ 
[
’’ 
pos
’’ 
++
’’ 
]
’’ 
=
’’  
stype
’’! &
;
’’& '
Buffer
÷÷ 
.
÷÷ 
	BlockCopy
÷÷  
(
÷÷  !
FByteConverter
÷÷! /
.
÷÷/ 0
getBytes
÷÷0 8
(
÷÷8 9
m_systemBytes
÷÷9 F
,
÷÷F G
true
÷÷H L
)
÷÷L M
,
÷÷M N
$num
÷÷O P
,
÷÷P Q
binData
÷÷R Y
,
÷÷Y Z
pos
÷÷[ ^
,
÷÷^ _
$num
÷÷` a
)
÷÷a b
;
÷÷b c
pos
◊◊ 
+=
◊◊ 
$num
◊◊ 
;
◊◊ 
if
ﬁﬁ 
(
ﬁﬁ 
m_body
ﬁﬁ 
.
ﬁﬁ 
Count
ﬁﬁ  
>
ﬁﬁ! "
$num
ﬁﬁ# $
)
ﬁﬁ$ %
{
ﬂﬂ 
Buffer
‡‡ 
.
‡‡ 
	BlockCopy
‡‡ $
(
‡‡$ %
m_body
‡‡% +
.
‡‡+ ,
ToArray
‡‡, 3
(
‡‡3 4
)
‡‡4 5
,
‡‡5 6
$num
‡‡7 8
,
‡‡8 9
binData
‡‡: A
,
‡‡A B
pos
‡‡C F
,
‡‡F G
m_body
‡‡H N
.
‡‡N O
Count
‡‡O T
)
‡‡T U
;
‡‡U V
}
·· 
return
ÂÂ 
binData
ÂÂ 
;
ÂÂ 
}
ÊÊ 
catch
ÁÁ 
(
ÁÁ 
	Exception
ÁÁ 
ex
ÁÁ 
)
ÁÁ  
{
ËË 
FDebug
ÈÈ 
.
ÈÈ 
throwException
ÈÈ %
(
ÈÈ% &
ex
ÈÈ& (
)
ÈÈ( )
;
ÈÈ) *
}
ÍÍ 
finally
ÎÎ 
{
ÏÏ 
}
ÓÓ 
return
ÔÔ 
null
ÔÔ 
;
ÔÔ 
}
 	
internal
ÙÙ !
FSecs1SendBlockList
ÙÙ $#
getSecs1SendBlockList
ÙÙ% :
(
ÙÙ: ;
)
ıı 
{
ˆˆ 	
const
˜˜ 
int
˜˜ 
MAX_BODY_SIZE
˜˜ #
=
˜˜$ %
$num
˜˜& )
;
˜˜) *!
FSecs1SendBlockList
˘˘ 

fBlockList
˘˘  *
=
˘˘+ ,
null
˘˘- 1
;
˘˘1 2
FSecs1SendBlock
˙˙ 
fBlock
˙˙ "
=
˙˙# $
null
˙˙% )
;
˙˙) *
int
˚˚ 
blockCnt
˚˚ 
=
˚˚ 
$num
˚˚ 
;
˚˚ 
UInt16
¸¸ 
blockNo
¸¸ 
=
¸¸ 
$num
¸¸ 
;
¸¸ 
bool
˝˝ 
ebit
˝˝ 
=
˝˝ 
false
˝˝ 
;
˝˝ 
byte
˛˛ 
[
˛˛ 
]
˛˛ 
body
˛˛ 
=
˛˛ 
null
˛˛ 
;
˛˛ 
int
ˇˇ 
pos
ˇˇ 
=
ˇˇ 
$num
ˇˇ 
;
ˇˇ 
int
ÄÄ 
copyLen
ÄÄ 
=
ÄÄ 
$num
ÄÄ 
;
ÄÄ 
try
ÇÇ 
{
ÉÉ 

fBlockList
ÑÑ 
=
ÑÑ 
new
ÑÑ  !
FSecs1SendBlockList
ÑÑ! 4
(
ÑÑ4 5
m_fSecs1ToHsms
ÑÑ5 C
,
ÑÑC D
this
ÑÑE I
)
ÑÑI J
;
ÑÑJ K
if
åå 
(
åå 
m_body
åå 
.
åå 
Count
åå  
==
åå! #
$num
åå$ %
)
åå% &
{
çç 
blockCnt
éé 
=
éé 
$num
éé  
;
éé  !
}
èè 
else
êê 
{
ëë 
blockCnt
íí 
=
íí 
m_body
íí %
.
íí% &
Count
íí& +
/
íí, -
MAX_BODY_SIZE
íí. ;
;
íí; <
blockCnt
ìì 
+=
ìì 
(
ìì  !
m_body
ìì! '
.
ìì' (
Count
ìì( -
%
ìì. /
MAX_BODY_SIZE
ìì0 =
>
ìì> ?
$num
ìì@ A
?
ììB C
$num
ììD E
:
ììF G
$num
ììH I
)
ììI J
;
ììJ K
}
îî 
for
òò 
(
òò 
int
òò 
i
òò 
=
òò 
$num
òò 
;
òò 
i
òò  !
<
òò" #
blockCnt
òò$ ,
;
òò, -
i
òò. /
++
òò/ 1
)
òò1 2
{
ôô 
blockNo
öö 
++
öö 
;
öö 
if
°° 
(
°° 
i
°° 
==
°° 
blockCnt
°° %
-
°°& '
$num
°°( )
)
°°) *
{
¢¢ 
ebit
££ 
=
££ 
true
££ #
;
££# $
if
§§ 
(
§§ 
m_body
§§ "
.
§§" #
Count
§§# (
==
§§) +
$num
§§, -
)
§§- .
{
•• 
copyLen
¶¶ #
=
¶¶$ %
$num
¶¶& '
;
¶¶' (
}
ßß 
else
®® 
{
©© 
copyLen
™™ #
=
™™$ %
m_body
™™& ,
.
™™, -
Count
™™- 2
%
™™3 4
MAX_BODY_SIZE
™™5 B
;
™™B C
if
´´ 
(
´´  
copyLen
´´  '
==
´´( *
$num
´´+ ,
)
´´, -
{
¨¨ 
copyLen
≠≠  '
=
≠≠( )
MAX_BODY_SIZE
≠≠* 7
;
≠≠7 8
}
ÆÆ 
}
ØØ 
}
∞∞ 
else
±± 
{
≤≤ 
ebit
≥≥ 
=
≥≥ 
false
≥≥ $
;
≥≥$ %
copyLen
¥¥ 
=
¥¥  !
MAX_BODY_SIZE
¥¥" /
;
¥¥/ 0
}
µµ 
body
∏∏ 
=
∏∏ 
m_body
∏∏ !
.
∏∏! "
GetRange
∏∏" *
(
∏∏* +
pos
∏∏+ .
,
∏∏. /
copyLen
∏∏0 7
)
∏∏7 8
.
∏∏8 9
ToArray
∏∏9 @
(
∏∏@ A
)
∏∏A B
;
∏∏B C
pos
ππ 
+=
ππ 
copyLen
ππ "
;
ππ" #
fBlock
ΩΩ 
=
ΩΩ 
new
ΩΩ  
FSecs1SendBlock
ΩΩ! 0
(
ΩΩ0 1

fBlockList
ææ "
,
ææ" #
m_fSecs1ToHsms
øø &
.
øø& '
fSecs1Config
øø' 3
.
øø3 4
rbit
øø4 8
,
øø8 9
m_sessionId
¿¿ #
,
¿¿# $
m_wbit
¡¡ 
,
¡¡ 
m_stream
¬¬  
,
¬¬  !

m_function
√√ "
,
√√" #
ebit
ƒƒ 
,
ƒƒ 
blockNo
≈≈ 
,
≈≈  
systemBytes
∆∆ #
,
∆∆# $
body
«« 
)
»» 
;
»» 

fBlockList
   
.
   
addBlock
   '
(
  ' (
fBlock
  ( .
)
  . /
;
  / 0
}
ÀÀ 
return
ÕÕ 

fBlockList
ÕÕ !
;
ÕÕ! "
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ 
ex
œœ 
)
œœ  
{
–– 
FDebug
—— 
.
—— 
throwException
—— %
(
——% &
ex
——& (
)
——( )
;
——) *
}
““ 
finally
”” 
{
‘‘ 
}
÷÷ 
return
◊◊ 
null
◊◊ 
;
◊◊ 
}
ÿÿ 	
public
‹‹ 
FXmlNode
‹‹ 
convertToXmlNode
‹‹ (
(
‹‹( )
)
›› 
{
ﬁﬁ 	
try
ﬂﬂ 
{
‡‡ 
return
·· 
FSecsConverter
·· %
.
··% &!
convertBinToXmlNode
··& 9
(
··9 :
m_sessionId
··: E
,
··E F
m_stream
··G O
,
··O P

m_function
··Q [
,
··[ \
m_wbit
··] c
,
··c d
m_systemBytes
··e r
,
··r s
m_body
··t z
.
··z {
ToArray··{ Ç
(··Ç É
)··É Ñ
)··Ñ Ö
;··Ö Ü
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
ex
„„ 
)
„„  
{
‰‰ 
FDebug
ÂÂ 
.
ÂÂ 
throwException
ÂÂ %
(
ÂÂ% &
ex
ÂÂ& (
)
ÂÂ( )
;
ÂÂ) *
}
ÊÊ 
finally
ÁÁ 
{
ËË 
}
ÍÍ 
return
ÎÎ 
null
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
}
ÚÚ 
}ÛÛ ﬁh
vD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\SecsMessage\c_FSecsBlock.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

class 

FSecsBlock 
: 
IDisposable (
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
byte 
m_length 
= 
$num  !
;! "
private 
List 
< 
byte 
> 
m_blockData &
=' (
null) -
;- .
private!! 
bool!! 
m_rbit!! 
=!! 
false!! #
;!!# $
private"" 
UInt16"" 
m_sessionId"" "
=""# $
$num""% &
;""& '
private## 
bool## 
m_wbit## 
=## 
false## #
;### $
private$$ 
byte$$ 
m_stream$$ 
=$$ 
$num$$  !
;$$! "
private%% 
byte%% 

m_function%% 
=%%  !
$num%%" #
;%%# $
private&& 
bool&& 
m_ebit&& 
=&& 
false&& #
;&&# $
private'' 
UInt16'' 
	m_blockNo''  
=''! "
$num''# $
;''$ %
private(( 
UInt32(( 
m_systemBytes(( $
=((% &
$num((' (
;((( )
private)) 
List)) 
<)) 
byte)) 
>)) 
m_body)) !
=))" #
null))$ (
;))( )
private** 
UInt16** 

m_checkSum** !
=**" #
$num**$ %
;**% &
internal00 

FSecsBlock00 
(00 
FSecs1ToHsms11 
fSecs1ToHsms11 %
,11% &
byte22 
length22 
,22 
byte33 
[33 
]33 
	blockData33 
,33 
bool44 
rbit44 
,44 
UInt1655 
	sessionId55 
,55 
bool66 
wbit66 
,66 
byte77 
stream77 
,77 
byte88 
function88 
,88 
bool99 
ebit99 
,99 
UInt16:: 
blockNo:: 
,:: 
UInt32;; 
systemBytes;; 
,;; 
byte<< 
[<< 
]<< 
body<< 
,<< 
UInt16== 
checkSum== 
)>> 
{?? 	
m_fSecs1ToHsms@@ 
=@@ 
fSecs1ToHsms@@ )
;@@) *
m_lengthBB 
=BB 
lengthBB 
;BB 
m_blockDataCC 
=CC 
newCC 
ListCC "
<CC" #
byteCC# '
>CC' (
(CC( )
	blockDataCC) 2
)CC2 3
;CC3 4
m_rbitEE 
=EE 
rbitEE 
;EE 
m_sessionIdFF 
=FF 
	sessionIdFF #
;FF# $
m_wbitGG 
=GG 
wbitGG 
;GG 
m_streamHH 
=HH 
streamHH 
;HH 

m_functionII 
=II 
functionII !
;II! "
m_ebitJJ 
=JJ 
ebitJJ 
;JJ 
	m_blockNoKK 
=KK 
blockNoKK 
;KK  
m_systemBytesLL 
=LL 
systemBytesLL '
;LL' (
m_bodyMM 
=MM 
newMM 
ListMM 
<MM 
byteMM "
>MM" #
(MM# $
bodyMM$ (
)MM( )
;MM) *

m_checkSumNN 
=NN 
checkSumNN !
;NN! "
}OO 	
~SS 	

FSecsBlockSS	 
(SS 
)TT 
{UU 	
	myDisposeVV 
(VV 
falseVV 
)VV 
;VV 
}WW 	
	protected[[ 
void[[ 
	myDispose[[  
([[  !
bool\\ 
	disposing\\ 
)]] 
{^^ 	
if__ 
(__ 
!__ 

m_disposed__ 
)__ 
{`` 
ifaa 
(aa 
	disposingaa 
)aa 
{bb 
m_fSecs1ToHsmscc "
=cc# $
nullcc% )
;cc) *
m_blockDatadd 
=dd  !
nulldd" &
;dd& '
m_bodyee 
=ee 
nullee !
;ee! "
}ff 

m_disposedhh 
=hh 
truehh !
;hh! "
}ii 
}jj 	
publicrr 
voidrr 
Disposerr 
(rr 
)ss 
{tt 	
	myDisposeuu 
(uu 
trueuu 
)uu 
;uu 
GCvv 
.vv 
SuppressFinalizevv 
(vv  
thisvv  $
)vv$ %
;vv% &
}ww 	
public 
byte 
length 
{
ÄÄ 	
get
ÅÅ 
{
ÇÇ 
try
ÉÉ 
{
ÑÑ 
return
ÖÖ 
m_length
ÖÖ #
;
ÖÖ# $
}
ÜÜ 
catch
áá 
(
áá 
	Exception
áá  
ex
áá! #
)
áá# $
{
àà 
FDebug
ââ 
.
ââ 
throwException
ââ )
(
ââ) *
ex
ââ* ,
)
ââ, -
;
ââ- .
}
ää 
finally
ãã 
{
åå 
}
éé 
return
èè 
$num
èè 
;
èè 
}
êê 
}
ëë 	
public
ïï 
byte
ïï 
[
ïï 
]
ïï 
	blockData
ïï 
{
ññ 	
get
óó 
{
òò 
try
ôô 
{
öö 
return
õõ 
m_blockData
õõ &
.
õõ& '
ToArray
õõ' .
(
õõ. /
)
õõ/ 0
;
õõ0 1
}
úú 
catch
ùù 
(
ùù 
	Exception
ùù  
ex
ùù! #
)
ùù# $
{
ûû 
FDebug
üü 
.
üü 
throwException
üü )
(
üü) *
ex
üü* ,
)
üü, -
;
üü- .
}
†† 
finally
°° 
{
¢¢ 
}
§§ 
return
•• 
null
•• 
;
•• 
}
¶¶ 
}
ßß 	
public
´´ 
bool
´´ 
rbit
´´ 
{
¨¨ 	
get
≠≠ 
{
ÆÆ 
try
ØØ 
{
∞∞ 
return
±± 
m_rbit
±± !
;
±±! "
}
≤≤ 
catch
≥≥ 
(
≥≥ 
	Exception
≥≥  
ex
≥≥! #
)
≥≥# $
{
¥¥ 
FDebug
µµ 
.
µµ 
throwException
µµ )
(
µµ) *
ex
µµ* ,
)
µµ, -
;
µµ- .
}
∂∂ 
finally
∑∑ 
{
∏∏ 
}
∫∫ 
return
ªª 
false
ªª 
;
ªª 
}
ºº 
}
ΩΩ 	
public
¡¡ 
UInt16
¡¡ 
	sessionId
¡¡ 
{
¬¬ 	
get
√√ 
{
ƒƒ 
try
≈≈ 
{
∆∆ 
return
«« 
m_sessionId
«« &
;
««& '
}
»» 
catch
…… 
(
…… 
	Exception
……  
ex
……! #
)
……# $
{
   
FDebug
ÀÀ 
.
ÀÀ 
throwException
ÀÀ )
(
ÀÀ) *
ex
ÀÀ* ,
)
ÀÀ, -
;
ÀÀ- .
}
ÃÃ 
finally
ÕÕ 
{
ŒŒ 
}
–– 
return
—— 
$num
—— 
;
—— 
}
““ 
}
”” 	
public
◊◊ 
bool
◊◊ 
wbit
◊◊ 
{
ÿÿ 	
get
ŸŸ 
{
⁄⁄ 
try
€€ 
{
‹‹ 
return
›› 
m_wbit
›› !
;
››! "
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ 
	Exception
ﬂﬂ  
ex
ﬂﬂ! #
)
ﬂﬂ# $
{
‡‡ 
FDebug
·· 
.
·· 
throwException
·· )
(
··) *
ex
··* ,
)
··, -
;
··- .
}
‚‚ 
finally
„„ 
{
‰‰ 
}
ÊÊ 
return
ÁÁ 
false
ÁÁ 
;
ÁÁ 
}
ËË 
}
ÈÈ 	
public
ÌÌ 
byte
ÌÌ 
stream
ÌÌ 
{
ÓÓ 	
get
ÔÔ 
{
 
try
ÒÒ 
{
ÚÚ 
return
ÛÛ 
m_stream
ÛÛ #
;
ÛÛ# $
}
ÙÙ 
catch
ıı 
(
ıı 
	Exception
ıı  
ex
ıı! #
)
ıı# $
{
ˆˆ 
FDebug
˜˜ 
.
˜˜ 
throwException
˜˜ )
(
˜˜) *
ex
˜˜* ,
)
˜˜, -
;
˜˜- .
}
¯¯ 
finally
˘˘ 
{
˙˙ 
}
¸¸ 
return
˝˝ 
$num
˝˝ 
;
˝˝ 
}
˛˛ 
}
ˇˇ 	
public
ÉÉ 
byte
ÉÉ 
function
ÉÉ 
{
ÑÑ 	
get
ÖÖ 
{
ÜÜ 
try
áá 
{
àà 
return
ââ 

m_function
ââ %
;
ââ% &
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã  
ex
ãã! #
)
ãã# $
{
åå 
FDebug
çç 
.
çç 
throwException
çç )
(
çç) *
ex
çç* ,
)
çç, -
;
çç- .
}
éé 
finally
èè 
{
êê 
}
íí 
return
ìì 
$num
ìì 
;
ìì 
}
îî 
}
ïï 	
public
ôô 
bool
ôô 
ebit
ôô 
{
öö 	
get
õõ 
{
úú 
try
ùù 
{
ûû 
return
üü 
m_ebit
üü !
;
üü! "
}
†† 
catch
°° 
(
°° 
	Exception
°°  
ex
°°! #
)
°°# $
{
¢¢ 
FDebug
££ 
.
££ 
throwException
££ )
(
££) *
ex
££* ,
)
££, -
;
££- .
}
§§ 
finally
•• 
{
¶¶ 
}
®® 
return
©© 
false
©© 
;
©© 
}
™™ 
}
´´ 	
public
ØØ 
UInt16
ØØ 
blockNo
ØØ 
{
∞∞ 	
get
±± 
{
≤≤ 
try
≥≥ 
{
¥¥ 
return
µµ 
	m_blockNo
µµ $
;
µµ$ %
}
∂∂ 
catch
∑∑ 
(
∑∑ 
	Exception
∑∑  
ex
∑∑! #
)
∑∑# $
{
∏∏ 
FDebug
ππ 
.
ππ 
throwException
ππ )
(
ππ) *
ex
ππ* ,
)
ππ, -
;
ππ- .
}
∫∫ 
finally
ªª 
{
ºº 
}
ææ 
return
øø 
$num
øø 
;
øø 
}
¿¿ 
}
¡¡ 	
public
≈≈ 
UInt32
≈≈ 
systemBytes
≈≈ !
{
∆∆ 	
get
«« 
{
»» 
try
…… 
{
   
return
ÀÀ 
m_systemBytes
ÀÀ (
;
ÀÀ( )
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ  
ex
ÕÕ! #
)
ÕÕ# $
{
ŒŒ 
FDebug
œœ 
.
œœ 
throwException
œœ )
(
œœ) *
ex
œœ* ,
)
œœ, -
;
œœ- .
}
–– 
finally
—— 
{
““ 
}
‘‘ 
return
’’ 
$num
’’ 
;
’’ 
}
÷÷ 
}
◊◊ 	
public
€€ 
byte
€€ 
[
€€ 
]
€€ 
body
€€ 
{
‹‹ 	
get
›› 
{
ﬁﬁ 
try
ﬂﬂ 
{
‡‡ 
return
·· 
m_body
·· !
.
··! "
ToArray
··" )
(
··) *
)
··* +
;
··+ ,
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„  
ex
„„! #
)
„„# $
{
‰‰ 
FDebug
ÂÂ 
.
ÂÂ 
throwException
ÂÂ )
(
ÂÂ) *
ex
ÂÂ* ,
)
ÂÂ, -
;
ÂÂ- .
}
ÊÊ 
finally
ÁÁ 
{
ËË 
}
ÍÍ 
return
ÎÎ 
null
ÎÎ 
;
ÎÎ 
}
ÏÏ 
}
ÌÌ 	
public
ÒÒ 
UInt16
ÒÒ 
checkSum
ÒÒ 
{
ÚÚ 	
get
ÛÛ 
{
ÙÙ 
try
ıı 
{
ˆˆ 
return
˜˜ 

m_checkSum
˜˜ %
;
˜˜% &
}
¯¯ 
catch
˘˘ 
(
˘˘ 
	Exception
˘˘  
ex
˘˘! #
)
˘˘# $
{
˙˙ 
FDebug
˚˚ 
.
˚˚ 
throwException
˚˚ )
(
˚˚) *
ex
˚˚* ,
)
˚˚, -
;
˚˚- .
}
¸¸ 
finally
˝˝ 
{
˛˛ 
}
ÄÄ 
return
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 	
}
èè 
}êê  e
D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\SecsMessage\c_FSecsControlMessage.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

class 
FSecsControlMessage $
:$ %
IDisposable& 1
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private #
FHsmsControlMessageType '
m_fType( /
=0 1#
FHsmsControlMessageType2 I
.I J
	SelectReqJ S
;S T
private 
UInt16 
m_sessionId "
=# $
$num% &
;& '
private   
byte   
m_byte2   
=   
$num    
;    !
private!! 
byte!! 
m_byte3!! 
=!! 
$num!!  
;!!  !
private"" 
byte"" 
m_ptype"" 
="" 
$num""  
;""  !
private## 
byte## 
m_stype## 
=## 
$num##  
;##  !
private$$ 
UInt32$$ 
m_systemBytes$$ $
=$$% &
$num$$' (
;$$( )
private%% 
string%% 
m_reason%% 
=%%  !
string%%" (
.%%( )
Empty%%) .
;%%. /
internal++ 
FSecsControlMessage++ $
(++$ %
FSecs1ToHsms,, 
fSecs1ToHsms,, %
,,,% &#
FHsmsControlMessageType-- #
fType--$ )
,--) *
UInt16.. 
	sessionId.. 
,.. 
byte// 
byte2// 
,// 
byte00 
byte300 
,00 
byte11 
ptype11 
,11 
byte22 
stype22 
,22 
UInt3233 
systemBytes33 
,33 
string44 
reason44 
)55 
{66 	
m_fSecs1ToHsms77 
=77 
fSecs1ToHsms77 )
;77) *
m_fType99 
=99 
fType99 
;99 
m_sessionId:: 
=:: 
	sessionId:: #
;::# $
m_byte2;; 
=;; 
byte2;; 
;;; 
m_byte3<< 
=<< 
byte3<< 
;<< 
m_ptype== 
=== 
ptype== 
;== 
m_stype>> 
=>> 
stype>> 
;>> 
m_systemBytes?? 
=?? 
systemBytes?? '
;??' (
m_reason@@ 
=@@ 
reason@@ 
;@@ 
}AA 	
~EE 	
FSecsControlMessageEE	 
(EE 
)FF 
{GG 	
	myDisposeHH 
(HH 
falseHH 
)HH 
;HH 
}II 	
	protectedMM 
voidMM 
	myDisposeMM  
(MM  !
boolNN 
	disposingNN 
)OO 
{PP 	
ifQQ 
(QQ 
!QQ 

m_disposedQQ 
)QQ 
{RR 
ifSS 
(SS 
	disposingSS 
)SS 
{TT 
m_fSecs1ToHsmsUU "
=UU# $
nullUU% )
;UU) *
}VV 

m_disposedXX 
=XX 
trueXX !
;XX! "
}YY 
}ZZ 	
publicbb 
voidbb 
Disposebb 
(bb 
)cc 
{dd 	
	myDisposeee 
(ee 
trueee 
)ee 
;ee 
GCff 
.ff 
SuppressFinalizeff 
(ff  
thisff  $
)ff$ %
;ff% &
}gg 	
publicoo #
FHsmsControlMessageTypeoo &
fTypeoo' ,
{pp 	
getqq 
{rr 
tryss 
{tt 
returnuu 
m_fTypeuu "
;uu" #
}vv 
catchww 
(ww 
	Exceptionww  
exww! #
)ww# $
{xx 
FDebugyy 
.yy 
throwExceptionyy )
(yy) *
exyy* ,
)yy, -
;yy- .
}zz 
finally{{ 
{|| 
}~~ 
return #
FHsmsControlMessageType .
.. /
	SelectReq/ 8
;8 9
}
ÄÄ 
}
ÅÅ 	
public
ÖÖ 
int
ÖÖ 
length
ÖÖ 
{
ÜÜ 	
get
áá 
{
àà 
try
ââ 
{
ää 
return
ãã 
$num
ãã 
;
ãã 
}
åå 
catch
çç 
(
çç 
	Exception
çç  
ex
çç! #
)
çç# $
{
éé 
FDebug
èè 
.
èè 
throwException
èè )
(
èè) *
ex
èè* ,
)
èè, -
;
èè- .
}
êê 
finally
ëë 
{
íí 
}
îî 
return
ïï 
$num
ïï 
;
ïï 
}
ññ 
}
óó 	
public
õõ 
UInt16
õõ 
	sessionId
õõ 
{
úú 	
get
ùù 
{
ûû 
try
üü 
{
†† 
return
°° 
m_sessionId
°° &
;
°°& '
}
¢¢ 
catch
££ 
(
££ 
	Exception
££  
ex
££! #
)
££# $
{
§§ 
FDebug
•• 
.
•• 
throwException
•• )
(
••) *
ex
••* ,
)
••, -
;
••- .
}
¶¶ 
finally
ßß 
{
®® 
}
™™ 
return
´´ 
$num
´´ 
;
´´ 
}
¨¨ 
}
≠≠ 	
public
±± 
byte
±± 
byte2
±± 
{
≤≤ 	
get
≥≥ 
{
¥¥ 
try
µµ 
{
∂∂ 
return
∑∑ 
m_byte2
∑∑ "
;
∑∑" #
}
∏∏ 
catch
ππ 
(
ππ 
	Exception
ππ  
ex
ππ! #
)
ππ# $
{
∫∫ 
FDebug
ªª 
.
ªª 
throwException
ªª )
(
ªª) *
ex
ªª* ,
)
ªª, -
;
ªª- .
}
ºº 
finally
ΩΩ 
{
ææ 
}
¿¿ 
return
¡¡ 
$num
¡¡ 
;
¡¡ 
}
¬¬ 
}
√√ 	
public
«« 
byte
«« 
byte3
«« 
{
»» 	
get
…… 
{
   
try
ÀÀ 
{
ÃÃ 
return
ÕÕ 
m_byte3
ÕÕ "
;
ÕÕ" #
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ  
ex
œœ! #
)
œœ# $
{
–– 
FDebug
—— 
.
—— 
throwException
—— )
(
——) *
ex
——* ,
)
——, -
;
——- .
}
““ 
finally
”” 
{
‘‘ 
}
÷÷ 
return
◊◊ 
$num
◊◊ 
;
◊◊ 
}
ÿÿ 
}
ŸŸ 	
public
›› 
byte
›› 
ptype
›› 
{
ﬁﬁ 	
get
ﬂﬂ 
{
‡‡ 
try
·· 
{
‚‚ 
return
„„ 
m_ptype
„„ "
;
„„" #
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 
	Exception
ÂÂ  
ex
ÂÂ! #
)
ÂÂ# $
{
ÊÊ 
FDebug
ÁÁ 
.
ÁÁ 
throwException
ÁÁ )
(
ÁÁ) *
ex
ÁÁ* ,
)
ÁÁ, -
;
ÁÁ- .
}
ËË 
finally
ÈÈ 
{
ÍÍ 
}
ÏÏ 
return
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
}
ÓÓ 
}
ÔÔ 	
public
ÛÛ 
byte
ÛÛ 
stype
ÛÛ 
{
ÙÙ 	
get
ıı 
{
ˆˆ 
try
˜˜ 
{
¯¯ 
return
˘˘ 
m_stype
˘˘ "
;
˘˘" #
}
˙˙ 
catch
˚˚ 
(
˚˚ 
	Exception
˚˚  
ex
˚˚! #
)
˚˚# $
{
¸¸ 
FDebug
˝˝ 
.
˝˝ 
throwException
˝˝ )
(
˝˝) *
ex
˝˝* ,
)
˝˝, -
;
˝˝- .
}
˛˛ 
finally
ˇˇ 
{
ÄÄ 
}
ÇÇ 
return
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
public
ââ 
UInt32
ââ 
systemBytes
ââ !
{
ää 	
get
ãã 
{
åå 
try
çç 
{
éé 
return
èè 
m_systemBytes
èè (
;
èè( )
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë  
ex
ëë! #
)
ëë# $
{
íí 
FDebug
ìì 
.
ìì 
throwException
ìì )
(
ìì) *
ex
ìì* ,
)
ìì, -
;
ìì- .
}
îî 
finally
ïï 
{
ññ 
}
òò 
return
ôô 
$num
ôô 
;
ôô 
}
öö 
}
õõ 	
public
üü 
string
üü 
reason
üü 
{
†† 	
get
°° 
{
¢¢ 
try
££ 
{
§§ 
return
•• 
m_reason
•• #
;
••# $
}
¶¶ 
catch
ßß 
(
ßß 
	Exception
ßß  
ex
ßß! #
)
ßß# $
{
®® 
FDebug
©© 
.
©© 
throwException
©© )
(
©©) *
ex
©©* ,
)
©©, -
;
©©- .
}
™™ 
finally
´´ 
{
¨¨ 
}
ÆÆ 
return
ØØ 
string
ØØ 
.
ØØ 
Empty
ØØ #
;
ØØ# $
}
∞∞ 
}
±± 	
internal
ππ 
byte
ππ 
[
ππ 
]
ππ 
getBinaryData
ππ %
(
ππ% &
)
∫∫ 
{
ªª 	
UInt32
ºº 
length
ºº 
=
ºº 
$num
ºº 
;
ºº 
byte
ΩΩ 
[
ΩΩ 
]
ΩΩ 
data
ΩΩ 
=
ΩΩ 
null
ΩΩ 
;
ΩΩ 
try
øø 
{
¿¿ 
length
¡¡ 
=
¡¡ 
$num
¡¡ 
;
¡¡ 
data
¬¬ 
=
¬¬ 
new
¬¬ 
byte
¬¬ 
[
¬¬  
length
¬¬  &
+
¬¬' (
$num
¬¬) *
]
¬¬* +
;
¬¬+ ,
Buffer
…… 
.
…… 
	BlockCopy
……  
(
……  !
FByteConverter
……! /
.
……/ 0
getBytes
……0 8
(
……8 9
length
……9 ?
,
……? @
true
……A E
)
……E F
,
……F G
$num
……H I
,
……I J
data
……K O
,
……O P
$num
……Q R
,
……R S
$num
……T U
)
……U V
;
……V W
Buffer
–– 
.
–– 
	BlockCopy
––  
(
––  !
FByteConverter
––! /
.
––/ 0
getBytes
––0 8
(
––8 9
m_sessionId
––9 D
,
––D E
true
––F J
)
––J K
,
––K L
$num
––M N
,
––N O
data
––P T
,
––T U
$num
––V W
,
––W X
$num
––Y Z
)
––Z [
;
––[ \
data
—— 
[
—— 
$num
—— 
]
—— 
=
—— 
m_byte2
—— !
;
——! "
data
““ 
[
““ 
$num
““ 
]
““ 
=
““ 
m_byte3
““ !
;
““! "
data
”” 
[
”” 
$num
”” 
]
”” 
=
”” 
m_ptype
”” !
;
””! "
data
‘‘ 
[
‘‘ 
$num
‘‘ 
]
‘‘ 
=
‘‘ 
m_stype
‘‘ !
;
‘‘! "
Buffer
’’ 
.
’’ 
	BlockCopy
’’  
(
’’  !
FByteConverter
’’! /
.
’’/ 0
getBytes
’’0 8
(
’’8 9
m_systemBytes
’’9 F
,
’’F G
true
’’H L
)
’’L M
,
’’M N
$num
’’O P
,
’’P Q
data
’’R V
,
’’V W
$num
’’X Z
,
’’Z [
$num
’’\ ]
)
’’] ^
;
’’^ _
return
ŸŸ 
data
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
catch
€€ 
(
€€ 
	Exception
€€ 
ex
€€ 
)
€€  
{
‹‹ 
FDebug
›› 
.
›› 
throwException
›› %
(
››% &
ex
››& (
)
››( )
;
››) *
}
ﬁﬁ 
finally
ﬂﬂ 
{
‡‡ 
data
·· 
=
·· 
null
·· 
;
·· 
}
‚‚ 
return
„„ 
null
„„ 
;
„„ 
}
‰‰ 	
}
ÍÍ 
}ÎÎ ùd
ÑD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Secs1ToHsms\SecsMessage\c_FSecsDataMessageTransfer.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSecs1ToHsms (
{ 
public 

class $
FSecsDataMessageTransfer )
:) *
IDisposable+ 6
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSecs1ToHsms 
m_fSecs1ToHsms +
=, -
null. 2
;2 3
private 
FXmlNode 
m_fXmlNodeSmg &
=' (
null) -
;- .
public## $
FSecsDataMessageTransfer## '
(##' (
FSecs1ToHsms$$ 
fSecs1ToHsms$$ %
,$$% &
FXmlNode%% 
fXmlNodeSmg%%  
)&& 
{'' 	
m_fSecs1ToHsms(( 
=(( 
fSecs1ToHsms(( )
;(() *
m_fXmlNodeSmg)) 
=)) 
fXmlNodeSmg)) '
;))' (
validate** 
(** 
)** 
;** 
}++ 	
~// 	$
FSecsDataMessageTransfer//	 !
(//! "
)00 
{11 	
	myDispose22 
(22 
false22 
)22 
;22 
}33 	
	protected77 
void77 
	myDispose77  
(77  !
bool88 
	disposing88 
)99 
{:: 	
if;; 
(;; 
!;; 

m_disposed;; 
);; 
{<< 
if== 
(== 
	disposing== 
)== 
{>> 
m_fXmlNodeSmg?? !
=??" #
null??$ (
;??( )
m_fSecs1ToHsms@@ "
=@@# $
null@@% )
;@@) *
}AA 

m_disposedCC 
=CC 
trueCC !
;CC! "
}DD 
}EE 	
publicMM 
voidMM 
DisposeMM 
(MM 
)NN 
{OO 	
	myDisposePP 
(PP 
truePP 
)PP 
;PP 
GCQQ 
.QQ 
SuppressFinalizeQQ 
(QQ  
thisQQ  $
)QQ$ %
;QQ% &
}RR 	
publicZZ 
FXmlNodeZZ 
fXmlNodeSmgZZ #
{[[ 	
get\\ 
{]] 
try^^ 
{__ 
return`` 
m_fXmlNodeSmg`` (
;``( )
}aa 
catchbb 
(bb 
	Exceptionbb  
exbb! #
)bb# $
{cc 
FDebugdd 
.dd 
throwExceptiondd )
(dd) *
exdd* ,
)dd, -
;dd- .
}ee 
finallyff 
{gg 
}ii 
returnjj 
nulljj 
;jj 
}kk 
}ll 	
privatett 
voidtt 
validatett 
(tt 
)uu 
{vv 	
stringww 
valww 
=ww 
stringww 
.ww  
Emptyww  %
;ww% &
bytexx 
bValxx 
=xx 
$numxx 
;xx 
boolyy 
blValyy 
=yy 
falseyy 
;yy 
UInt16zz 
val16zz 
=zz 
$numzz 
;zz 
UInt32{{ 
val32{{ 
={{ 
$num{{ 
;{{ 
FFormat|| 
fFormat|| 
;|| 
FXmlNodeList}} 
fXmlNodeListSit}} (
=}}) *
null}}+ /
;}}/ 0
try 
{
ÄÄ 
if
ÑÑ 
(
ÑÑ 
fXmlNodeSmg
ÑÑ 
.
ÑÑ  
name
ÑÑ  $
!=
ÑÑ% '
FSecsTag
ÑÑ( 0
.
ÑÑ0 1
E_SecsMessage
ÑÑ1 >
)
ÑÑ> ?
{
ÖÖ 
FDebug
ÜÜ 
.
ÜÜ 
throwFException
ÜÜ *
(
ÜÜ* +
$str
ÜÜ+ Y
)
ÜÜY Z
;
ÜÜZ [
}
áá 
val
ââ 
=
ââ 
fXmlNodeSmg
ââ !
.
ââ! "
get_attrVal
ââ" -
(
ââ- .
FSecsTag
ââ. 6
.
ââ6 7
A_SessionId
ââ7 B
,
ââB C
string
ââD J
.
ââJ K
Empty
ââK P
)
ââP Q
;
ââQ R
if
ää 
(
ää 
!
ää 
UInt16
ää 
.
ää 
TryParse
ää $
(
ää$ %
val
ää% (
,
ää( )
out
ää* -
val16
ää. 3
)
ää3 4
||
ää5 7
val16
ää8 =
>
ää> ?
$num
ää@ E
)
ääE F
{
ãã 
FDebug
åå 
.
åå 
throwFException
åå *
(
åå* +
$str
åå+ W
)
ååW X
;
ååX Y
}
çç 
val
èè 
=
èè 
fXmlNodeSmg
èè !
.
èè! "
get_attrVal
èè" -
(
èè- .
FSecsTag
èè. 6
.
èè6 7
A_Stream
èè7 ?
,
èè? @
string
èèA G
.
èèG H
Empty
èèH M
)
èèM N
;
èèN O
if
êê 
(
êê 
!
êê 
byte
êê 
.
êê 
TryParse
êê "
(
êê" #
val
êê# &
,
êê& '
out
êê( +
bVal
êê, 0
)
êê0 1
||
êê2 4
bVal
êê5 9
<
êê: ;
$num
êê< =
||
êê> @
bVal
êêA E
>
êêF G
$num
êêH K
)
êêK L
{
ëë 
FDebug
íí 
.
íí 
throwFException
íí *
(
íí* +
$str
íí+ S
)
ííS T
;
ííT U
}
ìì 
val
ïï 
=
ïï 
fXmlNodeSmg
ïï !
.
ïï! "
get_attrVal
ïï" -
(
ïï- .
FSecsTag
ïï. 6
.
ïï6 7

A_Function
ïï7 A
,
ïïA B
string
ïïC I
.
ïïI J
Empty
ïïJ O
)
ïïO P
;
ïïP Q
if
ññ 
(
ññ 
!
ññ 
byte
ññ 
.
ññ 
TryParse
ññ "
(
ññ" #
val
ññ# &
,
ññ& '
out
ññ( +
bVal
ññ, 0
)
ññ0 1
||
ññ2 4
bVal
ññ5 9
<
ññ: ;
$num
ññ< =
||
ññ> @
bVal
ññA E
>
ññF G
$num
ññH K
)
ññK L
{
óó 
FDebug
òò 
.
òò 
throwFException
òò *
(
òò* +
$str
òò+ U
)
òòU V
;
òòV W
}
ôô 
val
õõ 
=
õõ 
fXmlNodeSmg
õõ !
.
õõ! "
get_attrVal
õõ" -
(
õõ- .
FSecsTag
õõ. 6
.
õõ6 7
A_WBit
õõ7 =
,
õõ= >
string
õõ? E
.
õõE F
Empty
õõF K
)
õõK L
;
õõL M
if
úú 
(
úú 
!
úú 
bool
úú 
.
úú 
TryParse
úú "
(
úú" #
val
úú# &
,
úú& '
out
úú( +
blVal
úú, 1
)
úú1 2
)
úú2 3
{
ùù 
FDebug
ûû 
.
ûû 
throwFException
ûû *
(
ûû* +
$str
ûû+ Q
)
ûûQ R
;
ûûR S
}
üü 
val
°° 
=
°° 
fXmlNodeSmg
°° !
.
°°! "
get_attrVal
°°" -
(
°°- .
FSecsTag
°°. 6
.
°°6 7
A_SystemBytes
°°7 D
,
°°D E
string
°°F L
.
°°L M
Empty
°°M R
)
°°R S
;
°°S T
if
¢¢ 
(
¢¢ 
val
¢¢ 
!=
¢¢ 
string
¢¢ !
.
¢¢! "
Empty
¢¢" '
)
¢¢' (
{
££ 
if
§§ 
(
§§ 
!
§§ 
UInt32
§§ 
.
§§  
TryParse
§§  (
(
§§( )
val
§§) ,
,
§§, -
out
§§. 1
val32
§§2 7
)
§§7 8
)
§§8 9
{
•• 
FDebug
¶¶ 
.
¶¶ 
throwFException
¶¶ .
(
¶¶. /
$str
¶¶/ \
)
¶¶\ ]
;
¶¶] ^
}
ßß 
}
®® 
if
´´ 
(
´´ 
fXmlNodeSmg
´´ 
.
´´  
fChildNodes
´´  +
.
´´+ ,
count
´´, 1
>
´´2 3
$num
´´4 5
)
´´5 6
{
¨¨ 
FDebug
≠≠ 
.
≠≠ 
throwFException
≠≠ *
(
≠≠* +
$str
≠≠+ R
)
≠≠R S
;
≠≠S T
}
ÆÆ 
fXmlNodeListSit
µµ 
=
µµ  !
fXmlNodeSmg
µµ" -
.
µµ- .
selectNodes
µµ. 9
(
µµ9 :
$str
µµ: ?
)
µµ? @
;
µµ@ A
foreach
∂∂ 
(
∂∂ 
FXmlNode
∂∂ !
fXmlNodeSit
∂∂" -
in
∂∂. 0
fXmlNodeListSit
∂∂1 @
)
∂∂@ A
{
∑∑ 
if
∏∏ 
(
∏∏ 
fXmlNodeSit
∏∏ #
.
∏∏# $
name
∏∏$ (
!=
∏∏) +
FSecsTag
∏∏, 4
.
∏∏4 5

E_SecsItem
∏∏5 ?
)
∏∏? @
{
ππ 
FDebug
∫∫ 
.
∫∫ 
throwFException
∫∫ .
(
∫∫. /
$str
∫∫/ Z
)
∫∫Z [
;
∫∫[ \
}
ªª 
val
ΩΩ 
=
ΩΩ 
fXmlNodeSit
ΩΩ %
.
ΩΩ% &
get_attrVal
ΩΩ& 1
(
ΩΩ1 2
FSecsTag
ΩΩ2 :
.
ΩΩ: ;
A_Format
ΩΩ; C
,
ΩΩC D
string
ΩΩE K
.
ΩΩK L
Empty
ΩΩL Q
)
ΩΩQ R
;
ΩΩR S
if
ææ 
(
ææ 
!
ææ 
Enum
ææ 
.
ææ 
TryParse
ææ &
<
ææ& '
FFormat
ææ' .
>
ææ. /
(
ææ/ 0
val
ææ0 3
,
ææ3 4
out
ææ5 8
fFormat
ææ9 @
)
ææ@ A
)
ææA B
{
øø 
FDebug
¿¿ 
.
¿¿ 
throwFException
¿¿ .
(
¿¿. /
$str
¿¿/ T
)
¿¿T U
;
¿¿U V
}
¡¡ 
if
√√ 
(
√√ 
fFormat
√√ 
!=
√√  "
FFormat
√√# *
.
√√* +
L
√√+ ,
&&
√√- /
fXmlNodeSit
√√0 ;
.
√√; <
hasChildNode
√√< H
)
√√H I
{
ƒƒ 
FDebug
≈≈ 
.
≈≈ 
throwFException
≈≈ .
(
≈≈. /
$str
≈≈/ T
)
≈≈T U
;
≈≈U V
}
∆∆ 
}
«« 
}
»» 
catch
…… 
(
…… 
	Exception
…… 
ex
…… 
)
……  
{
   
FDebug
ÀÀ 
.
ÀÀ 
throwException
ÀÀ %
(
ÀÀ% &
ex
ÀÀ& (
)
ÀÀ( )
;
ÀÀ) *
}
ÃÃ 
finally
ÕÕ 
{
ŒŒ 
fXmlNodeListSit
œœ 
=
œœ  !
null
œœ" &
;
œœ& '
}
–– 
}
—— 	
internal
’’ 
FSecsDataMessage
’’ ! 
getSecsDataMessage
’’" 4
(
’’4 5
)
÷÷ 
{
◊◊ 	
try
ÿÿ 
{
ŸŸ 
return
⁄⁄ 
FSecsConverter
⁄⁄ %
.
⁄⁄% &)
convertXmlToSecsDataMessage
⁄⁄& A
(
⁄⁄A B
m_fSecs1ToHsms
⁄⁄B P
,
⁄⁄P Q
m_fXmlNodeSmg
⁄⁄R _
)
⁄⁄_ `
;
⁄⁄` a
}
€€ 
catch
‹‹ 
(
‹‹ 
	Exception
‹‹ 
ex
‹‹ 
)
‹‹  
{
›› 
FDebug
ﬁﬁ 
.
ﬁﬁ 
throwException
ﬁﬁ %
(
ﬁﬁ% &
ex
ﬁﬁ& (
)
ﬁﬁ( )
;
ﬁﬁ) *
}
ﬂﬂ 
finally
‡‡ 
{
·· 
}
„„ 
return
‰‰ 
null
‰‰ 
;
‰‰ 
}
ÂÂ 	
public
ÈÈ 
void
ÈÈ 
resetSystembytes
ÈÈ $
(
ÈÈ$ %
)
ÍÍ 
{
ÎÎ 	
try
ÏÏ 
{
ÌÌ 
m_fXmlNodeSmg
ÓÓ 
.
ÓÓ 
set_attrVal
ÓÓ )
(
ÓÓ) *
FSecsTag
ÓÓ* 2
.
ÓÓ2 3
A_SystemBytes
ÓÓ3 @
,
ÓÓ@ A
m_fSecs1ToHsms
ÓÓB P
.
ÓÓP Q!
fSystemBytesPointer
ÓÓQ d
.
ÓÓd e
uniqueId
ÓÓe m
.
ÓÓm n
ToString
ÓÓn v
(
ÓÓv w
)
ÓÓw x
)
ÓÓx y
;
ÓÓy z
}
ÔÔ 
catch
 
(
 
	Exception
 
ex
 
)
  
{
ÒÒ 
FDebug
ÚÚ 
.
ÚÚ 
throwException
ÚÚ %
(
ÚÚ% &
ex
ÚÚ& (
)
ÚÚ( )
;
ÚÚ) *
}
ÛÛ 
finally
ÙÙ 
{
ıı 
}
˜˜ 
}
¯¯ 	
}
˛˛ 
}ˇˇ î
iD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str :
): ;
]; <
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 E
)		E F
]		F G
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str )
)) *
]* +
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str 5
)5 6
]6 7
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str A
)A B
]B C
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str '
)' (
]( )
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## %
)##% &
]##& '
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ )
)$$) *
]$$* +ã>
xD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\c_FEventHandler.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

class 
FEventHandler 
: 
IDisposable  +
{ 
public 
event $
FEventRaisedEventHandler -
EventRaised. 9
=: ;
null< @
;@ A
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSerialToEthernet !
m_fSerialToEthernet" 5
=6 7
null8 <
;< =
private 
Control 
	m_invoker !
=" #
null$ (
;( )
public%% 
FEventHandler%% 
(%% 
FSerialToEthernet&& 
fSerialToEthernet&& /
,&&/ 0
Control'' 
invoker'' 
)(( 
{)) 	
m_fSerialToEthernet** 
=**  !
fSerialToEthernet**" 3
;**3 4
	m_invoker++ 
=++ 
invoker++ 
;++  
init-- 
(-- 
)-- 
;-- 
}.. 	
~22 	
FEventHandler22	 
(22 
)33 
{44 	
	myDispose55 
(55 
false55 
)55 
;55 
}66 	
	protected:: 
void:: 
	myDispose::  
(::  !
bool;; 
	disposing;; 
)<< 
{== 	
if>> 
(>> 
!>> 

m_disposed>> 
)>> 
{?? 
if@@ 
(@@ 
	disposing@@ 
)@@ 
{AA 
termBB 
(BB 
)BB 
;BB 
m_fSerialToEthernetDD '
=DD( )
nullDD* .
;DD. /
	m_invokerEE 
=EE 
nullEE  $
;EE$ %
}FF 

m_disposedHH 
=HH 
trueHH !
;HH! "
}II 
}JJ 	
publicRR 
voidRR 
DisposeRR 
(RR 
)SS 
{TT 	
	myDisposeUU 
(UU 
trueUU 
)UU 
;UU 
GCVV 
.VV 
SuppressFinalizeVV 
(VV  
thisVV  $
)VV$ %
;VV% &
}WW 	
privateee 
voidee 
initee 
(ee 
)ff 
{gg 	
tryhh 
{ii 
m_fSerialToEthernetjj #
.jj# $
EventRaisedjj$ /
+=jj0 2
newjj3 6$
FEventRaisedEventHandlerjj7 O
(jjO P+
m_fSerialToEthernet_EventRaisedjjP o
)jjo p
;jjp q
}kk 
catchll 
(ll 
	Exceptionll 
exll 
)ll  
{mm 
FDebugnn 
.nn 
throwExceptionnn %
(nn% &
exnn& (
)nn( )
;nn) *
}oo 
finallypp 
{qq 
}ss 
}tt 	
privatexx 
voidxx 
termxx 
(xx 
)yy 
{zz 	
try{{ 
{|| 
m_fSerialToEthernet}} #
.}}# $
EventRaised}}$ /
-=}}0 2
new}}3 6$
FEventRaisedEventHandler}}7 O
(}}O P+
m_fSerialToEthernet_EventRaised}}P o
)}}o p
;}}p q
}~~ 
catch 
( 
	Exception 
ex 
)  
{
ÄÄ 
FDebug
ÅÅ 
.
ÅÅ 
throwException
ÅÅ %
(
ÅÅ% &
ex
ÅÅ& (
)
ÅÅ( )
;
ÅÅ) *
}
ÇÇ 
finally
ÉÉ 
{
ÑÑ 
}
ÜÜ 
}
áá 	
private
ãã 
bool
ãã 
validateInvoker
ãã $
(
ãã$ %
)
åå 
{
çç 	
try
éé 
{
èè 
if
êê 
(
êê 
	m_invoker
êê 
!=
êê  
null
êê! %
)
êê% &
{
ëë 
if
íí 
(
íí 
!
íí 
	m_invoker
íí "
.
íí" #
Created
íí# *
||
íí+ -
!
íí. /
	m_invoker
íí/ 8
.
íí8 9
IsHandleCreated
íí9 H
)
ííH I
{
ìì 
return
îî 
false
îî $
;
îî$ %
}
ïï 
}
ññ 
return
óó 
true
óó 
;
óó 
}
òò 
catch
ôô 
(
ôô 
	Exception
ôô 
ex
ôô 
)
ôô  
{
öö 
FDebug
õõ 
.
õõ 
throwException
õõ %
(
õõ% &
ex
õõ& (
)
õõ( )
;
õõ) *
}
úú 
finally
ùù 
{
ûû 
}
†† 
return
°° 
false
°° 
;
°° 
}
¢¢ 	
public
¶¶ 
void
¶¶ (
waitEventHandlingCompleted
¶¶ .
(
¶¶. /
)
ßß 
{
®® 	
try
©© 
{
™™ !
m_fSerialToEthernet
´´ #
.
´´# $
fEventPusher
´´$ 0
.
´´0 1(
waitEventHandlingCompleted
´´1 K
(
´´K L
)
´´L M
;
´´M N
}
¨¨ 
catch
≠≠ 
(
≠≠ 
	Exception
≠≠ 
ex
≠≠ 
)
≠≠  
{
ÆÆ 
FDebug
ØØ 
.
ØØ 
throwException
ØØ %
(
ØØ% &
ex
ØØ& (
)
ØØ( )
;
ØØ) *
}
∞∞ 
finally
±± 
{
≤≤ 
}
¥¥ 
}
µµ 	
private
ΩΩ 
void
ΩΩ -
m_fSerialToEthernet_EventRaised
ΩΩ 4
(
ΩΩ4 5
object
ææ 
sender
ææ 
,
ææ 
FEventArgsBase
øø 
e
øø 
)
¿¿ 
{
¡¡ 	
try
¬¬ 
{
√√ 
if
ƒƒ 
(
ƒƒ 
EventRaised
ƒƒ 
==
ƒƒ  "
null
ƒƒ# '
)
ƒƒ' (
{
≈≈ 
return
∆∆ 
;
∆∆ 
}
«« 
if
ÀÀ 
(
ÀÀ 
!
ÀÀ 
validateInvoker
ÀÀ $
(
ÀÀ$ %
)
ÀÀ% &
)
ÀÀ& '
{
ÃÃ 
return
ÕÕ 
;
ÕÕ 
}
ŒŒ 
if
““ 
(
““ 
	m_invoker
““ 
==
““  
null
““! %
||
““& (
!
““) *
	m_invoker
““* 3
.
““3 4
InvokeRequired
““4 B
)
““B C
{
”” 
EventRaised
‘‘ 
(
‘‘  
this
‘‘  $
,
‘‘$ %
e
‘‘& '
)
‘‘' (
;
‘‘( )
}
’’ 
else
÷÷ 
{
◊◊ 
	m_invoker
ÿÿ 
.
ÿÿ 
Invoke
ÿÿ $
(
ÿÿ$ %
new
ÿÿ% (
MethodInvoker
ÿÿ) 6
(
ÿÿ6 7
delegate
ÿÿ7 ?
(
ÿÿ? @
)
ÿÿ@ A
{
ŸŸ 
EventRaised
⁄⁄ #
(
⁄⁄# $
this
⁄⁄$ (
,
⁄⁄( )
e
⁄⁄* +
)
⁄⁄+ ,
;
⁄⁄, -
}
€€ 
)
€€ 
)
€€ 
;
€€ 
}
‹‹ 
}
›› 
catch
ﬁﬁ 
(
ﬁﬁ 
	Exception
ﬁﬁ 
ex
ﬁﬁ 
)
ﬁﬁ  
{
ﬂﬂ 
if
‡‡ 
(
‡‡ 
ex
‡‡ 
is
‡‡ %
ObjectDisposedException
‡‡ 1
)
‡‡1 2
{
·· 
return
‚‚ 
;
‚‚ 
}
„„ 
FDebug
‰‰ 
.
‰‰ 
writeLog
‰‰ 
(
‰‰  
ex
‰‰  "
)
‰‰" #
;
‰‰# $
}
ÂÂ 
finally
ÊÊ 
{
ÁÁ 
}
ÈÈ 
}
ÍÍ 	
}
 
}ÒÒ Ào
wD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\c_FEventPusher.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
internal 
class 
FEventPusher 
:  
IDisposable! ,
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSerialToEthernet !
m_fSerialToTcp" 0
=1 2
null3 7
;7 8
private 
FQueue 
< 
FEventArgsBase %
>% &
m_fSerialEvents' 6
=7 8
null9 =
;= >
private 
FQueue 
< 
FEventArgsBase %
>% &
m_fTcpEvents' 3
=4 5
null6 :
;: ;
private 
FThread 
m_fThdEventPusher )
=* +
null, 0
;0 1
private 
bool &
m_isCompletedEventHandling /
=0 1
false2 7
;7 8
internal$$ 
FEventPusher$$ 
($$ 
FSerialToEthernet%% 
fSerialToTcp%% *
)&& 
{'' 	
m_fSerialToTcp(( 
=(( 
fSerialToTcp(( )
;(() *
init** 
(** 
)** 
;** 
}++ 	
~// 	
FEventPusher//	 
(// 
)00 
{11 	
	myDispose22 
(22 
false22 
)22 
;22 
}33 	
	protected77 
void77 
	myDispose77  
(77  !
bool88 
	disposing88 
)99 
{:: 	
if;; 
(;; 
!;; 

m_disposed;; 
);; 
{<< 
if== 
(== 
	disposing== 
)== 
{>> 
term?? 
(?? 
)?? 
;?? 
m_fSerialToTcpAA "
=AA# $
nullAA% )
;AA) *
}BB 

m_disposedDD 
=DD 
trueDD !
;DD! "
}EE 
}FF 	
publicNN 
voidNN 
DisposeNN 
(NN 
)OO 
{PP 	
	myDisposeQQ 
(QQ 
trueQQ 
)QQ 
;QQ 
GCRR 
.RR 
SuppressFinalizeRR 
(RR  
thisRR  $
)RR$ %
;RR% &
}SS 	
public[[ 
int[[ 
serialEventCount[[ #
{\\ 	
get]] 
{^^ 
try__ 
{`` 
returnaa 
m_fSerialEventsaa *
.aa* +
countaa+ 0
;aa0 1
}bb 
catchcc 
(cc 
	Exceptioncc  
excc! #
)cc# $
{dd 
FDebugee 
.ee 
throwExceptionee )
(ee) *
exee* ,
)ee, -
;ee- .
}ff 
finallygg 
{hh 
}jj 
returnkk 
$numkk 
;kk 
}ll 
}mm 	
publicqq 
intqq 
tcpEventCountqq  
{rr 	
getss 
{tt 
tryuu 
{vv 
returnww 
m_fTcpEventsww '
.ww' (
countww( -
;ww- .
}xx 
catchyy 
(yy 
	Exceptionyy  
exyy! #
)yy# $
{zz 
FDebug{{ 
.{{ 
throwException{{ )
({{) *
ex{{* ,
){{, -
;{{- .
}|| 
finally}} 
{~~ 
}
ÄÄ 
return
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 	
public
áá 
bool
áá &
isCompletedEventHandling
áá ,
{
àà 	
get
ââ 
{
ää 
try
ãã 
{
åå 
if
çç 
(
çç 
this
çç 
.
çç 
serialEventCount
çç -
==
çç. 0
$num
çç1 2
&&
çç3 5
this
çç6 :
.
çç: ;
tcpEventCount
çç; H
==
ççI K
$num
ççL M
&&
ççN P(
m_isCompletedEventHandling
ççQ k
)
ççk l
{
éé 
return
èè 
true
èè #
;
èè# $
}
êê 
return
ëë 
false
ëë  
;
ëë  !
}
íí 
catch
ìì 
(
ìì 
	Exception
ìì  
ex
ìì! #
)
ìì# $
{
îî 
FDebug
ïï 
.
ïï 
throwException
ïï )
(
ïï) *
ex
ïï* ,
)
ïï, -
;
ïï- .
}
ññ 
finally
óó 
{
òò 
}
öö 
return
õõ 
false
õõ 
;
õõ 
}
úú 
}
ùù 	
private
•• 
void
•• 
init
•• 
(
•• 
)
¶¶ 
{
ßß 	
try
®® 
{
©© 
m_fSerialEvents
™™ 
=
™™  !
new
™™" %
FQueue
™™& ,
<
™™, -
FEventArgsBase
™™- ;
>
™™; <
(
™™< =
)
™™= >
;
™™> ?
m_fTcpEvents
´´ 
=
´´ 
new
´´ "
FQueue
´´# )
<
´´) *
FEventArgsBase
´´* 8
>
´´8 9
(
´´9 :
)
´´: ;
;
´´; <(
m_isCompletedEventHandling
ØØ *
=
ØØ+ ,
true
ØØ- 1
;
ØØ1 2
m_fThdEventPusher
∞∞ !
=
∞∞" #
new
∞∞$ '
FThread
∞∞( /
(
∞∞/ 0
$str
∞∞0 A
,
∞∞A B
false
∞∞C H
,
∞∞H I
System
∞∞J P
.
∞∞P Q
	Threading
∞∞Q Z
.
∞∞Z [
ThreadPriority
∞∞[ i
.
∞∞i j
Normal
∞∞j p
,
∞∞p q
true
∞∞r v
)
∞∞v w
;
∞∞w x
m_fThdEventPusher
±± !
.
±±! "
ThreadJobCalled
±±" 1
+=
±±2 4
new
±±5 8*
FThreadJobCalledEventHandler
±±9 U
(
±±U V/
!m_fThdEventPusher_ThreadJobCalled
±±V w
)
±±w x
;
±±x y
m_fThdEventPusher
≤≤ !
.
≤≤! "
start
≤≤" '
(
≤≤' (
)
≤≤( )
;
≤≤) *
}
≥≥ 
catch
¥¥ 
(
¥¥ 
	Exception
¥¥ 
ex
¥¥ 
)
¥¥  
{
µµ 
FDebug
∂∂ 
.
∂∂ 
throwException
∂∂ %
(
∂∂% &
ex
∂∂& (
)
∂∂( )
;
∂∂) *
}
∑∑ 
finally
∏∏ 
{
ππ 
}
ªª 
}
ºº 	
private
¿¿ 
void
¿¿ 
term
¿¿ 
(
¿¿ 
)
¡¡ 
{
¬¬ 	
try
√√ 
{
ƒƒ 
if
≈≈ 
(
≈≈ 
m_fThdEventPusher
≈≈ %
!=
≈≈& (
null
≈≈) -
)
≈≈- .
{
∆∆ 
while
«« 
(
«« 
!
«« 
this
««  
.
««  !&
isCompletedEventHandling
««! 9
)
««9 :
{
»» 
System
…… 
.
…… 
	Threading
…… (
.
……( )
Thread
……) /
.
……/ 0
Sleep
……0 5
(
……5 6
$num
……6 8
)
……8 9
;
……9 :
}
   
m_fThdEventPusher
ŒŒ %
.
ŒŒ% &
ThreadJobCalled
ŒŒ& 5
-=
ŒŒ6 8
new
ŒŒ9 <*
FThreadJobCalledEventHandler
ŒŒ= Y
(
ŒŒY Z/
!m_fThdEventPusher_ThreadJobCalled
ŒŒZ {
)
ŒŒ{ |
;
ŒŒ| }
m_fThdEventPusher
œœ %
.
œœ% &
stop
œœ& *
(
œœ* +
)
œœ+ ,
;
œœ, -
m_fThdEventPusher
–– %
.
––% &
Dispose
––& -
(
––- .
)
––. /
;
––/ 0
m_fThdEventPusher
—— %
=
——& '
null
——( ,
;
——, -
}
““ 
if
‘‘ 
(
‘‘ 
m_fSerialEvents
‘‘ #
!=
‘‘$ &
null
‘‘' +
)
‘‘+ ,
{
’’ 
m_fSerialEvents
÷÷ #
.
÷÷# $
Dispose
÷÷$ +
(
÷÷+ ,
)
÷÷, -
;
÷÷- .
m_fSerialEvents
◊◊ #
=
◊◊$ %
null
◊◊& *
;
◊◊* +
}
ÿÿ 
if
⁄⁄ 
(
⁄⁄ 
m_fTcpEvents
⁄⁄  
!=
⁄⁄! #
null
⁄⁄$ (
)
⁄⁄( )
{
€€ 
m_fTcpEvents
‹‹  
.
‹‹  !
Dispose
‹‹! (
(
‹‹( )
)
‹‹) *
;
‹‹* +
m_fTcpEvents
››  
=
››! "
null
››# '
;
››' (
}
ﬁﬁ 
}
ﬂﬂ 
catch
‡‡ 
(
‡‡ 
	Exception
‡‡ 
ex
‡‡ 
)
‡‡  
{
·· 
FDebug
‚‚ 
.
‚‚ 
throwException
‚‚ %
(
‚‚% &
ex
‚‚& (
)
‚‚( )
;
‚‚) *
}
„„ 
finally
‰‰ 
{
ÂÂ 
}
ÁÁ 
}
ËË 	
public
ÏÏ 
void
ÏÏ 
pushSerialEvent
ÏÏ #
(
ÏÏ# $
FEventArgsBase
ÌÌ 
fArgs
ÌÌ  
)
ÓÓ 
{
ÔÔ 	
try
 
{
ÒÒ 
m_fSerialEvents
ÚÚ 
.
ÚÚ  
enqueue
ÚÚ  '
(
ÚÚ' (
fArgs
ÚÚ( -
)
ÚÚ- .
;
ÚÚ. /
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı 
FDebug
ˆˆ 
.
ˆˆ 
throwException
ˆˆ %
(
ˆˆ% &
ex
ˆˆ& (
)
ˆˆ( )
;
ˆˆ) *
}
˜˜ 
finally
¯¯ 
{
˘˘ 
}
˚˚ 
}
¸¸ 	
public
ÄÄ 
void
ÄÄ 
pushTcpEvent
ÄÄ  
(
ÄÄ  !
FEventArgsBase
ÅÅ 
fArgs
ÅÅ  
)
ÇÇ 
{
ÉÉ 	
try
ÑÑ 
{
ÖÖ 
m_fTcpEvents
ÜÜ 
.
ÜÜ 
enqueue
ÜÜ $
(
ÜÜ$ %
fArgs
ÜÜ% *
)
ÜÜ* +
;
ÜÜ+ ,
}
áá 
catch
àà 
(
àà 
	Exception
àà 
ex
àà 
)
àà  
{
ââ 
FDebug
ää 
.
ää 
throwException
ää %
(
ää% &
ex
ää& (
)
ää( )
;
ää) *
}
ãã 
finally
åå 
{
çç 
}
èè 
}
êê 	
public
îî 
void
îî (
waitEventHandlingCompleted
îî .
(
îî. /
)
ïï 
{
ññ 	
try
óó 
{
òò 
while
ôô 
(
ôô 
!
ôô 
this
ôô 
.
ôô &
isCompletedEventHandling
ôô 5
)
ôô5 6
{
öö 
if
õõ 
(
õõ 
System
õõ 
.
õõ 
Windows
õõ &
.
õõ& '
Forms
õõ' ,
.
õõ, -
Application
õõ- 8
.
õõ8 9
MessageLoop
õõ9 D
)
õõD E
{
úú 
System
ùù 
.
ùù 
Windows
ùù &
.
ùù& '
Forms
ùù' ,
.
ùù, -
Application
ùù- 8
.
ùù8 9
DoEvents
ùù9 A
(
ùùA B
)
ùùB C
;
ùùC D
}
ûû 
System
üü 
.
üü 
	Threading
üü $
.
üü$ %
Thread
üü% +
.
üü+ ,
Sleep
üü, 1
(
üü1 2
$num
üü2 3
)
üü3 4
;
üü4 5
}
†† 
}
°° 
catch
¢¢ 
(
¢¢ 
	Exception
¢¢ 
ex
¢¢ 
)
¢¢  
{
££ 
FDebug
§§ 
.
§§ 
throwException
§§ %
(
§§% &
ex
§§& (
)
§§( )
;
§§) *
}
•• 
finally
¶¶ 
{
ßß 
}
©© 
}
™™ 	
private
≤≤ 
void
≤≤ /
!m_fThdEventPusher_ThreadJobCalled
≤≤ 6
(
≤≤6 7
object
≥≥ 
sender
≥≥ 
,
≥≥ 
FThreadEventArgs
¥¥ 
e
¥¥ 
)
µµ 
{
∂∂ 	
try
∑∑ 
{
∏∏ 
if
ππ 
(
ππ 
this
ππ 
.
ππ 
serialEventCount
ππ )
==
ππ* ,
$num
ππ- .
&&
ππ/ 1
this
ππ2 6
.
ππ6 7
tcpEventCount
ππ7 D
==
ππE G
$num
ππH I
)
ππI J
{
∫∫ (
m_isCompletedEventHandling
ªª .
=
ªª/ 0
true
ªª1 5
;
ªª5 6
e
ºº 
.
ºº 
sleepThread
ºº !
(
ºº! "
$num
ºº" #
)
ºº# $
;
ºº$ %
return
ΩΩ 
;
ΩΩ 
}
ææ (
m_isCompletedEventHandling
øø *
=
øø+ ,
false
øø- 2
;
øø2 3
while
√√ 
(
√√ 
this
√√ 
.
√√ 
serialEventCount
√√ ,
>
√√- .
$num
√√/ 0
)
√√0 1
{
ƒƒ 
m_fSerialToTcp
≈≈ "
.
≈≈" #
onEventRaised
≈≈# 0
(
≈≈0 1
m_fSerialEvents
≈≈1 @
.
≈≈@ A
dequeue
≈≈A H
(
≈≈H I
)
≈≈I J
)
≈≈J K
;
≈≈K L
}
∆∆ 
while
   
(
   
this
   
.
   
tcpEventCount
   )
>
  * +
$num
  , -
)
  - .
{
ÀÀ 
m_fSerialToTcp
ÃÃ "
.
ÃÃ" #
onEventRaised
ÃÃ# 0
(
ÃÃ0 1
m_fTcpEvents
ÃÃ1 =
.
ÃÃ= >
dequeue
ÃÃ> E
(
ÃÃE F
)
ÃÃF G
)
ÃÃG H
;
ÃÃH I
}
ÕÕ 
}
ŒŒ 
catch
œœ 
(
œœ 
	Exception
œœ 
ex
œœ 
)
œœ  
{
–– 
FDebug
—— 
.
—— 
writeLog
—— 
(
——  
ex
——  "
)
——" #
;
——# $
}
““ 
finally
”” 
{
‘‘ 
}
÷÷ 
}
◊◊ 	
}
›› 
}ﬁﬁ ’
ÉD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\EventArgs\c_FEventArgsBase.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
[ 
Serializable 
] 
public 

class 
FEventArgsBase 
:  
	EventArgs! *
,* +
IDisposable, 7
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSerialToEthernet !
m_fSerialToEthernet" 5
=6 7
null8 <
;< =
private 
FEventId 

m_fEventId #
=$ %
FEventId& .
.. /
None/ 3
;3 4
internal!! 
FEventArgsBase!! 
(!!  
FSerialToEthernet"" 
fSerialToEthernet"" /
,""/ 0
FEventId## 
fEventId## 
)$$ 
{%% 	
m_fSerialToEthernet&& 
=&&  !
fSerialToEthernet&&" 3
;&&3 4

m_fEventId'' 
='' 
fEventId'' !
;''! "
}(( 	
~,, 	
FEventArgsBase,,	 
(,, 
)-- 
{.. 	
	myDispose// 
(// 
false// 
)// 
;// 
}00 	
	protected44 
virtual44 
void44 
	myDispose44 (
(44( )
bool55 
	disposing55 
)66 
{77 	
if88 
(88 
!88 

m_disposed88 
)88 
{99 
if:: 
(:: 
	disposing:: 
):: 
{;; 
m_fSerialToEthernet<< '
=<<( )
null<<* .
;<<. /
}== 

m_disposed?? 
=?? 
true?? !
;??! "
}@@ 
}AA 	
publicII 
voidII 
DisposeII 
(II 
)JJ 
{KK 	
	myDisposeLL 
(LL 
trueLL 
)LL 
;LL 
GCMM 
.MM 
SuppressFinalizeMM 
(MM  
thisMM  $
)MM$ %
;MM% &
}NN 	
publicVV 
FSerialToEthernetVV  
fSerialToEthernetVV! 2
{WW 	
getXX 
{YY 
tryZZ 
{[[ 
return\\ 
m_fSerialToEthernet\\ .
;\\. /
}]] 
catch^^ 
(^^ 
	Exception^^  
ex^^! #
)^^# $
{__ 
FDebug`` 
.`` 
throwException`` )
(``) *
ex``* ,
)``, -
;``- .
}aa 
finallybb 
{cc 
}ee 
returnff 
nullff 
;ff 
}gg 
}hh 	
publicll 
FEventIdll 
fEventIdll  
{mm 	
getnn 
{oo 
trypp 
{qq 
returnrr 

m_fEventIdrr %
;rr% &
}ss 
catchtt 
(tt 
	Exceptiontt  
extt! #
)tt# $
{uu 
FDebugvv 
.vv 
throwExceptionvv )
(vv) *
exvv* ,
)vv, -
;vv- .
}ww 
finallyxx 
{yy 
}{{ 
return|| 
FEventId|| 
.||  
None||  $
;||$ %
}}} 
}~~ 	
}
ää 
}ãã Ÿ'
ëD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\EventArgs\c_FSocketDataReceivedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
[ 
Serializable 
] 
public 

class (
FSocketDataReceivedEventArgs -
:. /
FEventArgsBase0 >
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
byte 
[ 
] 
m_bin 
= 
null #
;# $
internal"" (
FSocketDataReceivedEventArgs"" -
(""- .
FSerialToEthernet## 
fSerialToEthernet## /
,##/ 0
FEventId$$ 
fEventId$$ 
,$$ 
FResultCode%% 
fResult%% 
,%%  
string&& 
errorMessage&& 
,&&  
byte'' 
['' 
]'' 
bin'' 
)(( 
:)) 
base)) 
()) 
fSerialToEthernet)) $
,))$ %
fEventId))& .
))). /
{** 	
	m_fResult++ 
=++ 
fResult++ 
;++  
m_errorMessage,, 
=,, 
errorMessage,, )
;,,) *
m_bin-- 
=-- 
bin-- 
;-- 
}.. 	
~22 	(
FSocketDataReceivedEventArgs22	 %
(22% &
)33 
{44 	
	myDispose55 
(55 
false55 
)55 
;55 
}66 	
	protected:: 
override:: 
void:: 
	myDispose::  )
(::) *
bool;; 
	disposing;; 
)<< 
{== 	
if>> 
(>> 
!>> 

m_disposed>> 
)>> 
{?? 
if@@ 
(@@ 
	disposing@@ 
)@@ 
{AA 
m_binBB 
=BB 
nullBB  
;BB  !
}CC 

m_disposedDD 
=DD 
trueDD !
;DD! "
baseFF 
.FF 
	myDisposeFF 
(FF 
	disposingFF (
)FF( )
;FF) *
}GG 
}HH 	
publicPP 
voidPP 
DisposePP 
(PP 
)QQ 
{RR 	
	myDisposeSS 
(SS 
trueSS 
)SS 
;SS 
GCTT 
.TT 
SuppressFinalizeTT 
(TT  
thisTT  $
)TT$ %
;TT% &
}UU 	
public]] 
FResultCode]] 
fResult]] "
{^^ 	
get__ 
{`` 
tryaa 
{bb 
returncc 
	m_fResultcc $
;cc$ %
}dd 
catchee 
(ee 
	Exceptionee  
exee! #
)ee# $
{ff 
FDebuggg 
.gg 
throwExceptiongg )
(gg) *
exgg* ,
)gg, -
;gg- .
}hh 
finallyii 
{jj 
}ll 
returnmm 
FResultCodemm "
.mm" #
Successmm# *
;mm* +
}nn 
}oo 	
publicss 
stringss 
errorMessagess "
{tt 	
getuu 
{vv 
tryww 
{xx 
returnyy 
m_errorMessageyy )
;yy) *
}zz 
catch{{ 
({{ 
	Exception{{  
ex{{! #
){{# $
{|| 
FDebug}} 
.}} 
throwException}} )
(}}) *
ex}}* ,
)}}, -
;}}- .
}~~ 
finally 
{
ÄÄ 
}
ÇÇ 
return
ÉÉ 
string
ÉÉ 
.
ÉÉ 
Empty
ÉÉ #
;
ÉÉ# $
}
ÑÑ 
}
ÖÖ 	
public
ââ 
byte
ââ 
[
ââ 
]
ââ 
fSocketData
ââ !
{
ää 	
get
ãã 
{
åå 
try
çç 
{
éé 
return
èè 
m_bin
èè  
;
èè  !
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë  
ex
ëë! #
)
ëë# $
{
íí 
FDebug
ìì 
.
ìì 
throwException
ìì )
(
ìì) *
ex
ìì* ,
)
ìì, -
;
ìì- .
}
îî 
finally
ïï 
{
ññ 
}
òò 
return
ôô 
null
ôô 
;
ôô 
}
öö 
}
õõ 	
}
ßß 
}®® ˆ'
óD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\EventArgs\c_FSerialPluginDataReceivedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
[ 
Serializable 
] 
public 

class .
"FSerialPluginDataReceivedEventArgs 3
:4 5
FEventArgsBase6 D
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private !
FSerialPluginRecvData %
m_fSerialData& 3
=4 5
null6 :
;: ;
internal"" .
"FSerialPluginDataReceivedEventArgs"" 3
(""3 4
FSerialToEthernet## 
fSerialToEthernet## /
,##/ 0
FEventId$$ 
fEventId$$ 
,$$ 
FResultCode%% 
fResult%% 
,%%  
string&& 
errorMessage&& 
,&&  !
FSerialPluginRecvData'' !
fSerialData''" -
)(( 
:)) 
base)) 
()) 
fSerialToEthernet)) $
,))$ %
fEventId))& .
))). /
{** 	
	m_fResult++ 
=++ 
fResult++ 
;++  
m_errorMessage,, 
=,, 
errorMessage,, )
;,,) *
m_fSerialData-- 
=-- 
fSerialData-- '
;--' (
}.. 	
~22 	.
"FSerialPluginDataReceivedEventArgs22	 +
(22+ ,
)33 
{44 	
	myDispose55 
(55 
false55 
)55 
;55 
}66 	
	protected:: 
override:: 
void:: 
	myDispose::  )
(::) *
bool;; 
	disposing;; 
)<< 
{== 	
if>> 
(>> 
!>> 

m_disposed>> 
)>> 
{?? 
if@@ 
(@@ 
	disposing@@ 
)@@ 
{AA 
m_fSerialDataBB !
=BB" #
nullBB$ (
;BB( )
}CC 

m_disposedDD 
=DD 
trueDD !
;DD! "
baseFF 
.FF 
	myDisposeFF 
(FF 
	disposingFF (
)FF( )
;FF) *
}GG 
}HH 	
publicPP 
voidPP 
DisposePP 
(PP 
)QQ 
{RR 	
	myDisposeSS 
(SS 
trueSS 
)SS 
;SS 
GCTT 
.TT 
SuppressFinalizeTT 
(TT  
thisTT  $
)TT$ %
;TT% &
}UU 	
public]] 
FResultCode]] 
fResult]] "
{^^ 	
get__ 
{`` 
tryaa 
{bb 
returncc 
	m_fResultcc $
;cc$ %
}dd 
catchee 
(ee 
	Exceptionee  
exee! #
)ee# $
{ff 
FDebuggg 
.gg 
throwExceptiongg )
(gg) *
exgg* ,
)gg, -
;gg- .
}hh 
finallyii 
{jj 
}ll 
returnmm 
FResultCodemm "
.mm" #
Successmm# *
;mm* +
}nn 
}oo 	
publicss 
stringss 
errorMessagess "
{tt 	
getuu 
{vv 
tryww 
{xx 
returnyy 
m_errorMessageyy )
;yy) *
}zz 
catch{{ 
({{ 
	Exception{{  
ex{{! #
){{# $
{|| 
FDebug}} 
.}} 
throwException}} )
(}}) *
ex}}* ,
)}}, -
;}}- .
}~~ 
finally 
{
ÄÄ 
}
ÇÇ 
return
ÉÉ 
string
ÉÉ 
.
ÉÉ 
Empty
ÉÉ #
;
ÉÉ# $
}
ÑÑ 
}
ÖÖ 	
public
ââ #
FSerialPluginRecvData
ââ $
fSerialData
ââ% 0
{
ää 	
get
ãã 
{
åå 
try
çç 
{
éé 
return
èè 
m_fSerialData
èè (
;
èè( )
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë  
ex
ëë! #
)
ëë# $
{
íí 
FDebug
ìì 
.
ìì 
throwException
ìì )
(
ìì) *
ex
ìì* ,
)
ìì, -
;
ìì- .
}
îî 
finally
ïï 
{
ññ 
}
òò 
return
ôô 
null
ôô 
;
ôô 
}
öö 
}
õõ 	
}
ßß 
}®® •
ñD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\EventArgs\c_FSerialPluginErrorRaisedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
[ 
Serializable 
] 
public 

class -
!FSerialPluginErrorRaisedEventArgs 2
:3 4
FEventArgsBase5 C
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
internal   -
!FSerialPluginErrorRaisedEventArgs   2
(  2 3
FSerialToEthernet!! 
fSerialToEthernet!! /
,!!/ 0
FEventId"" 
fEventId"" 
,"" 
string## 
errorMessage## 
)$$ 
:%% 
base%% 
(%% 
fSerialToEthernet%% $
,%%$ %
fEventId%%& .
)%%. /
{&& 	
m_errorMessage'' 
='' 
errorMessage'' )
;'') *
}(( 	
~,, 	-
!FSerialPluginErrorRaisedEventArgs,,	 *
(,,* +
)-- 
{.. 	
	myDispose// 
(// 
false// 
)// 
;// 
}00 	
	protected44 
override44 
void44 
	myDispose44  )
(44) *
bool55 
	disposing55 
)66 
{77 	
if88 
(88 
!88 

m_disposed88 
)88 
{99 
if:: 
(:: 
	disposing:: 
):: 
{;; 
}== 

m_disposed>> 
=>> 
true>> !
;>>! "
base@@ 
.@@ 
	myDispose@@ 
(@@ 
	disposing@@ (
)@@( )
;@@) *
}AA 
}BB 	
publicJJ 
voidJJ 
DisposeJJ 
(JJ 
)KK 
{LL 	
	myDisposeMM 
(MM 
trueMM 
)MM 
;MM 
GCNN 
.NN 
SuppressFinalizeNN 
(NN  
thisNN  $
)NN$ %
;NN% &
}OO 	
publicWW 
stringWW 
errorMessageWW "
{XX 	
getYY 
{ZZ 
try[[ 
{\\ 
return]] 
m_errorMessage]] )
;]]) *
}^^ 
catch__ 
(__ 
	Exception__  
ex__! #
)__# $
{`` 
FDebugaa 
.aa 
throwExceptionaa )
(aa) *
exaa* ,
)aa, -
;aa- .
}bb 
finallycc 
{dd 
}ff 
returngg 
stringgg 
.gg 
Emptygg #
;gg# $
}hh 
}ii 	
}uu 
}vv ÿ6
óD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\EventArgs\c_FSerialPluginStateChangedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
[ 
Serializable 
] 
public 

class .
"FSerialPluginStateChangedEventArgs 3
:4 5
FEventArgsBase6 D
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FCommunicationState #
m_fState$ ,
=- .
FCommunicationState/ B
.B C
ClosedC I
;I J
private 
string 
m_serialPort #
=$ %
string& ,
., -
Empty- 2
;2 3
private 
int 
m_baud 
= 
$num 
; 
internal$$ .
"FSerialPluginStateChangedEventArgs$$ 3
($$3 4
FSerialToEthernet%% 
fSerialToEthernet%% /
,%%/ 0
FEventId&& 
fEventId&& 
,&& 
FResultCode'' 
fResult'' 
,''  
string(( 
errorMessage(( 
,((  
FCommunicationState)) 
fState))  &
,))& '
string** 

serialPort** 
,** 
int++ 
baud++ 
),, 
:-- 
base-- 
(-- 
fSerialToEthernet-- $
,--$ %
fEventId--& .
)--. /
{.. 	
	m_fResult// 
=// 
fResult// 
;//  
m_errorMessage00 
=00 
errorMessage00 )
;00) *
m_fState11 
=11 
fState11 
;11 
m_serialPort22 
=22 

serialPort22 %
;22% &
m_baud33 
=33 
baud33 
;33 
}44 	
~88 	.
"FSerialPluginStateChangedEventArgs88	 +
(88+ ,
)99 
{:: 	
	myDispose;; 
(;; 
false;; 
);; 
;;; 
}<< 	
	protected@@ 
override@@ 
void@@ 
	myDispose@@  )
(@@) *
boolAA 
	disposingAA 
)BB 
{CC 	
ifDD 
(DD 
!DD 

m_disposedDD 
)DD 
{EE 
ifFF 
(FF 
	disposingFF 
)FF 
{GG 
}II 

m_disposedJJ 
=JJ 
trueJJ !
;JJ! "
baseLL 
.LL 
	myDisposeLL 
(LL 
	disposingLL (
)LL( )
;LL) *
}MM 
}NN 	
publicVV 
voidVV 
DisposeVV 
(VV 
)WW 
{XX 	
	myDisposeYY 
(YY 
trueYY 
)YY 
;YY 
GCZZ 
.ZZ 
SuppressFinalizeZZ 
(ZZ  
thisZZ  $
)ZZ$ %
;ZZ% &
}[[ 	
publiccc 
FResultCodecc 
fResultcc "
{dd 	
getee 
{ff 
trygg 
{hh 
returnii 
	m_fResultii $
;ii$ %
}jj 
catchkk 
(kk 
	Exceptionkk  
exkk! #
)kk# $
{ll 
FDebugmm 
.mm 
throwExceptionmm )
(mm) *
exmm* ,
)mm, -
;mm- .
}nn 
finallyoo 
{pp 
}rr 
returnss 
FResultCodess "
.ss" #
Successss# *
;ss* +
}tt 
}uu 	
publicyy 
stringyy 
errorMessageyy "
{zz 	
get{{ 
{|| 
try}} 
{~~ 
return 
m_errorMessage )
;) *
}
ÄÄ 
catch
ÅÅ 
(
ÅÅ 
	Exception
ÅÅ  
ex
ÅÅ! #
)
ÅÅ# $
{
ÇÇ 
FDebug
ÉÉ 
.
ÉÉ 
throwException
ÉÉ )
(
ÉÉ) *
ex
ÉÉ* ,
)
ÉÉ, -
;
ÉÉ- .
}
ÑÑ 
finally
ÖÖ 
{
ÜÜ 
}
àà 
return
ââ 
string
ââ 
.
ââ 
Empty
ââ #
;
ââ# $
}
ää 
}
ãã 	
public
èè !
FCommunicationState
èè "
fState
èè# )
{
êê 	
get
ëë 
{
íí 
try
ìì 
{
îî 
return
ïï 
m_fState
ïï #
;
ïï# $
}
ññ 
catch
óó 
(
óó 
	Exception
óó  
ex
óó! #
)
óó# $
{
òò 
FDebug
ôô 
.
ôô 
throwException
ôô )
(
ôô) *
ex
ôô* ,
)
ôô, -
;
ôô- .
}
öö 
finally
õõ 
{
úú 
}
ûû 
return
üü !
FCommunicationState
üü *
.
üü* +
Closed
üü+ 1
;
üü1 2
}
†† 
}
°° 	
public
•• 
string
•• 

serialPort
••  
{
¶¶ 	
get
ßß 
{
®® 
try
©© 
{
™™ 
return
´´ 
m_serialPort
´´ '
;
´´' (
}
¨¨ 
catch
≠≠ 
(
≠≠ 
	Exception
≠≠  
ex
≠≠! #
)
≠≠# $
{
ÆÆ 
FDebug
ØØ 
.
ØØ 
throwException
ØØ )
(
ØØ) *
ex
ØØ* ,
)
ØØ, -
;
ØØ- .
}
∞∞ 
finally
±± 
{
≤≤ 
}
¥¥ 
return
µµ 
string
µµ 
.
µµ 
Empty
µµ #
;
µµ# $
}
∂∂ 
}
∑∑ 	
public
ªª 
int
ªª 
baud
ªª 
{
ºº 	
get
ΩΩ 
{
ææ 
try
øø 
{
¿¿ 
return
¡¡ 
m_baud
¡¡ !
;
¡¡! "
}
¬¬ 
catch
√√ 
(
√√ 
	Exception
√√  
ex
√√! #
)
√√# $
{
ƒƒ 
FDebug
≈≈ 
.
≈≈ 
throwException
≈≈ )
(
≈≈) *
ex
≈≈* ,
)
≈≈, -
;
≈≈- .
}
∆∆ 
finally
«« 
{
»» 
}
   
return
ÀÀ 
$num
ÀÀ 
;
ÀÀ 
}
ÃÃ 
}
ÕÕ 	
}
ŸŸ 
}⁄⁄ ¥&
ìD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\EventArgs\c_FSerialPluginDataSentEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
[ 
Serializable 
] 
public 

class *
FSerialPluginDataSentEventArgs /
:0 1
FEventArgsBase2 @
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSerialSendData 
m_fSerialData  -
=. /
null0 4
;4 5
internal"" *
FSerialPluginDataSentEventArgs"" /
(""/ 0
FSerialToEthernet## 
fSerialToEthernet## /
,##/ 0
FEventId$$ 
fEventId$$ 
,$$ 
FResultCode%% 
fResult%% 
,%%  
string&& 
errorMessage&& 
,&&  
FSerialSendData'' 
fSerialData'' '
)(( 
:)) 
base)) 
()) 
fSerialToEthernet)) $
,))$ %
fEventId))& .
))). /
{** 	
m_fSerialData++ 
=++ 
fSerialData++ '
;++' (
},, 	
~00 	*
FSerialPluginDataSentEventArgs00	 '
(00' (
)11 
{22 	
	myDispose33 
(33 
false33 
)33 
;33 
}44 	
	protected88 
override88 
void88 
	myDispose88  )
(88) *
bool99 
	disposing99 
):: 
{;; 	
if<< 
(<< 
!<< 

m_disposed<< 
)<< 
{== 
if>> 
(>> 
	disposing>> 
)>> 
{?? 
m_fSerialData@@ !
=@@" #
null@@$ (
;@@( )
}AA 

m_disposedBB 
=BB 
trueBB !
;BB! "
baseDD 
.DD 
	myDisposeDD 
(DD 
	disposingDD (
)DD( )
;DD) *
}EE 
}FF 	
publicNN 
voidNN 
DisposeNN 
(NN 
)OO 
{PP 	
	myDisposeQQ 
(QQ 
trueQQ 
)QQ 
;QQ 
GCRR 
.RR 
SuppressFinalizeRR 
(RR  
thisRR  $
)RR$ %
;RR% &
}SS 	
public[[ 
FResultCode[[ 
fResult[[ "
{\\ 	
get]] 
{^^ 
try__ 
{`` 
returnaa 
	m_fResultaa $
;aa$ %
}bb 
catchcc 
(cc 
	Exceptioncc  
excc! #
)cc# $
{dd 
FDebugee 
.ee 
throwExceptionee )
(ee) *
exee* ,
)ee, -
;ee- .
}ff 
finallygg 
{hh 
}jj 
returnkk 
FResultCodekk "
.kk" #
Successkk# *
;kk* +
}ll 
}mm 	
publicqq 
stringqq 
errorMessageqq "
{rr 	
getss 
{tt 
tryuu 
{vv 
returnww 
m_errorMessageww )
;ww) *
}xx 
catchyy 
(yy 
	Exceptionyy  
exyy! #
)yy# $
{zz 
FDebug{{ 
.{{ 
throwException{{ )
({{) *
ex{{* ,
){{, -
;{{- .
}|| 
finally}} 
{~~ 
}
ÄÄ 
return
ÅÅ 
string
ÅÅ 
.
ÅÅ 
Empty
ÅÅ #
;
ÅÅ# $
}
ÇÇ 
}
ÉÉ 	
public
áá 
FSerialSendData
áá 
fSerialData
áá *
{
àà 	
get
ââ 
{
ää 
try
ãã 
{
åå 
return
çç 
m_fSerialData
çç (
;
çç( )
}
éé 
catch
èè 
(
èè 
	Exception
èè  
ex
èè! #
)
èè# $
{
êê 
FDebug
ëë 
.
ëë 
throwException
ëë )
(
ëë) *
ex
ëë* ,
)
ëë, -
;
ëë- .
}
íí 
finally
ìì 
{
îî 
}
ññ 
return
óó 
null
óó 
;
óó 
}
òò 
}
ôô 	
}
•• 
}¶¶ º'
çD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\EventArgs\c_FSocketDataSentEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
[ 
Serializable 
] 
public 

class $
FSocketDataSentEventArgs )
:* +
FEventArgsBase, :
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FSocketSendData 
m_fSocketData  -
=. /
null0 4
;4 5
internal"" $
FSocketDataSentEventArgs"" )
("") *
FSerialToEthernet## 
fSerialToEthernet## /
,##/ 0
FEventId$$ 
fEventId$$ 
,$$ 
FResultCode%% 
fResult%% 
,%%  
string&& 
errorMessage&& 
,&&  
FSocketSendData'' 
fSocketData'' '
)(( 
:)) 
base)) 
()) 
fSerialToEthernet)) $
,))$ %
fEventId))& .
))). /
{** 	
	m_fResult++ 
=++ 
fResult++ 
;++  
m_errorMessage,, 
=,, 
errorMessage,, )
;,,) *
m_fSocketData-- 
=-- 
fSocketData-- '
;--' (
}.. 	
~22 	$
FSocketDataSentEventArgs22	 !
(22! "
)33 
{44 	
	myDispose55 
(55 
false55 
)55 
;55 
}66 	
	protected:: 
override:: 
void:: 
	myDispose::  )
(::) *
bool;; 
	disposing;; 
)<< 
{== 	
if>> 
(>> 
!>> 

m_disposed>> 
)>> 
{?? 
if@@ 
(@@ 
	disposing@@ 
)@@ 
{AA 
m_fSocketDataBB !
=BB" #
nullBB$ (
;BB( )
}CC 

m_disposedDD 
=DD 
trueDD !
;DD! "
baseFF 
.FF 
	myDisposeFF 
(FF 
	disposingFF (
)FF( )
;FF) *
}GG 
}HH 	
publicPP 
voidPP 
DisposePP 
(PP 
)QQ 
{RR 	
	myDisposeSS 
(SS 
trueSS 
)SS 
;SS 
GCTT 
.TT 
SuppressFinalizeTT 
(TT  
thisTT  $
)TT$ %
;TT% &
}UU 	
public]] 
FResultCode]] 
fResult]] "
{^^ 	
get__ 
{`` 
tryaa 
{bb 
returncc 
	m_fResultcc $
;cc$ %
}dd 
catchee 
(ee 
	Exceptionee  
exee! #
)ee# $
{ff 
FDebuggg 
.gg 
throwExceptiongg )
(gg) *
exgg* ,
)gg, -
;gg- .
}hh 
finallyii 
{jj 
}ll 
returnmm 
FResultCodemm "
.mm" #
Successmm# *
;mm* +
}nn 
}oo 	
publicss 
stringss 
errorMessagess "
{tt 	
getuu 
{vv 
tryww 
{xx 
returnyy 
m_errorMessageyy )
;yy) *
}zz 
catch{{ 
({{ 
	Exception{{  
ex{{! #
){{# $
{|| 
FDebug}} 
.}} 
throwException}} )
(}}) *
ex}}* ,
)}}, -
;}}- .
}~~ 
finally 
{
ÄÄ 
}
ÇÇ 
return
ÉÉ 
string
ÉÉ 
.
ÉÉ 
Empty
ÉÉ #
;
ÉÉ# $
}
ÑÑ 
}
ÖÖ 	
public
ââ 
FSocketSendData
ââ 
fSocketData
ââ *
{
ää 	
get
ãã 
{
åå 
try
çç 
{
éé 
return
èè 
m_fSocketData
èè (
;
èè( )
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë  
ex
ëë! #
)
ëë# $
{
íí 
FDebug
ìì 
.
ìì 
throwException
ìì )
(
ìì) *
ex
ìì* ,
)
ìì, -
;
ìì- .
}
îî 
finally
ïï 
{
ññ 
}
òò 
return
ôô 
null
ôô 
;
ôô 
}
öö 
}
õõ 	
}
ßß 
}®® ç
êD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\EventArgs\c_FSocketErrorRaisedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
[ 
Serializable 
] 
public 

class '
FSocketErrorRaisedEventArgs ,
:- .
FEventArgsBase/ =
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
internal   '
FSocketErrorRaisedEventArgs   ,
(  , -
FSerialToEthernet!! 
fSerialToEthernet!! /
,!!/ 0
FEventId"" 
fEventId"" 
,"" 
string## 
errorMessage## 
)$$ 
:%% 
base%% 
(%% 
fSerialToEthernet%% $
,%%$ %
fEventId%%& .
)%%. /
{&& 	
m_errorMessage'' 
='' 
errorMessage'' )
;'') *
}(( 	
~,, 	'
FSocketErrorRaisedEventArgs,,	 $
(,,$ %
)-- 
{.. 	
	myDispose// 
(// 
false// 
)// 
;// 
}00 	
	protected44 
override44 
void44 
	myDispose44  )
(44) *
bool55 
	disposing55 
)66 
{77 	
if88 
(88 
!88 

m_disposed88 
)88 
{99 
if:: 
(:: 
	disposing:: 
):: 
{;; 
}== 

m_disposed>> 
=>> 
true>> !
;>>! "
base@@ 
.@@ 
	myDispose@@ 
(@@ 
	disposing@@ (
)@@( )
;@@) *
}AA 
}BB 	
publicJJ 
voidJJ 
DisposeJJ 
(JJ 
)KK 
{LL 	
	myDisposeMM 
(MM 
trueMM 
)MM 
;MM 
GCNN 
.NN 
SuppressFinalizeNN 
(NN  
thisNN  $
)NN$ %
;NN% &
}OO 	
publicWW 
stringWW 
errorMessageWW "
{XX 	
getYY 
{ZZ 
try[[ 
{\\ 
return]] 
m_errorMessage]] )
;]]) *
}^^ 
catch__ 
(__ 
	Exception__  
ex__! #
)__# $
{`` 
FDebugaa 
.aa 
throwExceptionaa )
(aa) *
exaa* ,
)aa, -
;aa- .
}bb 
finallycc 
{dd 
}ff 
returngg 
stringgg 
.gg 
Emptygg #
;gg# $
}hh 
}ii 	
}uu 
}vv —M
ëD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\EventArgs\c_FSocketStateChangedEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
[ 
Serializable 
] 
public 

class (
FSocketStateChangedEventArgs -
:. /
FEventArgsBase0 >
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FResultCode 
	m_fResult %
=& '
FResultCode( 3
.3 4
Success4 ;
;; <
private 
string 
m_errorMessage %
=& '
string( .
.. /
Empty/ 4
;4 5
private 
FCommunicationState #
m_fState$ ,
=- .
FCommunicationState/ B
.B C
ClosedC I
;I J
private 
FConnectMode 
m_fConnectMode +
=, -
FConnectMode. :
.: ;
Passive; B
;B C
private 
string 
	m_localIp  
=! "
string# )
.) *
Empty* /
;/ 0
private 
int 
m_localPort 
=  !
$num" #
;# $
private   
string   

m_remoteIp   !
=  " #
string  $ *
.  * +
Empty  + 0
;  0 1
private!! 
int!! 
m_remotePort!!  
=!!! "
$num!!# $
;!!$ %
internal'' (
FSocketStateChangedEventArgs'' -
(''- .
FSerialToEthernet(( 
fSerialToEthernet(( /
,((/ 0
FEventId)) 
fEventId)) 
,)) 
FResultCode** 
fResult** 
,**  
string++ 
errorMessage++ 
,++  
FCommunicationState,, 
fState,,  &
,,,& '
FConnectMode-- 
fConnectMode-- %
,--% &
string.. 
localIp.. 
,.. 
int// 
	localPort// 
,// 
string00 
remoteIp00 
,00 
int11 

remotePort11 
)22 
:33 
base33 
(33 
fSerialToEthernet33 $
,33$ %
fEventId33& .
)33. /
{44 	
	m_fResult55 
=55 
fResult55 
;55  
m_errorMessage66 
=66 
errorMessage66 )
;66) *
m_fState77 
=77 
fState77 
;77 
m_fConnectMode88 
=88 
fConnectMode88 )
;88) *
	m_localIp99 
=99 
localIp99 
;99  
m_localPort:: 
=:: 
	localPort:: #
;::# $

m_remoteIp;; 
=;; 
remoteIp;; !
;;;! "
m_remotePort<< 
=<< 

remotePort<< %
;<<% &
}== 	
~AA 	(
FSocketStateChangedEventArgsAA	 %
(AA% &
)BB 
{CC 	
	myDisposeDD 
(DD 
falseDD 
)DD 
;DD 
}EE 	
	protectedII 
overrideII 
voidII 
	myDisposeII  )
(II) *
boolJJ 
	disposingJJ 
)KK 
{LL 	
ifMM 
(MM 
!MM 

m_disposedMM 
)MM 
{NN 
ifOO 
(OO 
	disposingOO 
)OO 
{PP 
}RR 

m_disposedSS 
=SS 
trueSS !
;SS! "
baseUU 
.UU 
	myDisposeUU 
(UU 
	disposingUU (
)UU( )
;UU) *
}VV 
}WW 	
public__ 
void__ 
Dispose__ 
(__ 
)`` 
{aa 	
	myDisposebb 
(bb 
truebb 
)bb 
;bb 
GCcc 
.cc 
SuppressFinalizecc 
(cc  
thiscc  $
)cc$ %
;cc% &
}dd 	
publicll 
FResultCodell 
fResultll "
{mm 	
getnn 
{oo 
trypp 
{qq 
returnrr 
	m_fResultrr $
;rr$ %
}ss 
catchtt 
(tt 
	Exceptiontt  
extt! #
)tt# $
{uu 
FDebugvv 
.vv 
throwExceptionvv )
(vv) *
exvv* ,
)vv, -
;vv- .
}ww 
finallyxx 
{yy 
}{{ 
return|| 
FResultCode|| "
.||" #
Success||# *
;||* +
}}} 
}~~ 	
public
ÇÇ 
string
ÇÇ 
errorMessage
ÇÇ "
{
ÉÉ 	
get
ÑÑ 
{
ÖÖ 
try
ÜÜ 
{
áá 
return
àà 
m_errorMessage
àà )
;
àà) *
}
ââ 
catch
ää 
(
ää 
	Exception
ää  
ex
ää! #
)
ää# $
{
ãã 
FDebug
åå 
.
åå 
throwException
åå )
(
åå) *
ex
åå* ,
)
åå, -
;
åå- .
}
çç 
finally
éé 
{
èè 
}
ëë 
return
íí 
string
íí 
.
íí 
Empty
íí #
;
íí# $
}
ìì 
}
îî 	
public
òò !
FCommunicationState
òò "
fState
òò# )
{
ôô 	
get
öö 
{
õõ 
try
úú 
{
ùù 
return
ûû 
m_fState
ûû #
;
ûû# $
}
üü 
catch
†† 
(
†† 
	Exception
††  
ex
††! #
)
††# $
{
°° 
FDebug
¢¢ 
.
¢¢ 
throwException
¢¢ )
(
¢¢) *
ex
¢¢* ,
)
¢¢, -
;
¢¢- .
}
££ 
finally
§§ 
{
•• 
}
ßß 
return
®® !
FCommunicationState
®® *
.
®®* +
Closed
®®+ 1
;
®®1 2
}
©© 
}
™™ 	
public
ÆÆ 
FConnectMode
ÆÆ 
fConnectMode
ÆÆ (
{
ØØ 	
get
∞∞ 
{
±± 
try
≤≤ 
{
≥≥ 
return
¥¥ 
m_fConnectMode
¥¥ )
;
¥¥) *
}
µµ 
catch
∂∂ 
(
∂∂ 
	Exception
∂∂  
ex
∂∂! #
)
∂∂# $
{
∑∑ 
FDebug
∏∏ 
.
∏∏ 
throwException
∏∏ )
(
∏∏) *
ex
∏∏* ,
)
∏∏, -
;
∏∏- .
}
ππ 
finally
∫∫ 
{
ªª 
}
ΩΩ 
return
ææ 
FConnectMode
ææ #
.
ææ# $
Active
ææ$ *
;
ææ* +
}
øø 
}
¿¿ 	
public
ƒƒ 
string
ƒƒ 
localIp
ƒƒ 
{
≈≈ 	
get
∆∆ 
{
«« 
try
»» 
{
…… 
return
   
	m_localIp
   $
;
  $ %
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ  
ex
ÃÃ! #
)
ÃÃ# $
{
ÕÕ 
FDebug
ŒŒ 
.
ŒŒ 
throwException
ŒŒ )
(
ŒŒ) *
ex
ŒŒ* ,
)
ŒŒ, -
;
ŒŒ- .
}
œœ 
finally
–– 
{
—— 
}
”” 
return
‘‘ 
string
‘‘ 
.
‘‘ 
Empty
‘‘ #
;
‘‘# $
}
’’ 
}
÷÷ 	
public
⁄⁄ 
int
⁄⁄ 
	localPort
⁄⁄ 
{
€€ 	
get
‹‹ 
{
›› 
try
ﬁﬁ 
{
ﬂﬂ 
return
‡‡ 
m_localPort
‡‡ &
;
‡‡& '
}
·· 
catch
‚‚ 
(
‚‚ 
	Exception
‚‚  
ex
‚‚! #
)
‚‚# $
{
„„ 
FDebug
‰‰ 
.
‰‰ 
throwException
‰‰ )
(
‰‰) *
ex
‰‰* ,
)
‰‰, -
;
‰‰- .
}
ÂÂ 
finally
ÊÊ 
{
ÁÁ 
}
ÈÈ 
return
ÍÍ 
$num
ÍÍ 
;
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
public
 
string
 
remoteIp
 
{
ÒÒ 	
get
ÚÚ 
{
ÛÛ 
try
ÙÙ 
{
ıı 
return
ˆˆ 

m_remoteIp
ˆˆ %
;
ˆˆ% &
}
˜˜ 
catch
¯¯ 
(
¯¯ 
	Exception
¯¯  
ex
¯¯! #
)
¯¯# $
{
˘˘ 
FDebug
˙˙ 
.
˙˙ 
throwException
˙˙ )
(
˙˙) *
ex
˙˙* ,
)
˙˙, -
;
˙˙- .
}
˚˚ 
finally
¸¸ 
{
˝˝ 
}
ˇˇ 
return
ÄÄ 
string
ÄÄ 
.
ÄÄ 
Empty
ÄÄ #
;
ÄÄ# $
}
ÅÅ 
}
ÇÇ 	
public
ÜÜ 
int
ÜÜ 

remotePort
ÜÜ 
{
áá 	
get
àà 
{
ââ 
try
ää 
{
ãã 
return
åå 
m_remotePort
åå '
;
åå' (
}
çç 
catch
éé 
(
éé 
	Exception
éé  
ex
éé! #
)
éé# $
{
èè 
FDebug
êê 
.
êê 
throwException
êê )
(
êê) *
ex
êê* ,
)
êê, -
;
êê- .
}
ëë 
finally
íí 
{
ìì 
}
ïï 
return
ññ 
$num
ññ 
;
ññ 
}
óó 
}
òò 	
}
§§ 
}•• «
åD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Event\EventArgs\c_FLogMonitoringEventArgs.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
[ 
Serializable 
] 
public 

class #
FLogMonitoringEventArgs (
:) *
FEventArgsBase+ 9
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
string 
m_log 
= 
string %
.% &
Empty& +
;+ ,
internal   #
FLogMonitoringEventArgs   (
(  ( )
FSerialToEthernet!! 
fSerialToEthernet!! /
,!!/ 0
FEventId"" 
fEventId"" 
,"" 
string## 
log## 
)$$ 
:%% 
base%% 
(%% 
fSerialToEthernet%% $
,%%$ %
fEventId%%& .
)%%. /
{&& 	
m_log'' 
='' 
log'' 
;'' 
}(( 	
~,, 	#
FLogMonitoringEventArgs,,	  
(,,  !
)-- 
{.. 	
	myDispose// 
(// 
false// 
)// 
;// 
}00 	
	protected44 
override44 
void44 
	myDispose44  )
(44) *
bool55 
	disposing55 
)66 
{77 	
if88 
(88 
!88 

m_disposed88 
)88 
{99 
if:: 
(:: 
	disposing:: 
):: 
{;; 
}== 

m_disposed>> 
=>> 
true>> !
;>>! "
base@@ 
.@@ 
	myDispose@@ 
(@@ 
	disposing@@ (
)@@( )
;@@) *
}AA 
}BB 	
publicJJ 
voidJJ 
DisposeJJ 
(JJ 
)KK 
{LL 	
	myDisposeMM 
(MM 
trueMM 
)MM 
;MM 
GCNN 
.NN 
SuppressFinalizeNN 
(NN  
thisNN  $
)NN$ %
;NN% &
}OO 	
publicWW 
stringWW 
logWW 
{XX 	
getYY 
{ZZ 
try[[ 
{\\ 
return]] 
m_log]]  
;]]  !
}^^ 
catch__ 
(__ 
	Exception__  
ex__! #
)__# $
{`` 
FDebugaa 
.aa 
throwExceptionaa )
(aa) *
exaa* ,
)aa, -
;aa- .
}bb 
finallycc 
{dd 
}ff 
returngg 
stringgg 
.gg 
Emptygg #
;gg# $
}hh 
}ii 	
}uu 
}vv ∆ê
yD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\LogWriter\c_FLogWriter.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
internal 
class 

FLogWriter 
: 
IDisposable *
{ 
const 
string 

LogFileExt 
=  !
$str" '
;' (
private 
bool 

m_disposed 
=  !
false" '
;' (
private   
FSerialToEthernet   !
m_fRS232ToEthernet  " 4
=  5 6
null  7 ;
;  ; <
private!! 
FQueue!! 
<!! 
string!! 
>!! 
m_fLogQueue!! *
=!!+ ,
null!!- 1
;!!1 2
private"" 
FThread"" 

m_fThdMain"" "
=""# $
null""% )
;"") *
private$$ 
string$$ 
m_logFileName$$ $
=$$% &
string$$' -
.$$- .
Empty$$. 3
;$$3 4
private%% 

FileStream%% 
m_fsLogFile%% &
=%%' (
null%%) -
;%%- .
private&& 
StreamWriter&& 
m_swLogFile&& (
=&&) *
null&&+ /
;&&/ 0
private'' 
string'' 
m_logFileNameSuffix'' *
=''+ ,
string''- 3
.''3 4
Empty''4 9
;''9 :
public-- 

FLogWriter-- 
(-- 
FSerialToEthernet.. 
fRS232ToEthernet.. .
)// 
{00 	
m_fRS232ToEthernet11 
=11  
fRS232ToEthernet11! 1
;111 2
init22 
(22 
)22 
;22 
}33 	
~77 	

FLogWriter77	 
(77 
)88 
{99 	
	myDispose:: 
(:: 
false:: 
):: 
;:: 
};; 	
	protected?? 
void?? 
	myDispose??  
(??  !
bool@@ 
	disposing@@ 
)AA 
{BB 	
ifCC 
(CC 
!CC 

m_disposedCC 
)CC 
{DD 
ifEE 
(EE 
	disposingEE 
)EE 
{FF 
termGG 
(GG 
)GG 
;GG 
m_fRS232ToEthernetHH &
=HH' (
nullHH) -
;HH- .
}II 

m_disposedKK 
=KK 
trueKK !
;KK! "
}LL 
}MM 	
publicUU 
voidUU 
DisposeUU 
(UU 
)VV 
{WW 	
	myDisposeXX 
(XX 
trueXX 
)XX 
;XX 
GCYY 
.YY 
SuppressFinalizeYY 
(YY  
thisYY  $
)YY$ %
;YY% &
}ZZ 	
privatehh 
voidhh 
inithh 
(hh 
)ii 
{jj 	
trykk 
{ll 
m_fLogQueuemm 
=mm 
newmm !
FQueuemm" (
<mm( )
stringmm) /
>mm/ 0
(mm0 1
)mm1 2
;mm2 3
m_logFileNameSuffixqq #
=qq$ %
m_fRS232ToEthernetqq& 8
.qq8 9
logFileNameSuffixqq9 J
;qqJ K

m_fThdMainuu 
=uu 
newuu  
FThreaduu! (
(uu( )
$struu) :
)uu: ;
;uu; <

m_fThdMainvv 
.vv 
ThreadJobCalledvv *
+=vv+ -
newvv. 1(
FThreadJobCalledEventHandlervv2 N
(vvN O&
m_fThdMain_ThreadJobCalledvvO i
)vvi j
;vvj k

m_fThdMainww 
.ww 
startww  
(ww  !
)ww! "
;ww" #
}xx 
catchyy 
(yy 
	Exceptionyy 
exyy 
)yy  
{zz 
FDebug{{ 
.{{ 
throwException{{ %
({{% &
ex{{& (
){{( )
;{{) *
}|| 
finally}} 
{~~ 
}
ÄÄ 
}
ÅÅ 	
private
ÖÖ 
void
ÖÖ 
term
ÖÖ 
(
ÖÖ 
)
ÜÜ 
{
áá 	
try
àà 
{
ââ 
if
ää 
(
ää 

m_fThdMain
ää 
!=
ää !
null
ää" &
)
ää& '
{
ãã 
if
åå 
(
åå 
m_fLogQueue
åå #
!=
åå$ &
null
åå' +
)
åå+ ,
{
çç 
while
éé 
(
éé 
m_fLogQueue
éé *
.
éé* +
count
éé+ 0
>
éé1 2
$num
éé3 4
)
éé4 5
{
èè 
System
êê "
.
êê" #
	Threading
êê# ,
.
êê, -
Thread
êê- 3
.
êê3 4
Sleep
êê4 9
(
êê9 :
$num
êê: <
)
êê< =
;
êê= >
}
ëë 
}
íí 

m_fThdMain
ññ 
.
ññ 
stop
ññ #
(
ññ# $
)
ññ$ %
;
ññ% &

m_fThdMain
óó 
.
óó 
Dispose
óó &
(
óó& '
)
óó' (
;
óó( )

m_fThdMain
òò 
.
òò 
ThreadJobCalled
òò .
-=
òò/ 1
new
òò2 5*
FThreadJobCalledEventHandler
òò6 R
(
òòR S(
m_fThdMain_ThreadJobCalled
òòS m
)
òòm n
;
òòn o

m_fThdMain
ôô 
=
ôô  
null
ôô! %
;
ôô% &
}
öö 
if
ûû 
(
ûû 
m_fLogQueue
ûû 
!=
ûû  "
null
ûû# '
)
ûû' (
{
üü 
m_fLogQueue
†† 
.
††  
Dispose
††  '
(
††' (
)
††( )
;
††) *
m_fLogQueue
°° 
=
°°  !
null
°°" &
;
°°& '
}
¢¢ 
closeLogFile
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
}
ßß 
catch
®® 
(
®® 
	Exception
®® 
ex
®® 
)
®®  
{
©© 
FDebug
™™ 
.
™™ 
throwException
™™ %
(
™™% &
ex
™™& (
)
™™( )
;
™™) *
}
´´ 
finally
¨¨ 
{
≠≠ 
}
ØØ 
}
∞∞ 	
private
¥¥ 
void
¥¥ 
openLogFile
¥¥  
(
¥¥  !
)
µµ 
{
∂∂ 	
string
∑∑ 
searchPattern
∑∑  
=
∑∑! "
string
∑∑# )
.
∑∑) *
Empty
∑∑* /
;
∑∑/ 0
string
∏∏ 
[
∏∏ 
]
∏∏ 
files
∏∏ 
=
∏∏ 
null
∏∏ !
;
∏∏! "
FileInfo
ππ 
fileInfo
ππ 
=
ππ 
null
ππ  $
;
ππ$ %
string
∫∫ 
newLogFileName
∫∫ !
=
∫∫" #
string
∫∫$ *
.
∫∫* +
Empty
∫∫+ 0
;
∫∫0 1
try
ºº 
{
ΩΩ 
if
ææ 
(
ææ 
!
ææ 
	Directory
ææ 
.
ææ 
Exists
ææ %
(
ææ% & 
m_fRS232ToEthernet
ææ& 8
.
ææ8 9
logDirectory
ææ9 E
)
ææE F
)
ææF G
{
øø 
	Directory
¿¿ 
.
¿¿ 
CreateDirectory
¿¿ -
(
¿¿- . 
m_fRS232ToEthernet
¿¿. @
.
¿¿@ A
logDirectory
¿¿A M
)
¿¿M N
;
¿¿N O
}
¡¡ 
if
≈≈ 
(
≈≈ 
m_fsLogFile
≈≈ 
==
≈≈  "
null
≈≈# '
)
≈≈' (
{
∆∆ !
m_logFileNameSuffix
«« '
=
««( ) 
m_fRS232ToEthernet
««* <
.
««< =
logFileNameSuffix
««= N
;
««N O
searchPattern
»» !
=
»»" #
$str
»»$ (
+
»») *!
m_logFileNameSuffix
»»+ >
+
»»? @
$str
»»A D
+
»»E F

LogFileExt
»»G Q
;
»»Q R
files
…… 
=
…… 
	Directory
…… %
.
……% &
GetFiles
……& .
(
……. / 
m_fRS232ToEthernet
……/ A
.
……A B
logDirectory
……B N
,
……N O
searchPattern
……P ]
)
……] ^
;
……^ _
if
ÀÀ 
(
ÀÀ 
files
ÀÀ 
.
ÀÀ 
Length
ÀÀ $
==
ÀÀ% '
$num
ÀÀ( )
)
ÀÀ) *
{
ÃÃ 
m_logFileName
ÕÕ %
=
ÕÕ& '
string
ÕÕ( .
.
ÕÕ. /
Empty
ÕÕ/ 4
;
ÕÕ4 5
}
ŒŒ 
else
œœ 
{
–– 
m_logFileName
—— %
=
——& '
files
——( -
[
——- .
files
——. 3
.
——3 4
Length
——4 :
-
——; <
$num
——= >
]
——> ?
;
——? @
fileInfo
““  
=
““! "
new
““# &
FileInfo
““' /
(
““/ 0
m_logFileName
““0 =
)
““= >
;
““> ?
if
”” 
(
”” 
fileInfo
”” $
.
””$ %
Length
””% +
>=
””, .
(
””/ 0 
m_fRS232ToEthernet
””0 B
.
””B C
logFileMaxSize
””C Q
*
””R S
$num
””T X
*
””Y Z
$num
””[ _
)
””_ `
)
””` a
{
‘‘ 
m_logFileName
’’ )
=
’’* +
string
’’, 2
.
’’2 3
Empty
’’3 8
;
’’8 9
}
÷÷ 
}
◊◊ 
}
ÿÿ 
else
ŸŸ 
{
⁄⁄ 
fileInfo
€€ 
=
€€ 
new
€€ "
FileInfo
€€# +
(
€€+ ,
m_logFileName
€€, 9
)
€€9 :
;
€€: ;
if
‹‹ 
(
‹‹ 
fileInfo
‹‹  
.
‹‹  !
Length
‹‹! '
>=
‹‹( *
(
‹‹+ , 
m_fRS232ToEthernet
‹‹, >
.
‹‹> ?
logFileMaxSize
‹‹? M
*
‹‹N O
$num
‹‹P T
*
‹‹U V
$num
‹‹W [
)
‹‹[ \
)
‹‹\ ]
{
›› 
closeLogFile
ﬁﬁ $
(
ﬁﬁ$ %
)
ﬁﬁ% &
;
ﬁﬁ& '
m_logFileName
ﬂﬂ %
=
ﬂﬂ& '
string
ﬂﬂ( .
.
ﬂﬂ. /
Empty
ﬂﬂ/ 4
;
ﬂﬂ4 5
}
‡‡ 
else
·· 
if
·· 
(
·· !
m_logFileNameSuffix
·· 0
!=
··1 3 
m_fRS232ToEthernet
··4 F
.
··F G
logFileNameSuffix
··G X
)
··X Y
{
‚‚ 
closeLogFile
„„ $
(
„„$ %
)
„„% &
;
„„& '
m_logFileName
‰‰ %
=
‰‰& '
string
‰‰( .
.
‰‰. /
Empty
‰‰/ 4
;
‰‰4 5
}
ÂÂ 
}
ÊÊ 
if
ÍÍ 
(
ÍÍ 
m_swLogFile
ÍÍ 
==
ÍÍ  "
null
ÍÍ# '
)
ÍÍ' (
{
ÎÎ 
if
ÏÏ 
(
ÏÏ 
m_logFileName
ÏÏ %
==
ÏÏ& (
string
ÏÏ) /
.
ÏÏ/ 0
Empty
ÏÏ0 5
)
ÏÏ5 6
{
ÌÌ !
m_logFileNameSuffix
ÓÓ +
=
ÓÓ, - 
m_fRS232ToEthernet
ÓÓ. @
.
ÓÓ@ A
logFileNameSuffix
ÓÓA R
;
ÓÓR S
m_logFileName
ÔÔ %
=
ÔÔ& ' 
m_fRS232ToEthernet
ÔÔ( :
.
ÔÔ: ;
logDirectory
ÔÔ; G
+
ÔÔH I
$str
ÔÔJ N
+
ÔÔO P
DateTime
ÔÔQ Y
.
ÔÔY Z
Now
ÔÔZ ]
.
ÔÔ] ^
ToString
ÔÔ^ f
(
ÔÔf g
$str
ÔÔg z
)
ÔÔz {
+
ÔÔ| }
$strÔÔ~ Å
+ÔÔÇ É#
m_logFileNameSuffixÔÔÑ ó
+ÔÔò ô
$strÔÔö ù
+ÔÔû ü

LogFileExtÔÔ† ™
;ÔÔ™ ´
}
 
m_fsLogFile
ÒÒ 
=
ÒÒ  !
new
ÒÒ" %

FileStream
ÒÒ& 0
(
ÒÒ0 1
m_logFileName
ÒÒ1 >
,
ÒÒ> ?
FileMode
ÒÒ@ H
.
ÒÒH I
OpenOrCreate
ÒÒI U
|
ÒÒV W
FileMode
ÒÒX `
.
ÒÒ` a
Append
ÒÒa g
,
ÒÒg h

FileAccess
ÒÒi s
.
ÒÒs t
Write
ÒÒt y
,
ÒÒy z
	FileShareÒÒ{ Ñ
.ÒÒÑ Ö
ReadÒÒÖ â
)ÒÒâ ä
;ÒÒä ã
m_swLogFile
ÚÚ 
=
ÚÚ  !
new
ÚÚ" %
StreamWriter
ÚÚ& 2
(
ÚÚ2 3
m_fsLogFile
ÚÚ3 >
,
ÚÚ> ?
Encoding
ÚÚ@ H
.
ÚÚH I
Default
ÚÚI P
)
ÚÚP Q
;
ÚÚQ R
}
ÛÛ 
}
ÙÙ 
catch
ıı 
(
ıı 
	Exception
ıı 
ex
ıı 
)
ıı  
{
ˆˆ 
FDebug
˜˜ 
.
˜˜ 
throwException
˜˜ %
(
˜˜% &
ex
˜˜& (
)
˜˜( )
;
˜˜) *
}
¯¯ 
finally
˘˘ 
{
˙˙ 
files
˚˚ 
=
˚˚ 
null
˚˚ 
;
˚˚ 
fileInfo
¸¸ 
=
¸¸ 
null
¸¸ 
;
¸¸  
}
˝˝ 
}
˛˛ 	
private
ÇÇ 
void
ÇÇ 
closeLogFile
ÇÇ !
(
ÇÇ! "
)
ÉÉ 
{
ÑÑ 	
try
ÖÖ 
{
ÜÜ 
if
áá 
(
áá 
m_swLogFile
áá 
!=
áá  "
null
áá# '
)
áá' (
{
àà 
m_swLogFile
ââ 
.
ââ  
Flush
ââ  %
(
ââ% &
)
ââ& '
;
ââ' (
}
ää 
if
åå 
(
åå 
m_fsLogFile
åå 
!=
åå  "
null
åå# '
)
åå' (
{
çç 
m_fsLogFile
éé 
.
éé  
Flush
éé  %
(
éé% &
)
éé& '
;
éé' (
}
èè 
if
ìì 
(
ìì 
m_swLogFile
ìì 
!=
ìì  "
null
ìì# '
)
ìì' (
{
îî 
m_swLogFile
ïï 
.
ïï  
Close
ïï  %
(
ïï% &
)
ïï& '
;
ïï' (
m_swLogFile
ññ 
.
ññ  
Dispose
ññ  '
(
ññ' (
)
ññ( )
;
ññ) *
m_swLogFile
óó 
=
óó  !
null
óó" &
;
óó& '
}
òò 
if
öö 
(
öö 
m_fsLogFile
öö 
!=
öö  "
null
öö# '
)
öö' (
{
õõ 
m_fsLogFile
úú 
.
úú  
Close
úú  %
(
úú% &
)
úú& '
;
úú' (
m_fsLogFile
ùù 
.
ùù  
Dispose
ùù  '
(
ùù' (
)
ùù( )
;
ùù) *
m_fsLogFile
ûû 
=
ûû  !
null
ûû" &
;
ûû& '
}
üü 
}
†† 
catch
°° 
(
°° 
	Exception
°° 
ex
°° 
)
°°  
{
¢¢ 
FDebug
££ 
.
££ 
throwException
££ %
(
££% &
ex
££& (
)
££( )
;
££) *
}
§§ 
finally
•• 
{
¶¶ 
}
®® 
}
©© 	
private
≠≠ 
void
≠≠ 
writeLog
≠≠ 
(
≠≠ 
)
ÆÆ 
{
ØØ 	
string
∞∞ 
log
∞∞ 
=
∞∞ 
string
∞∞ 
.
∞∞  
Empty
∞∞  %
;
∞∞% &
try
≤≤ 
{
≥≥ 
openLogFile
¥¥ 
(
¥¥ 
)
¥¥ 
;
¥¥ 
while
µµ 
(
µµ 
m_fLogQueue
µµ "
.
µµ" #
count
µµ# (
>
µµ) *
$num
µµ+ ,
)
µµ, -
{
∂∂ 
log
∑∑ 
=
∑∑ 
m_fLogQueue
∑∑ %
.
∑∑% &
dequeue
∑∑& -
(
∑∑- .
)
∑∑. /
;
∑∑/ 0
m_swLogFile
∏∏ 
.
∏∏  
Write
∏∏  %
(
∏∏% &
log
∏∏& )
)
∏∏) *
;
∏∏* +
}
ππ 
m_swLogFile
∫∫ 
.
∫∫ 
Flush
∫∫ !
(
∫∫! "
)
∫∫" #
;
∫∫# $
m_fsLogFile
ªª 
.
ªª 
Flush
ªª !
(
ªª! "
)
ªª" #
;
ªª# $
}
ºº 
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ 
ex
ΩΩ 
)
ΩΩ  
{
ææ 
FDebug
øø 
.
øø 
throwException
øø %
(
øø% &
ex
øø& (
)
øø( )
;
øø) *
}
¿¿ 
finally
¡¡ 
{
¬¬ 
}
ƒƒ 
}
≈≈ 	
private
…… 
string
…… 
[
…… 
]
…… 
binToString
…… $
(
……$ %
byte
   
[
   
]
   
byteData
   
)
ÀÀ 
{
ÃÃ 	
List
ÕÕ 
<
ÕÕ 
string
ÕÕ 
>
ÕÕ 
strData
ÕÕ  
=
ÕÕ! "
null
ÕÕ# '
;
ÕÕ' (
StringBuilder
ŒŒ 
sb
ŒŒ 
=
ŒŒ 
null
ŒŒ #
;
ŒŒ# $
int
œœ 
index
œœ 
=
œœ 
$num
œœ 
;
œœ 
try
—— 
{
““ 
strData
”” 
=
”” 
new
”” 
List
”” "
<
””" #
string
””# )
>
””) *
(
””* +
)
””+ ,
;
””, -
strData
‘‘ 
.
‘‘ 
Add
‘‘ 
(
‘‘ 
$str
‘‘  
)
‘‘  !
;
‘‘! "
sb
’’ 
=
’’ 
new
’’ 
StringBuilder
’’ &
(
’’& '
)
’’' (
;
’’( )
foreach
÷÷ 
(
÷÷ 
byte
÷÷ 
b
÷÷ 
in
÷÷  "
byteData
÷÷# +
)
÷÷+ ,
{
◊◊ 
sb
ÿÿ 
.
ÿÿ 
Append
ÿÿ 
(
ÿÿ 
b
ÿÿ 
.
ÿÿ  
ToString
ÿÿ  (
(
ÿÿ( )
$str
ÿÿ) -
)
ÿÿ- .
+
ÿÿ/ 0
$str
ÿÿ1 4
)
ÿÿ4 5
;
ÿÿ5 6
index
ŸŸ 
++
ŸŸ 
;
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
index
⁄⁄ 
%
⁄⁄ 
$num
⁄⁄  "
==
⁄⁄# %
$num
⁄⁄& '
)
⁄⁄' (
{
€€ 
strData
‹‹ 
.
‹‹  
Add
‹‹  #
(
‹‹# $
sb
‹‹$ &
.
‹‹& '
ToString
‹‹' /
(
‹‹/ 0
)
‹‹0 1
)
‹‹1 2
;
‹‹2 3
sb
›› 
.
›› 
Clear
››  
(
››  !
)
››! "
;
››" #
}
ﬁﬁ 
}
ﬂﬂ 
if
‡‡ 
(
‡‡ 
sb
‡‡ 
.
‡‡ 
Length
‡‡ 
>
‡‡ 
$num
‡‡  !
)
‡‡! "
{
·· 
strData
‚‚ 
.
‚‚ 
Add
‚‚ 
(
‚‚  
sb
‚‚  "
.
‚‚" #
ToString
‚‚# +
(
‚‚+ ,
)
‚‚, -
)
‚‚- .
;
‚‚. /
}
„„ 
return
ÁÁ 
strData
ÁÁ 
.
ÁÁ 
ToArray
ÁÁ &
(
ÁÁ& '
)
ÁÁ' (
;
ÁÁ( )
}
ËË 
catch
ÈÈ 
(
ÈÈ 
	Exception
ÈÈ 
ex
ÈÈ 
)
ÈÈ  
{
ÍÍ 
FDebug
ÎÎ 
.
ÎÎ 
throwException
ÎÎ %
(
ÎÎ% &
ex
ÎÎ& (
)
ÎÎ( )
;
ÎÎ) *
}
ÏÏ 
finally
ÌÌ 
{
ÓÓ 
strData
ÔÔ 
=
ÔÔ 
null
ÔÔ 
;
ÔÔ 
sb
 
=
 
null
 
;
 
}
ÒÒ 
return
ÚÚ 
null
ÚÚ 
;
ÚÚ 
}
ÛÛ 	
private
˜˜ 
void
˜˜ %
writeSerialStateChanged
˜˜ ,
(
˜˜, -0
"FSerialPluginStateChangedEventArgs
¯¯ .
fArgs
¯¯/ 4
)
˘˘ 
{
˙˙ 	
StringBuilder
˚˚ 
logData
˚˚ !
=
˚˚" #
new
˚˚$ '
StringBuilder
˚˚( 5
(
˚˚5 6
)
˚˚6 7
;
˚˚7 8
try
˝˝ 
{
˛˛ 
logData
ˇˇ 
.
ˇˇ 

AppendLine
ˇˇ "
(
ˇˇ" #
$str
ˇˇ# &
+
ˇˇ' (
DateTime
ˇˇ) 1
.
ˇˇ1 2
Now
ˇˇ2 5
.
ˇˇ5 6
ToString
ˇˇ6 >
(
ˇˇ> ?
$str
ˇˇ? X
)
ˇˇX Y
+
ˇˇZ [
$str
ˇˇ\ _
)
ˇˇ_ `
;
ˇˇ` a
logData
ÉÉ 
.
ÉÉ 
Append
ÉÉ 
(
ÉÉ 
fArgs
ÉÉ $
.
ÉÉ$ %
fEventId
ÉÉ% -
.
ÉÉ- .
ToString
ÉÉ. 6
(
ÉÉ6 7
)
ÉÉ7 8
)
ÉÉ8 9
;
ÉÉ9 :
logData
ÑÑ 
.
ÑÑ 
Append
ÑÑ 
(
ÑÑ 
$str
ÑÑ +
+
ÑÑ, -
fArgs
ÑÑ. 3
.
ÑÑ3 4
fResult
ÑÑ4 ;
.
ÑÑ; <
ToString
ÑÑ< D
(
ÑÑD E
)
ÑÑE F
+
ÑÑG H
$str
ÑÑI L
)
ÑÑL M
;
ÑÑM N
if
ÖÖ 
(
ÖÖ 
fArgs
ÖÖ 
.
ÖÖ 
fResult
ÖÖ !
!=
ÖÖ" $
FResultCode
ÖÖ% 0
.
ÖÖ0 1
Success
ÖÖ1 8
)
ÖÖ8 9
{
ÜÜ 
logData
áá 
.
áá 
Append
áá "
(
áá" #
$str
áá# 5
+
áá6 7
fArgs
áá8 =
.
áá= >
errorMessage
áá> J
+
ááK L
$str
ááM P
)
ááP Q
;
ááQ R
}
àà 
logData
ââ 
.
ââ 

AppendLine
ââ "
(
ââ" #
)
ââ# $
;
ââ$ %
logData
çç 
.
çç 

AppendLine
çç "
(
çç" #
fArgs
çç# (
.
çç( )
fState
çç) /
.
çç/ 0
ToString
çç0 8
(
çç8 9
)
çç9 :
+
çç; <
$str
çç= M
+
ççN O
fArgs
ççP U
.
ççU V

serialPort
ççV `
+
çça b
$str
ççc n
+
çço p
fArgs
ççq v
.
ççv w
baud
ççw {
.
çç{ |
ToStringçç| Ñ
(ççÑ Ö
)ççÖ Ü
+ççá à
$strççâ å
)ççå ç
;ççç é
logData
ëë 
.
ëë 

AppendLine
ëë "
(
ëë" #
)
ëë# $
;
ëë$ %
m_fLogQueue
íí 
.
íí 
enqueue
íí #
(
íí# $
logData
íí$ +
.
íí+ ,
ToString
íí, 4
(
íí4 5
)
íí5 6
)
íí6 7
;
íí7 8
}
ìì 
catch
îî 
(
îî 
	Exception
îî 
ex
îî 
)
îî  
{
ïï 
FDebug
ññ 
.
ññ 
throwException
ññ %
(
ññ% &
ex
ññ& (
)
ññ( )
;
ññ) *
}
óó 
finally
òò 
{
ôô 
logData
öö 
=
öö 
null
öö 
;
öö 
}
õõ 
}
úú 	
private
†† 
void
†† $
writeSerialErrorRaised
†† +
(
††+ ,/
!FSerialPluginErrorRaisedEventArgs
°° -
fArgs
°°. 3
)
¢¢ 
{
££ 	
StringBuilder
§§ 
logData
§§ !
=
§§" #
new
§§$ '
StringBuilder
§§( 5
(
§§5 6
)
§§6 7
;
§§7 8
try
¶¶ 
{
ßß 
logData
®® 
.
®® 

AppendLine
®® "
(
®®" #
$str
®®# &
+
®®' (
DateTime
®®) 1
.
®®1 2
Now
®®2 5
.
®®5 6
ToString
®®6 >
(
®®> ?
$str
®®? X
)
®®X Y
+
®®Z [
$str
®®\ _
)
®®_ `
;
®®` a
logData
¨¨ 
.
¨¨ 
Append
¨¨ 
(
¨¨ 
fArgs
¨¨ $
.
¨¨$ %
fEventId
¨¨% -
.
¨¨- .
ToString
¨¨. 6
(
¨¨6 7
)
¨¨7 8
)
¨¨8 9
;
¨¨9 :
logData
≠≠ 
.
≠≠ 
Append
≠≠ 
(
≠≠ 
$str
≠≠ 1
+
≠≠2 3
fArgs
≠≠4 9
.
≠≠9 :
errorMessage
≠≠: F
+
≠≠G H
$str
≠≠I L
)
≠≠L M
;
≠≠M N
logData
ÆÆ 
.
ÆÆ 

AppendLine
ÆÆ "
(
ÆÆ" #
)
ÆÆ# $
;
ÆÆ$ %
logData
≤≤ 
.
≤≤ 

AppendLine
≤≤ "
(
≤≤" #
)
≤≤# $
;
≤≤$ %
m_fLogQueue
≥≥ 
.
≥≥ 
enqueue
≥≥ #
(
≥≥# $
logData
≥≥$ +
.
≥≥+ ,
ToString
≥≥, 4
(
≥≥4 5
)
≥≥5 6
)
≥≥6 7
;
≥≥7 8
}
¥¥ 
catch
µµ 
(
µµ 
	Exception
µµ 
ex
µµ 
)
µµ  
{
∂∂ 
FDebug
∑∑ 
.
∑∑ 
throwException
∑∑ %
(
∑∑% &
ex
∑∑& (
)
∑∑( )
;
∑∑) *
}
∏∏ 
finally
ππ 
{
∫∫ 
logData
ªª 
=
ªª 
null
ªª 
;
ªª 
}
ºº 
}
ΩΩ 	
private
¡¡ 
void
¡¡ %
writeSerialDataReceived
¡¡ ,
(
¡¡, -0
"FSerialPluginDataReceivedEventArgs
¬¬ .
fArgs
¬¬/ 4
)
√√ 
{
ƒƒ 	
StringBuilder
≈≈ 
logData
≈≈ !
=
≈≈" #
new
≈≈$ '
StringBuilder
≈≈( 5
(
≈≈5 6
)
≈≈6 7
;
≈≈7 8
try
«« 
{
»» 
logData
…… 
.
…… 

AppendLine
…… "
(
……" #
$str
……# &
+
……' (
DateTime
……) 1
.
……1 2
Now
……2 5
.
……5 6
ToString
……6 >
(
……> ?
$str
……? X
)
……X Y
+
……Z [
$str
……\ _
)
……_ `
;
……` a
logData
ÕÕ 
.
ÕÕ 
Append
ÕÕ 
(
ÕÕ 
fArgs
ÕÕ $
.
ÕÕ$ %
fEventId
ÕÕ% -
.
ÕÕ- .
ToString
ÕÕ. 6
(
ÕÕ6 7
)
ÕÕ7 8
)
ÕÕ8 9
;
ÕÕ9 :
logData
ŒŒ 
.
ŒŒ 
Append
ŒŒ 
(
ŒŒ 
$str
ŒŒ +
+
ŒŒ, -
fArgs
ŒŒ. 3
.
ŒŒ3 4
fResult
ŒŒ4 ;
.
ŒŒ; <
ToString
ŒŒ< D
(
ŒŒD E
)
ŒŒE F
+
ŒŒG H
$str
ŒŒI L
)
ŒŒL M
;
ŒŒM N
if
œœ 
(
œœ 
fArgs
œœ 
.
œœ 
fResult
œœ !
!=
œœ" $
FResultCode
œœ% 0
.
œœ0 1
Success
œœ1 8
)
œœ8 9
{
–– 
logData
—— 
.
—— 
Append
—— "
(
——" #
$str
——# 5
+
——6 7
fArgs
——8 =
.
——= >
errorMessage
——> J
+
——K L
$str
——M P
)
——P Q
;
——Q R
}
““ 
logData
”” 
.
”” 

AppendLine
”” "
(
””" #
)
””# $
;
””$ %
if
◊◊ 
(
◊◊ 
fArgs
◊◊ 
.
◊◊ 
fSerialData
◊◊ %
.
◊◊% &
data
◊◊& *
.
◊◊* +
Length
◊◊+ 1
>
◊◊2 3
$num
◊◊4 5
)
◊◊5 6
{
ÿÿ 
foreach
ŸŸ 
(
ŸŸ 
string
ŸŸ #
s
ŸŸ$ %
in
ŸŸ& (
binToString
ŸŸ) 4
(
ŸŸ4 5
fArgs
ŸŸ5 :
.
ŸŸ: ;
fSerialData
ŸŸ; F
.
ŸŸF G
data
ŸŸG K
)
ŸŸK L
)
ŸŸL M
{
⁄⁄ 
logData
€€ 
.
€€  

AppendLine
€€  *
(
€€* +
s
€€+ ,
)
€€, -
;
€€- .
}
‹‹ 
}
›› 
logData
·· 
.
·· 

AppendLine
·· "
(
··" #
)
··# $
;
··$ %
m_fLogQueue
‚‚ 
.
‚‚ 
enqueue
‚‚ #
(
‚‚# $
logData
‚‚$ +
.
‚‚+ ,
ToString
‚‚, 4
(
‚‚4 5
)
‚‚5 6
)
‚‚6 7
;
‚‚7 8
}
„„ 
catch
‰‰ 
(
‰‰ 
	Exception
‰‰ 
ex
‰‰ 
)
‰‰  
{
ÂÂ 
FDebug
ÊÊ 
.
ÊÊ 
throwException
ÊÊ %
(
ÊÊ% &
ex
ÊÊ& (
)
ÊÊ( )
;
ÊÊ) *
}
ÁÁ 
finally
ËË 
{
ÈÈ 
logData
ÍÍ 
=
ÍÍ 
null
ÍÍ 
;
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
private
 
void
 !
writeSerialDataSent
 (
(
( ),
FSerialPluginDataSentEventArgs
ÒÒ *
fArgs
ÒÒ+ 0
)
ÚÚ 
{
ÛÛ 	
StringBuilder
ÙÙ 
logData
ÙÙ !
=
ÙÙ" #
new
ÙÙ$ '
StringBuilder
ÙÙ( 5
(
ÙÙ5 6
)
ÙÙ6 7
;
ÙÙ7 8
try
ˆˆ 
{
˜˜ 
logData
¯¯ 
.
¯¯ 

AppendLine
¯¯ "
(
¯¯" #
$str
¯¯# &
+
¯¯' (
DateTime
¯¯) 1
.
¯¯1 2
Now
¯¯2 5
.
¯¯5 6
ToString
¯¯6 >
(
¯¯> ?
$str
¯¯? X
)
¯¯X Y
+
¯¯Z [
$str
¯¯\ _
)
¯¯_ `
;
¯¯` a
logData
¸¸ 
.
¸¸ 
Append
¸¸ 
(
¸¸ 
fArgs
¸¸ $
.
¸¸$ %
fEventId
¸¸% -
.
¸¸- .
ToString
¸¸. 6
(
¸¸6 7
)
¸¸7 8
)
¸¸8 9
;
¸¸9 :
logData
˝˝ 
.
˝˝ 
Append
˝˝ 
(
˝˝ 
$str
˝˝ +
+
˝˝, -
fArgs
˝˝. 3
.
˝˝3 4
fResult
˝˝4 ;
.
˝˝; <
ToString
˝˝< D
(
˝˝D E
)
˝˝E F
+
˝˝G H
$str
˝˝I L
)
˝˝L M
;
˝˝M N
if
˛˛ 
(
˛˛ 
fArgs
˛˛ 
.
˛˛ 
fResult
˛˛ !
!=
˛˛" $
FResultCode
˛˛% 0
.
˛˛0 1
Success
˛˛1 8
)
˛˛8 9
{
ˇˇ 
logData
ÄÄ 
.
ÄÄ 
Append
ÄÄ "
(
ÄÄ" #
$str
ÄÄ# 5
+
ÄÄ6 7
fArgs
ÄÄ8 =
.
ÄÄ= >
errorMessage
ÄÄ> J
+
ÄÄK L
$str
ÄÄM P
)
ÄÄP Q
;
ÄÄQ R
}
ÅÅ 
logData
ÇÇ 
.
ÇÇ 

AppendLine
ÇÇ "
(
ÇÇ" #
)
ÇÇ# $
;
ÇÇ$ %
if
ÜÜ 
(
ÜÜ 
fArgs
ÜÜ 
.
ÜÜ 
fSerialData
ÜÜ %
.
ÜÜ% &
data
ÜÜ& *
.
ÜÜ* +
Length
ÜÜ+ 1
>
ÜÜ2 3
$num
ÜÜ4 5
)
ÜÜ5 6
{
áá 
foreach
àà 
(
àà 
string
àà #
s
àà$ %
in
àà& (
binToString
àà) 4
(
àà4 5
fArgs
àà5 :
.
àà: ;
fSerialData
àà; F
.
ààF G
data
ààG K
)
ààK L
)
ààL M
{
ââ 
logData
ää 
.
ää  

AppendLine
ää  *
(
ää* +
s
ää+ ,
)
ää, -
;
ää- .
}
ãã 
}
åå 
logData
êê 
.
êê 

AppendLine
êê "
(
êê" #
)
êê# $
;
êê$ %
m_fLogQueue
ëë 
.
ëë 
enqueue
ëë #
(
ëë# $
logData
ëë$ +
.
ëë+ ,
ToString
ëë, 4
(
ëë4 5
)
ëë5 6
)
ëë6 7
;
ëë7 8
}
íí 
catch
ìì 
(
ìì 
	Exception
ìì 
ex
ìì 
)
ìì  
{
îî 
FDebug
ïï 
.
ïï 
throwException
ïï %
(
ïï% &
ex
ïï& (
)
ïï( )
;
ïï) *
}
ññ 
finally
óó 
{
òò 
logData
ôô 
=
ôô 
null
ôô 
;
ôô 
}
öö 
}
õõ 	
private
üü 
void
üü %
writeSocketStateChanged
üü ,
(
üü, -*
FSocketStateChangedEventArgs
†† (
fArgs
††) .
)
°° 
{
¢¢ 	
StringBuilder
££ 
logData
££ !
=
££" #
new
££$ '
StringBuilder
££( 5
(
££5 6
)
££6 7
;
££7 8
try
•• 
{
¶¶ 
logData
ßß 
.
ßß 

AppendLine
ßß "
(
ßß" #
$str
ßß# &
+
ßß' (
DateTime
ßß) 1
.
ßß1 2
Now
ßß2 5
.
ßß5 6
ToString
ßß6 >
(
ßß> ?
$str
ßß? X
)
ßßX Y
+
ßßZ [
$str
ßß\ _
)
ßß_ `
;
ßß` a
logData
´´ 
.
´´ 
Append
´´ 
(
´´ 
fArgs
´´ $
.
´´$ %
fEventId
´´% -
.
´´- .
ToString
´´. 6
(
´´6 7
)
´´7 8
)
´´8 9
;
´´9 :
logData
¨¨ 
.
¨¨ 
Append
¨¨ 
(
¨¨ 
$str
¨¨ +
+
¨¨, -
fArgs
¨¨. 3
.
¨¨3 4
fResult
¨¨4 ;
.
¨¨; <
ToString
¨¨< D
(
¨¨D E
)
¨¨E F
+
¨¨G H
$str
¨¨I L
)
¨¨L M
;
¨¨M N
if
≠≠ 
(
≠≠ 
fArgs
≠≠ 
.
≠≠ 
fResult
≠≠ !
!=
≠≠" $
FResultCode
≠≠% 0
.
≠≠0 1
Success
≠≠1 8
)
≠≠8 9
{
ÆÆ 
logData
ØØ 
.
ØØ 
Append
ØØ "
(
ØØ" #
$str
ØØ# 5
+
ØØ6 7
fArgs
ØØ8 =
.
ØØ= >
errorMessage
ØØ> J
+
ØØK L
$str
ØØM P
)
ØØP Q
;
ØØQ R
}
∞∞ 
logData
±± 
.
±± 

AppendLine
±± "
(
±±" #
)
±±# $
;
±±$ %
logData
µµ 
.
µµ 

AppendLine
µµ "
(
µµ" #
fArgs
µµ# (
.
µµ( )
fState
µµ) /
.
µµ/ 0
ToString
µµ0 8
(
µµ8 9
)
µµ9 :
+
µµ; <
$str
µµ= N
+
µµO P
fArgs
µµQ V
.
µµV W
fConnectMode
µµW c
+
µµd e
$str
µµf t
+
µµu v
fArgs
µµw |
.
µµ| }
localIpµµ} Ñ
+µµÖ Ü
$strµµá ó
+µµò ô
fArgsµµö ü
.µµü †
	localPortµµ† ©
.µµ© ™
ToStringµµ™ ≤
(µµ≤ ≥
)µµ≥ ¥
+µµµ ∂
$strµµ∑ ∆
+µµ« »
fArgsµµ… Œ
.µµŒ œ
remoteIpµµœ ◊
+µµÿ Ÿ
$strµµ⁄ Î
+µµÏ Ì
fArgsµµÓ Û
.µµÛ Ù

remotePortµµÙ ˛
.µµ˛ ˇ
ToStringµµˇ á
(µµá à
)µµà â
+µµä ã
$strµµã é
)µµé è
;µµè ê
logData
ππ 
.
ππ 

AppendLine
ππ "
(
ππ" #
)
ππ# $
;
ππ$ %
m_fLogQueue
∫∫ 
.
∫∫ 
enqueue
∫∫ #
(
∫∫# $
logData
∫∫$ +
.
∫∫+ ,
ToString
∫∫, 4
(
∫∫4 5
)
∫∫5 6
)
∫∫6 7
;
∫∫7 8
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº 
ex
ºº 
)
ºº  
{
ΩΩ 
FDebug
ææ 
.
ææ 
throwException
ææ %
(
ææ% &
ex
ææ& (
)
ææ( )
;
ææ) *
}
øø 
finally
¿¿ 
{
¡¡ 
logData
¬¬ 
=
¬¬ 
null
¬¬ 
;
¬¬ 
}
√√ 
}
ƒƒ 	
private
»» 
void
»» $
writeSocketErrorRaised
»» +
(
»»+ ,)
FSocketErrorRaisedEventArgs
…… '
fArgs
……( -
)
   
{
ÀÀ 	
StringBuilder
ÃÃ 
logData
ÃÃ !
=
ÃÃ" #
new
ÃÃ$ '
StringBuilder
ÃÃ( 5
(
ÃÃ5 6
)
ÃÃ6 7
;
ÃÃ7 8
try
ŒŒ 
{
œœ 
logData
–– 
.
–– 

AppendLine
–– "
(
––" #
$str
––# &
+
––' (
DateTime
––) 1
.
––1 2
Now
––2 5
.
––5 6
ToString
––6 >
(
––> ?
$str
––? X
)
––X Y
+
––Z [
$str
––\ _
)
––_ `
;
––` a
logData
‘‘ 
.
‘‘ 
Append
‘‘ 
(
‘‘ 
fArgs
‘‘ $
.
‘‘$ %
fEventId
‘‘% -
.
‘‘- .
ToString
‘‘. 6
(
‘‘6 7
)
‘‘7 8
)
‘‘8 9
;
‘‘9 :
logData
’’ 
.
’’ 
Append
’’ 
(
’’ 
$str
’’ 1
+
’’2 3
fArgs
’’4 9
.
’’9 :
errorMessage
’’: F
+
’’G H
$str
’’I L
)
’’L M
;
’’M N
logData
÷÷ 
.
÷÷ 

AppendLine
÷÷ "
(
÷÷" #
)
÷÷# $
;
÷÷$ %
logData
⁄⁄ 
.
⁄⁄ 

AppendLine
⁄⁄ "
(
⁄⁄" #
)
⁄⁄# $
;
⁄⁄$ %
m_fLogQueue
€€ 
.
€€ 
enqueue
€€ #
(
€€# $
logData
€€$ +
.
€€+ ,
ToString
€€, 4
(
€€4 5
)
€€5 6
)
€€6 7
;
€€7 8
}
‹‹ 
catch
›› 
(
›› 
	Exception
›› 
ex
›› 
)
››  
{
ﬁﬁ 
FDebug
ﬂﬂ 
.
ﬂﬂ 
throwException
ﬂﬂ %
(
ﬂﬂ% &
ex
ﬂﬂ& (
)
ﬂﬂ( )
;
ﬂﬂ) *
}
‡‡ 
finally
·· 
{
‚‚ 
logData
„„ 
=
„„ 
null
„„ 
;
„„ 
}
‰‰ 
}
ÂÂ 	
private
ÈÈ 
void
ÈÈ %
writeSocketDataReceived
ÈÈ ,
(
ÈÈ, -*
FSocketDataReceivedEventArgs
ÍÍ (
fArgs
ÍÍ) .
)
ÎÎ 
{
ÏÏ 	
StringBuilder
ÌÌ 
logData
ÌÌ !
=
ÌÌ" #
new
ÌÌ$ '
StringBuilder
ÌÌ( 5
(
ÌÌ5 6
)
ÌÌ6 7
;
ÌÌ7 8
try
ÔÔ 
{
 
logData
ÒÒ 
.
ÒÒ 

AppendLine
ÒÒ "
(
ÒÒ" #
$str
ÒÒ# &
+
ÒÒ' (
DateTime
ÒÒ) 1
.
ÒÒ1 2
Now
ÒÒ2 5
.
ÒÒ5 6
ToString
ÒÒ6 >
(
ÒÒ> ?
$str
ÒÒ? X
)
ÒÒX Y
+
ÒÒZ [
$str
ÒÒ\ _
)
ÒÒ_ `
;
ÒÒ` a
logData
ıı 
.
ıı 
Append
ıı 
(
ıı 
fArgs
ıı $
.
ıı$ %
fEventId
ıı% -
.
ıı- .
ToString
ıı. 6
(
ıı6 7
)
ıı7 8
)
ıı8 9
;
ıı9 :
logData
ˆˆ 
.
ˆˆ 
Append
ˆˆ 
(
ˆˆ 
$str
ˆˆ +
+
ˆˆ, -
fArgs
ˆˆ. 3
.
ˆˆ3 4
fResult
ˆˆ4 ;
.
ˆˆ; <
ToString
ˆˆ< D
(
ˆˆD E
)
ˆˆE F
+
ˆˆG H
$str
ˆˆI L
)
ˆˆL M
;
ˆˆM N
if
˜˜ 
(
˜˜ 
fArgs
˜˜ 
.
˜˜ 
fResult
˜˜ !
!=
˜˜" $
FResultCode
˜˜% 0
.
˜˜0 1
Success
˜˜1 8
)
˜˜8 9
{
¯¯ 
logData
˘˘ 
.
˘˘ 
Append
˘˘ "
(
˘˘" #
$str
˘˘# 5
+
˘˘6 7
fArgs
˘˘8 =
.
˘˘= >
errorMessage
˘˘> J
+
˘˘K L
$str
˘˘M P
)
˘˘P Q
;
˘˘Q R
}
˙˙ 
logData
˚˚ 
.
˚˚ 

AppendLine
˚˚ "
(
˚˚" #
)
˚˚# $
;
˚˚$ %
foreach
ˇˇ 
(
ˇˇ 
string
ˇˇ 
s
ˇˇ  !
in
ˇˇ" $
binToString
ˇˇ% 0
(
ˇˇ0 1
fArgs
ˇˇ1 6
.
ˇˇ6 7
fSocketData
ˇˇ7 B
)
ˇˇB C
)
ˇˇC D
{
ÄÄ 
logData
ÅÅ 
.
ÅÅ 

AppendLine
ÅÅ &
(
ÅÅ& '
s
ÅÅ' (
)
ÅÅ( )
;
ÅÅ) *
}
ÇÇ 
logData
ÜÜ 
.
ÜÜ 

AppendLine
ÜÜ "
(
ÜÜ" #
)
ÜÜ# $
;
ÜÜ$ %
m_fLogQueue
áá 
.
áá 
enqueue
áá #
(
áá# $
logData
áá$ +
.
áá+ ,
ToString
áá, 4
(
áá4 5
)
áá5 6
)
áá6 7
;
áá7 8
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ 
ex
ââ 
)
ââ  
{
ää 
FDebug
ãã 
.
ãã 
throwException
ãã %
(
ãã% &
ex
ãã& (
)
ãã( )
;
ãã) *
}
åå 
finally
çç 
{
éé 
logData
èè 
=
èè 
null
èè 
;
èè 
}
êê 
}
ëë 	
private
ïï 
void
ïï !
writeSocketDataSent
ïï (
(
ïï( )&
FSocketDataSentEventArgs
ññ $
fArgs
ññ% *
)
óó 
{
òò 	
StringBuilder
ôô 
logData
ôô !
=
ôô" #
new
ôô$ '
StringBuilder
ôô( 5
(
ôô5 6
)
ôô6 7
;
ôô7 8
try
õõ 
{
úú 
logData
ùù 
.
ùù 

AppendLine
ùù "
(
ùù" #
$str
ùù# &
+
ùù' (
DateTime
ùù) 1
.
ùù1 2
Now
ùù2 5
.
ùù5 6
ToString
ùù6 >
(
ùù> ?
$str
ùù? X
)
ùùX Y
+
ùùZ [
$str
ùù\ _
)
ùù_ `
;
ùù` a
logData
°° 
.
°° 
Append
°° 
(
°° 
fArgs
°° $
.
°°$ %
fEventId
°°% -
.
°°- .
ToString
°°. 6
(
°°6 7
)
°°7 8
)
°°8 9
;
°°9 :
logData
¢¢ 
.
¢¢ 
Append
¢¢ 
(
¢¢ 
$str
¢¢ +
+
¢¢, -
fArgs
¢¢. 3
.
¢¢3 4
fResult
¢¢4 ;
.
¢¢; <
ToString
¢¢< D
(
¢¢D E
)
¢¢E F
+
¢¢G H
$str
¢¢I L
)
¢¢L M
;
¢¢M N
if
££ 
(
££ 
fArgs
££ 
.
££ 
fResult
££ !
!=
££" $
FResultCode
££% 0
.
££0 1
Success
££1 8
)
££8 9
{
§§ 
logData
•• 
.
•• 
Append
•• "
(
••" #
$str
••# 5
+
••6 7
fArgs
••8 =
.
••= >
errorMessage
••> J
+
••K L
$str
••M P
)
••P Q
;
••Q R
}
¶¶ 
logData
ßß 
.
ßß 

AppendLine
ßß "
(
ßß" #
)
ßß# $
;
ßß$ %
foreach
´´ 
(
´´ 
string
´´ 
s
´´  !
in
´´" $
binToString
´´% 0
(
´´0 1
fArgs
´´1 6
.
´´6 7
fSocketData
´´7 B
.
´´B C
data
´´C G
)
´´G H
)
´´H I
{
¨¨ 
logData
≠≠ 
.
≠≠ 

AppendLine
≠≠ &
(
≠≠& '
s
≠≠' (
)
≠≠( )
;
≠≠) *
}
ÆÆ 
logData
≤≤ 
.
≤≤ 

AppendLine
≤≤ "
(
≤≤" #
)
≤≤# $
;
≤≤$ %
m_fLogQueue
≥≥ 
.
≥≥ 
enqueue
≥≥ #
(
≥≥# $
logData
≥≥$ +
.
≥≥+ ,
ToString
≥≥, 4
(
≥≥4 5
)
≥≥5 6
)
≥≥6 7
;
≥≥7 8
}
¥¥ 
catch
µµ 
(
µµ 
	Exception
µµ 
ex
µµ 
)
µµ  
{
∂∂ 
FDebug
∑∑ 
.
∑∑ 
throwException
∑∑ %
(
∑∑% &
ex
∑∑& (
)
∑∑( )
;
∑∑) *
}
∏∏ 
finally
ππ 
{
∫∫ 
logData
ªª 
=
ªª 
null
ªª 
;
ªª 
}
ºº 
}
ΩΩ 	
public
¡¡ 
void
¡¡ 
write
¡¡ 
(
¡¡ 
FEventArgsBase
¬¬ 
fArgs
¬¬  
)
√√ 
{
ƒƒ 	
try
≈≈ 
{
∆∆ 
if
«« 
(
«« 
fArgs
«« 
.
«« 
fEventId
«« "
==
««# %
FEventId
««& .
.
««. /
LogMonitoring
««/ <
)
««< =
{
»» 
return
…… 
;
…… 
}
   
if
ŒŒ 
(
ŒŒ 
fArgs
ŒŒ 
.
ŒŒ 
fEventId
ŒŒ "
==
ŒŒ# %
FEventId
ŒŒ& .
.
ŒŒ. / 
SerialStateChanged
ŒŒ/ A
)
ŒŒA B
{
œœ %
writeSerialStateChanged
–– +
(
––+ ,
(
––, -0
"FSerialPluginStateChangedEventArgs
––- O
)
––O P
fArgs
––P U
)
––U V
;
––V W
}
—— 
else
““ 
if
““ 
(
““ 
fArgs
““ 
.
““ 
fEventId
““ '
==
““( *
FEventId
““+ 3
.
““3 4
SerialErrorRaised
““4 E
)
““E F
{
”” $
writeSerialErrorRaised
‘‘ *
(
‘‘* +
(
‘‘+ ,/
!FSerialPluginErrorRaisedEventArgs
‘‘, M
)
‘‘M N
fArgs
‘‘N S
)
‘‘S T
;
‘‘T U
}
’’ 
else
÷÷ 
if
÷÷ 
(
÷÷ 
fArgs
÷÷ 
.
÷÷ 
fEventId
÷÷ '
==
÷÷( *
FEventId
÷÷+ 3
.
÷÷3 4 
SerialDataReceived
÷÷4 F
)
÷÷F G
{
◊◊ %
writeSerialDataReceived
ÿÿ +
(
ÿÿ+ ,
(
ÿÿ, -0
"FSerialPluginDataReceivedEventArgs
ÿÿ- O
)
ÿÿO P
fArgs
ÿÿP U
)
ÿÿU V
;
ÿÿV W
}
ŸŸ 
else
⁄⁄ 
if
⁄⁄ 
(
⁄⁄ 
fArgs
⁄⁄ 
.
⁄⁄ 
fEventId
⁄⁄ '
==
⁄⁄( *
FEventId
⁄⁄+ 3
.
⁄⁄3 4
SerialDataSent
⁄⁄4 B
)
⁄⁄B C
{
€€ !
writeSerialDataSent
‹‹ '
(
‹‹' (
(
‹‹( ),
FSerialPluginDataSentEventArgs
‹‹) G
)
‹‹G H
fArgs
‹‹H M
)
‹‹M N
;
‹‹N O
}
›› 
else
ﬂﬂ 
if
ﬂﬂ 
(
ﬂﬂ 
fArgs
ﬂﬂ 
.
ﬂﬂ 
fEventId
ﬂﬂ '
==
ﬂﬂ( *
FEventId
ﬂﬂ+ 3
.
ﬂﬂ3 4 
SocketStateChanged
ﬂﬂ4 F
)
ﬂﬂF G
{
‡‡ %
writeSocketStateChanged
·· +
(
··+ ,
(
··, -*
FSocketStateChangedEventArgs
··- I
)
··I J
fArgs
··J O
)
··O P
;
··P Q
}
‚‚ 
else
„„ 
if
„„ 
(
„„ 
fArgs
„„ 
.
„„ 
fEventId
„„ '
==
„„( *
FEventId
„„+ 3
.
„„3 4
SocketErrorRaised
„„4 E
)
„„E F
{
‰‰ $
writeSocketErrorRaised
ÂÂ *
(
ÂÂ* +
(
ÂÂ+ ,)
FSocketErrorRaisedEventArgs
ÂÂ, G
)
ÂÂG H
fArgs
ÂÂH M
)
ÂÂM N
;
ÂÂN O
}
ÊÊ 
else
ÁÁ 
if
ÁÁ 
(
ÁÁ 
fArgs
ÁÁ 
.
ÁÁ 
fEventId
ÁÁ '
==
ÁÁ( *
FEventId
ÁÁ+ 3
.
ÁÁ3 4 
SocketDataReceived
ÁÁ4 F
)
ÁÁF G
{
ËË %
writeSocketDataReceived
ÈÈ +
(
ÈÈ+ ,
(
ÈÈ, -*
FSocketDataReceivedEventArgs
ÈÈ- I
)
ÈÈI J
fArgs
ÈÈJ O
)
ÈÈO P
;
ÈÈP Q
}
ÍÍ 
else
ÎÎ 
if
ÎÎ 
(
ÎÎ 
fArgs
ÎÎ 
.
ÎÎ 
fEventId
ÎÎ '
==
ÎÎ( *
FEventId
ÎÎ+ 3
.
ÎÎ3 4
SocketDataSent
ÎÎ4 B
)
ÎÎB C
{
ÏÏ !
writeSocketDataSent
ÌÌ '
(
ÌÌ' (
(
ÌÌ( )&
FSocketDataSentEventArgs
ÌÌ) A
)
ÌÌA B
fArgs
ÌÌB G
)
ÌÌG H
;
ÌÌH I
}
ÓÓ 
}
ÔÔ 
catch
 
(
 
	Exception
 
ex
 
)
  
{
ÒÒ 
FDebug
ÚÚ 
.
ÚÚ 
writeLog
ÚÚ 
(
ÚÚ  
ex
ÚÚ  "
)
ÚÚ" #
;
ÚÚ# $
}
ÛÛ 
finally
ÙÙ 
{
ıı 
}
˜˜ 
}
¯¯ 	
public
¸¸ 
void
¸¸ 
write
¸¸ 
(
¸¸ 
string
˝˝ 
log
˝˝ 
)
˛˛ 
{
ˇˇ 	
StringBuilder
ÄÄ 
logData
ÄÄ !
=
ÄÄ" #
new
ÄÄ$ '
StringBuilder
ÄÄ( 5
(
ÄÄ5 6
)
ÄÄ6 7
;
ÄÄ7 8
try
ÇÇ 
{
ÉÉ 
logData
ÑÑ 
.
ÑÑ 

AppendLine
ÑÑ "
(
ÑÑ" #
$str
ÑÑ# &
+
ÑÑ' (
DateTime
ÑÑ) 1
.
ÑÑ1 2
Now
ÑÑ2 5
.
ÑÑ5 6
ToString
ÑÑ6 >
(
ÑÑ> ?
$str
ÑÑ? X
)
ÑÑX Y
+
ÑÑZ [
$str
ÑÑ\ _
)
ÑÑ_ `
;
ÑÑ` a
logData
ÖÖ 
.
ÖÖ 
Append
ÖÖ 
(
ÖÖ 
log
ÖÖ "
)
ÖÖ" #
;
ÖÖ# $
m_fLogQueue
ÜÜ 
.
ÜÜ 
enqueue
ÜÜ #
(
ÜÜ# $
logData
ÜÜ$ +
.
ÜÜ+ ,
ToString
ÜÜ, 4
(
ÜÜ4 5
)
ÜÜ5 6
)
ÜÜ6 7
;
ÜÜ7 8
}
áá 
catch
àà 
(
àà 
	Exception
àà 
ex
àà 
)
àà  
{
ââ 
FDebug
ää 
.
ää 
throwException
ää %
(
ää% &
ex
ää& (
)
ää( )
;
ää) *
}
ãã 
finally
åå 
{
çç 
logData
éé 
=
éé 
null
éé 
;
éé 
}
èè 
}
êê 	
private
òò 
void
òò (
m_fThdMain_ThreadJobCalled
òò /
(
òò/ 0
object
ôô 
sender
ôô 
,
ôô 
FThreadEventArgs
öö 
e
öö 
)
õõ 
{
úú 	
try
ùù 
{
ûû 
if
üü 
(
üü 
m_fLogQueue
üü 
.
üü  
count
üü  %
==
üü& (
$num
üü) *
)
üü* +
{
†† 
e
°° 
.
°° 
sleepThread
°° !
(
°°! "
$num
°°" #
)
°°# $
;
°°$ %
return
¢¢ 
;
¢¢ 
}
££ 
writeLog
§§ 
(
§§ 
)
§§ 
;
§§ 
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶ 
ex
¶¶ 
)
¶¶  
{
ßß 
FDebug
®® 
.
®® 
writeLog
®® 
(
®®  
ex
®®  "
)
®®" #
;
®®# $
e
©© 
.
©© 
sleepThread
©© 
(
©© 
$num
©© 
)
©©  
;
©©  !
}
™™ 
finally
´´ 
{
¨¨ 
}
ÆÆ 
}
ØØ 	
}
µµ 
}∂∂ ó[
íD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Protocol\Serial\c_FSerialPluginSerialRecvBuffer.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

class #
FSerialPluginRecvBuffer (
:( )
IDisposable* 5
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
List 
< 
Byte 
> 
m_data !
=" #
null$ (
;( )
private 
byte 
[ 
] 
m_suffix 
=  !
new" %
byte& *
[* +
]+ ,
{- .
$num/ 3
,3 4
$num5 9
}: ;
;; <
private 
byte 
[ 
] 
m_bin 
= 
null #
;# $
public$$ #
FSerialPluginRecvBuffer$$ &
($$& '
)%% 
{&& 	
m_data'' 
='' 
new'' 
List'' 
<'' 
Byte'' "
>''" #
(''# $
)''$ %
;''% &
}(( 	
public++ #
FSerialPluginRecvBuffer++ &
(++& '
byte,, 
[,, 
],, 
suffix,, 
)-- 
:-- 
this-- 
(-- 
)-- 
{.. 	
m_suffix// 
=// 
suffix// 
;// 
}00 	
~44 	#
FSerialPluginRecvBuffer44	  
(44  !
)55 
{66 	
	myDispose77 
(77 
false77 
)77 
;77 
}88 	
	protected<< 
void<< 
	myDispose<<  
(<<  !
bool== 
	disposing== 
)>> 
{?? 	
if@@ 
(@@ 
!@@ 

m_disposed@@ 
)@@ 
{AA 
ifBB 
(BB 
	disposingBB 
)BB 
{CC 
m_dataDD 
=DD 
nullDD !
;DD! "
}EE 

m_disposedGG 
=GG 
trueGG !
;GG! "
}HH 
}II 	
publicQQ 
voidQQ 
DisposeQQ 
(QQ 
)RR 
{SS 	
	myDisposeTT 
(TT 
trueTT 
)TT 
;TT 
GCUU 
.UU 
SuppressFinalizeUU 
(UU  
thisUU  $
)UU$ %
;UU% &
}VV 	
public^^ 
bool^^ 
isCompleted^^ 
{__ 	
get`` 
{aa 
intbb 
etxPtrbb 
=bb 
$numbb 
;bb 
trydd 
{ee 
ifff 
(ff 
m_suffixff  
==ff! #
nullff$ (
)ff( )
{gg 
returnhh 
truehh #
;hh# $
}ii 
etxPtrmm 
=mm 
m_datamm #
.mm# $
IndexOfmm$ +
(mm+ ,
m_suffixmm, 4
[mm4 5
$nummm5 6
]mm6 7
)mm7 8
;mm8 9
ifnn 
(nn 
etxPtrnn 
!=nn !
-nn" #
$numnn# $
&&nn% '
m_datann( .
.nn. /
Countnn/ 4
>=nn5 7
etxPtrnn8 >
+nn? @
m_suffixnnA I
.nnI J
LengthnnJ P
)nnP Q
{oo 
forpp 
(pp 
intpp  
ipp! "
=pp# $
$numpp% &
;pp& '
ipp( )
<pp* +
m_suffixpp, 4
.pp4 5
Lengthpp5 ;
-pp< =
$numpp> ?
;pp? @
ippA B
++ppB D
)ppD E
{qq 
ifrr 
(rr  
m_suffixrr  (
[rr( )
irr) *
]rr* +
!=rr, .
(rr/ 0
byterr0 4
)rr4 5
m_datarr5 ;
[rr; <
etxPtrrr< B
+rrC D
irrE F
]rrF G
)rrG H
{ss 
returntt  &
falsett' ,
;tt, -
}uu 
}vv 
returnww 
trueww #
;ww# $
}xx 
}yy 
catchzz 
(zz 
	Exceptionzz  
exzz! #
)zz# $
{{{ 
FDebug|| 
.|| 
throwException|| )
(||) *
ex||* ,
)||, -
;||- .
}}} 
finally~~ 
{ 
}
ÅÅ 
return
ÇÇ 
false
ÇÇ 
;
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
public
àà 
byte
àà 
[
àà 
]
àà 
binData
àà 
{
ââ 	
get
ää 
{
ãã 
try
åå 
{
çç 
return
éé 
m_data
éé !
.
éé! "
ToArray
éé" )
(
éé) *
)
éé* +
;
éé+ ,
}
èè 
catch
êê 
(
êê 
	Exception
êê  
ex
êê! #
)
êê# $
{
ëë 
FDebug
íí 
.
íí 
throwException
íí )
(
íí) *
ex
íí* ,
)
íí, -
;
íí- .
}
ìì 
finally
îî 
{
ïï 
}
óó 
return
òò 
null
òò 
;
òò 
}
ôô 
}
öö 	
public
ûû 
string
ûû 
binToString
ûû !
{
üü 	
get
†† 
{
°° 
try
¢¢ 
{
££ 
return
§§ 
Encoding
§§ #
.
§§# $
Default
§§$ +
.
§§+ ,
	GetString
§§, 5
(
§§5 6
m_bin
§§6 ;
)
§§; <
;
§§< =
}
•• 
catch
¶¶ 
(
¶¶ 
	Exception
¶¶  
ex
¶¶! #
)
¶¶# $
{
ßß 
FDebug
®® 
.
®® 
throwException
®® )
(
®®) *
ex
®®* ,
)
®®, -
;
®®- .
}
©© 
finally
™™ 
{
´´ 
}
≠≠ 
return
ÆÆ 
string
ÆÆ 
.
ÆÆ 
Empty
ÆÆ #
;
ÆÆ# $
}
ØØ 
}
∞∞ 	
public
∏∏ 
void
∏∏ 
init
∏∏ 
(
∏∏ 
)
ππ 
{
∫∫ 	
try
ªª 
{
ºº 
m_bin
ΩΩ 
=
ΩΩ 
null
ΩΩ 
;
ΩΩ 
}
ææ 
catch
øø 
(
øø 
	Exception
øø 
ex
øø 
)
øø  
{
¿¿ 
FDebug
¡¡ 
.
¡¡ 
throwException
¡¡ %
(
¡¡% &
ex
¡¡& (
)
¡¡( )
;
¡¡) *
}
¬¬ 
finally
√√ 
{
ƒƒ 
}
∆∆ 
}
«« 	
public
ÀÀ 
void
ÀÀ 
clear
ÀÀ 
(
ÀÀ 
)
ÃÃ 
{
ÕÕ 	
try
ŒŒ 
{
œœ 
init
–– 
(
–– 
)
–– 
;
–– 
m_data
—— 
.
—— 
Clear
—— 
(
—— 
)
—— 
;
—— 
}
““ 
catch
”” 
(
”” 
	Exception
”” 
ex
”” 
)
””  
{
‘‘ 
FDebug
’’ 
.
’’ 
throwException
’’ %
(
’’% &
ex
’’& (
)
’’( )
;
’’) *
}
÷÷ 
finally
◊◊ 
{
ÿÿ 
}
⁄⁄ 
}
€€ 	
public
ﬂﬂ 
void
ﬂﬂ 
input
ﬂﬂ 
(
ﬂﬂ 
byte
‡‡ 
[
‡‡ 
]
‡‡ 
data
‡‡ 
)
·· 
{
‚‚ 	
try
„„ 
{
‰‰ 
m_data
ÂÂ 
.
ÂÂ 
AddRange
ÂÂ 
(
ÂÂ  
data
ÂÂ  $
)
ÂÂ$ %
;
ÂÂ% &
}
ÊÊ 
catch
ÁÁ 
(
ÁÁ 
	Exception
ÁÁ 
ex
ÁÁ 
)
ÁÁ  
{
ËË 
FDebug
ÈÈ 
.
ÈÈ 
throwException
ÈÈ %
(
ÈÈ% &
ex
ÈÈ& (
)
ÈÈ( )
;
ÈÈ) *
}
ÍÍ 
finally
ÎÎ 
{
ÏÏ 
}
ÓÓ 
}
ÔÔ 	
public
ÛÛ 
bool
ÛÛ 
parse
ÛÛ 
(
ÛÛ 
)
ÙÙ 
{
ıı 	
int
ˆˆ 
etxPtr
ˆˆ 
=
ˆˆ 
$num
ˆˆ 
;
ˆˆ 
try
¯¯ 
{
˘˘ 
if
˙˙ 
(
˙˙ 
m_data
˙˙ 
.
˙˙ 
Count
˙˙  
==
˙˙! #
$num
˙˙$ %
)
˙˙% &
{
˚˚ 
return
¸¸ 
false
¸¸  
;
¸¸  !
}
˝˝ 
if
ÅÅ 
(
ÅÅ 
m_suffix
ÅÅ 
==
ÅÅ 
null
ÅÅ  $
)
ÅÅ$ %
{
ÇÇ 
etxPtr
ÉÉ 
=
ÉÉ 
m_data
ÉÉ #
.
ÉÉ# $
Count
ÉÉ$ )
;
ÉÉ) *
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
etxPtr
áá 
=
áá 
m_data
áá #
.
áá# $
IndexOf
áá$ +
(
áá+ ,
m_suffix
áá, 4
[
áá4 5
$num
áá5 6
]
áá6 7
)
áá7 8
;
áá8 9
if
ââ 
(
ââ 
etxPtr
ââ 
==
ââ !
-
ââ" #
$num
ââ# $
)
ââ$ %
{
ää 
return
ãã 
false
ãã $
;
ãã$ %
}
åå 
for
éé 
(
éé 
int
éé 
i
éé 
=
éé  
$num
éé! "
;
éé" #
i
éé$ %
<
éé& '
m_suffix
éé( 0
.
éé0 1
Length
éé1 7
-
éé8 9
$num
éé: ;
;
éé; <
i
éé= >
++
éé> @
)
éé@ A
{
èè 
if
êê 
(
êê 
m_suffix
êê $
[
êê$ %
i
êê% &
]
êê& '
!=
êê( *
(
êê+ ,
byte
êê, 0
)
êê0 1
m_data
êê1 7
[
êê7 8
etxPtr
êê8 >
+
êê? @
i
êêA B
]
êêB C
)
êêC D
{
ëë 
return
íí "
false
íí# (
;
íí( )
}
ìì 
}
îî 
}
ïï 
m_bin
ôô 
=
ôô 
m_data
ôô 
.
ôô 
GetRange
ôô '
(
ôô' (
$num
ôô( )
,
ôô) *
etxPtr
ôô+ 1
)
ôô1 2
.
ôô2 3
ToArray
ôô3 :
(
ôô: ;
)
ôô; <
;
ôô< =
m_data
†† 
.
†† 
RemoveRange
†† "
(
††" #
$num
††# $
,
††$ %
etxPtr
††& ,
+
††- .
(
††/ 0
m_suffix
††0 8
!=
††9 ;
null
††< @
?
††A B
m_suffix
††C K
.
††K L
Length
††L R
:
††S T
$num
††U V
)
††V W
)
††W X
;
††X Y
return
°° 
true
°° 
;
°° 
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
ex
££ 
)
££  
{
§§ 
FDebug
•• 
.
•• 
throwException
•• %
(
••% &
ex
••& (
)
••( )
;
••) *
}
¶¶ 
finally
ßß 
{
®® 
}
™™ 
return
´´ 
false
´´ 
;
´´ 
}
¨¨ 	
}
≤≤ 
}≥≥ åË
ÇD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Protocol\Serial\c_FSerialPlugin.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
internal 
class 
FSerialPlugin  
:  !
IDisposable" -
{ 
private 
const 
int 
AutoCycleRunTime *
=+ ,
$num- /
;/ 0
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSerialToEthernet !
m_fSerialToEthernet" 5
=6 7
null8 <
;< =
private 
FSerial 
	m_fSerial !
=" #
null$ (
;( )
private   
string   

m_portName   !
=  " #
string  $ *
.  * +
Empty  + 0
;  0 1
private!! 
int!! 

m_baudRate!! 
=!!  
$num!!! %
;!!% &
private## 
	FCodeLock## 
m_fMainSync## %
=##& '
null##( ,
;##, -
private$$ 
FThread$$ 

m_fThdMain$$ "
=$$# $
null$$% )
;$$) *
private%% 
FStaticTimer%% 
m_fTmrAutoCycle%% ,
=%%- .
null%%/ 3
;%%3 4
private&& #
FSerialPluginRecvBuffer&& '
m_fRecvBuffer&&( 5
=&&6 7
null&&8 <
;&&< =
public,, 
FSerialPlugin,, 
(,, 
FSerialToEthernet-- 
fSerialToEthernet-- /
).. 
{// 	
m_fSerialToEthernet00 
=00  !
fSerialToEthernet00" 3
;003 4

m_portName11 
=11 
fSerialToEthernet11 *
.11* +
fSerialConfig11+ 8
.118 9

serialPort119 C
;11C D

m_baudRate22 
=22 
fSerialToEthernet22 *
.22* +
fSerialConfig22+ 8
.228 9
baud229 =
;22= >
init44 
(44 
)44 
;44 
}55 	
~99 	
FSerialPlugin99	 
(99 
):: 
{;; 	
	myDispose<< 
(<< 
false<< 
)<< 
;<< 
}== 	
	protectedAA 
voidAA 
	myDisposeAA  
(AA  !
boolBB 
	disposingBB 
)CC 
{DD 	
ifEE 
(EE 
!EE 

m_disposedEE 
)EE 
{FF 
ifGG 
(GG 
	disposingGG 
)GG 
{HH 
termII 
(II 
)II 
;II 
m_fSerialToEthernetKK '
=KK( )
nullKK* .
;KK. /
}LL 

m_disposedNN 
=NN 
trueNN !
;NN! "
}OO 
}PP 	
publicXX 
voidXX 
DisposeXX 
(XX 
)YY 
{ZZ 	
	myDispose[[ 
([[ 
true[[ 
)[[ 
;[[ 
GC\\ 
.\\ 
SuppressFinalize\\ 
(\\  
this\\  $
)\\$ %
;\\% &
}]] 	
privatekk 
voidkk 
initkk 
(kk 
)ll 
{mm 	
trynn 
{oo 
	m_fSerialpp 
=pp 
newpp 
FSerialpp  '
(pp' (
m_fSerialToEthernetqq '
.qq' (
fSerialConfigqq( 5
.qq5 6

serialPortqq6 @
,qq@ A
m_fSerialToEthernetrr '
.rr' (
fSerialConfigrr( 5
.rr5 6
baudrr6 :
,rr: ;
m_fSerialToEthernetss '
.ss' (
fSerialConfigss( 5
.ss5 6
parityss6 <
,ss< =
m_fSerialToEthernettt '
.tt' (
fSerialConfigtt( 5
.tt5 6
dataBitstt6 >
,tt> ?
m_fSerialToEthernetuu '
.uu' (
fSerialConfiguu( 5
.uu5 6
stopBitsuu6 >
)vv 
;vv 
	m_fSerialxx 
.xx 
SerialStateChangedxx ,
+=xx- /
newxx0 3+
FSerialStateChangedEventHandlerxx4 S
(xxS T(
m_fSerial_SerialStateChangedxxT p
)xxp q
;xxq r
	m_fSerialyy 
.yy 
SerialDataReceivedyy ,
+=yy- /
newyy0 3+
FSerialDataReceivedEventHandleryy4 S
(yyS T(
m_fSerial_SerialDataReceivedyyT p
)yyp q
;yyq r
	m_fSerialzz 
.zz 
SerialDataSentzz (
+=zz) +
newzz, /'
FSerialDataSentEventHandlerzz0 K
(zzK L$
m_fSerial_SerialDataSentzzL d
)zzd e
;zze f
	m_fSerial{{ 
.{{  
SerialDataSendFailed{{ .
+={{/ 1
new{{2 5-
!FSerialDataSendFailedEventHandler{{6 W
({{W X*
m_fSerial_SerialDataSendFailed{{X v
){{v w
;{{w x
	m_fSerial|| 
.|| 
SerialErrorRaised|| +
+=||, .
new||/ 2*
FSerialErrorRaisedEventHandler||3 Q
(||Q R'
m_fSerial_SerialErrorRaised||R m
)||m n
;||n o
m_fTmrAutoCycle
ÄÄ 
=
ÄÄ  !
new
ÄÄ" %
FStaticTimer
ÄÄ& 2
(
ÄÄ2 3
)
ÄÄ3 4
;
ÄÄ4 5
m_fMainSync
ÅÅ 
=
ÅÅ 
new
ÅÅ !
	FCodeLock
ÅÅ" +
(
ÅÅ+ ,
)
ÅÅ, -
;
ÅÅ- .

m_fThdMain
ÇÇ 
=
ÇÇ 
new
ÇÇ  
FThread
ÇÇ! (
(
ÇÇ( )
$str
ÇÇ) ;
)
ÇÇ; <
;
ÇÇ< =

m_fThdMain
ÉÉ 
.
ÉÉ 
ThreadJobCalled
ÉÉ *
+=
ÉÉ+ -
new
ÉÉ. 1*
FThreadJobCalledEventHandler
ÉÉ2 N
(
ÉÉN O(
m_fThdMain_ThreadJobCalled
ÉÉO i
)
ÉÉi j
;
ÉÉj k

m_fThdMain
ÑÑ 
.
ÑÑ 
start
ÑÑ  
(
ÑÑ  !
)
ÑÑ! "
;
ÑÑ" #
}
ÖÖ 
catch
ÜÜ 
(
ÜÜ 
	Exception
ÜÜ 
ex
ÜÜ 
)
ÜÜ  
{
áá 
FDebug
àà 
.
àà 
throwException
àà %
(
àà% &
ex
àà& (
)
àà( )
;
àà) *
}
ââ 
finally
ää 
{
ãã 
}
çç 
}
éé 	
private
íí 
void
íí 
term
íí 
(
íí 
)
ìì 
{
îî 	
try
ïï 
{
ññ 
if
óó 
(
óó 

m_fThdMain
óó 
!=
óó !
null
óó" &
)
óó& '
{
òò 

m_fThdMain
ôô 
.
ôô 
stop
ôô #
(
ôô# $
)
ôô$ %
;
ôô% &

m_fThdMain
öö 
.
öö 
Dispose
öö &
(
öö& '
)
öö' (
;
öö( )

m_fThdMain
õõ 
.
õõ 
ThreadJobCalled
õõ .
-=
õõ/ 1
new
õõ2 5*
FThreadJobCalledEventHandler
õõ6 R
(
õõR S(
m_fThdMain_ThreadJobCalled
õõS m
)
õõm n
;
õõn o

m_fThdMain
úú 
=
úú  
null
úú! %
;
úú% &
}
ùù 
if
üü 
(
üü 
	m_fSerial
üü 
!=
üü  
null
üü! %
)
üü% &
{
†† 
	m_fSerial
°° 
.
°° 
close
°° #
(
°°# $
)
°°$ %
;
°°% &
	m_fSerial
¢¢ 
.
¢¢ 
Dispose
¢¢ %
(
¢¢% &
)
¢¢& '
;
¢¢' (
	m_fSerial
§§ 
.
§§  
SerialStateChanged
§§ 0
-=
§§1 3
new
§§4 7-
FSerialStateChangedEventHandler
§§8 W
(
§§W X*
m_fSerial_SerialStateChanged
§§X t
)
§§t u
;
§§u v
	m_fSerial
•• 
.
••  
SerialDataReceived
•• 0
-=
••1 3
new
••4 7-
FSerialDataReceivedEventHandler
••8 W
(
••W X*
m_fSerial_SerialDataReceived
••X t
)
••t u
;
••u v
	m_fSerial
¶¶ 
.
¶¶ 
SerialDataSent
¶¶ ,
-=
¶¶- /
new
¶¶0 3)
FSerialDataSentEventHandler
¶¶4 O
(
¶¶O P&
m_fSerial_SerialDataSent
¶¶P h
)
¶¶h i
;
¶¶i j
	m_fSerial
ßß 
.
ßß "
SerialDataSendFailed
ßß 2
-=
ßß3 5
new
ßß6 9/
!FSerialDataSendFailedEventHandler
ßß: [
(
ßß[ \,
m_fSerial_SerialDataSendFailed
ßß\ z
)
ßßz {
;
ßß{ |
	m_fSerial
®® 
.
®® 
SerialErrorRaised
®® /
-=
®®0 2
new
®®3 6,
FSerialErrorRaisedEventHandler
®®7 U
(
®®U V)
m_fSerial_SerialErrorRaised
®®V q
)
®®q r
;
®®r s
	m_fSerial
™™ 
=
™™ 
null
™™  $
;
™™$ %
}
´´ 
if
ØØ 
(
ØØ 
m_fTmrAutoCycle
ØØ #
!=
ØØ$ &
null
ØØ' +
)
ØØ+ ,
{
∞∞ 
m_fTmrAutoCycle
±± #
.
±±# $
Dispose
±±$ +
(
±±+ ,
)
±±, -
;
±±- .
m_fTmrAutoCycle
≤≤ #
=
≤≤$ %
null
≤≤& *
;
≤≤* +
}
≥≥ 
if
µµ 
(
µµ 
m_fMainSync
µµ 
!=
µµ  "
null
µµ# '
)
µµ' (
{
∂∂ 
m_fMainSync
∑∑ 
.
∑∑  
Dispose
∑∑  '
(
∑∑' (
)
∑∑( )
;
∑∑) *
m_fMainSync
∏∏ 
=
∏∏  !
null
∏∏" &
;
∏∏& '
}
ππ 
}
∫∫ 
catch
ªª 
(
ªª 
	Exception
ªª 
ex
ªª 
)
ªª  
{
ºº 
FDebug
ΩΩ 
.
ΩΩ 
throwException
ΩΩ %
(
ΩΩ% &
ex
ΩΩ& (
)
ΩΩ( )
;
ΩΩ) *
}
ææ 
finally
øø 
{
¿¿ 
}
¬¬ 
}
√√ 	
public
«« 
void
«« 
open
«« 
(
«« 
)
»» 
{
…… 	
try
   
{
ÀÀ  
procSerialPortOpen
ÃÃ "
(
ÃÃ" #
)
ÃÃ# $
;
ÃÃ$ %!
m_fSerialToEthernet
–– #
.
––# $
changeSerialState
––$ 5
(
––5 6!
FCommunicationState
––6 I
.
––I J
Opened
––J P
,
––P Q

m_portName
––R \
,
––\ ]

m_baudRate
––^ h
)
––h i
;
––i j
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ 
	Exception
ŸŸ 
ex
ŸŸ 
)
ŸŸ  
{
⁄⁄ 
FDebug
€€ 
.
€€ 
throwException
€€ %
(
€€% &
ex
€€& (
)
€€( )
;
€€) *
}
‹‹ 
finally
›› 
{
ﬁﬁ 
}
‡‡ 
}
·· 	
public
ÂÂ 
void
ÂÂ 
close
ÂÂ 
(
ÂÂ 
)
ÊÊ 
{
ÁÁ 	
try
ËË 
{
ÈÈ !
procSerialPortClose
ÍÍ #
(
ÍÍ# $
)
ÍÍ$ %
;
ÍÍ% &!
m_fSerialToEthernet
ÓÓ #
.
ÓÓ# $
changeSerialState
ÓÓ$ 5
(
ÓÓ5 6!
FCommunicationState
ÓÓ6 I
.
ÓÓI J
Closed
ÓÓJ P
,
ÓÓP Q

m_portName
ÓÓR \
,
ÓÓ\ ]

m_baudRate
ÓÓ^ h
)
ÓÓh i
;
ÓÓi j
}
ÔÔ 
catch
 
(
 
	Exception
 
ex
 
)
  
{
ÒÒ 
FDebug
ÚÚ 
.
ÚÚ 
throwException
ÚÚ %
(
ÚÚ% &
ex
ÚÚ& (
)
ÚÚ( )
;
ÚÚ) *
}
ÛÛ 
finally
ÙÙ 
{
ıı 
}
˜˜ 
}
¯¯ 	
public
¸¸ 
void
¸¸ 
send
¸¸ 
(
¸¸ 
FSerialSendData
˝˝ 
fSerialSendData
˝˝ +
)
˛˛ 
{
ˇˇ 	
try
ÄÄ 
{
ÅÅ 
sendData
ÇÇ 
(
ÇÇ 
fSerialSendData
ÇÇ (
)
ÇÇ( )
;
ÇÇ) *
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ 
	Exception
ÑÑ 
ex
ÑÑ 
)
ÑÑ  
{
ÖÖ 
FDebug
ÜÜ 
.
ÜÜ 
throwException
ÜÜ %
(
ÜÜ% &
ex
ÜÜ& (
)
ÜÜ( )
;
ÜÜ) *
}
áá 
finally
àà 
{
ââ 
}
ãã 
}
åå 	
private
êê 
void
êê 
sendData
êê 
(
êê 
FSerialSendData
ëë 
fSerialSendData
ëë +
)
íí 
{
ìì 	
try
îî 
{
ïï 
	m_fSerial
ññ 
.
ññ 
send
ññ 
(
ññ 
fSerialSendData
ññ .
)
ññ. /
;
ññ/ 0
}
óó 
catch
òò 
(
òò 
	Exception
òò 
ex
òò 
)
òò  
{
ôô #
procSerialErrorRaised
öö %
(
öö% &
ex
öö& (
)
öö( )
;
öö) *
}
õõ 
finally
úú 
{
ùù 
}
üü 
}
†† 	
private
§§ 
void
§§  
procSerialPortOpen
§§ '
(
§§' (
)
•• 
{
¶¶ 	
try
ßß 
{
®® 
	m_fSerial
©© 
.
©© 
open
©© 
(
©© 
)
©©  
;
©©  !
}
™™ 
catch
´´ 
(
´´ 
	Exception
´´ 
ex
´´ 
)
´´  
{
¨¨ #
procSerialErrorRaised
≠≠ %
(
≠≠% &
ex
≠≠& (
)
≠≠( )
;
≠≠) *
}
ÆÆ 
finally
ØØ 
{
∞∞ 
}
≤≤ 
}
≥≥ 	
private
∑∑ 
void
∑∑ !
procSerialPortClose
∑∑ (
(
∑∑( )
)
∏∏ 
{
ππ 	
try
∫∫ 
{
ªª 
if
ºº 
(
ºº 
	m_fSerial
ºº 
==
ºº  
null
ºº! %
)
ºº% &
{
ΩΩ 
return
ææ 
;
ææ 
}
øø 
if
√√ 
(
√√ 
	m_fSerial
√√ 
.
√√ 
fState
√√ $
==
√√% '
FSerialState
√√( 4
.
√√4 5
Opened
√√5 ;
)
√√; <
{
ƒƒ 
while
≈≈ 
(
≈≈ !
m_fSerialToEthernet
≈≈ .
.
≈≈. /
fEventPusher
≈≈/ ;
.
≈≈; <
serialEventCount
≈≈< L
>
≈≈M N
$num
≈≈O P
||
≈≈Q S
!
≈≈T U
	m_fSerial
≈≈U ^
.
≈≈^ _
sendCompleted
≈≈_ l
)
≈≈l m
{
∆∆ 
if
«« 
(
«« 
System
«« "
.
««" #
Windows
««# *
.
««* +
Forms
««+ 0
.
««0 1
Application
««1 <
.
««< =
MessageLoop
««= H
)
««H I
{
»» 
System
…… "
.
……" #
Windows
……# *
.
……* +
Forms
……+ 0
.
……0 1
Application
……1 <
.
……< =
DoEvents
……= E
(
……E F
)
……F G
;
……G H
}
   
System
ÀÀ 
.
ÀÀ 
	Threading
ÀÀ (
.
ÀÀ( )
Thread
ÀÀ) /
.
ÀÀ/ 0
Sleep
ÀÀ0 5
(
ÀÀ5 6
$num
ÀÀ6 7
)
ÀÀ7 8
;
ÀÀ8 9
}
ÃÃ 
}
ÕÕ 
	m_fSerial
—— 
.
—— 
close
—— 
(
——  
)
——  !
;
——! "
}
⁄⁄ 
catch
€€ 
(
€€ 
	Exception
€€ 
ex
€€ 
)
€€  
{
‹‹ #
procSerialErrorRaised
›› %
(
››% &
ex
››& (
)
››( )
;
››) *
}
ﬁﬁ 
finally
ﬂﬂ 
{
‡‡ 
}
‚‚ 
}
„„ 	
private
ÁÁ 
void
ÁÁ &
procSerialStateConnected
ÁÁ -
(
ÁÁ- .
)
ËË 
{
ÈÈ 	
try
ÍÍ 
{
ÎÎ !
m_fSerialToEthernet
ÏÏ #
.
ÏÏ# $
changeSerialState
ÏÏ$ 5
(
ÏÏ5 6!
FCommunicationState
ÏÏ6 I
.
ÏÏI J
	Connected
ÏÏJ S
,
ÏÏS T

m_portName
ÏÏU _
,
ÏÏ_ `

m_baudRate
ÏÏa k
)
ÏÏk l
;
ÏÏl m
}
ÙÙ 
catch
ıı 
(
ıı 
	Exception
ıı 
ex
ıı 
)
ıı  
{
ˆˆ #
procSerialErrorRaised
˜˜ %
(
˜˜% &
ex
˜˜& (
)
˜˜( )
;
˜˜) *
}
¯¯ 
finally
˘˘ 
{
˙˙ 
}
¸¸ 
}
˝˝ 	
private
ÅÅ 
void
ÅÅ #
procSerialErrorRaised
ÅÅ *
(
ÅÅ* +
	Exception
ÇÇ 
inEx
ÇÇ 
)
ÉÉ 
{
ÑÑ 	
try
ÖÖ 
{
ÜÜ 
FDebug
áá 
.
áá 
writeLog
áá 
(
áá  
inEx
áá  $
)
áá$ %
;
áá% &!
m_fSerialToEthernet
ââ #
.
ââ# $
fEventPusher
ââ$ 0
.
ââ0 1
pushSerialEvent
ââ1 @
(
ââ@ A
new
ää /
!FSerialPluginErrorRaisedEventArgs
ää 9
(
ää9 :!
m_fSerialToEthernet
ää: M
,
ääM N
FEventId
ääO W
.
ääW X
SerialErrorRaised
ääX i
,
ääi j
inEx
ääk o
.
ääo p
Message
ääp w
)
ääw x
)
ãã 
;
ãã 
}
åå 
catch
çç 
(
çç 
	Exception
çç 
ex
çç 
)
çç  
{
éé 
FDebug
èè 
.
èè 
writeLog
èè 
(
èè  
ex
èè  "
)
èè" #
;
èè# $
}
êê 
finally
ëë 
{
íí 
}
îî 
}
ïï 	
private
ùù 
void
ùù (
m_fThdMain_ThreadJobCalled
ùù /
(
ùù/ 0
object
ûû 
sender
ûû 
,
ûû 
FThreadEventArgs
üü 
e
üü 
)
†† 
{
°° 	
bool
¢¢ 
waited
¢¢ 
=
¢¢ 
false
¢¢ 
;
¢¢  
try
§§ 
{
•• 
waited
¶¶ 
=
¶¶ 
m_fMainSync
¶¶ $
.
¶¶$ %
tryWait
¶¶% ,
(
¶¶, -
$num
¶¶- .
)
¶¶. /
;
¶¶/ 0
if
ßß 
(
ßß 
!
ßß 
waited
ßß 
)
ßß 
{
®® 
return
©© 
;
©© 
}
™™ 
if
ÆÆ 
(
ÆÆ !
m_fSerialToEthernet
ÆÆ '
.
ÆÆ' (
fSerialState
ÆÆ( 4
==
ÆÆ5 7!
FCommunicationState
ÆÆ8 K
.
ÆÆK L
	Connected
ÆÆL U
)
ÆÆU V
{
ØØ 
e
∞∞ 
.
∞∞ 
sleepThread
∞∞ !
(
∞∞! "
$num
∞∞" #
)
∞∞# $
;
∞∞$ %
return
±± 
;
±± 
}
≤≤ 
if
ππ 
(
ππ 
m_fTmrAutoCycle
ππ #
.
ππ# $
elasped
ππ$ +
(
ππ+ ,
true
ππ, 0
)
ππ0 1
)
ππ1 2
{
∫∫ 
try
ªª 
{
ºº  
procSerialPortOpen
ææ *
(
ææ* +
)
ææ+ ,
;
ææ, -
m_fTmrAutoCycle
øø '
.
øø' (
stop
øø( ,
(
øø, -
)
øø- .
;
øø. /
}
¿¿ 
catch
¡¡ 
(
¡¡ 
	Exception
¡¡ $
ex
¡¡% '
)
¡¡' (
{
¬¬ 
System
√√ 
.
√√ 
Diagnostics
√√ *
.
√√* +
Debug
√√+ 0
.
√√0 1
	WriteLine
√√1 :
(
√√: ;
ex
ƒƒ 
.
ƒƒ 
Message
ƒƒ &
)
≈≈ 
;
≈≈ 
}
∆∆ 
}
«« 
e
ÀÀ 
.
ÀÀ 
sleepThread
ÀÀ 
(
ÀÀ 
$num
ÀÀ 
)
ÀÀ  
;
ÀÀ  !
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ 
ex
ÕÕ 
)
ÕÕ  
{
ŒŒ #
procSerialErrorRaised
œœ %
(
œœ% &
ex
œœ& (
)
œœ( )
;
œœ) *
}
–– 
finally
—— 
{
““ 
if
”” 
(
”” 
waited
”” 
)
”” 
{
‘‘ 
m_fMainSync
’’ 
.
’’  
set
’’  #
(
’’# $
)
’’$ %
;
’’% &
}
÷÷ 
}
◊◊ 
}
ÿÿ 	
private
‡‡ 
void
‡‡ *
m_fSerial_SerialStateChanged
‡‡ 1
(
‡‡1 2
object
·· 
sender
·· 
,
·· *
FSerialStateChangedEventArgs
‚‚ (
e
‚‚) *
)
„„ 
{
‰‰ 	
try
ÂÂ 
{
ÊÊ 
m_fMainSync
ÁÁ 
.
ÁÁ 
wait
ÁÁ  
(
ÁÁ  !
)
ÁÁ! "
;
ÁÁ" #
if
ÎÎ 
(
ÎÎ 
e
ÎÎ 
.
ÎÎ 
fState
ÎÎ 
==
ÎÎ 
FSerialState
ÎÎ  ,
.
ÎÎ, -
Opened
ÎÎ- 3
)
ÎÎ3 4
{
ÏÏ &
procSerialStateConnected
ÌÌ ,
(
ÌÌ, -
)
ÌÌ- .
;
ÌÌ. /
}
ÓÓ 
else
ÔÔ 
if
ÔÔ 
(
ÔÔ 
e
ÔÔ 
.
ÔÔ 
fState
ÔÔ !
==
ÔÔ" $
FSerialState
ÔÔ% 1
.
ÔÔ1 2
Closed
ÔÔ2 8
)
ÔÔ8 9
{
 
}
ÚÚ 
}
ÛÛ 
catch
ÙÙ 
(
ÙÙ 
	Exception
ÙÙ 
ex
ÙÙ 
)
ÙÙ  
{
ıı #
procSerialErrorRaised
ˆˆ %
(
ˆˆ% &
ex
ˆˆ& (
)
ˆˆ( )
;
ˆˆ) *
}
˜˜ 
finally
¯¯ 
{
˘˘ 
m_fMainSync
˙˙ 
.
˙˙ 
set
˙˙ 
(
˙˙  
)
˙˙  !
;
˙˙! "
}
˚˚ 
}
¸¸ 	
private
ÄÄ 
void
ÄÄ *
m_fSerial_SerialDataReceived
ÄÄ 1
(
ÄÄ1 2
object
ÅÅ 
sender
ÅÅ 
,
ÅÅ *
FSerialDataReceivedEventArgs
ÇÇ (
e
ÇÇ) *
)
ÉÉ 
{
ÑÑ 	#
FSerialPluginRecvData
ÖÖ !
fSerialData
ÖÖ" -
=
ÖÖ. /
null
ÖÖ0 4
;
ÖÖ4 5
try
áá 
{
àà 
m_fMainSync
ââ 
.
ââ 
wait
ââ  
(
ââ  !
)
ââ! "
;
ââ" #
if
çç 
(
çç 
e
çç 
.
çç 

dataLength
çç  
>
çç! "
$num
çç# $
)
çç$ %
{
éé 
if
èè 
(
èè 
m_fRecvBuffer
èè %
==
èè& (
null
èè) -
)
èè- .
{
êê 
m_fRecvBuffer
ëë %
=
ëë& '
new
ëë( +%
FSerialPluginRecvBuffer
ëë, C
(
ëëC D!
m_fSerialToEthernet
ëëD W
.
ëëW X
fSerialConfig
ëëX e
.
ëëe f
suffix
ëëf l
)
ëël m
;
ëëm n
}
íí 
m_fRecvBuffer
ññ !
.
ññ! "
input
ññ" '
(
ññ' (
e
ññ( )
.
ññ) *
data
ññ* .
)
ññ. /
;
ññ/ 0
if
öö 
(
öö 
m_fRecvBuffer
öö %
.
öö% &
isCompleted
öö& 1
)
öö1 2
{
õõ 
fSerialData
úú #
=
úú$ %
new
úú& )#
FSerialPluginRecvData
úú* ?
(
úú? @!
m_fSerialToEthernet
úú@ S
,
úúS T
m_fRecvBuffer
úúU b
.
úúb c
binData
úúc j
)
úúj k
;
úúk l!
m_fSerialToEthernet
ùù +
.
ùù+ ,
fEventPusher
ùù, 8
.
ùù8 9
pushSerialEvent
ùù9 H
(
ùùH I
new
ûû 0
"FSerialPluginDataReceivedEventArgs
ûû  B
(
ûûB C!
m_fSerialToEthernet
üü  3
,
üü3 4
FEventId
††  (
.
††( ) 
SerialDataReceived
††) ;
,
††; <
FResultCode
°°  +
.
°°+ ,
Success
°°, 3
,
°°3 4
string
¢¢  &
.
¢¢& '
Empty
¢¢' ,
,
¢¢, -
fSerialData
££  +
)
§§  !
)
•• 
;
•• 
m_fRecvBuffer
ßß %
=
ßß& '
null
ßß( ,
;
ßß, -
}
®® 
}
™™ 
}
´´ 
catch
¨¨ 
(
¨¨ 
	Exception
¨¨ 
ex
¨¨ 
)
¨¨  
{
≠≠ 
FDebug
ÆÆ 
.
ÆÆ 
writeLog
ÆÆ 
(
ÆÆ  
ex
ÆÆ  "
)
ÆÆ" #
;
ÆÆ# $
}
ØØ 
finally
∞∞ 
{
±± 
m_fMainSync
≤≤ 
.
≤≤ 
set
≤≤ 
(
≤≤  
)
≤≤  !
;
≤≤! "
}
≥≥ 
}
¥¥ 	
private
∏∏ 
void
∏∏ &
m_fSerial_SerialDataSent
∏∏ -
(
∏∏- .
object
ππ 
sender
ππ 
,
ππ &
FSerialDataSentEventArgs
∫∫ $
e
∫∫% &
)
ªª 
{
ºº 	
try
ΩΩ 
{
ææ 
m_fMainSync
øø 
.
øø 
wait
øø  
(
øø  !
)
øø! "
;
øø" #!
m_fSerialToEthernet
√√ #
.
√√# $
fEventPusher
√√$ 0
.
√√0 1
pushSerialEvent
√√1 @
(
√√@ A
new
ƒƒ ,
FSerialPluginDataSentEventArgs
ƒƒ 6
(
ƒƒ6 7!
m_fSerialToEthernet
≈≈ +
,
≈≈+ ,
FEventId
∆∆  
.
∆∆  !
SerialDataSent
∆∆! /
,
∆∆/ 0
FResultCode
«« #
.
««# $
Success
««$ +
,
««+ ,
string
»» 
.
»» 
Empty
»» $
,
»»$ %
new
…… 
FSerialSendData
…… +
(
……+ ,
e
……, -
.
……- .
data
……. 2
)
……2 3
)
   
)
ÀÀ 
;
ÀÀ 
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ 
	Exception
ÕÕ 
ex
ÕÕ 
)
ÕÕ  
{
ŒŒ 
FDebug
œœ 
.
œœ 
writeLog
œœ 
(
œœ  
ex
œœ  "
)
œœ" #
;
œœ# $
}
–– 
finally
—— 
{
““ 
m_fMainSync
”” 
.
”” 
set
”” 
(
””  
)
””  !
;
””! "
}
‘‘ 
}
’’ 	
private
ŸŸ 
void
ŸŸ ,
m_fSerial_SerialDataSendFailed
ŸŸ 3
(
ŸŸ3 4
object
⁄⁄ 
sender
⁄⁄ 
,
⁄⁄ ,
FSerialDataSendFailedEventArgs
€€ *
e
€€+ ,
)
‹‹ 
{
›› 	
try
ﬁﬁ 
{
ﬂﬂ 
m_fMainSync
‡‡ 
.
‡‡ 
wait
‡‡  
(
‡‡  !
)
‡‡! "
;
‡‡" #!
m_fSerialToEthernet
‰‰ #
.
‰‰# $
fEventPusher
‰‰$ 0
.
‰‰0 1
pushSerialEvent
‰‰1 @
(
‰‰@ A
new
ÂÂ ,
FSerialPluginDataSentEventArgs
ÂÂ 6
(
ÂÂ6 7!
m_fSerialToEthernet
ÊÊ +
,
ÊÊ+ ,
FEventId
ÁÁ  
.
ÁÁ  !
SerialDataSent
ÁÁ! /
,
ÁÁ/ 0
FResultCode
ËË #
.
ËË# $
Error
ËË$ )
,
ËË) *
string
ÈÈ 
.
ÈÈ 
Empty
ÈÈ $
,
ÈÈ$ %
new
ÍÍ 
FSerialSendData
ÍÍ +
(
ÍÍ+ ,
e
ÍÍ, -
.
ÍÍ- .
data
ÍÍ. 2
)
ÍÍ2 3
)
ÎÎ 
)
ÏÏ 
;
ÏÏ 
}
ÌÌ 
catch
ÓÓ 
(
ÓÓ 
	Exception
ÓÓ 
ex
ÓÓ 
)
ÓÓ  
{
ÔÔ 
FDebug
 
.
 
writeLog
 
(
  
ex
  "
)
" #
;
# $
}
ÒÒ 
finally
ÚÚ 
{
ÛÛ 
m_fMainSync
ÙÙ 
.
ÙÙ 
set
ÙÙ 
(
ÙÙ  
)
ÙÙ  !
;
ÙÙ! "
}
ıı 
}
ˆˆ 	
private
˙˙ 
void
˙˙ )
m_fSerial_SerialErrorRaised
˙˙ 0
(
˙˙0 1
object
˚˚ 
sender
˚˚ 
,
˚˚ )
FSerialErrorRaisedEventArgs
¸¸ '
e
¸¸( )
)
˝˝ 
{
˛˛ 	
try
ˇˇ 
{
ÄÄ #
procSerialErrorRaised
ÅÅ %
(
ÅÅ% &
e
ÅÅ& '
.
ÅÅ' (
	exception
ÅÅ( 1
)
ÅÅ1 2
;
ÅÅ2 3!
procSerialPortClose
ÇÇ #
(
ÇÇ# $
)
ÇÇ$ %
;
ÇÇ% &!
m_fSerialToEthernet
ÜÜ #
.
ÜÜ# $
changeSerialState
ÜÜ$ 5
(
ÜÜ5 6!
FCommunicationState
ÜÜ6 I
.
ÜÜI J
Opened
ÜÜJ P
,
ÜÜP Q

m_portName
ÜÜR \
,
ÜÜ\ ]

m_baudRate
ÜÜ^ h
)
ÜÜh i
;
ÜÜi j
m_fTmrAutoCycle
çç 
.
çç  
start
çç  %
(
çç% &
AutoCycleRunTime
çç& 6
)
çç6 7
;
çç7 8
}
éé 
catch
èè 
(
èè 
	Exception
èè 
ex
èè 
)
èè  
{
êê 
FDebug
ëë 
.
ëë 
writeLog
ëë 
(
ëë  
ex
ëë  "
)
ëë" #
;
ëë# $
}
íí 
finally
ìì 
{
îî 
}
ññ 
}
óó 	
}
ùù 
}ûû …F
}D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Protocol\Socket\c_FBaseTcp.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
internal 
abstract 
class 
FBaseTcp $
:% &
IDisposable' 2
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSerialToEthernet !
m_fSerialToEthernet" 5
=6 7
null8 <
;< =
private 
string 
	m_localIp  
=! "
string# )
.) *
Empty* /
;/ 0
private 
int 
m_localPort 
=  !
$num" #
;# $
private 
string 

m_remoteIp !
=" #
string$ *
.* +
Empty+ 0
;0 1
private 
int 
m_remotePort  
=! "
$num# $
;$ %
public## 
FBaseTcp## 
(## 
FSerialToEthernet$$ 
fSerialToEthernet$$ /
)%% 
{&& 	
m_fSerialToEthernet'' 
=''  !
fSerialToEthernet''" 3
;''3 4
	m_localIp)) 
=)) 
m_fSerialToEthernet)) +
.))+ ,
fSocketConfig)), 9
.))9 :
localIp)): A
;))A B
m_localPort** 
=** 
m_fSerialToEthernet** -
.**- .
fSocketConfig**. ;
.**; <
	localPort**< E
;**E F

m_remoteIp++ 
=++ 
m_fSerialToEthernet++ ,
.++, -
fSocketConfig++- :
.++: ;
remoteIp++; C
;++C D
m_remotePort,, 
=,, 
m_fSerialToEthernet,, .
.,,. /
fSocketConfig,,/ <
.,,< =

remotePort,,= G
;,,G H
}-- 	
~11 	
FBaseTcp11	 
(11 
)22 
{33 	
	myDispose44 
(44 
false44 
)44 
;44 
}55 	
	protected99 
virtual99 
void99 
	myDispose99 (
(99( )
bool:: 
	disposing:: 
);; 
{<< 	
if== 
(== 
!== 

m_disposed== 
)== 
{>> 
if?? 
(?? 
	disposing?? 
)?? 
{@@ 
m_fSerialToEthernetAA '
=AA( )
nullAA* .
;AA. /
}BB 

m_disposedDD 
=DD 
trueDD !
;DD! "
}EE 
}FF 	
publicNN 
voidNN 
DisposeNN 
(NN 
)OO 
{PP 	
	myDisposeQQ 
(QQ 
trueQQ 
)QQ 
;QQ 
GCRR 
.RR 
SuppressFinalizeRR 
(RR  
thisRR  $
)RR$ %
;RR% &
}SS 	
public[[ 
FSerialToEthernet[[  
fSerialToEthernet[[! 2
{\\ 	
get]] 
{^^ 
try__ 
{`` 
returnaa 
m_fSerialToEthernetaa .
;aa. /
}bb 
catchcc 
(cc 
	Exceptioncc  
excc! #
)cc# $
{dd 
FDebugee 
.ee 
throwExceptionee )
(ee) *
exee* ,
)ee, -
;ee- .
}ff 
finallygg 
{hh 
}jj 
returnkk 
nullkk 
;kk 
}ll 
}mm 	
publicqq 
stringqq 
localIpqq 
{rr 	
getss 
{tt 
tryuu 
{vv 
returnww 
	m_localIpww $
;ww$ %
}xx 
catchyy 
(yy 
	Exceptionyy  
exyy! #
)yy# $
{zz 
FDebug{{ 
.{{ 
throwException{{ )
({{) *
ex{{* ,
){{, -
;{{- .
}|| 
finally}} 
{~~ 
}
ÄÄ 
return
ÅÅ 
string
ÅÅ 
.
ÅÅ 
Empty
ÅÅ #
;
ÅÅ# $
}
ÇÇ 
set
ÑÑ 
{
ÖÖ 
try
ÜÜ 
{
áá 
	m_localIp
àà 
=
àà 
value
àà  %
;
àà% &
}
ââ 
catch
ää 
(
ää 
	Exception
ää  
ex
ää! #
)
ää# $
{
ãã 
FDebug
åå 
.
åå 
throwException
åå )
(
åå) *
ex
åå* ,
)
åå, -
;
åå- .
}
çç 
finally
éé 
{
èè 
}
ëë 
}
íí 
}
ìì 	
public
óó 
int
óó 
	localPort
óó 
{
òò 	
get
ôô 
{
öö 
try
õõ 
{
úú 
return
ùù 
m_localPort
ùù &
;
ùù& '
}
ûû 
catch
üü 
(
üü 
	Exception
üü  
ex
üü! #
)
üü# $
{
†† 
FDebug
°° 
.
°° 
throwException
°° )
(
°°) *
ex
°°* ,
)
°°, -
;
°°- .
}
¢¢ 
finally
££ 
{
§§ 
}
¶¶ 
return
ßß 
$num
ßß 
;
ßß 
}
®® 
set
™™ 
{
´´ 
try
¨¨ 
{
≠≠ 
m_localPort
ÆÆ 
=
ÆÆ  !
value
ÆÆ" '
;
ÆÆ' (
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞  
ex
∞∞! #
)
∞∞# $
{
±± 
FDebug
≤≤ 
.
≤≤ 
throwException
≤≤ )
(
≤≤) *
ex
≤≤* ,
)
≤≤, -
;
≤≤- .
}
≥≥ 
finally
¥¥ 
{
µµ 
}
∑∑ 
}
∏∏ 
}
ππ 	
public
ΩΩ 
string
ΩΩ 
remoteIp
ΩΩ 
{
ææ 	
get
øø 
{
¿¿ 
try
¡¡ 
{
¬¬ 
return
√√ 

m_remoteIp
√√ %
;
√√% &
}
ƒƒ 
catch
≈≈ 
(
≈≈ 
	Exception
≈≈  
ex
≈≈! #
)
≈≈# $
{
∆∆ 
FDebug
«« 
.
«« 
throwException
«« )
(
««) *
ex
««* ,
)
««, -
;
««- .
}
»» 
finally
…… 
{
   
}
ÃÃ 
return
ÕÕ 
string
ÕÕ 
.
ÕÕ 
Empty
ÕÕ #
;
ÕÕ# $
}
ŒŒ 
set
–– 
{
—— 
try
““ 
{
”” 

m_remoteIp
‘‘ 
=
‘‘  
value
‘‘! &
;
‘‘& '
}
’’ 
catch
÷÷ 
(
÷÷ 
	Exception
÷÷  
ex
÷÷! #
)
÷÷# $
{
◊◊ 
FDebug
ÿÿ 
.
ÿÿ 
throwException
ÿÿ )
(
ÿÿ) *
ex
ÿÿ* ,
)
ÿÿ, -
;
ÿÿ- .
}
ŸŸ 
finally
⁄⁄ 
{
€€ 
}
›› 
}
ﬁﬁ 
}
ﬂﬂ 	
public
„„ 
int
„„ 

remotePort
„„ 
{
‰‰ 	
get
ÂÂ 
{
ÊÊ 
try
ÁÁ 
{
ËË 
return
ÈÈ 
m_remotePort
ÈÈ '
;
ÈÈ' (
}
ÍÍ 
catch
ÎÎ 
(
ÎÎ 
	Exception
ÎÎ  
ex
ÎÎ! #
)
ÎÎ# $
{
ÏÏ 
FDebug
ÌÌ 
.
ÌÌ 
throwException
ÌÌ )
(
ÌÌ) *
ex
ÌÌ* ,
)
ÌÌ, -
;
ÌÌ- .
}
ÓÓ 
finally
ÔÔ 
{
 
}
ÚÚ 
return
ÛÛ 
$num
ÛÛ 
;
ÛÛ 
}
ÙÙ 
set
ˆˆ 
{
˜˜ 
try
¯¯ 
{
˘˘ 
m_remotePort
˙˙  
=
˙˙! "
value
˙˙# (
;
˙˙( )
}
˚˚ 
catch
¸¸ 
(
¸¸ 
	Exception
¸¸  
ex
¸¸! #
)
¸¸# $
{
˝˝ 
FDebug
˛˛ 
.
˛˛ 
throwException
˛˛ )
(
˛˛) *
ex
˛˛* ,
)
˛˛, -
;
˛˛- .
}
ˇˇ 
finally
ÄÄ 
{
ÅÅ 
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 	
public
çç 
abstract
çç 
void
çç 
open
çç !
(
çç! "
)
éé 
;
éé 
public
íí 
abstract
íí 
void
íí 
close
íí "
(
íí" #
)
ìì 
;
ìì 
public
óó 
abstract
óó 
void
óó 
send
óó !
(
óó! "
FSocketSendData
òò 
fSocketSendData
òò +
)
ôô 
;
ôô 
}
üü 
}†† ü[
ÇD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Protocol\c_FCustom001RecvBuffer.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
internal 
class 
FTcpRecvBuffer !
:" #
IDisposable$ /
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
List 
< 
byte 
> 
m_data !
=" #
null$ (
;( )
private 
bool 
m_isCompleted "
=# $
true% )
;) *
private 
UInt32 
m_length 
=  !
$num" #
;# $
private 
byte 
[ 
] 
m_bin 
= 
null #
;# $
private 
FXmlNode 
	m_fXmlMsg "
=# $
null% )
;) *
private   
bool   
m_isParseSuccess   %
=  & '
false  ( -
;  - .
public&& 
FTcpRecvBuffer&& 
(&& 
)'' 
{(( 	
m_data)) 
=)) 
new)) 
List)) 
<)) 
byte)) "
>))" #
())# $
)))$ %
;))% &
}** 	
~.. 	
FTcpRecvBuffer..	 
(.. 
)// 
{00 	
	myDispose11 
(11 
false11 
)11 
;11 
}22 	
	protected66 
void66 
	myDispose66  
(66  !
bool77 
	disposing77 
)88 
{99 	
if:: 
(:: 
!:: 

m_disposed:: 
):: 
{;; 
if<< 
(<< 
	disposing<< 
)<< 
{== 
m_data>> 
=>> 
null>> !
;>>! "
m_bin?? 
=?? 
null??  
;??  !
}@@ 

m_disposedAA 
=AA 
trueAA !
;AA! "
}BB 
}CC 	
publicKK 
voidKK 
DisposeKK 
(KK 
)LL 
{MM 	
	myDisposeNN 
(NN 
trueNN 
)NN 
;NN 
GCOO 
.OO 
SuppressFinalizeOO 
(OO  
thisOO  $
)OO$ %
;OO% &
}PP 	
publicXX 
boolXX 
isCompletedXX 
{YY 	
getZZ 
{[[ 
try\\ 
{]] 
return^^ 
m_isCompleted^^ (
;^^( )
}__ 
catch`` 
(`` 
	Exception``  
ex``! #
)``# $
{aa 
FDebugbb 
.bb 
throwExceptionbb )
(bb) *
exbb* ,
)bb, -
;bb- .
}cc 
finallydd 
{ee 
}gg 
returnhh 
falsehh 
;hh 
}ii 
}jj 	
publicnn 
UInt32nn 
lengthnn 
{oo 	
getpp 
{qq 
tryrr 
{ss 
returntt 
m_lengthtt #
;tt# $
}uu 
catchvv 
(vv 
	Exceptionvv  
exvv! #
)vv# $
{ww 
FDebugxx 
.xx 
throwExceptionxx )
(xx) *
exxx* ,
)xx, -
;xx- .
}yy 
finallyzz 
{{{ 
}}} 
return~~ 
$num~~ 
;~~ 
} 
}
ÄÄ 	
public
ÑÑ 
byte
ÑÑ 
[
ÑÑ 
]
ÑÑ 
bin
ÑÑ 
{
ÖÖ 	
get
ÜÜ 
{
áá 
try
àà 
{
ââ 
return
ää 
m_bin
ää  
;
ää  !
}
ãã 
catch
åå 
(
åå 
	Exception
åå  
ex
åå! #
)
åå# $
{
çç 
FDebug
éé 
.
éé 
throwException
éé )
(
éé) *
ex
éé* ,
)
éé, -
;
éé- .
}
èè 
finally
êê 
{
ëë 
}
ìì 
return
îî 
null
îî 
;
îî 
}
ïï 
}
ññ 	
public
öö 
bool
öö 
isParseSuccess
öö "
{
õõ 	
get
úú 
{
ùù 
try
ûû 
{
üü 
return
†† 
m_isParseSuccess
†† +
;
††+ ,
}
°° 
catch
¢¢ 
(
¢¢ 
	Exception
¢¢  
ex
¢¢! #
)
¢¢# $
{
££ 
FDebug
§§ 
.
§§ 
throwException
§§ )
(
§§) *
ex
§§* ,
)
§§, -
;
§§- .
}
•• 
finally
¶¶ 
{
ßß 
}
©© 
return
™™ 
false
™™ 
;
™™ 
}
´´ 
}
¨¨ 	
public
∞∞ 
FXmlNode
∞∞ 
fXmlMsg
∞∞ 
{
±± 	
get
≤≤ 
{
≥≥ 
try
¥¥ 
{
µµ 
return
∂∂ 
	m_fXmlMsg
∂∂ $
;
∂∂$ %
}
∑∑ 
catch
∏∏ 
(
∏∏ 
	Exception
∏∏  
ex
∏∏! #
)
∏∏# $
{
ππ 
FDebug
∫∫ 
.
∫∫ 
throwException
∫∫ )
(
∫∫) *
ex
∫∫* ,
)
∫∫, -
;
∫∫- .
}
ªª 
finally
ºº 
{
ΩΩ 
}
øø 
return
¿¿ 
null
¿¿ 
;
¿¿ 
}
¡¡ 
}
¬¬ 	
public
   
void
   
init
   
(
   
)
ÀÀ 
{
ÃÃ 	
try
ÕÕ 
{
ŒŒ 
m_length
œœ 
=
œœ 
$num
œœ 
;
œœ 
m_bin
–– 
=
–– 
null
–– 
;
–– 
	m_fXmlMsg
—— 
=
—— 
null
——  
;
——  !
m_isParseSuccess
““  
=
““! "
false
““# (
;
““( )
}
”” 
catch
‘‘ 
(
‘‘ 
	Exception
‘‘ 
ex
‘‘ 
)
‘‘  
{
’’ 
FDebug
÷÷ 
.
÷÷ 
throwException
÷÷ %
(
÷÷% &
ex
÷÷& (
)
÷÷( )
;
÷÷) *
}
◊◊ 
finally
ÿÿ 
{
ŸŸ 
}
€€ 
}
‹‹ 	
public
‡‡ 
void
‡‡ 
clear
‡‡ 
(
‡‡ 
)
·· 
{
‚‚ 	
try
„„ 
{
‰‰ 
init
ÂÂ 
(
ÂÂ 
)
ÂÂ 
;
ÂÂ 
m_data
ÊÊ 
.
ÊÊ 
Clear
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ÁÁ 
catch
ËË 
(
ËË 
	Exception
ËË 
ex
ËË 
)
ËË  
{
ÈÈ 
FDebug
ÍÍ 
.
ÍÍ 
throwException
ÍÍ %
(
ÍÍ% &
ex
ÍÍ& (
)
ÍÍ( )
;
ÍÍ) *
}
ÎÎ 
finally
ÏÏ 
{
ÌÌ 
}
ÔÔ 
}
 	
public
ÙÙ 
void
ÙÙ 
input
ÙÙ 
(
ÙÙ 
byte
ıı 
[
ıı 
]
ıı 
data
ıı 
)
ˆˆ 
{
˜˜ 	
try
¯¯ 
{
˘˘ 
m_data
˙˙ 
.
˙˙ 
AddRange
˙˙ 
(
˙˙  
data
˙˙  $
)
˙˙$ %
;
˙˙% &
}
˚˚ 
catch
¸¸ 
(
¸¸ 
	Exception
¸¸ 
ex
¸¸ 
)
¸¸  
{
˝˝ 
FDebug
˛˛ 
.
˛˛ 
throwException
˛˛ %
(
˛˛% &
ex
˛˛& (
)
˛˛( )
;
˛˛) *
}
ˇˇ 
finally
ÄÄ 
{
ÅÅ 
}
ÉÉ 
}
ÑÑ 	
public
àà 
bool
àà 
parse
àà 
(
àà 
)
ââ 
{
ää 	
int
ãã 
etxPtr
ãã 
=
ãã 
$num
ãã 
;
ãã 
int
åå 
index
åå 
=
åå 
$num
åå 
;
åå 
try
éé 
{
èè 
if
êê 
(
êê 
m_data
êê 
.
êê 
Count
êê  
==
êê! #
$num
êê$ %
)
êê% &
{
ëë 
m_isCompleted
íí !
=
íí" #
true
íí$ (
;
íí( )
return
ìì 
false
ìì  
;
ìì  !
}
îî 
etxPtr
òò 
=
òò 
-
òò 
$num
òò 
;
òò 
while
ôô 
(
ôô 
index
ôô 
<
ôô 
m_data
ôô %
.
ôô% &
Count
ôô& +
)
ôô+ ,
{
öö 
etxPtr
õõ 
=
õõ 
m_data
õõ #
.
õõ# $
IndexOf
õõ$ +
(
õõ+ ,
(
õõ, -
byte
õõ- 1
)
õõ1 2
$num
õõ2 6
,
õõ6 7
index
õõ8 =
)
õõ= >
;
õõ> ?
if
úú 
(
úú 
etxPtr
úú 
==
úú !
-
úú" #
$num
úú# $
)
úú$ %
{
ùù 
break
ûû 
;
ûû 
}
üü 
if
°° 
(
°° 
etxPtr
°° 
+
°°  
$num
°°! "
<
°°# $
m_data
°°% +
.
°°+ ,
Count
°°, 1
&&
°°2 4
(
°°5 6
byte
°°6 :
)
°°: ;
m_data
°°; A
[
°°A B
etxPtr
°°B H
+
°°I J
$num
°°K L
]
°°L M
==
°°N P
$num
°°Q U
)
°°U V
{
¢¢ 
break
££ 
;
££ 
}
§§ 
index
•• 
=
•• 
etxPtr
•• "
+
••# $
$num
••% &
;
••& '
}
¶¶ 
if
®® 
(
®® 
etxPtr
®® 
==
®® 
-
®® 
$num
®®  
)
®®  !
{
©© 
m_isCompleted
™™ !
=
™™" #
false
™™$ )
;
™™) *
return
´´ 
false
´´  
;
´´  !
}
¨¨ 
m_length
¥¥ 
=
¥¥ 
(
¥¥ 
UInt32
¥¥ "
)
¥¥" #
etxPtr
¥¥# )
+
¥¥* +
$num
¥¥, -
;
¥¥- .
m_bin
µµ 
=
µµ 
m_data
µµ 
.
µµ 
GetRange
µµ '
(
µµ' (
$num
µµ( )
,
µµ) *
etxPtr
µµ+ 1
)
µµ1 2
.
µµ2 3
ToArray
µµ3 :
(
µµ: ;
)
µµ; <
;
µµ< =
m_data
ºº 
.
ºº 
RemoveRange
ºº "
(
ºº" #
$num
ºº# $
,
ºº$ %
etxPtr
ºº& ,
+
ºº- .
$num
ºº/ 0
)
ºº0 1
;
ºº1 2
m_isCompleted
ΩΩ 
=
ΩΩ 
true
ΩΩ  $
;
ΩΩ$ %
return
ææ 
true
ææ 
;
ææ 
}
øø 
catch
¿¿ 
(
¿¿ 
	Exception
¿¿ 
ex
¿¿ 
)
¿¿  
{
¡¡ 
FDebug
¬¬ 
.
¬¬ 
throwException
¬¬ %
(
¬¬% &
ex
¬¬& (
)
¬¬( )
;
¬¬) *
}
√√ 
finally
ƒƒ 
{
≈≈ 
}
«« 
return
»» 
false
»» 
;
»» 
}
…… 	
}
œœ 
}–– Ÿ»
D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Protocol\Socket\c_FTcpActive.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
internal 
class 

FTcpActive 
: 
FBaseTcp '
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 

FTcpClient 
m_fTcpClient '
=( )
null* .
;. /
private 
	FCodeLock 
m_fMainSync %
=& '
null( ,
;, -
private 
FThread 

m_fThdMain "
=# $
null% )
;) *
public!! 

FTcpActive!! 
(!! 
FSerialToEthernet"" 
fSerialToTcp"" *
)## 
:$$ 
base$$ 
($$ 
fSerialToTcp$$ 
)$$  
{%% 	
init&& 
(&& 
)&& 
;&& 
}'' 	
~++ 	

FTcpActive++	 
(++ 
),, 
{-- 	
	myDispose.. 
(.. 
false.. 
).. 
;.. 
}// 	
	protected33 
override33 
void33 
	myDispose33  )
(33) *
bool44 
	disposing44 
)55 
{66 	
if77 
(77 
!77 

m_disposed77 
)77 
{88 
if99 
(99 
	disposing99 
)99 
{:: 
term;; 
(;; 
);; 
;;; 
}<< 
base@@ 
.@@ 
	myDispose@@ 
(@@ 
	disposing@@ (
)@@( )
;@@) *
}AA 
}BB 	
publicJJ 
voidJJ 
DisposeJJ 
(JJ 
)KK 
{LL 	
	myDisposeMM 
(MM 
trueMM 
)MM 
;MM 
GCNN 
.NN 
SuppressFinalizeNN 
(NN  
thisNN  $
)NN$ %
;NN% &
}OO 	
private]] 
void]] 
init]] 
(]] 
)^^ 
{__ 	
try`` 
{aa 
m_fMainSyncbb 
=bb 
newbb !
	FCodeLockbb" +
(bb+ ,
)bb, -
;bb- .

m_fThdMaincc 
=cc 
newcc  
FThreadcc! (
(cc( )
$strcc) ?
)cc? @
;cc@ A

m_fThdMaindd 
.dd 
ThreadJobCalleddd *
+=dd+ -
newdd. 1(
FThreadJobCalledEventHandlerdd2 N
(ddN O&
m_fThdMain_ThreadJobCalledddO i
)ddi j
;ddj k

m_fThdMainee 
.ee 
startee  
(ee  !
)ee! "
;ee" #
}ff 
catchgg 
(gg 
	Exceptiongg 
exgg 
)gg  
{hh 
FDebugii 
.ii 
throwExceptionii %
(ii% &
exii& (
)ii( )
;ii) *
}jj 
finallykk 
{ll 
}nn 
}oo 	
privatess 
voidss 
termss 
(ss 
)tt 
{uu 	
tryvv 
{ww 
ifxx 
(xx 

m_fThdMainxx 
!=xx !
nullxx" &
)xx& '
{yy 

m_fThdMainzz 
.zz 
stopzz #
(zz# $
)zz$ %
;zz% &

m_fThdMain{{ 
.{{ 
Dispose{{ &
({{& '
){{' (
;{{( )

m_fThdMain|| 
.|| 
ThreadJobCalled|| .
-=||/ 1
new||2 5(
FThreadJobCalledEventHandler||6 R
(||R S&
m_fThdMain_ThreadJobCalled||S m
)||m n
;||n o

m_fThdMain}} 
=}}  
null}}! %
;}}% &
}~~ 
if
ÇÇ 
(
ÇÇ 
m_fTcpClient
ÇÇ  
!=
ÇÇ! #
null
ÇÇ$ (
)
ÇÇ( )
{
ÉÉ 
m_fTcpClient
ÑÑ  
.
ÑÑ  !
close
ÑÑ! &
(
ÑÑ& '
)
ÑÑ' (
;
ÑÑ( )
m_fTcpClient
ÖÖ  
.
ÖÖ  !
Dispose
ÖÖ! (
(
ÖÖ( )
)
ÖÖ) *
;
ÖÖ* +
m_fTcpClient
áá  
.
áá  !#
TcpClientStateChanged
áá! 6
-=
áá7 9
new
áá: =0
"FTcpClientStateChangedEventHandler
áá> `
(
áá` a1
"m_fTcpClient_TcpClientStateChangedááa É
)ááÉ Ñ
;ááÑ Ö
m_fTcpClient
àà  
.
àà  !
TcpClientDataSent
àà! 2
-=
àà3 5
new
àà6 9,
FTcpClientDataSentEventHandler
àà: X
(
ààX Y,
m_fTcpClient_TcpClientDataSent
ààY w
)
ààw x
;
ààx y
m_fTcpClient
ââ  
.
ââ  !%
TcpClientDataSendFailed
ââ! 8
-=
ââ9 ;
new
ââ< ?2
$FTcpClientDataSendFailedEventHandler
ââ@ d
(
ââd e3
$m_fTcpClient_TcpClientDataSendFailedââe â
)âââ ä
;ââä ã
m_fTcpClient
ää  
.
ää  !"
TcpClientErrorRaised
ää! 5
-=
ää6 8
new
ää9 </
!FTcpClientErrorRaisedEventHandler
ää= ^
(
ää^ _0
!m_fTcpClient_TcpClientErrorRaisedää_ Ä
)ääÄ Å
;ääÅ Ç
m_fTcpClient
åå  
=
åå! "
null
åå# '
;
åå' (
}
çç 
if
ëë 
(
ëë 
m_fMainSync
ëë 
!=
ëë  "
null
ëë# '
)
ëë' (
{
íí 
m_fMainSync
ìì 
.
ìì  
Dispose
ìì  '
(
ìì' (
)
ìì( )
;
ìì) *
m_fMainSync
îî 
=
îî  !
null
îî" &
;
îî& '
}
ïï 
}
ññ 
catch
óó 
(
óó 
	Exception
óó 
ex
óó 
)
óó  
{
òò 
FDebug
ôô 
.
ôô 
throwException
ôô %
(
ôô% &
ex
ôô& (
)
ôô( )
;
ôô) *
}
öö 
finally
õõ 
{
úú 
}
ûû 
}
üü 	
public
££ 
override
££ 
void
££ 
open
££ !
(
££! "
)
§§ 
{
•• 	
try
¶¶ 
{
ßß 
m_fTcpClient
®® 
=
®® 
new
®® "

FTcpClient
®®# -
(
®®- .
this
©© 
.
©© 
fSerialToEthernet
©© )
.
©©) *
fSocketConfig
©©* 7
.
©©7 8
localIp
©©8 ?
,
©©? @
this
™™ 
.
™™ 
fSerialToEthernet
™™ )
.
™™) *
fSocketConfig
™™* 7
.
™™7 8
remoteIp
™™8 @
,
™™@ A
this
´´ 
.
´´ 
fSerialToEthernet
´´ )
.
´´) *
fSocketConfig
´´* 7
.
´´7 8

remotePort
´´8 B
)
¨¨ 
;
¨¨ 
m_fTcpClient
≠≠ 
.
≠≠  
retryConnectPeriod
≠≠ /
=
≠≠0 1
this
≠≠2 6
.
≠≠6 7
fSerialToEthernet
≠≠7 H
.
≠≠H I
fSocketConfig
≠≠I V
.
≠≠V W 
retryConnectPeriod
≠≠W i
*
≠≠j k
$num
≠≠l p
;
≠≠p q
m_fTcpClient
ØØ 
.
ØØ #
TcpClientStateChanged
ØØ 2
+=
ØØ3 5
new
ØØ6 90
"FTcpClientStateChangedEventHandler
ØØ: \
(
ØØ\ ]0
"m_fTcpClient_TcpClientStateChanged
ØØ] 
)ØØ Ä
;ØØÄ Å
m_fTcpClient
∞∞ 
.
∞∞ 
TcpClientDataSent
∞∞ .
+=
∞∞/ 1
new
∞∞2 5,
FTcpClientDataSentEventHandler
∞∞6 T
(
∞∞T U,
m_fTcpClient_TcpClientDataSent
∞∞U s
)
∞∞s t
;
∞∞t u
m_fTcpClient
±± 
.
±± %
TcpClientDataSendFailed
±± 4
+=
±±5 7
new
±±8 ;2
$FTcpClientDataSendFailedEventHandler
±±< `
(
±±` a3
$m_fTcpClient_TcpClientDataSendFailed±±a Ö
)±±Ö Ü
;±±Ü á
m_fTcpClient
≤≤ 
.
≤≤ "
TcpClientErrorRaised
≤≤ 1
+=
≤≤2 4
new
≤≤5 8/
!FTcpClientErrorRaisedEventHandler
≤≤9 Z
(
≤≤Z [/
!m_fTcpClient_TcpClientErrorRaised
≤≤[ |
)
≤≤| }
;
≤≤} ~
m_fTcpClient
¥¥ 
.
¥¥ 
connect
¥¥ $
(
¥¥$ %
)
¥¥% &
;
¥¥& '
}
µµ 
catch
∂∂ 
(
∂∂ 
	Exception
∂∂ 
ex
∂∂ 
)
∂∂  
{
∑∑ 
FDebug
∏∏ 
.
∏∏ 
throwException
∏∏ %
(
∏∏% &
ex
∏∏& (
)
∏∏( )
;
∏∏) *
}
ππ 
finally
∫∫ 
{
ªª 
}
ΩΩ 
}
ææ 	
public
¬¬ 
override
¬¬ 
void
¬¬ 
close
¬¬ "
(
¬¬" #
)
√√ 
{
ƒƒ 	
try
≈≈ 
{
∆∆ 
if
«« 
(
«« 
m_fTcpClient
««  
==
««! #
null
««$ (
)
««( )
{
»» 
return
…… 
;
…… 
}
   
if
ŒŒ 
(
ŒŒ 
m_fTcpClient
œœ  
.
œœ  !
fState
œœ! '
==
œœ( *
FTcpClientState
œœ+ :
.
œœ: ;
	Connected
œœ; D
&&
œœE G
this
–– 
.
–– 
fSerialToEthernet
–– *
.
––* +
fSocketState
––+ 7
==
––8 :!
FCommunicationState
––; N
.
––N O
	Connected
––O X
)
—— 
{
““ 
while
”” 
(
”” 
this
”” 
.
””  
fSerialToEthernet
””  1
.
””1 2
fEventPusher
””2 >
.
””> ?
tcpEventCount
””? L
>
””M N
$num
””O P
||
””Q S
!
””T U
m_fTcpClient
””U a
.
””a b
sendCompleted
””b o
)
””o p
{
‘‘ 
if
’’ 
(
’’ 
System
’’ "
.
’’" #
Windows
’’# *
.
’’* +
Forms
’’+ 0
.
’’0 1
Application
’’1 <
.
’’< =
MessageLoop
’’= H
)
’’H I
{
÷÷ 
System
◊◊ "
.
◊◊" #
Windows
◊◊# *
.
◊◊* +
Forms
◊◊+ 0
.
◊◊0 1
Application
◊◊1 <
.
◊◊< =
DoEvents
◊◊= E
(
◊◊E F
)
◊◊F G
;
◊◊G H
}
ÿÿ 
System
ŸŸ 
.
ŸŸ 
	Threading
ŸŸ (
.
ŸŸ( )
Thread
ŸŸ) /
.
ŸŸ/ 0
Sleep
ŸŸ0 5
(
ŸŸ5 6
$num
ŸŸ6 7
)
ŸŸ7 8
;
ŸŸ8 9
}
⁄⁄ 
}
€€ 
m_fTcpClient
ﬂﬂ 
.
ﬂﬂ 
close
ﬂﬂ "
(
ﬂﬂ" #
)
ﬂﬂ# $
;
ﬂﬂ$ %
m_fTcpClient
‡‡ 
.
‡‡ 
Dispose
‡‡ $
(
‡‡$ %
)
‡‡% &
;
‡‡& '
m_fTcpClient
‚‚ 
.
‚‚ #
TcpClientStateChanged
‚‚ 2
-=
‚‚3 5
new
‚‚6 90
"FTcpClientStateChangedEventHandler
‚‚: \
(
‚‚\ ]0
"m_fTcpClient_TcpClientStateChanged
‚‚] 
)‚‚ Ä
;‚‚Ä Å
m_fTcpClient
„„ 
.
„„ 
TcpClientDataSent
„„ .
-=
„„/ 1
new
„„2 5,
FTcpClientDataSentEventHandler
„„6 T
(
„„T U,
m_fTcpClient_TcpClientDataSent
„„U s
)
„„s t
;
„„t u
m_fTcpClient
‰‰ 
.
‰‰ %
TcpClientDataSendFailed
‰‰ 4
-=
‰‰5 7
new
‰‰8 ;2
$FTcpClientDataSendFailedEventHandler
‰‰< `
(
‰‰` a3
$m_fTcpClient_TcpClientDataSendFailed‰‰a Ö
)‰‰Ö Ü
;‰‰Ü á
m_fTcpClient
ÂÂ 
.
ÂÂ "
TcpClientErrorRaised
ÂÂ 1
-=
ÂÂ2 4
new
ÂÂ5 8/
!FTcpClientErrorRaisedEventHandler
ÂÂ9 Z
(
ÂÂZ [/
!m_fTcpClient_TcpClientErrorRaised
ÂÂ[ |
)
ÂÂ| }
;
ÂÂ} ~
m_fTcpClient
ÁÁ 
=
ÁÁ 
null
ÁÁ #
;
ÁÁ# $
}
ËË 
catch
ÈÈ 
(
ÈÈ 
	Exception
ÈÈ 
ex
ÈÈ 
)
ÈÈ  
{
ÍÍ 
FDebug
ÎÎ 
.
ÎÎ 
throwException
ÎÎ %
(
ÎÎ% &
ex
ÎÎ& (
)
ÎÎ( )
;
ÎÎ) *
}
ÏÏ 
finally
ÌÌ 
{
ÓÓ 
}
 
}
ÒÒ 	
public
ıı 
override
ıı 
void
ıı 
send
ıı !
(
ıı! "
FSocketSendData
ˆˆ 
fSocketSendData
ˆˆ +
)
˜˜ 
{
¯¯ 	
try
˘˘ 
{
˙˙ 
sendData
˚˚ 
(
˚˚ 
fSocketSendData
˚˚ (
)
˚˚( )
;
˚˚) *
}
¸¸ 
catch
˝˝ 
(
˝˝ 
	Exception
˝˝ 
ex
˝˝ 
)
˝˝  
{
˛˛ 
FDebug
ˇˇ 
.
ˇˇ 
throwException
ˇˇ %
(
ˇˇ% &
ex
ˇˇ& (
)
ˇˇ( )
;
ˇˇ) *
}
ÄÄ 
finally
ÅÅ 
{
ÇÇ 
}
ÑÑ 
}
ÖÖ 	
private
ââ 
void
ââ 
sendData
ââ 
(
ââ 
FSocketSendData
ää 
fSocketSendData
ää +
)
ãã 
{
åå 	
try
çç 
{
éé 
m_fTcpClient
èè 
.
èè 
send
èè !
(
èè! "
fSocketSendData
èè" 1
)
èè1 2
;
èè2 3
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë 
ex
ëë 
)
ëë  
{
íí  
procTcpErrorRaised
ìì "
(
ìì" #
ex
ìì# %
)
ìì% &
;
ìì& '
}
îî 
finally
ïï 
{
ññ 
}
òò 
}
ôô 	
private
ùù 
void
ùù  
procTcpErrorRaised
ùù '
(
ùù' (
	Exception
ûû 
inEx
ûû 
)
üü 
{
†† 	
try
°° 
{
¢¢ 
FDebug
££ 
.
££ 
writeLog
££ 
(
££  
inEx
££  $
)
££$ %
;
££% &
this
•• 
.
•• 
fSerialToEthernet
•• &
.
••& '
fEventPusher
••' 3
.
••3 4
pushTcpEvent
••4 @
(
••@ A
new
¶¶ )
FSocketErrorRaisedEventArgs
¶¶ 3
(
¶¶3 4
this
¶¶4 8
.
¶¶8 9
fSerialToEthernet
¶¶9 J
,
¶¶J K
FEventId
¶¶L T
.
¶¶T U
SocketErrorRaised
¶¶U f
,
¶¶f g
inEx
¶¶h l
.
¶¶l m
Message
¶¶m t
)
¶¶t u
)
ßß 
;
ßß 
}
®® 
catch
©© 
(
©© 
	Exception
©© 
ex
©© 
)
©©  
{
™™ 
FDebug
´´ 
.
´´ 
writeLog
´´ 
(
´´  
ex
´´  "
)
´´" #
;
´´# $
}
¨¨ 
finally
≠≠ 
{
ÆÆ 
}
∞∞ 
}
±± 	
private
ππ 
void
ππ (
m_fThdMain_ThreadJobCalled
ππ /
(
ππ/ 0
object
∫∫ 
sender
∫∫ 
,
∫∫ 
FThreadEventArgs
ªª 
e
ªª 
)
ºº 
{
ΩΩ 	
bool
ææ 
waited
ææ 
=
ææ 
false
ææ 
;
ææ  
try
¿¿ 
{
¡¡ 
waited
¬¬ 
=
¬¬ 
m_fMainSync
¬¬ $
.
¬¬$ %
tryWait
¬¬% ,
(
¬¬, -
$num
¬¬- .
)
¬¬. /
;
¬¬/ 0
if
√√ 
(
√√ 
!
√√ 
waited
√√ 
)
√√ 
{
ƒƒ 
return
≈≈ 
;
≈≈ 
}
∆∆ 
if
   
(
   
m_fTcpClient
ÀÀ  
==
ÀÀ! #
null
ÀÀ$ (
||
ÀÀ) +
m_fTcpClient
ÃÃ  
.
ÃÃ  !
fState
ÃÃ! '
!=
ÃÃ( *
FTcpClientState
ÃÃ+ :
.
ÃÃ: ;
	Connected
ÃÃ; D
||
ÃÃE G
this
ÕÕ 
.
ÕÕ 
fSerialToEthernet
ÕÕ *
.
ÕÕ* +
fSocketState
ÕÕ+ 7
!=
ÕÕ8 :!
FCommunicationState
ÕÕ; N
.
ÕÕN O
	Connected
ÕÕO X
)
ŒŒ 
{
œœ 
e
–– 
.
–– 
sleepThread
–– !
(
––! "
$num
––" #
)
––# $
;
––$ %
return
—— 
;
—— 
}
““ 
e
÷÷ 
.
÷÷ 
sleepThread
÷÷ 
(
÷÷ 
$num
÷÷ 
)
÷÷  
;
÷÷  !
}
◊◊ 
catch
ÿÿ 
(
ÿÿ 
	Exception
ÿÿ 
ex
ÿÿ 
)
ÿÿ  
{
ŸŸ  
procTcpErrorRaised
⁄⁄ "
(
⁄⁄" #
ex
⁄⁄# %
)
⁄⁄% &
;
⁄⁄& '
}
€€ 
finally
‹‹ 
{
›› 
if
ﬁﬁ 
(
ﬁﬁ 
waited
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
m_fMainSync
‡‡ 
.
‡‡  
set
‡‡  #
(
‡‡# $
)
‡‡$ %
;
‡‡% &
}
·· 
}
‚‚ 
}
„„ 	
private
ÎÎ 
void
ÎÎ 0
"m_fTcpClient_TcpClientStateChanged
ÎÎ 7
(
ÎÎ7 8
object
ÏÏ 
sender
ÏÏ 
,
ÏÏ -
FTcpClientStateChangedEventArgs
ÌÌ +
e
ÌÌ, -
)
ÓÓ 
{
ÔÔ 	
try
 
{
ÒÒ 
m_fMainSync
ÚÚ 
.
ÚÚ 
wait
ÚÚ  
(
ÚÚ  !
)
ÚÚ! "
;
ÚÚ" #
this
ˆˆ 
.
ˆˆ 
localIp
ˆˆ 
=
ˆˆ 
e
ˆˆ  
.
ˆˆ  !
localIp
ˆˆ! (
;
ˆˆ( )
this
˜˜ 
.
˜˜ 
	localPort
˜˜ 
=
˜˜  
e
˜˜! "
.
˜˜" #
	localPort
˜˜# ,
;
˜˜, -
this
¯¯ 
.
¯¯ 
remoteIp
¯¯ 
=
¯¯ 
e
¯¯  !
.
¯¯! "
remoteIp
¯¯" *
;
¯¯* +
this
˘˘ 
.
˘˘ 

remotePort
˘˘ 
=
˘˘  !
e
˘˘" #
.
˘˘# $

remotePort
˘˘$ .
;
˘˘. /
if
˝˝ 
(
˝˝ 
e
˝˝ 
.
˝˝ 
fState
˝˝ 
==
˝˝ 
FTcpClientState
˝˝  /
.
˝˝/ 0
Opened
˝˝0 6
)
˝˝6 7
{
˛˛ 
this
ˇˇ 
.
ˇˇ 
fSerialToEthernet
ˇˇ *
.
ˇˇ* +
changeTcpState
ˇˇ+ 9
(
ˇˇ9 :!
FCommunicationState
ˇˇ: M
.
ˇˇM N
Opened
ˇˇN T
,
ˇˇT U
FConnectMode
ˇˇV b
.
ˇˇb c
Active
ˇˇc i
,
ˇˇi j
this
ˇˇk o
.
ˇˇo p
localIp
ˇˇp w
,
ˇˇw x
this
ˇˇy }
.
ˇˇ} ~
	localPortˇˇ~ á
,ˇˇá à
thisˇˇâ ç
.ˇˇç é
remoteIpˇˇé ñ
,ˇˇñ ó
thisˇˇò ú
.ˇˇú ù

remotePortˇˇù ß
)ˇˇß ®
;ˇˇ® ©
}
ÄÄ 
else
ÅÅ 
if
ÅÅ 
(
ÅÅ 
e
ÅÅ 
.
ÅÅ 
fState
ÅÅ !
==
ÅÅ" $
FTcpClientState
ÅÅ% 4
.
ÅÅ4 5
	Connected
ÅÅ5 >
)
ÅÅ> ?
{
ÇÇ 
this
ÉÉ 
.
ÉÉ 
fSerialToEthernet
ÉÉ *
.
ÉÉ* +
changeTcpState
ÉÉ+ 9
(
ÉÉ9 :!
FCommunicationState
ÉÉ: M
.
ÉÉM N
	Connected
ÉÉN W
,
ÉÉW X
FConnectMode
ÉÉY e
.
ÉÉe f
Active
ÉÉf l
,
ÉÉl m
this
ÉÉn r
.
ÉÉr s
localIp
ÉÉs z
,
ÉÉz {
thisÉÉ| Ä
.ÉÉÄ Å
	localPortÉÉÅ ä
,ÉÉä ã
thisÉÉå ê
.ÉÉê ë
remoteIpÉÉë ô
,ÉÉô ö
thisÉÉõ ü
.ÉÉü †

remotePortÉÉ† ™
)ÉÉ™ ´
;ÉÉ´ ¨
}
ÑÑ 
else
ÖÖ 
if
ÖÖ 
(
ÖÖ 
e
ÖÖ 
.
ÖÖ 
fState
ÖÖ !
==
ÖÖ" $
FTcpClientState
ÖÖ% 4
.
ÖÖ4 5
Closed
ÖÖ5 ;
)
ÖÖ; <
{
ÜÜ 
this
áá 
.
áá 
fSerialToEthernet
áá *
.
áá* +
changeTcpState
áá+ 9
(
áá9 :!
FCommunicationState
áá: M
.
ááM N
Closed
ááN T
,
ááT U
FConnectMode
ááV b
.
ááb c
Active
áác i
,
áái j
this
áák o
.
ááo p
localIp
ááp w
,
ááw x
this
ááy }
.
áá} ~
	localPortáá~ á
,ááá à
thisááâ ç
.ááç é
remoteIpááé ñ
,ááñ ó
thisááò ú
.ááú ù

remotePortááù ß
)ááß ®
;áá® ©
}
àà 
}
ââ 
catch
ää 
(
ää 
	Exception
ää 
ex
ää 
)
ää  
{
ãã  
procTcpErrorRaised
åå "
(
åå" #
ex
åå# %
)
åå% &
;
åå& '
}
çç 
finally
éé 
{
èè 
m_fMainSync
êê 
.
êê 
set
êê 
(
êê  
)
êê  !
;
êê! "
}
ëë 
}
íí 	
private
ññ 
void
ññ ,
m_fTcpClient_TcpClientDataSent
ññ 3
(
ññ3 4
object
óó 
sender
óó 
,
óó )
FTcpClientDataSentEventArgs
òò '
e
òò( )
)
ôô 
{
öö 	
try
õõ 
{
úú 
m_fMainSync
ùù 
.
ùù 
wait
ùù  
(
ùù  !
)
ùù! "
;
ùù" #
this
°° 
.
°° 
fSerialToEthernet
°° &
.
°°& '
fEventPusher
°°' 3
.
°°3 4
pushTcpEvent
°°4 @
(
°°@ A
new
¢¢ &
FSocketDataSentEventArgs
¢¢ 0
(
¢¢0 1
this
¢¢1 5
.
¢¢5 6
fSerialToEthernet
¢¢6 G
,
¢¢G H
FEventId
¢¢I Q
.
¢¢Q R
SocketDataSent
¢¢R `
,
¢¢` a
FResultCode
¢¢b m
.
¢¢m n
Success
¢¢n u
,
¢¢u v
string
¢¢w }
.
¢¢} ~
Empty¢¢~ É
,¢¢É Ñ
e¢¢Ö Ü
.¢¢Ü á
fData¢¢á å
)¢¢å ç
)
££ 
;
££ 
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
ex
•• 
)
••  
{
¶¶  
procTcpErrorRaised
ßß "
(
ßß" #
ex
ßß# %
)
ßß% &
;
ßß& '
}
®® 
finally
©© 
{
™™ 
m_fMainSync
´´ 
.
´´ 
set
´´ 
(
´´  
)
´´  !
;
´´! "
}
¨¨ 
}
≠≠ 	
private
±± 
void
±± 2
$m_fTcpClient_TcpClientDataSendFailed
±± 9
(
±±9 :
object
≤≤ 
sender
≤≤ 
,
≤≤ /
!FTcpClientDataSendFailedEventArgs
≥≥ -
e
≥≥. /
)
¥¥ 
{
µµ 	
try
∂∂ 
{
∑∑ 
m_fMainSync
∏∏ 
.
∏∏ 
wait
∏∏  
(
∏∏  !
)
∏∏! "
;
∏∏" #
this
ºº 
.
ºº 
fSerialToEthernet
ºº &
.
ºº& '
fEventPusher
ºº' 3
.
ºº3 4
pushTcpEvent
ºº4 @
(
ºº@ A
new
ΩΩ &
FSocketDataSentEventArgs
ΩΩ 0
(
ΩΩ0 1
this
ΩΩ1 5
.
ΩΩ5 6
fSerialToEthernet
ΩΩ6 G
,
ΩΩG H
FEventId
ΩΩI Q
.
ΩΩQ R"
SocketDataSendFailed
ΩΩR f
,
ΩΩf g
FResultCode
ΩΩh s
.
ΩΩs t
Error
ΩΩt y
,
ΩΩy z
e
ΩΩ{ |
.
ΩΩ| }
messageΩΩ} Ñ
,ΩΩÑ Ö
eΩΩÜ á
.ΩΩá à
fDataΩΩà ç
)ΩΩç é
)
ææ 
;
ææ 
}
øø 
catch
¿¿ 
(
¿¿ 
	Exception
¿¿ 
ex
¿¿ 
)
¿¿  
{
¡¡  
procTcpErrorRaised
¬¬ "
(
¬¬" #
ex
¬¬# %
)
¬¬% &
;
¬¬& '
}
√√ 
finally
ƒƒ 
{
≈≈ 
m_fMainSync
∆∆ 
.
∆∆ 
set
∆∆ 
(
∆∆  
)
∆∆  !
;
∆∆! "
}
«« 
}
»» 	
private
ÃÃ 
void
ÃÃ /
!m_fTcpClient_TcpClientErrorRaised
ÃÃ 6
(
ÃÃ6 7
object
ÕÕ 
sender
ÕÕ 
,
ÕÕ ,
FTcpClientErrorRaisedEventArgs
ŒŒ *
e
ŒŒ+ ,
)
œœ 
{
–– 	
try
—— 
{
““  
procTcpErrorRaised
”” "
(
””" #
e
””# $
.
””$ %
	exception
””% .
)
””. /
;
””/ 0
}
‘‘ 
catch
’’ 
(
’’ 
	Exception
’’ 
ex
’’ 
)
’’  
{
÷÷  
procTcpErrorRaised
◊◊ "
(
◊◊" #
ex
◊◊# %
)
◊◊% &
;
◊◊& '
}
ÿÿ 
finally
ŸŸ 
{
⁄⁄ 
}
‹‹ 
}
›› 	
}
„„ 
}‰‰ £ó
ÄD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Protocol\Socket\c_FTcpPassive.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
internal 
class 
FTcpPassive 
:  
FBaseTcp! )
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FTcpRecvBuffer 

m_fRecvBuf )
=* +
null, 0
;0 1
private 
FTcpListener 
m_fTcpListener +
=, -
null. 2
;2 3
private 

FTcpClient 
m_fTcpClient '
=( )
null* .
;. /
private 
	FCodeLock 
m_fMainSync %
=& '
null( ,
;, -
public## 
FTcpPassive## 
(## 
FSerialToEthernet$$ 
fSerialToTcp$$ *
)%% 
:&& 
base&& 
(&& 
fSerialToTcp&& 
)&&  
{'' 	
init(( 
((( 
)(( 
;(( 
})) 	
~-- 	
FTcpPassive--	 
(-- 
).. 
{// 	
	myDispose00 
(00 
false00 
)00 
;00 
}11 	
	protected55 
override55 
void55 
	myDispose55  )
(55) *
bool66 
	disposing66 
)77 
{88 	
if99 
(99 
!99 

m_disposed99 
)99 
{:: 
if;; 
(;; 
	disposing;; 
);; 
{<< 
term== 
(== 
)== 
;== 
}>> 

m_disposed?? 
=?? 
true?? !
;??! "
baseCC 
.CC 
	myDisposeCC 
(CC 
	disposingCC (
)CC( )
;CC) *
}DD 
}EE 	
publicMM 
voidMM 
DisposeMM 
(MM 
)NN 
{OO 	
	myDisposePP 
(PP 
truePP 
)PP 
;PP 
GCQQ 
.QQ 
SuppressFinalizeQQ 
(QQ  
thisQQ  $
)QQ$ %
;QQ% &
}RR 	
private`` 
void`` 
init`` 
(`` 
)aa 
{bb 	
trycc 
{dd 

m_fRecvBufee 
=ee 
newee  
FTcpRecvBufferee! /
(ee/ 0
)ee0 1
;ee1 2
m_fMainSyncii 
=ii 
newii !
	FCodeLockii" +
(ii+ ,
)ii, -
;ii- .
}mm 
catchnn 
(nn 
	Exceptionnn 
exnn 
)nn  
{oo 
FDebugpp 
.pp 
throwExceptionpp %
(pp% &
expp& (
)pp( )
;pp) *
}qq 
finallyrr 
{ss 
}uu 
}vv 	
privatezz 
voidzz 
termzz 
(zz 
){{ 
{|| 	
try}} 
{~~ 
if
áá 
(
áá 
m_fTcpListener
áá "
!=
áá# %
null
áá& *
)
áá* +
{
àà 
m_fTcpListener
ââ "
.
ââ" #
stop
ââ# '
(
ââ' (
)
ââ( )
;
ââ) *
m_fTcpListener
ää "
.
ää" #
Dispose
ää# *
(
ää* +
)
ää+ ,
;
ää, -
m_fTcpListener
åå "
.
åå" #(
TcpListenerAcceptCompleted
åå# =
-=
åå> @
new
ååA D5
'FTcpListenerAcceptCompletedEventHandler
ååE l
(
åål m8
)m_fTcpListener_TcpListenerAcceptCompletedååm ñ
)ååñ ó
;ååó ò
m_fTcpListener
çç "
.
çç" #$
TcpListenerErrorRaised
çç# 9
-=
çç: <
new
çç= @1
#FTcpListenerErrorRaisedEventHandler
ççA d
(
ççd e4
%m_fTcpListener_TcpListenerErrorRaisedççe ä
)ççä ã
;ççã å
m_fTcpListener
èè "
=
èè# $
null
èè% )
;
èè) *
}
êê 
if
íí 
(
íí 
m_fTcpClient
íí  
!=
íí! #
null
íí$ (
)
íí( )
{
ìì 
m_fTcpClient
îî  
.
îî  !
close
îî! &
(
îî& '
)
îî' (
;
îî( )
m_fTcpClient
ïï  
.
ïï  !
Dispose
ïï! (
(
ïï( )
)
ïï) *
;
ïï* +
m_fTcpClient
óó  
.
óó  !#
TcpClientStateChanged
óó! 6
-=
óó7 9
new
óó: =0
"FTcpClientStateChangedEventHandler
óó> `
(
óó` a1
"m_fTcpClient_TcpClientStateChangedóóa É
)óóÉ Ñ
;óóÑ Ö
m_fTcpClient
òò  
.
òò  !#
TcpClientDataReceived
òò! 6
-=
òò7 9
new
òò: =0
"FTcpClientDataReceivedEventHandler
òò> `
(
òò` a1
"m_fTcpClient_TcpClientDataReceivedòòa É
)òòÉ Ñ
;òòÑ Ö
m_fTcpClient
ôô  
.
ôô  !
TcpClientDataSent
ôô! 2
-=
ôô3 5
new
ôô6 9,
FTcpClientDataSentEventHandler
ôô: X
(
ôôX Y,
m_fTcpClient_TcpClientDataSent
ôôY w
)
ôôw x
;
ôôx y
m_fTcpClient
öö  
.
öö  !%
TcpClientDataSendFailed
öö! 8
-=
öö9 ;
new
öö< ?2
$FTcpClientDataSendFailedEventHandler
öö@ d
(
ööd e3
$m_fTcpClient_TcpClientDataSendFailedööe â
)ööâ ä
;ööä ã
m_fTcpClient
õõ  
.
õõ  !"
TcpClientErrorRaised
õõ! 5
-=
õõ6 8
new
õõ9 </
!FTcpClientErrorRaisedEventHandler
õõ= ^
(
õõ^ _0
!m_fTcpClient_TcpClientErrorRaisedõõ_ Ä
)õõÄ Å
;õõÅ Ç
m_fTcpClient
ùù  
=
ùù! "
null
ùù# '
;
ùù' (
}
ûû 
if
¢¢ 
(
¢¢ 

m_fRecvBuf
¢¢ 
!=
¢¢ !
null
¢¢" &
)
¢¢& '
{
££ 

m_fRecvBuf
§§ 
.
§§ 
Dispose
§§ &
(
§§& '
)
§§' (
;
§§( )

m_fRecvBuf
•• 
=
••  
null
••! %
;
••% &
}
¶¶ 
if
®® 
(
®® 
m_fMainSync
®® 
!=
®®  "
null
®®# '
)
®®' (
{
©© 
m_fMainSync
™™ 
.
™™  
Dispose
™™  '
(
™™' (
)
™™( )
;
™™) *
m_fMainSync
´´ 
=
´´  !
null
´´" &
;
´´& '
}
¨¨ 
}
≠≠ 
catch
ÆÆ 
(
ÆÆ 
	Exception
ÆÆ 
ex
ÆÆ 
)
ÆÆ  
{
ØØ 
FDebug
∞∞ 
.
∞∞ 
throwException
∞∞ %
(
∞∞% &
ex
∞∞& (
)
∞∞( )
;
∞∞) *
}
±± 
finally
≤≤ 
{
≥≥ 
}
µµ 
}
∂∂ 	
private
∫∫ 
void
∫∫ 
sendData
∫∫ 
(
∫∫ 
FSocketSendData
ªª 
fSocketSendData
ªª +
)
ºº 
{
ΩΩ 	
try
ææ 
{
øø 
m_fTcpClient
¿¿ 
.
¿¿ 
send
¿¿ !
(
¿¿! "
fSocketSendData
¿¿" 1
)
¿¿1 2
;
¿¿2 3
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
ex
¬¬ 
)
¬¬  
{
√√ 
FDebug
ƒƒ 
.
ƒƒ 
throwException
ƒƒ %
(
ƒƒ% &
ex
ƒƒ& (
)
ƒƒ( )
;
ƒƒ) *
}
≈≈ 
finally
∆∆ 
{
«« 
}
…… 
}
   	
private
ŒŒ 
void
ŒŒ 
recvData
ŒŒ 
(
ŒŒ 
)
œœ 
{
–– 	
try
—— 
{
““ 
this
”” 
.
”” 
fSerialToEthernet
”” &
.
””& '
fEventPusher
””' 3
.
””3 4
pushTcpEvent
””4 @
(
””@ A
new
‘‘ *
FSocketDataReceivedEventArgs
‘‘ 4
(
‘‘4 5
this
‘‘5 9
.
‘‘9 :
fSerialToEthernet
‘‘: K
,
‘‘K L
FEventId
‘‘M U
.
‘‘U V 
SocketDataReceived
‘‘V h
,
‘‘h i
FResultCode
‘‘j u
.
‘‘u v
Success
‘‘v }
,
‘‘} ~
string‘‘ Ö
.‘‘Ö Ü
Empty‘‘Ü ã
,‘‘ã å

m_fRecvBuf‘‘ç ó
.‘‘ó ò
bin‘‘ò õ
)‘‘õ ú
)
’’ 
;
’’ 
}
÷÷ 
catch
◊◊ 
(
◊◊ 
	Exception
◊◊ 
ex
◊◊ 
)
◊◊  
{
ÿÿ #
procSocketErrorRaised
ŸŸ %
(
ŸŸ% &
ex
ŸŸ& (
)
ŸŸ( )
;
ŸŸ) *
}
⁄⁄ 
finally
€€ 
{
‹‹ 
}
ﬁﬁ 
}
ﬂﬂ 	
private
„„ 
void
„„ 
resetResource
„„ "
(
„„" #
)
‰‰ 
{
ÂÂ 	
try
ÊÊ 
{
ÁÁ 

m_fRecvBuf
ËË 
.
ËË 
clear
ËË  
(
ËË  !
)
ËË! "
;
ËË" #
}
ÈÈ 
catch
ÍÍ 
(
ÍÍ 
	Exception
ÍÍ 
ex
ÍÍ 
)
ÍÍ  
{
ÎÎ 
FDebug
ÏÏ 
.
ÏÏ 
throwException
ÏÏ %
(
ÏÏ% &
ex
ÏÏ& (
)
ÏÏ( )
;
ÏÏ) *
}
ÌÌ 
finally
ÓÓ 
{
ÔÔ 
}
ÒÒ 
}
ÚÚ 	
private
ˆˆ 
void
ˆˆ 
closeTcpClient
ˆˆ #
(
ˆˆ# $
)
˜˜ 
{
¯¯ 	
try
˘˘ 
{
˙˙ 
if
˚˚ 
(
˚˚ 
m_fTcpClient
˚˚  
==
˚˚! #
null
˚˚$ (
)
˚˚( )
{
¸¸ 
return
˝˝ 
;
˝˝ 
}
˛˛ 
if
ÇÇ 
(
ÇÇ 
m_fTcpClient
ÉÉ  
.
ÉÉ  !
fState
ÉÉ! '
==
ÉÉ( *
FTcpClientState
ÉÉ+ :
.
ÉÉ: ;
	Connected
ÉÉ; D
&&
ÉÉE G
this
ÑÑ 
.
ÑÑ 
fSerialToEthernet
ÑÑ *
.
ÑÑ* +
fSocketState
ÑÑ+ 7
==
ÑÑ8 :!
FCommunicationState
ÑÑ; N
.
ÑÑN O
	Connected
ÑÑO X
)
ÖÖ 
{
ÜÜ 
while
áá 
(
áá 
this
áá 
.
áá  
fSerialToEthernet
áá  1
.
áá1 2
fEventPusher
áá2 >
.
áá> ?
tcpEventCount
áá? L
>
ááM N
$num
ááO P
||
ááQ S
!
ááT U
m_fTcpClient
ááU a
.
ááa b
sendCompleted
ááb o
)
ááo p
{
àà 
if
ââ 
(
ââ 
System
ââ "
.
ââ" #
Windows
ââ# *
.
ââ* +
Forms
ââ+ 0
.
ââ0 1
Application
ââ1 <
.
ââ< =
MessageLoop
ââ= H
)
ââH I
{
ää 
System
ãã "
.
ãã" #
Windows
ãã# *
.
ãã* +
Forms
ãã+ 0
.
ãã0 1
Application
ãã1 <
.
ãã< =
DoEvents
ãã= E
(
ããE F
)
ããF G
;
ããG H
}
åå 
System
çç 
.
çç 
	Threading
çç (
.
çç( )
Thread
çç) /
.
çç/ 0
Sleep
çç0 5
(
çç5 6
$num
çç6 7
)
çç7 8
;
çç8 9
}
éé 
}
èè 
m_fTcpClient
ìì 
.
ìì 
close
ìì "
(
ìì" #
)
ìì# $
;
ìì$ %
m_fTcpClient
îî 
.
îî 
Dispose
îî $
(
îî$ %
)
îî% &
;
îî& '
m_fTcpClient
ññ 
.
ññ #
TcpClientStateChanged
ññ 2
-=
ññ3 5
new
ññ6 90
"FTcpClientStateChangedEventHandler
ññ: \
(
ññ\ ]0
"m_fTcpClient_TcpClientStateChanged
ññ] 
)ññ Ä
;ññÄ Å
m_fTcpClient
óó 
.
óó #
TcpClientDataReceived
óó 2
-=
óó3 5
new
óó6 90
"FTcpClientDataReceivedEventHandler
óó: \
(
óó\ ]0
"m_fTcpClient_TcpClientDataReceived
óó] 
)óó Ä
;óóÄ Å
m_fTcpClient
òò 
.
òò 
TcpClientDataSent
òò .
-=
òò/ 1
new
òò2 5,
FTcpClientDataSentEventHandler
òò6 T
(
òòT U,
m_fTcpClient_TcpClientDataSent
òòU s
)
òòs t
;
òòt u
m_fTcpClient
ôô 
.
ôô %
TcpClientDataSendFailed
ôô 4
-=
ôô5 7
new
ôô8 ;2
$FTcpClientDataSendFailedEventHandler
ôô< `
(
ôô` a3
$m_fTcpClient_TcpClientDataSendFailedôôa Ö
)ôôÖ Ü
;ôôÜ á
m_fTcpClient
öö 
.
öö "
TcpClientErrorRaised
öö 1
-=
öö2 4
new
öö5 8/
!FTcpClientErrorRaisedEventHandler
öö9 Z
(
ööZ [/
!m_fTcpClient_TcpClientErrorRaised
öö[ |
)
öö| }
;
öö} ~
m_fTcpClient
úú 
=
úú 
null
úú #
;
úú# $
}
ùù 
catch
ûû 
(
ûû 
	Exception
ûû 
ex
ûû 
)
ûû  
{
üü 
FDebug
†† 
.
†† 
throwException
†† %
(
††% &
ex
††& (
)
††( )
;
††) *
}
°° 
finally
¢¢ 
{
££ 
}
•• 
}
¶¶ 	
public
™™ 
override
™™ 
void
™™ 
open
™™ !
(
™™! "
)
´´ 
{
¨¨ 	
try
≠≠ 
{
ÆÆ 
m_fTcpListener
ØØ 
=
ØØ  
new
ØØ! $
FTcpListener
ØØ% 1
(
ØØ1 2
this
ØØ2 6
.
ØØ6 7
fSerialToEthernet
ØØ7 H
.
ØØH I
fSocketConfig
ØØI V
.
ØØV W
localIp
ØØW ^
,
ØØ^ _
this
ØØ` d
.
ØØd e
fSerialToEthernet
ØØe v
.
ØØv w
fSocketConfigØØw Ñ
.ØØÑ Ö
	localPortØØÖ é
,ØØé è
$numØØê ë
)ØØë í
;ØØí ì
m_fTcpListener
±± 
.
±± (
TcpListenerAcceptCompleted
±± 9
+=
±±: <
new
±±= @5
'FTcpListenerAcceptCompletedEventHandler
±±A h
(
±±h i8
)m_fTcpListener_TcpListenerAcceptCompleted±±i í
)±±í ì
;±±ì î
m_fTcpListener
≤≤ 
.
≤≤ $
TcpListenerErrorRaised
≤≤ 5
+=
≤≤6 8
new
≤≤9 <1
#FTcpListenerErrorRaisedEventHandler
≤≤= `
(
≤≤` a4
%m_fTcpListener_TcpListenerErrorRaised≤≤a Ü
)≤≤Ü á
;≤≤á à
m_fTcpListener
¥¥ 
.
¥¥ 
start
¥¥ $
(
¥¥$ %
)
¥¥% &
;
¥¥& '
this
∏∏ 
.
∏∏ 
fSerialToEthernet
∏∏ &
.
∏∏& '
changeTcpState
∏∏' 5
(
∏∏5 6!
FCommunicationState
∏∏6 I
.
∏∏I J
Opened
∏∏J P
,
∏∏P Q
FConnectMode
∏∏R ^
.
∏∏^ _
Passive
∏∏_ f
,
∏∏f g
this
∏∏h l
.
∏∏l m
localIp
∏∏m t
,
∏∏t u
this
∏∏v z
.
∏∏z {
	localPort∏∏{ Ñ
,∏∏Ñ Ö
this∏∏Ü ä
.∏∏ä ã
remoteIp∏∏ã ì
,∏∏ì î
this∏∏ï ô
.∏∏ô ö

remotePort∏∏ö §
)∏∏§ •
;∏∏• ¶
}
ππ 
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
ex
∫∫ 
)
∫∫  
{
ªª 
FDebug
ºº 
.
ºº 
throwException
ºº %
(
ºº% &
ex
ºº& (
)
ºº( )
;
ºº) *
}
ΩΩ 
finally
ææ 
{
øø 
}
¡¡ 
}
¬¬ 	
public
∆∆ 
override
∆∆ 
void
∆∆ 
close
∆∆ "
(
∆∆" #
)
«« 
{
»» 	
try
…… 
{
   
m_fTcpListener
ÀÀ 
.
ÀÀ 
stop
ÀÀ #
(
ÀÀ# $
)
ÀÀ$ %
;
ÀÀ% &
m_fTcpListener
ÃÃ 
.
ÃÃ 
Dispose
ÃÃ &
(
ÃÃ& '
)
ÃÃ' (
;
ÃÃ( )
m_fTcpListener
ŒŒ 
.
ŒŒ (
TcpListenerAcceptCompleted
ŒŒ 9
-=
ŒŒ: <
new
ŒŒ= @5
'FTcpListenerAcceptCompletedEventHandler
ŒŒA h
(
ŒŒh i8
)m_fTcpListener_TcpListenerAcceptCompletedŒŒi í
)ŒŒí ì
;ŒŒì î
m_fTcpListener
œœ 
.
œœ $
TcpListenerErrorRaised
œœ 5
-=
œœ6 8
new
œœ9 <1
#FTcpListenerErrorRaisedEventHandler
œœ= `
(
œœ` a4
%m_fTcpListener_TcpListenerErrorRaisedœœa Ü
)œœÜ á
;œœá à
m_fTcpListener
—— 
=
——  
null
——! %
;
——% &
closeTcpClient
’’ 
(
’’ 
)
’’  
;
’’  !
this
ŸŸ 
.
ŸŸ 
fSerialToEthernet
ŸŸ &
.
ŸŸ& '
changeTcpState
ŸŸ' 5
(
ŸŸ5 6!
FCommunicationState
ŸŸ6 I
.
ŸŸI J
Closed
ŸŸJ P
,
ŸŸP Q
FConnectMode
ŸŸR ^
.
ŸŸ^ _
Passive
ŸŸ_ f
,
ŸŸf g
this
ŸŸh l
.
ŸŸl m
localIp
ŸŸm t
,
ŸŸt u
this
ŸŸv z
.
ŸŸz {
	localPortŸŸ{ Ñ
,ŸŸÑ Ö
thisŸŸÜ ä
.ŸŸä ã
remoteIpŸŸã ì
,ŸŸì î
thisŸŸï ô
.ŸŸô ö

remotePortŸŸö §
)ŸŸ§ •
;ŸŸ• ¶
}
⁄⁄ 
catch
€€ 
(
€€ 
	Exception
€€ 
ex
€€ 
)
€€  
{
‹‹ 
FDebug
›› 
.
›› 
throwException
›› %
(
››% &
ex
››& (
)
››( )
;
››) *
}
ﬁﬁ 
finally
ﬂﬂ 
{
‡‡ 
}
‚‚ 
}
„„ 	
public
ÁÁ 
override
ÁÁ 
void
ÁÁ 
send
ÁÁ !
(
ÁÁ! "
FSocketSendData
ËË 
fSocketSendData
ËË +
)
ÈÈ 
{
ÍÍ 	
try
ÎÎ 
{
ÏÏ 
sendData
ÌÌ 
(
ÌÌ 
fSocketSendData
ÌÌ (
)
ÌÌ( )
;
ÌÌ) *
}
ÓÓ 
catch
ÔÔ 
(
ÔÔ 
	Exception
ÔÔ 
ex
ÔÔ 
)
ÔÔ  
{
 
FDebug
ÒÒ 
.
ÒÒ 
throwException
ÒÒ %
(
ÒÒ% &
ex
ÒÒ& (
)
ÒÒ( )
;
ÒÒ) *
}
ÚÚ 
finally
ÛÛ 
{
ÙÙ 
}
ˆˆ 
}
˜˜ 	
private
˚˚ 
void
˚˚ #
procSocketErrorRaised
˚˚ *
(
˚˚* +
	Exception
¸¸ 
inEx
¸¸ 
)
˝˝ 
{
˛˛ 	
try
ˇˇ 
{
ÄÄ 
FDebug
ÅÅ 
.
ÅÅ 
writeLog
ÅÅ 
(
ÅÅ  
inEx
ÅÅ  $
)
ÅÅ$ %
;
ÅÅ% &
this
ÉÉ 
.
ÉÉ 
fSerialToEthernet
ÉÉ &
.
ÉÉ& '
fEventPusher
ÉÉ' 3
.
ÉÉ3 4
pushTcpEvent
ÉÉ4 @
(
ÉÉ@ A
new
ÑÑ )
FSocketErrorRaisedEventArgs
ÑÑ 3
(
ÑÑ3 4
this
ÑÑ4 8
.
ÑÑ8 9
fSerialToEthernet
ÑÑ9 J
,
ÑÑJ K
FEventId
ÑÑL T
.
ÑÑT U
SocketErrorRaised
ÑÑU f
,
ÑÑf g
inEx
ÑÑh l
.
ÑÑl m
Message
ÑÑm t
)
ÑÑt u
)
ÖÖ 
;
ÖÖ 
}
ÜÜ 
catch
áá 
(
áá 
	Exception
áá 
ex
áá 
)
áá  
{
àà 
FDebug
ââ 
.
ââ 
writeLog
ââ 
(
ââ  
ex
ââ  "
)
ââ" #
;
ââ# $
}
ää 
finally
ãã 
{
åå 
}
éé 
}
èè 	
private
óó 
void
óó (
m_fThdMain_ThreadJobCalled
óó /
(
óó/ 0
object
òò 
sender
òò 
,
òò 
FThreadEventArgs
ôô 
e
ôô 
)
öö 
{
õõ 	
bool
úú 
waited
úú 
=
úú 
false
úú 
;
úú  
try
ûû 
{
üü 
waited
†† 
=
†† 
m_fMainSync
†† $
.
††$ %
tryWait
††% ,
(
††, -
$num
††- .
)
††. /
;
††/ 0
if
°° 
(
°° 
!
°° 
waited
°° 
)
°° 
{
¢¢ 
return
££ 
;
££ 
}
§§ 
if
®® 
(
®® 
m_fTcpListener
®® !
.
®®! "
started
®®" )
)
®®) *
{
©© 
if
™™ 
(
™™ 
this
™™ 
.
™™ 
fSerialToEthernet
™™ .
.
™™. /
fSerialState
™™/ ;
!=
™™< >!
FCommunicationState
™™? R
.
™™R S
	Connected
™™S \
)
™™\ ]
{
´´ 
m_fTcpListener
¨¨ &
.
¨¨& '
stop
¨¨' +
(
¨¨+ ,
)
¨¨, -
;
¨¨- .
this
≠≠ 
.
≠≠ 
fSerialToEthernet
≠≠ .
.
≠≠. /
changeTcpState
≠≠/ =
(
≠≠= >!
FCommunicationState
≠≠> Q
.
≠≠Q R
Opened
≠≠R X
,
≠≠X Y
FConnectMode
≠≠Z f
.
≠≠f g
Passive
≠≠g n
,
≠≠n o
this
≠≠p t
.
≠≠t u
localIp
≠≠u |
,
≠≠| }
this≠≠~ Ç
.≠≠Ç É
	localPort≠≠É å
,≠≠å ç
this≠≠é í
.≠≠í ì
remoteIp≠≠ì õ
,≠≠õ ú
this≠≠ù °
.≠≠° ¢

remotePort≠≠¢ ¨
)≠≠¨ ≠
;≠≠≠ Æ
}
ÆÆ 
}
ØØ 
else
∞∞ 
{
±± 
if
≤≤ 
(
≤≤ 
this
≤≤ 
.
≤≤ 
fSerialToEthernet
≤≤ .
.
≤≤. /
fSerialState
≤≤/ ;
==
≤≤< >!
FCommunicationState
≤≤? R
.
≤≤R S
	Connected
≤≤S \
)
≤≤\ ]
{
≥≥ 
m_fTcpListener
¥¥ &
.
¥¥& '
start
¥¥' ,
(
¥¥, -
)
¥¥- .
;
¥¥. /
}
µµ 
}
∂∂ 
e
∫∫ 
.
∫∫ 
sleepThread
∫∫ 
(
∫∫ 
$num
∫∫ 
)
∫∫  
;
∫∫  !
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº 
ex
ºº 
)
ºº  
{
ΩΩ #
procSocketErrorRaised
ææ %
(
ææ% &
ex
ææ& (
)
ææ( )
;
ææ) *
}
øø 
finally
¿¿ 
{
¡¡ 
if
¬¬ 
(
¬¬ 
waited
¬¬ 
)
¬¬ 
{
√√ 
m_fMainSync
ƒƒ 
.
ƒƒ  
set
ƒƒ  #
(
ƒƒ# $
)
ƒƒ$ %
;
ƒƒ% &
}
≈≈ 
}
∆∆ 
}
«« 	
private
œœ 
void
œœ 7
)m_fTcpListener_TcpListenerAcceptCompleted
œœ >
(
œœ> ?
object
–– 
sender
–– 
,
–– 2
$FTcpListenerAcceptCompletedEventArgs
—— 0
e
——1 2
)
““ 
{
”” 	
try
‘‘ 
{
’’ 
m_fMainSync
÷÷ 
.
÷÷ 
wait
÷÷  
(
÷÷  !
)
÷÷! "
;
÷÷" #
closeTcpClient
⁄⁄ 
(
⁄⁄ 
)
⁄⁄  
;
⁄⁄  !
this
ﬁﬁ 
.
ﬁﬁ 
localIp
ﬁﬁ 
=
ﬁﬁ 
e
ﬁﬁ  
.
ﬁﬁ  !

fTcpClient
ﬁﬁ! +
.
ﬁﬁ+ ,
localIp
ﬁﬁ, 3
;
ﬁﬁ3 4
this
ﬂﬂ 
.
ﬂﬂ 
	localPort
ﬂﬂ 
=
ﬂﬂ  
e
ﬂﬂ! "
.
ﬂﬂ" #

fTcpClient
ﬂﬂ# -
.
ﬂﬂ- .
	localPort
ﬂﬂ. 7
;
ﬂﬂ7 8
this
‡‡ 
.
‡‡ 
remoteIp
‡‡ 
=
‡‡ 
e
‡‡  !
.
‡‡! "

fTcpClient
‡‡" ,
.
‡‡, -
remoteIp
‡‡- 5
;
‡‡5 6
this
·· 
.
·· 

remotePort
·· 
=
··  !
e
··" #
.
··# $

fTcpClient
··$ .
.
··. /

remotePort
··/ 9
;
··9 :
m_fTcpClient
ÂÂ 
=
ÂÂ 
e
ÂÂ  
.
ÂÂ  !

fTcpClient
ÂÂ! +
;
ÂÂ+ ,
m_fTcpClient
ÁÁ 
.
ÁÁ #
TcpClientStateChanged
ÁÁ 2
+=
ÁÁ3 5
new
ÁÁ6 90
"FTcpClientStateChangedEventHandler
ÁÁ: \
(
ÁÁ\ ]0
"m_fTcpClient_TcpClientStateChanged
ÁÁ] 
)ÁÁ Ä
;ÁÁÄ Å
m_fTcpClient
ËË 
.
ËË #
TcpClientDataReceived
ËË 2
+=
ËË3 5
new
ËË6 90
"FTcpClientDataReceivedEventHandler
ËË: \
(
ËË\ ]0
"m_fTcpClient_TcpClientDataReceived
ËË] 
)ËË Ä
;ËËÄ Å
m_fTcpClient
ÈÈ 
.
ÈÈ 
TcpClientDataSent
ÈÈ .
+=
ÈÈ/ 1
new
ÈÈ2 5,
FTcpClientDataSentEventHandler
ÈÈ6 T
(
ÈÈT U,
m_fTcpClient_TcpClientDataSent
ÈÈU s
)
ÈÈs t
;
ÈÈt u
m_fTcpClient
ÍÍ 
.
ÍÍ %
TcpClientDataSendFailed
ÍÍ 4
+=
ÍÍ5 7
new
ÍÍ8 ;2
$FTcpClientDataSendFailedEventHandler
ÍÍ< `
(
ÍÍ` a3
$m_fTcpClient_TcpClientDataSendFailedÍÍa Ö
)ÍÍÖ Ü
;ÍÍÜ á
m_fTcpClient
ÎÎ 
.
ÎÎ "
TcpClientErrorRaised
ÎÎ 1
+=
ÎÎ2 4
new
ÎÎ5 8/
!FTcpClientErrorRaisedEventHandler
ÎÎ9 Z
(
ÎÎZ [/
!m_fTcpClient_TcpClientErrorRaised
ÎÎ[ |
)
ÎÎ| }
;
ÎÎ} ~
m_fTcpClient
ÌÌ 
.
ÌÌ 
resumeEvent
ÌÌ (
(
ÌÌ( )
)
ÌÌ) *
;
ÌÌ* +
this
ÒÒ 
.
ÒÒ 
fSerialToEthernet
ÒÒ &
.
ÒÒ& '
changeTcpState
ÒÒ' 5
(
ÒÒ5 6!
FCommunicationState
ÒÒ6 I
.
ÒÒI J
	Connected
ÒÒJ S
,
ÒÒS T
FConnectMode
ÒÒU a
.
ÒÒa b
Passive
ÒÒb i
,
ÒÒi j
this
ÒÒk o
.
ÒÒo p
localIp
ÒÒp w
,
ÒÒw x
this
ÒÒy }
.
ÒÒ} ~
	localPortÒÒ~ á
,ÒÒá à
thisÒÒâ ç
.ÒÒç é
remoteIpÒÒé ñ
,ÒÒñ ó
thisÒÒò ú
.ÒÒú ù

remotePortÒÒù ß
)ÒÒß ®
;ÒÒ® ©
}
ÚÚ 
catch
ÛÛ 
(
ÛÛ 
	Exception
ÛÛ 
ex
ÛÛ 
)
ÛÛ  
{
ÙÙ 
FDebug
ıı 
.
ıı 
writeLog
ıı 
(
ıı  
ex
ıı  "
)
ıı" #
;
ıı# $
}
ˆˆ 
finally
˜˜ 
{
¯¯ 
m_fMainSync
˘˘ 
.
˘˘ 
set
˘˘ 
(
˘˘  
)
˘˘  !
;
˘˘! "
}
˙˙ 
}
˚˚ 	
private
ˇˇ 
void
ˇˇ 3
%m_fTcpListener_TcpListenerErrorRaised
ˇˇ :
(
ˇˇ: ;
object
ÄÄ 
sender
ÄÄ 
,
ÄÄ .
 FTcpListenerErrorRaisedEventArgs
ÅÅ ,
e
ÅÅ- .
)
ÇÇ 
{
ÉÉ 	
try
ÑÑ 
{
ÖÖ #
procSocketErrorRaised
ÜÜ %
(
ÜÜ% &
e
ÜÜ& '
.
ÜÜ' (
	exception
ÜÜ( 1
)
ÜÜ1 2
;
ÜÜ2 3
}
áá 
catch
àà 
(
àà 
	Exception
àà 
ex
àà 
)
àà  
{
ââ 
FDebug
ää 
.
ää 
writeLog
ää 
(
ää  
ex
ää  "
)
ää" #
;
ää# $
}
ãã 
finally
åå 
{
çç 
}
èè 
}
êê 	
private
òò 
void
òò 0
"m_fTcpClient_TcpClientStateChanged
òò 7
(
òò7 8
object
ôô 
sender
ôô 
,
ôô -
FTcpClientStateChangedEventArgs
öö +
e
öö, -
)
õõ 
{
úú 	
try
ùù 
{
ûû 
m_fMainSync
üü 
.
üü 
wait
üü  
(
üü  !
)
üü! "
;
üü" #
if
££ 
(
££ 
m_fTcpListener
££ "
!=
££# %
null
££& *
&&
££+ -
e
££. /
.
££/ 0
fState
££0 6
==
££7 9
FTcpClientState
££: I
.
££I J
Closed
££J P
)
££P Q
{
§§ 
this
•• 
.
•• 
fSerialToEthernet
•• *
.
••* +
changeTcpState
••+ 9
(
••9 :!
FCommunicationState
••: M
.
••M N
Opened
••N T
,
••T U
FConnectMode
••V b
.
••b c
Passive
••c j
,
••j k
this
••l p
.
••p q
localIp
••q x
,
••x y
this
••z ~
.
••~ 
	localPort•• à
,••à â
this••ä é
.••é è
remoteIp••è ó
,••ó ò
this••ô ù
.••ù û

remotePort••û ®
)••® ©
;••© ™
resetResource
ßß !
(
ßß! "
)
ßß" #
;
ßß# $
}
®® 
}
©© 
catch
™™ 
(
™™ 
	Exception
™™ 
ex
™™ 
)
™™  
{
´´ #
procSocketErrorRaised
¨¨ %
(
¨¨% &
ex
¨¨& (
)
¨¨( )
;
¨¨) *
}
≠≠ 
finally
ÆÆ 
{
ØØ 
m_fMainSync
∞∞ 
.
∞∞ 
set
∞∞ 
(
∞∞  
)
∞∞  !
;
∞∞! "
}
±± 
}
≤≤ 	
private
∂∂ 
void
∂∂ 0
"m_fTcpClient_TcpClientDataReceived
∂∂ 7
(
∂∂7 8
object
∑∑ 
sender
∑∑ 
,
∑∑ -
FTcpClientDataReceivedEventArgs
∏∏ +
e
∏∏, -
)
ππ 
{
∫∫ 	
try
ªª 
{
ºº 
m_fMainSync
ΩΩ 
.
ΩΩ 
wait
ΩΩ  
(
ΩΩ  !
)
ΩΩ! "
;
ΩΩ" #
if
¡¡ 
(
¡¡ 
e
¡¡ 
.
¡¡ 

dataLength
¡¡  
>
¡¡! "
$num
¡¡# $
)
¡¡$ %
{
¬¬ 

m_fRecvBuf
√√ 
.
√√ 
input
√√ $
(
√√$ %
e
√√% &
.
√√& '
data
√√' +
)
√√+ ,
;
√√, -
while
«« 
(
«« 

m_fRecvBuf
«« %
.
««% &
parse
««& +
(
««+ ,
)
««, -
)
««- .
{
»» 
recvData
……  
(
……  !
)
……! "
;
……" #

m_fRecvBuf
ÕÕ "
.
ÕÕ" #
init
ÕÕ# '
(
ÕÕ' (
)
ÕÕ( )
;
ÕÕ) *
}
ŒŒ 
}
œœ 
}
–– 
catch
—— 
(
—— 
	Exception
—— 
ex
—— 
)
——  
{
““ #
procSocketErrorRaised
”” %
(
””% &
ex
””& (
)
””( )
;
””) *
}
‘‘ 
finally
’’ 
{
÷÷ 
m_fMainSync
◊◊ 
.
◊◊ 
set
◊◊ 
(
◊◊  
)
◊◊  !
;
◊◊! "
}
ÿÿ 
}
ŸŸ 	
private
›› 
void
›› ,
m_fTcpClient_TcpClientDataSent
›› 3
(
››3 4
object
ﬁﬁ 
sender
ﬁﬁ 
,
ﬁﬁ )
FTcpClientDataSentEventArgs
ﬂﬂ '
e
ﬂﬂ( )
)
‡‡ 
{
·· 	
try
‚‚ 
{
„„ 
m_fMainSync
‰‰ 
.
‰‰ 
wait
‰‰  
(
‰‰  !
)
‰‰! "
;
‰‰" #
this
ËË 
.
ËË 
fSerialToEthernet
ËË &
.
ËË& '
fEventPusher
ËË' 3
.
ËË3 4
pushTcpEvent
ËË4 @
(
ËË@ A
new
ÈÈ &
FSocketDataSentEventArgs
ÈÈ 0
(
ÈÈ0 1
this
ÍÍ 
.
ÍÍ 
fSerialToEthernet
ÍÍ .
,
ÍÍ. /
FEventId
ÎÎ  
.
ÎÎ  !
SocketDataSent
ÎÎ! /
,
ÎÎ/ 0
FResultCode
ÏÏ #
.
ÏÏ# $
Success
ÏÏ$ +
,
ÏÏ+ ,
string
ÌÌ 
.
ÌÌ 
Empty
ÌÌ $
,
ÌÌ$ %
e
ÓÓ 
.
ÓÓ 
fData
ÓÓ 
)
ÔÔ 
)
 
;
 
}
ÒÒ 
catch
ÚÚ 
(
ÚÚ 
	Exception
ÚÚ 
ex
ÚÚ 
)
ÚÚ  
{
ÛÛ #
procSocketErrorRaised
ÙÙ %
(
ÙÙ% &
ex
ÙÙ& (
)
ÙÙ( )
;
ÙÙ) *
}
ıı 
finally
ˆˆ 
{
˜˜ 
m_fMainSync
¯¯ 
.
¯¯ 
set
¯¯ 
(
¯¯  
)
¯¯  !
;
¯¯! "
}
˘˘ 
}
˙˙ 	
private
˛˛ 
void
˛˛ 2
$m_fTcpClient_TcpClientDataSendFailed
˛˛ 9
(
˛˛9 :
object
ˇˇ 
sender
ˇˇ 
,
ˇˇ /
!FTcpClientDataSendFailedEventArgs
ÄÄ -
e
ÄÄ. /
)
ÅÅ 
{
ÇÇ 	
try
ÉÉ 
{
ÑÑ 
m_fMainSync
ÖÖ 
.
ÖÖ 
wait
ÖÖ  
(
ÖÖ  !
)
ÖÖ! "
;
ÖÖ" #
this
ââ 
.
ââ 
fSerialToEthernet
ââ &
.
ââ& '
fEventPusher
ââ' 3
.
ââ3 4
pushTcpEvent
ââ4 @
(
ââ@ A
new
ää &
FSocketDataSentEventArgs
ää 0
(
ää0 1
this
ãã 
.
ãã 
fSerialToEthernet
ãã .
,
ãã. /
FEventId
åå  
.
åå  !
SocketDataSent
åå! /
,
åå/ 0
FResultCode
çç #
.
çç# $
Error
çç$ )
,
çç) *
e
éé 
.
éé 
message
éé !
,
éé! "
e
èè 
.
èè 
fData
èè 
)
êê 
)
ëë 
;
ëë 
}
íí 
catch
ìì 
(
ìì 
	Exception
ìì 
ex
ìì 
)
ìì  
{
îî #
procSocketErrorRaised
ïï %
(
ïï% &
ex
ïï& (
)
ïï( )
;
ïï) *
}
ññ 
finally
óó 
{
òò 
m_fMainSync
ôô 
.
ôô 
set
ôô 
(
ôô  
)
ôô  !
;
ôô! "
}
öö 
}
õõ 	
private
üü 
void
üü /
!m_fTcpClient_TcpClientErrorRaised
üü 6
(
üü6 7
object
†† 
sender
†† 
,
†† ,
FTcpClientErrorRaisedEventArgs
°° *
e
°°+ ,
)
¢¢ 
{
££ 	
try
§§ 
{
•• #
procSocketErrorRaised
¶¶ %
(
¶¶% &
e
¶¶& '
.
¶¶' (
	exception
¶¶( 1
)
¶¶1 2
;
¶¶2 3
}
ßß 
catch
®® 
(
®® 
	Exception
®® 
ex
®® 
)
®®  
{
©© #
procSocketErrorRaised
™™ %
(
™™% &
ex
™™& (
)
™™( )
;
™™) *
}
´´ 
finally
¨¨ 
{
≠≠ 
}
ØØ 
}
∞∞ 	
}
∂∂ 
}∑∑ ≠	
~D:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Protocol\c_FXmlTagCustom001.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

static 
class 
FXmlSocketTag %
{ 
public)) 
const)) 
string)) 
	E_MESSAGE)) %
=))& '
$str))( 1
;))1 2
public** 
const** 
string** 
E_HEADER** $
=**% &
$str**' /
;**/ 0
public++ 
const++ 
string++ 
E_MSG_ID++ $
=++% &
$str++' /
;++/ 0
public,, 
const,, 
string,, 

E_EQUIP_ID,, &
=,,' (
$str,,) 3
;,,3 4
public-- 
const-- 
string-- 
E_DATE-- "
=--# $
$str--% +
;--+ ,
public.. 
const.. 
string.. 
E_BODY.. "
=..# $
$str..% +
;..+ ,
}22 
}33 ©B
äD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Protocol\Serial\c_FSerialPluginRecvData.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

class !
FSerialPluginRecvData &
:& '
IDisposable( 3
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FSerialToEthernet !
m_fSerialToEthernet" 5
=6 7
null8 <
;< =
private 
List 
< 
byte 
> 
m_data !
=" #
null$ (
;( )
internal## !
FSerialPluginRecvData## &
(##& '
FSerialToEthernet$$ 
fSerialToEthernet$$ /
,$$/ 0
byte%% 
[%% 
]%% 
data%% 
)&& 
{'' 	
m_fSerialToEthernet(( 
=((  !
fSerialToEthernet((" 3
;((3 4
m_data** 
=** 
new** 
List** 
<** 
byte** "
>**" #
(**# $
data**$ (
)**( )
;**) *
}++ 	
~// 	!
FSerialPluginRecvData//	 
(// 
)00 
{11 	
	myDispose22 
(22 
false22 
)22 
;22 
}33 	
	protected77 
void77 
	myDispose77  
(77  !
bool88 
	disposing88 
)99 
{:: 	
if;; 
(;; 
!;; 

m_disposed;; 
);; 
{<< 
if== 
(== 
	disposing== 
)== 
{>> 
m_fSerialToEthernet?? '
=??( )
null??* .
;??. /
m_data@@ 
=@@ 
null@@ !
;@@! "
}AA 

m_disposedCC 
=CC 
trueCC !
;CC! "
}DD 
}EE 	
publicMM 
voidMM 
DisposeMM 
(MM 
)NN 
{OO 	
	myDisposePP 
(PP 
truePP 
)PP 
;PP 
GCQQ 
.QQ 
SuppressFinalizeQQ 
(QQ  
thisQQ  $
)QQ$ %
;QQ% &
}RR 	
publicZZ 
UInt32ZZ 
lengthZZ 
{[[ 	
get\\ 
{]] 
try^^ 
{__ 
return`` 
(`` 
UInt32`` "
)``" #
(``# $
$num``$ &
+``' (
m_data``) /
.``/ 0
Count``0 5
)``5 6
;``6 7
}aa 
catchbb 
(bb 
	Exceptionbb  
exbb! #
)bb# $
{cc 
FDebugdd 
.dd 
throwExceptiondd )
(dd) *
exdd* ,
)dd, -
;dd- .
}ee 
finallyff 
{gg 
}ii 
returnjj 
$numjj 
;jj 
}kk 
}ll 	
publicpp 
bytepp 
[pp 
]pp 
datapp 
{qq 	
getrr 
{ss 
trytt 
{uu 
returnvv 
m_datavv !
.vv! "
ToArrayvv" )
(vv) *
)vv* +
;vv+ ,
}ww 
catchxx 
(xx 
	Exceptionxx  
exxx! #
)xx# $
{yy 
FDebugzz 
.zz 
throwExceptionzz )
(zz) *
exzz* ,
)zz, -
;zz- .
}{{ 
finally|| 
{}} 
} 
return
ÄÄ 
null
ÄÄ 
;
ÄÄ 
}
ÅÅ 
}
ÇÇ 	
public
ÜÜ 
string
ÜÜ 
dataToString
ÜÜ "
{
áá 	
get
àà 
{
ââ 
try
ää 
{
ãã 
return
åå 
Encoding
åå #
.
åå# $
Default
åå$ +
.
åå+ ,
	GetString
åå, 5
(
åå5 6
m_data
åå6 <
.
åå< =
ToArray
åå= D
(
ååD E
)
ååE F
)
ååF G
;
ååG H
}
çç 
catch
éé 
(
éé 
	Exception
éé  
ex
éé! #
)
éé# $
{
èè 
FDebug
êê 
.
êê 
throwException
êê )
(
êê) *
ex
êê* ,
)
êê, -
;
êê- .
}
ëë 
finally
íí 
{
ìì 
}
ïï 
return
ññ 
string
ññ 
.
ññ 
Empty
ññ #
;
ññ# $
}
óó 
}
òò 	
internal
†† #
FSerialPluginRecvData
†† &
clone
††' ,
(
††, -
)
°° 
{
¢¢ 	
try
££ 
{
§§ 
return
•• 
new
•• #
FSerialPluginRecvData
•• 0
(
••0 1!
m_fSerialToEthernet
¶¶ '
,
¶¶' (
m_data
ßß 
.
ßß 
ToArray
ßß "
(
ßß" #
)
ßß# $
)
®® 
;
®® 
}
©© 
catch
™™ 
(
™™ 
	Exception
™™ 
ex
™™ 
)
™™  
{
´´ 
FDebug
¨¨ 
.
¨¨ 
throwException
¨¨ %
(
¨¨% &
ex
¨¨& (
)
¨¨( )
;
¨¨) *
}
≠≠ 
finally
ÆÆ 
{
ØØ 
}
±± 
return
≤≤ 
null
≤≤ 
;
≤≤ 
}
≥≥ 	
internal
∑∑ 
byte
∑∑ 
[
∑∑ 
]
∑∑ 
getTcpBinaryData
∑∑ (
(
∑∑( )
bool
∏∏ 
lengthInclude
∏∏ 
)
ππ 
{
∫∫ 	
byte
ªª 
[
ªª 
]
ªª 
binData
ªª 
=
ªª 
null
ªª !
;
ªª! "
UInt32
ºº 
length
ºº 
=
ºº 
$num
ºº 
;
ºº 
int
ΩΩ 
pos
ΩΩ 
=
ΩΩ 
$num
ΩΩ 
;
ΩΩ 
try
øø 
{
¿¿ 
length
¡¡ 
=
¡¡ 
this
¡¡ 
.
¡¡ 
length
¡¡ $
;
¡¡$ %
if
≈≈ 
(
≈≈ 
lengthInclude
≈≈ !
)
≈≈! "
{
∆∆ 
binData
«« 
=
«« 
new
«« !
byte
««" &
[
««& '
length
««' -
+
««. /
$num
««0 1
]
««1 2
;
««2 3
Buffer
ŒŒ 
.
ŒŒ 
	BlockCopy
ŒŒ $
(
ŒŒ$ %
FByteConverter
ŒŒ% 3
.
ŒŒ3 4
getBytes
ŒŒ4 <
(
ŒŒ< =
length
ŒŒ= C
,
ŒŒC D
true
ŒŒE I
)
ŒŒI J
,
ŒŒJ K
$num
ŒŒL M
,
ŒŒM N
binData
ŒŒO V
,
ŒŒV W
pos
ŒŒX [
,
ŒŒ[ \
$num
ŒŒ] ^
)
ŒŒ^ _
;
ŒŒ_ `
pos
œœ 
+=
œœ 
$num
œœ 
;
œœ 
}
–– 
else
—— 
{
““ 
binData
”” 
=
”” 
new
”” !
byte
””" &
[
””& '
length
””' -
]
””- .
;
””. /
}
‘‘ 
if
€€ 
(
€€ 
m_data
€€ 
.
€€ 
Count
€€  
>
€€! "
$num
€€# $
)
€€$ %
{
‹‹ 
Buffer
›› 
.
›› 
	BlockCopy
›› $
(
››$ %
m_data
››% +
.
››+ ,
ToArray
››, 3
(
››3 4
)
››4 5
,
››5 6
$num
››7 8
,
››8 9
binData
››: A
,
››A B
pos
››C F
,
››F G
m_data
››H N
.
››N O
Count
››O T
)
››T U
;
››U V
}
ﬁﬁ 
return
‚‚ 
binData
‚‚ 
;
‚‚ 
}
„„ 
catch
‰‰ 
(
‰‰ 
	Exception
‰‰ 
ex
‰‰ 
)
‰‰  
{
ÂÂ 
FDebug
ÊÊ 
.
ÊÊ 
throwException
ÊÊ %
(
ÊÊ% &
ex
ÊÊ& (
)
ÊÊ( )
;
ÊÊ) *
}
ÁÁ 
finally
ËË 
{
ÈÈ 
}
ÎÎ 
return
ÏÏ 
null
ÏÏ 
;
ÏÏ 
}
ÌÌ 	
}
ÛÛ 
}ÙÙ óE
ÇD:\Product\Nexplant\src\nexplant.mc\001_MCCore.v4.6\Nexplant.MC.Core.Converter\SerialToEthernet\Protocol\c_FCustom001SendBuffer.cs
	namespace 	
Nexplant
 
. 
MC 
. 
Core 
. 
FaSerialToEthernet -
{ 
public 

class %
FSerialPluginDataTransfer *
:* +
IDisposable, 7
{ 
private 
bool 

m_disposed 
=  !
false" '
;' (
private 
FXmlNode 
m_fXmlNodeMsg &
=' (
null) -
;- .
private 
string 
m_xml 
= 
string %
.% &
Empty& +
;+ ,
public"" %
FSerialPluginDataTransfer"" (
(""( )
)## 
{$$ 	
}&& 	
~** 	%
FSerialPluginDataTransfer**	 "
(**" #
)++ 
{,, 	
	myDispose-- 
(-- 
false-- 
)-- 
;-- 
}.. 	
	protected22 
void22 
	myDispose22  
(22  !
bool33 
	disposing33 
)44 
{55 	
if66 
(66 
!66 

m_disposed66 
)66 
{77 
if88 
(88 
	disposing88 
)88 
{99 
m_fXmlNodeMsg:: !
=::" #
null::$ (
;::( )
};; 

m_disposed== 
=== 
true== !
;==! "
}>> 
}?? 	
publicGG 
voidGG 
DisposeGG 
(GG 
)HH 
{II 	
	myDisposeJJ 
(JJ 
trueJJ 
)JJ 
;JJ 
GCKK 
.KK 
SuppressFinalizeKK 
(KK  
thisKK  $
)KK$ %
;KK% &
}LL 	
publicTT 
FXmlNodeTT 
fMsgTT 
{UU 	
getVV 
{WW 
tryXX 
{YY 
returnZZ 
m_fXmlNodeMsgZZ (
;ZZ( )
}[[ 
catch\\ 
(\\ 
	Exception\\  
ex\\! #
)\\# $
{]] 
FDebug^^ 
.^^ 
throwException^^ )
(^^) *
ex^^* ,
)^^, -
;^^- .
}__ 
finally`` 
{aa 
}cc 
returndd 
nulldd 
;dd 
}ee 
}ff 	
privatenn 
voidnn 
validatenn 
(nn 
)oo 
{pp 	
stringqq 
xpathqq 
=qq 
stringqq !
.qq! "
Emptyqq" '
;qq' (
tryss 
{tt 
ifxx 
(xx 
m_fXmlNodeMsgxx !
.xx! "
namexx" &
!=xx' )
FXmlSocketTagxx* 7
.xx7 8
	E_MESSAGExx8 A
)xxA B
{yy 
FDebugzz 
.zz 
throwFExceptionzz *
(zz* +
stringzz+ 1
.zz1 2
Formatzz2 8
(zz8 9

FConstantszz9 C
.zzC D

err_m_0016zzD N
,zzN O
$strzzP a
)zza b
)zzb c
;zzc d
}{{ 
xpath}} 
=}} 
FXmlSocketTag}} %
.}}% &
E_HEADER}}& .
+}}/ 0
$str}}1 4
+}}5 6
FXmlSocketTag}}7 D
.}}D E
E_MSG_ID}}E M
;}}M N
if~~ 
(~~ 
m_fXmlNodeMsg~~ !
.~~! "
selectSingleNode~~" 2
(~~2 3
xpath~~3 8
)~~8 9
==~~: <
null~~= A
)~~A B
{ 
FDebug
ÄÄ 
.
ÄÄ 
throwFException
ÄÄ *
(
ÄÄ* +
string
ÄÄ+ 1
.
ÄÄ1 2
Format
ÄÄ2 8
(
ÄÄ8 9

FConstants
ÄÄ9 C
.
ÄÄC D

err_m_0016
ÄÄD N
,
ÄÄN O
$str
ÄÄP `
)
ÄÄ` a
)
ÄÄa b
;
ÄÄb c
}
ÅÅ 
xpath
ÉÉ 
=
ÉÉ 
FXmlSocketTag
ÉÉ %
.
ÉÉ% &
E_HEADER
ÉÉ& .
+
ÉÉ/ 0
$str
ÉÉ1 4
+
ÉÉ5 6
FXmlSocketTag
ÉÉ7 D
.
ÉÉD E

E_EQUIP_ID
ÉÉE O
;
ÉÉO P
if
ÑÑ 
(
ÑÑ 
m_fXmlNodeMsg
ÑÑ !
.
ÑÑ! "
selectSingleNode
ÑÑ" 2
(
ÑÑ2 3
xpath
ÑÑ3 8
)
ÑÑ8 9
==
ÑÑ: <
null
ÑÑ= A
)
ÑÑA B
{
ÖÖ 
FDebug
ÜÜ 
.
ÜÜ 
throwFException
ÜÜ *
(
ÜÜ* +
string
ÜÜ+ 1
.
ÜÜ1 2
Format
ÜÜ2 8
(
ÜÜ8 9

FConstants
ÜÜ9 C
.
ÜÜC D

err_m_0016
ÜÜD N
,
ÜÜN O
$str
ÜÜP b
)
ÜÜb c
)
ÜÜc d
;
ÜÜd e
}
áá 
}
àà 
catch
ââ 
(
ââ 
	Exception
ââ 
ex
ââ 
)
ââ  
{
ää 
FDebug
ãã 
.
ãã 
throwException
ãã %
(
ãã% &
ex
ãã& (
)
ãã( )
;
ãã) *
}
åå 
finally
çç 
{
éé 
}
êê 
}
ëë 	
public
ïï 
void
ïï 
getDataMessage
ïï "
(
ïï" #
FXmlNode
ññ 
fXmlNodeMsg
ññ  
)
óó 
{
òò 	
try
ôô 
{
öö 
m_fXmlNodeMsg
õõ 
=
õõ 
fXmlNodeMsg
õõ  +
;
õõ+ ,
m_xml
úú 
=
úú 
m_fXmlNodeMsg
úú %
.
úú% &
xmlToString
úú& 1
(
úú1 2
true
úú2 6
)
úú6 7
;
úú7 8
validate
ûû 
(
ûû 
)
ûû 
;
ûû 
}
üü 
catch
†† 
(
†† 
	Exception
†† 
ex
†† 
)
††  
{
°° 
FDebug
¢¢ 
.
¢¢ 
throwException
¢¢ %
(
¢¢% &
ex
¢¢& (
)
¢¢( )
;
¢¢) *
}
££ 
finally
§§ 
{
•• 
}
ßß 
}
®® 	
internal
¨¨ 
byte
¨¨ 
[
¨¨ 
]
¨¨ 
getBinaryData
¨¨ %
(
¨¨% &
)
≠≠ 
{
ÆÆ 	
byte
ØØ 
[
ØØ 
]
ØØ 
btEtx
ØØ 
=
ØØ 
new
ØØ 
byte
ØØ #
[
ØØ# $
]
ØØ$ %
{
ØØ& '
$num
ØØ( ,
,
ØØ, -
$num
ØØ. 2
}
ØØ3 4
;
ØØ4 5
	ArrayList
∞∞ 
bin
∞∞ 
=
∞∞ 
null
∞∞  
;
∞∞  !
try
≤≤ 
{
≥≥ 
bin
¥¥ 
=
¥¥ 
new
¥¥ 
	ArrayList
¥¥ #
(
¥¥# $
)
¥¥$ %
;
¥¥% &
bin
µµ 
.
µµ 
AddRange
µµ 
(
µµ 
Encoding
µµ %
.
µµ% &
Default
µµ& -
.
µµ- .
GetBytes
µµ. 6
(
µµ6 7
m_xml
µµ7 <
)
µµ< =
)
µµ= >
;
µµ> ?
bin
∂∂ 
.
∂∂ 
AddRange
∂∂ 
(
∂∂ 
btEtx
∂∂ "
)
∂∂" #
;
∂∂# $
return
∏∏ 
(
∏∏ 
byte
∏∏ 
[
∏∏ 
]
∏∏ 
)
∏∏ 
bin
∏∏ "
.
∏∏" #
ToArray
∏∏# *
(
∏∏* +
typeof
∏∏+ 1
(
∏∏1 2
byte
∏∏2 6
)
∏∏6 7
)
∏∏7 8
;
∏∏8 9
}
ππ 
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
ex
∫∫ 
)
∫∫  
{
ªª 
FDebug
ºº 
.
ºº 
throwException
ºº %
(
ºº% &
ex
ºº& (
)
ºº( )
;
ºº) *
}
ΩΩ 
finally
ææ 
{
øø 
}
¡¡ 
return
¬¬ 
null
¬¬ 
;
¬¬ 
}
√√ 	
internal
«« 
FSocketSendData
««  
getSerialData
««! .
(
««. /
)
»» 
{
…… 	
try
   
{
ÀÀ 
return
ÃÃ 
new
ÃÃ 
FSocketSendData
ÃÃ *
(
ÃÃ* +
getBinaryData
ÕÕ !
(
ÕÕ! "
)
ÕÕ" #
)
ŒŒ 
;
ŒŒ 
}
œœ 
catch
–– 
(
–– 
	Exception
–– 
ex
–– 
)
––  
{
—— 
FDebug
““ 
.
““ 
throwException
““ %
(
““% &
ex
““& (
)
““( )
;
““) *
}
”” 
finally
‘‘ 
{
’’ 
}
◊◊ 
return
ÿÿ 
null
ÿÿ 
;
ÿÿ 
}
ŸŸ 	
}
ﬂﬂ 
}‡‡ 